
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009948  08009948  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009950  08009950  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000080  080099d4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080099d4  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fa7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00037690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00038970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018828  00000000  00000000  00039b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016329  00000000  00000000  000523a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9cb  00000000  00000000  000686d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010709c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  001070ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009508 	.word	0x08009508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009508 	.word	0x08009508

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 fe2c 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f82c 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa06 	bl	800118c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d80:	f000 f9ba 	bl	80010f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d84:	f000 f8e2 	bl	8000f4c <MX_I2C1_Init>
  MX_SPI3_Init();
 8000d88:	f000 f90e 	bl	8000fa8 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000d8c:	f000 f942 	bl	8001014 <MX_TIM3_Init>
  MX_DMA_Init();
 8000d90:	f000 f9dc 	bl	800114c <MX_DMA_Init>
  MX_TIM11_Init();
 8000d94:	f000 f98c 	bl	80010b0 <MX_TIM11_Init>
  MX_ADC1_Init();
 8000d98:	f000 f884 	bl	8000ea4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f001 fe89 	bl	8002ab4 <HAL_Delay>
  MCP23017SetInit();
 8000da2:	f001 fa01 	bl	80021a8 <MCP23017SetInit>
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <main+0x54>)
 8000da8:	f006 faa0 	bl	80072ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <main+0x58>)
 8000dae:	f006 fa9d 	bl	80072ec <HAL_TIM_Base_Start_IT>
	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	4905      	ldr	r1, [pc, #20]	; (8000dcc <main+0x5c>)
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <main+0x60>)
 8000db8:	f001 fff4 	bl	8002da4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 8000dbc:	f000 fa6c 	bl	8001298 <StateMachineManagment>
 8000dc0:	e7fc      	b.n	8000dbc <main+0x4c>
 8000dc2:	bf00      	nop
 8000dc4:	200001f0 	.word	0x200001f0
 8000dc8:	20000238 	.word	0x20000238
 8000dcc:	20000338 	.word	0x20000338
 8000dd0:	2000009c 	.word	0x2000009c

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2230      	movs	r2, #48	; 0x30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 ff1a 	bl	8008c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <SystemClock_Config+0xc8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <SystemClock_Config+0xc8>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <SystemClock_Config+0xc8>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <SystemClock_Config+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e44:	2308      	movs	r3, #8
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 f9bb 	bl	80061d4 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e64:	f001 fb00 	bl	8002468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2103      	movs	r1, #3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fc1d 	bl	80066c4 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e90:	f001 faea 	bl	8002468 <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3750      	adds	r7, #80	; 0x50
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <MX_ADC1_Init+0xa0>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ee8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f0a:	f001 fdf7 	bl	8002afc <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f14:	f001 faa8 	bl	8002468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_ADC1_Init+0xa4>)
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f2a:	f002 f849 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f34:	f001 fa98 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000009c 	.word	0x2000009c
 8000f44:	40012000 	.word	0x40012000
 8000f48:	10000012 	.word	0x10000012

08000f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_I2C1_Init+0x58>)
 8000f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f8a:	f003 f993 	bl	80042b4 <HAL_I2C_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f94:	f001 fa68 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000144 	.word	0x20000144
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	00061a80 	.word	0x00061a80

08000fa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_SPI3_Init+0x64>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_SPI3_Init+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_SPI3_Init+0x64>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_SPI3_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_SPI3_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_SPI3_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_SPI3_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SPI3_Init+0x64>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_SPI3_Init+0x64>)
 8000fdc:	2230      	movs	r2, #48	; 0x30
 8000fde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_SPI3_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SPI3_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_SPI3_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SPI3_Init+0x64>)
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_SPI3_Init+0x64>)
 8000ffa:	f005 fd83 	bl	8006b04 <HAL_SPI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001004:	f001 fa30 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000198 	.word	0x20000198
 8001010:	40003c00 	.word	0x40003c00

08001014 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_TIM3_Init+0x98>)
 8001034:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001038:	f242 720f 	movw	r2, #9999	; 0x270f
 800103c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001046:	f242 720f 	movw	r2, #9999	; 0x270f
 800104a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM3_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM3_Init+0x94>)
 800105a:	f006 f8f7 	bl	800724c <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001064:	f001 fa00 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001076:	f006 faa3 	bl	80075c0 <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001080:	f001 f9f2 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001084:	2320      	movs	r3, #32
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM3_Init+0x94>)
 8001092:	f006 fc9f 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800109c:	f001 f9e4 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <MX_TIM11_Init+0x44>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010bc:	2263      	movs	r2, #99	; 0x63
 80010be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_TIM11_Init+0x40>)
 80010dc:	f006 f8b6 	bl	800724c <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80010e6:	f001 f9bf 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000238 	.word	0x20000238
 80010f4:	40014800 	.word	0x40014800

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f006 fcd2 	bl	8007ad8 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f001 f995 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000280 	.word	0x20000280
 8001148:	40004400 	.word	0x40004400

0800114c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_DMA_Init+0x3c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <MX_DMA_Init+0x3c>)
 800115c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_DMA_Init+0x3c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2038      	movs	r0, #56	; 0x38
 8001174:	f002 fab9 	bl	80036ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001178:	2038      	movs	r0, #56	; 0x38
 800117a:	f002 fad2 	bl	8003722 <HAL_NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a37      	ldr	r2, [pc, #220]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a30      	ldr	r2, [pc, #192]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a29      	ldr	r2, [pc, #164]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xfc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <MX_GPIO_Init+0xfc>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_GPIO_Init+0xfc>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	481d      	ldr	r0, [pc, #116]	; (800128c <MX_GPIO_Init+0x100>)
 8001218:	f003 f832 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <MX_GPIO_Init+0x104>)
 8001224:	f003 f82c 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <MX_GPIO_Init+0x108>)
 8001240:	f002 fe9a 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_GPIO_Init+0x100>)
 800125c:	f002 fe8c 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_GPIO_Init+0x104>)
 800127a:	f002 fe7d 	bl	8003f78 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800

08001298 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 8001298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af02      	add	r7, sp, #8
	switch (MCState)
 80012a0:	4ba4      	ldr	r3, [pc, #656]	; (8001534 <StateMachineManagment+0x29c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	f200 873b 	bhi.w	8002120 <StateMachineManagment+0xe88>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <StateMachineManagment+0x18>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c9 	.word	0x080012c9
 80012b4:	08001383 	.word	0x08001383
 80012b8:	080016b1 	.word	0x080016b1
 80012bc:	08001cab 	.word	0x08001cab
 80012c0:	08001675 	.word	0x08001675
 80012c4:	08001591 	.word	0x08001591
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 80012c8:	499b      	ldr	r1, [pc, #620]	; (8001538 <StateMachineManagment+0x2a0>)
 80012ca:	489c      	ldr	r0, [pc, #624]	; (800153c <StateMachineManagment+0x2a4>)
 80012cc:	f007 fcae 	bl	8008c2c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012d0:	489a      	ldr	r0, [pc, #616]	; (800153c <StateMachineManagment+0x2a4>)
 80012d2:	f7fe ff85 	bl	80001e0 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	4997      	ldr	r1, [pc, #604]	; (800153c <StateMachineManagment+0x2a4>)
 80012e0:	4897      	ldr	r0, [pc, #604]	; (8001540 <StateMachineManagment+0x2a8>)
 80012e2:	f006 fc46 	bl	8007b72 <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 80012e6:	4b97      	ldr	r3, [pc, #604]	; (8001544 <StateMachineManagment+0x2ac>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4a97      	ldr	r2, [pc, #604]	; (8001548 <StateMachineManagment+0x2b0>)
 80012ec:	7811      	ldrb	r1, [r2, #0]
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 ff31 	bl	8002158 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 80012f6:	4b95      	ldr	r3, [pc, #596]	; (800154c <StateMachineManagment+0x2b4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 80012fc:	4b94      	ldr	r3, [pc, #592]	; (8001550 <StateMachineManagment+0x2b8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 8001302:	4b94      	ldr	r3, [pc, #592]	; (8001554 <StateMachineManagment+0x2bc>)
 8001304:	2200      	movs	r2, #0
 8001306:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8001308:	4b92      	ldr	r3, [pc, #584]	; (8001554 <StateMachineManagment+0x2bc>)
 800130a:	2200      	movs	r2, #0
 800130c:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 800130e:	4b91      	ldr	r3, [pc, #580]	; (8001554 <StateMachineManagment+0x2bc>)
 8001310:	2200      	movs	r2, #0
 8001312:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 8001314:	4b8f      	ldr	r3, [pc, #572]	; (8001554 <StateMachineManagment+0x2bc>)
 8001316:	2200      	movs	r2, #0
 8001318:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 800131a:	4b8f      	ldr	r3, [pc, #572]	; (8001558 <StateMachineManagment+0x2c0>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8001320:	4b8e      	ldr	r3, [pc, #568]	; (800155c <StateMachineManagment+0x2c4>)
 8001322:	2203      	movs	r2, #3
 8001324:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8001326:	4b8d      	ldr	r3, [pc, #564]	; (800155c <StateMachineManagment+0x2c4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	220a      	movs	r2, #10
 800132c:	4619      	mov	r1, r3
 800132e:	488c      	ldr	r0, [pc, #560]	; (8001560 <StateMachineManagment+0x2c8>)
 8001330:	f000 ff8e 	bl	8002250 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f001 fbbd 	bl	8002ab4 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 800133a:	4b89      	ldr	r3, [pc, #548]	; (8001560 <StateMachineManagment+0x2c8>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b85      	ldr	r3, [pc, #532]	; (8001554 <StateMachineManagment+0x2bc>)
 8001340:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 8001342:	4b87      	ldr	r3, [pc, #540]	; (8001560 <StateMachineManagment+0x2c8>)
 8001344:	785a      	ldrb	r2, [r3, #1]
 8001346:	4b83      	ldr	r3, [pc, #524]	; (8001554 <StateMachineManagment+0x2bc>)
 8001348:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <StateMachineManagment+0x2c8>)
 800134c:	789a      	ldrb	r2, [r3, #2]
 800134e:	4b81      	ldr	r3, [pc, #516]	; (8001554 <StateMachineManagment+0x2bc>)
 8001350:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 8001352:	4b83      	ldr	r3, [pc, #524]	; (8001560 <StateMachineManagment+0x2c8>)
 8001354:	789a      	ldrb	r2, [r3, #2]
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <StateMachineManagment+0x2bc>)
 8001358:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 800135a:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <StateMachineManagment+0x2bc>)
 800135c:	78da      	ldrb	r2, [r3, #3]
 800135e:	4b7d      	ldr	r3, [pc, #500]	; (8001554 <StateMachineManagment+0x2bc>)
 8001360:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 8001362:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <StateMachineManagment+0x2bc>)
 8001364:	791a      	ldrb	r2, [r3, #4]
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <StateMachineManagment+0x2bc>)
 8001368:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <StateMachineManagment+0x2bc>)
 800136c:	795a      	ldrb	r2, [r3, #5]
 800136e:	4b79      	ldr	r3, [pc, #484]	; (8001554 <StateMachineManagment+0x2bc>)
 8001370:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 8001372:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <StateMachineManagment+0x2cc>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8001378:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <StateMachineManagment+0x29c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
			break;
 800137e:	f000 becf 	b.w	8002120 <StateMachineManagment+0xe88>
		case StanBy:
			// Header
			if(flagUART == 0){
 8001382:	4b78      	ldr	r3, [pc, #480]	; (8001564 <StateMachineManagment+0x2cc>)
 8001384:	f993 3000 	ldrsb.w	r3, [r3]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 8085 	bne.w	8001498 <StateMachineManagment+0x200>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800138e:	4976      	ldr	r1, [pc, #472]	; (8001568 <StateMachineManagment+0x2d0>)
 8001390:	486a      	ldr	r0, [pc, #424]	; (800153c <StateMachineManagment+0x2a4>)
 8001392:	f007 fc4b 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001396:	4869      	ldr	r0, [pc, #420]	; (800153c <StateMachineManagment+0x2a4>)
 8001398:	f7fe ff22 	bl	80001e0 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	4965      	ldr	r1, [pc, #404]	; (800153c <StateMachineManagment+0x2a4>)
 80013a6:	4866      	ldr	r0, [pc, #408]	; (8001540 <StateMachineManagment+0x2a8>)
 80013a8:	f006 fbe3 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 80013ac:	496f      	ldr	r1, [pc, #444]	; (800156c <StateMachineManagment+0x2d4>)
 80013ae:	4863      	ldr	r0, [pc, #396]	; (800153c <StateMachineManagment+0x2a4>)
 80013b0:	f007 fc3c 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013b4:	4861      	ldr	r0, [pc, #388]	; (800153c <StateMachineManagment+0x2a4>)
 80013b6:	f7fe ff13 	bl	80001e0 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	495e      	ldr	r1, [pc, #376]	; (800153c <StateMachineManagment+0x2a4>)
 80013c4:	485e      	ldr	r0, [pc, #376]	; (8001540 <StateMachineManagment+0x2a8>)
 80013c6:	f006 fbd4 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <StateMachineManagment+0x2bc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b60      	ldr	r3, [pc, #384]	; (8001554 <StateMachineManagment+0x2bc>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	4966      	ldr	r1, [pc, #408]	; (8001570 <StateMachineManagment+0x2d8>)
 80013d6:	4859      	ldr	r0, [pc, #356]	; (800153c <StateMachineManagment+0x2a4>)
 80013d8:	f007 fc28 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013dc:	4857      	ldr	r0, [pc, #348]	; (800153c <StateMachineManagment+0x2a4>)
 80013de:	f7fe feff 	bl	80001e0 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	4954      	ldr	r1, [pc, #336]	; (800153c <StateMachineManagment+0x2a4>)
 80013ec:	4854      	ldr	r0, [pc, #336]	; (8001540 <StateMachineManagment+0x2a8>)
 80013ee:	f006 fbc0 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <StateMachineManagment+0x2bc>)
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b56      	ldr	r3, [pc, #344]	; (8001554 <StateMachineManagment+0x2bc>)
 80013fa:	795b      	ldrb	r3, [r3, #5]
 80013fc:	495d      	ldr	r1, [pc, #372]	; (8001574 <StateMachineManagment+0x2dc>)
 80013fe:	484f      	ldr	r0, [pc, #316]	; (800153c <StateMachineManagment+0x2a4>)
 8001400:	f007 fc14 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <StateMachineManagment+0x2a4>)
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	494a      	ldr	r1, [pc, #296]	; (800153c <StateMachineManagment+0x2a4>)
 8001414:	484a      	ldr	r0, [pc, #296]	; (8001540 <StateMachineManagment+0x2a8>)
 8001416:	f006 fbac 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 800141a:	4957      	ldr	r1, [pc, #348]	; (8001578 <StateMachineManagment+0x2e0>)
 800141c:	4847      	ldr	r0, [pc, #284]	; (800153c <StateMachineManagment+0x2a4>)
 800141e:	f007 fc05 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001422:	4846      	ldr	r0, [pc, #280]	; (800153c <StateMachineManagment+0x2a4>)
 8001424:	f7fe fedc 	bl	80001e0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	4942      	ldr	r1, [pc, #264]	; (800153c <StateMachineManagment+0x2a4>)
 8001432:	4843      	ldr	r0, [pc, #268]	; (8001540 <StateMachineManagment+0x2a8>)
 8001434:	f006 fb9d 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 2 for Choosing Destination Station\r\n");
 8001438:	4950      	ldr	r1, [pc, #320]	; (800157c <StateMachineManagment+0x2e4>)
 800143a:	4840      	ldr	r0, [pc, #256]	; (800153c <StateMachineManagment+0x2a4>)
 800143c:	f007 fbf6 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001440:	483e      	ldr	r0, [pc, #248]	; (800153c <StateMachineManagment+0x2a4>)
 8001442:	f7fe fecd 	bl	80001e0 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	493b      	ldr	r1, [pc, #236]	; (800153c <StateMachineManagment+0x2a4>)
 8001450:	483b      	ldr	r0, [pc, #236]	; (8001540 <StateMachineManagment+0x2a8>)
 8001452:	f006 fb8e 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 3 for EEPROM READ\r\n");
 8001456:	494a      	ldr	r1, [pc, #296]	; (8001580 <StateMachineManagment+0x2e8>)
 8001458:	4838      	ldr	r0, [pc, #224]	; (800153c <StateMachineManagment+0x2a4>)
 800145a:	f007 fbe7 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800145e:	4837      	ldr	r0, [pc, #220]	; (800153c <StateMachineManagment+0x2a4>)
 8001460:	f7fe febe 	bl	80001e0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	4933      	ldr	r1, [pc, #204]	; (800153c <StateMachineManagment+0x2a4>)
 800146e:	4834      	ldr	r0, [pc, #208]	; (8001540 <StateMachineManagment+0x2a8>)
 8001470:	f006 fb7f 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001474:	493c      	ldr	r1, [pc, #240]	; (8001568 <StateMachineManagment+0x2d0>)
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <StateMachineManagment+0x2a4>)
 8001478:	f007 fbd8 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800147c:	482f      	ldr	r0, [pc, #188]	; (800153c <StateMachineManagment+0x2a4>)
 800147e:	f7fe feaf 	bl	80001e0 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	492c      	ldr	r1, [pc, #176]	; (800153c <StateMachineManagment+0x2a4>)
 800148c:	482c      	ldr	r0, [pc, #176]	; (8001540 <StateMachineManagment+0x2a8>)
 800148e:	f006 fb70 	bl	8007b72 <HAL_UART_Transmit>
				flagUART = 1;
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <StateMachineManagment+0x2cc>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001498:	2202      	movs	r2, #2
 800149a:	493a      	ldr	r1, [pc, #232]	; (8001584 <StateMachineManagment+0x2ec>)
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <StateMachineManagment+0x2a8>)
 800149e:	f006 fbfa 	bl	8007c96 <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 80014a2:	f000 fefd 	bl	80022a0 <UARTRecieveIT>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <StateMachineManagment+0x2f0>)
 80014ac:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <StateMachineManagment+0x2f0>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	f000 862d 	beq.w	8002116 <StateMachineManagment+0xe7e>
			{
				if(inputchar == '1')
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <StateMachineManagment+0x2f0>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	2b31      	cmp	r3, #49	; 0x31
 80014c4:	d107      	bne.n	80014d6 <StateMachineManagment+0x23e>
				{
					flagUART = 0;
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <StateMachineManagment+0x2cc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <StateMachineManagment+0x29c>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 80014d2:	f000 be20 	b.w	8002116 <StateMachineManagment+0xe7e>
				else if(inputchar == '2')
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <StateMachineManagment+0x2f0>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	2b32      	cmp	r3, #50	; 0x32
 80014de:	d107      	bne.n	80014f0 <StateMachineManagment+0x258>
					flagUART = 0;
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <StateMachineManagment+0x2cc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <StateMachineManagment+0x29c>)
 80014e8:	2203      	movs	r2, #3
 80014ea:	701a      	strb	r2, [r3, #0]
			break;
 80014ec:	f000 be13 	b.w	8002116 <StateMachineManagment+0xe7e>
				else if(inputchar == '3')
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <StateMachineManagment+0x2f0>)
 80014f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f6:	2b33      	cmp	r3, #51	; 0x33
 80014f8:	d107      	bne.n	800150a <StateMachineManagment+0x272>
					flagUART = 0;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <StateMachineManagment+0x2cc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <StateMachineManagment+0x29c>)
 8001502:	2205      	movs	r2, #5
 8001504:	701a      	strb	r2, [r3, #0]
			break;
 8001506:	f000 be06 	b.w	8002116 <StateMachineManagment+0xe7e>
					flagUART = 0;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <StateMachineManagment+0x2cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001510:	491e      	ldr	r1, [pc, #120]	; (800158c <StateMachineManagment+0x2f4>)
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <StateMachineManagment+0x2a4>)
 8001514:	f007 fb8a 	bl	8008c2c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <StateMachineManagment+0x2a4>)
 800151a:	f7fe fe61 	bl	80001e0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <StateMachineManagment+0x2a4>)
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <StateMachineManagment+0x2a8>)
 800152a:	f006 fb22 	bl	8007b72 <HAL_UART_Transmit>
			break;
 800152e:	f000 bdf2 	b.w	8002116 <StateMachineManagment+0xe7e>
 8001532:	bf00      	nop
 8001534:	200002df 	.word	0x200002df
 8001538:	08009520 	.word	0x08009520
 800153c:	200002e4 	.word	0x200002e4
 8001540:	20000280 	.word	0x20000280
 8001544:	20000004 	.word	0x20000004
 8001548:	20000005 	.word	0x20000005
 800154c:	200002e0 	.word	0x200002e0
 8001550:	200002e1 	.word	0x200002e1
 8001554:	200002d8 	.word	0x200002d8
 8001558:	20000329 	.word	0x20000329
 800155c:	20000002 	.word	0x20000002
 8001560:	2000032c 	.word	0x2000032c
 8001564:	20000324 	.word	0x20000324
 8001568:	08009538 	.word	0x08009538
 800156c:	08009558 	.word	0x08009558
 8001570:	08009570 	.word	0x08009570
 8001574:	080095a4 	.word	0x080095a4
 8001578:	080095cc 	.word	0x080095cc
 800157c:	080095f4 	.word	0x080095f4
 8001580:	08009620 	.word	0x08009620
 8001584:	20000000 	.word	0x20000000
 8001588:	20000326 	.word	0x20000326
 800158c:	0800963c 	.word	0x0800963c
		case EEpromReadState:
			// Header
			if(flagUART == 0){
 8001590:	4baf      	ldr	r3, [pc, #700]	; (8001850 <StateMachineManagment+0x5b8>)
 8001592:	f993 3000 	ldrsb.w	r3, [r3]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d12f      	bne.n	80015fa <StateMachineManagment+0x362>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800159a:	49ae      	ldr	r1, [pc, #696]	; (8001854 <StateMachineManagment+0x5bc>)
 800159c:	48ae      	ldr	r0, [pc, #696]	; (8001858 <StateMachineManagment+0x5c0>)
 800159e:	f007 fb45 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015a2:	48ad      	ldr	r0, [pc, #692]	; (8001858 <StateMachineManagment+0x5c0>)
 80015a4:	f7fe fe1c 	bl	80001e0 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b0:	49a9      	ldr	r1, [pc, #676]	; (8001858 <StateMachineManagment+0x5c0>)
 80015b2:	48aa      	ldr	r0, [pc, #680]	; (800185c <StateMachineManagment+0x5c4>)
 80015b4:	f006 fadd 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nEEPROM is Operating\r\n");
 80015b8:	49a9      	ldr	r1, [pc, #676]	; (8001860 <StateMachineManagment+0x5c8>)
 80015ba:	48a7      	ldr	r0, [pc, #668]	; (8001858 <StateMachineManagment+0x5c0>)
 80015bc:	f007 fb36 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015c0:	48a5      	ldr	r0, [pc, #660]	; (8001858 <StateMachineManagment+0x5c0>)
 80015c2:	f7fe fe0d 	bl	80001e0 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	49a2      	ldr	r1, [pc, #648]	; (8001858 <StateMachineManagment+0x5c0>)
 80015d0:	48a2      	ldr	r0, [pc, #648]	; (800185c <StateMachineManagment+0x5c4>)
 80015d2:	f006 face 	bl	8007b72 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80015d6:	499f      	ldr	r1, [pc, #636]	; (8001854 <StateMachineManagment+0x5bc>)
 80015d8:	489f      	ldr	r0, [pc, #636]	; (8001858 <StateMachineManagment+0x5c0>)
 80015da:	f007 fb27 	bl	8008c2c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015de:	489e      	ldr	r0, [pc, #632]	; (8001858 <StateMachineManagment+0x5c0>)
 80015e0:	f7fe fdfe 	bl	80001e0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ec:	499a      	ldr	r1, [pc, #616]	; (8001858 <StateMachineManagment+0x5c0>)
 80015ee:	489b      	ldr	r0, [pc, #620]	; (800185c <StateMachineManagment+0x5c4>)
 80015f0:	f006 fabf 	bl	8007b72 <HAL_UART_Transmit>
				flagUART = 1;
 80015f4:	4b96      	ldr	r3, [pc, #600]	; (8001850 <StateMachineManagment+0x5b8>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
			}
			eepromReadFlag = 1;
 80015fa:	4b9a      	ldr	r3, [pc, #616]	; (8001864 <StateMachineManagment+0x5cc>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8001600:	4b99      	ldr	r3, [pc, #612]	; (8001868 <StateMachineManagment+0x5d0>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	220a      	movs	r2, #10
 8001606:	4619      	mov	r1, r3
 8001608:	4898      	ldr	r0, [pc, #608]	; (800186c <StateMachineManagment+0x5d4>)
 800160a:	f000 fe21 	bl	8002250 <EEPROMReadFcn>
			HAL_Delay(100);
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f001 fa50 	bl	8002ab4 <HAL_Delay>
			sprintf(TxDataBuffer, "\r\nWaitingTime:[%d] OperationTime[%d] EndStation[%d]", eepromDataReadBack[0], eepromDataReadBack[1],eepromDataReadBack[2]);
 8001614:	4b95      	ldr	r3, [pc, #596]	; (800186c <StateMachineManagment+0x5d4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b94      	ldr	r3, [pc, #592]	; (800186c <StateMachineManagment+0x5d4>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	4619      	mov	r1, r3
 8001620:	4b92      	ldr	r3, [pc, #584]	; (800186c <StateMachineManagment+0x5d4>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	460b      	mov	r3, r1
 8001628:	4991      	ldr	r1, [pc, #580]	; (8001870 <StateMachineManagment+0x5d8>)
 800162a:	488b      	ldr	r0, [pc, #556]	; (8001858 <StateMachineManagment+0x5c0>)
 800162c:	f007 fafe 	bl	8008c2c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001630:	4889      	ldr	r0, [pc, #548]	; (8001858 <StateMachineManagment+0x5c0>)
 8001632:	f7fe fdd5 	bl	80001e0 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	4986      	ldr	r1, [pc, #536]	; (8001858 <StateMachineManagment+0x5c0>)
 8001640:	4886      	ldr	r0, [pc, #536]	; (800185c <StateMachineManagment+0x5c4>)
 8001642:	f006 fa96 	bl	8007b72 <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001646:	4983      	ldr	r1, [pc, #524]	; (8001854 <StateMachineManagment+0x5bc>)
 8001648:	4883      	ldr	r0, [pc, #524]	; (8001858 <StateMachineManagment+0x5c0>)
 800164a:	f007 faef 	bl	8008c2c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800164e:	4882      	ldr	r0, [pc, #520]	; (8001858 <StateMachineManagment+0x5c0>)
 8001650:	f7fe fdc6 	bl	80001e0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165c:	497e      	ldr	r1, [pc, #504]	; (8001858 <StateMachineManagment+0x5c0>)
 800165e:	487f      	ldr	r0, [pc, #508]	; (800185c <StateMachineManagment+0x5c4>)
 8001660:	f006 fa87 	bl	8007b72 <HAL_UART_Transmit>
			flagUART = 0;
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <StateMachineManagment+0x5b8>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 800166a:	4b82      	ldr	r3, [pc, #520]	; (8001874 <StateMachineManagment+0x5dc>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
			break;
 8001670:	f000 bd56 	b.w	8002120 <StateMachineManagment+0xe88>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <StateMachineManagment+0x5e0>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 800167a:	4b80      	ldr	r3, [pc, #512]	; (800187c <StateMachineManagment+0x5e4>)
 800167c:	78da      	ldrb	r2, [r3, #3]
 800167e:	4b80      	ldr	r3, [pc, #512]	; (8001880 <StateMachineManagment+0x5e8>)
 8001680:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8001682:	4b7e      	ldr	r3, [pc, #504]	; (800187c <StateMachineManagment+0x5e4>)
 8001684:	791a      	ldrb	r2, [r3, #4]
 8001686:	4b7e      	ldr	r3, [pc, #504]	; (8001880 <StateMachineManagment+0x5e8>)
 8001688:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <StateMachineManagment+0x5e4>)
 800168c:	795a      	ldrb	r2, [r3, #5]
 800168e:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <StateMachineManagment+0x5e8>)
 8001690:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001692:	4b75      	ldr	r3, [pc, #468]	; (8001868 <StateMachineManagment+0x5d0>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	220a      	movs	r2, #10
 8001698:	4619      	mov	r1, r3
 800169a:	4879      	ldr	r0, [pc, #484]	; (8001880 <StateMachineManagment+0x5e8>)
 800169c:	f000 fdb0 	bl	8002200 <EEPROMWriteFcn>
			flagUART = 0;
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <StateMachineManagment+0x5b8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80016a6:	4b73      	ldr	r3, [pc, #460]	; (8001874 <StateMachineManagment+0x5dc>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
			break;
 80016ac:	f000 bd38 	b.w	8002120 <StateMachineManagment+0xe88>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 80016b0:	4b74      	ldr	r3, [pc, #464]	; (8001884 <StateMachineManagment+0x5ec>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	f000 8233 	beq.w	8001b20 <StateMachineManagment+0x888>
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	f300 852d 	bgt.w	800211a <StateMachineManagment+0xe82>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <StateMachineManagment+0x436>
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	f000 8146 	beq.w	8001956 <StateMachineManagment+0x6be>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 80016ca:	f000 bd26 	b.w	800211a <StateMachineManagment+0xe82>
					if(flagUART == 0){
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <StateMachineManagment+0x5b8>)
 80016d0:	f993 3000 	ldrsb.w	r3, [r3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f040 8094 	bne.w	8001802 <StateMachineManagment+0x56a>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80016da:	495e      	ldr	r1, [pc, #376]	; (8001854 <StateMachineManagment+0x5bc>)
 80016dc:	485e      	ldr	r0, [pc, #376]	; (8001858 <StateMachineManagment+0x5c0>)
 80016de:	f007 faa5 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016e2:	485d      	ldr	r0, [pc, #372]	; (8001858 <StateMachineManagment+0x5c0>)
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f0:	4959      	ldr	r1, [pc, #356]	; (8001858 <StateMachineManagment+0x5c0>)
 80016f2:	485a      	ldr	r0, [pc, #360]	; (800185c <StateMachineManagment+0x5c4>)
 80016f4:	f006 fa3d 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 80016f8:	4963      	ldr	r1, [pc, #396]	; (8001888 <StateMachineManagment+0x5f0>)
 80016fa:	4857      	ldr	r0, [pc, #348]	; (8001858 <StateMachineManagment+0x5c0>)
 80016fc:	f007 fa96 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001700:	4855      	ldr	r0, [pc, #340]	; (8001858 <StateMachineManagment+0x5c0>)
 8001702:	f7fe fd6d 	bl	80001e0 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	4952      	ldr	r1, [pc, #328]	; (8001858 <StateMachineManagment+0x5c0>)
 8001710:	4852      	ldr	r0, [pc, #328]	; (800185c <StateMachineManagment+0x5c4>)
 8001712:	f006 fa2e 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <StateMachineManagment+0x5e4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4b57      	ldr	r3, [pc, #348]	; (800187c <StateMachineManagment+0x5e4>)
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	495a      	ldr	r1, [pc, #360]	; (800188c <StateMachineManagment+0x5f4>)
 8001722:	484d      	ldr	r0, [pc, #308]	; (8001858 <StateMachineManagment+0x5c0>)
 8001724:	f007 fa82 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001728:	484b      	ldr	r0, [pc, #300]	; (8001858 <StateMachineManagment+0x5c0>)
 800172a:	f7fe fd59 	bl	80001e0 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	4948      	ldr	r1, [pc, #288]	; (8001858 <StateMachineManagment+0x5c0>)
 8001738:	4848      	ldr	r0, [pc, #288]	; (800185c <StateMachineManagment+0x5c4>)
 800173a:	f006 fa1a 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <StateMachineManagment+0x5e4>)
 8001740:	799b      	ldrb	r3, [r3, #6]
 8001742:	461a      	mov	r2, r3
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <StateMachineManagment+0x5e4>)
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	4951      	ldr	r1, [pc, #324]	; (8001890 <StateMachineManagment+0x5f8>)
 800174a:	4843      	ldr	r0, [pc, #268]	; (8001858 <StateMachineManagment+0x5c0>)
 800174c:	f007 fa6e 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001750:	4841      	ldr	r0, [pc, #260]	; (8001858 <StateMachineManagment+0x5c0>)
 8001752:	f7fe fd45 	bl	80001e0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	493e      	ldr	r1, [pc, #248]	; (8001858 <StateMachineManagment+0x5c0>)
 8001760:	483e      	ldr	r0, [pc, #248]	; (800185c <StateMachineManagment+0x5c4>)
 8001762:	f006 fa06 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8001766:	494b      	ldr	r1, [pc, #300]	; (8001894 <StateMachineManagment+0x5fc>)
 8001768:	483b      	ldr	r0, [pc, #236]	; (8001858 <StateMachineManagment+0x5c0>)
 800176a:	f007 fa5f 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800176e:	483a      	ldr	r0, [pc, #232]	; (8001858 <StateMachineManagment+0x5c0>)
 8001770:	f7fe fd36 	bl	80001e0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177c:	4936      	ldr	r1, [pc, #216]	; (8001858 <StateMachineManagment+0x5c0>)
 800177e:	4837      	ldr	r0, [pc, #220]	; (800185c <StateMachineManagment+0x5c4>)
 8001780:	f006 f9f7 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8001784:	4944      	ldr	r1, [pc, #272]	; (8001898 <StateMachineManagment+0x600>)
 8001786:	4834      	ldr	r0, [pc, #208]	; (8001858 <StateMachineManagment+0x5c0>)
 8001788:	f007 fa50 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800178c:	4832      	ldr	r0, [pc, #200]	; (8001858 <StateMachineManagment+0x5c0>)
 800178e:	f7fe fd27 	bl	80001e0 <strlen>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	492f      	ldr	r1, [pc, #188]	; (8001858 <StateMachineManagment+0x5c0>)
 800179c:	482f      	ldr	r0, [pc, #188]	; (800185c <StateMachineManagment+0x5c4>)
 800179e:	f006 f9e8 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 80017a2:	493e      	ldr	r1, [pc, #248]	; (800189c <StateMachineManagment+0x604>)
 80017a4:	482c      	ldr	r0, [pc, #176]	; (8001858 <StateMachineManagment+0x5c0>)
 80017a6:	f007 fa41 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017aa:	482b      	ldr	r0, [pc, #172]	; (8001858 <StateMachineManagment+0x5c0>)
 80017ac:	f7fe fd18 	bl	80001e0 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	4927      	ldr	r1, [pc, #156]	; (8001858 <StateMachineManagment+0x5c0>)
 80017ba:	4828      	ldr	r0, [pc, #160]	; (800185c <StateMachineManagment+0x5c4>)
 80017bc:	f006 f9d9 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 80017c0:	4937      	ldr	r1, [pc, #220]	; (80018a0 <StateMachineManagment+0x608>)
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <StateMachineManagment+0x5c0>)
 80017c4:	f007 fa32 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017c8:	4823      	ldr	r0, [pc, #140]	; (8001858 <StateMachineManagment+0x5c0>)
 80017ca:	f7fe fd09 	bl	80001e0 <strlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	4920      	ldr	r1, [pc, #128]	; (8001858 <StateMachineManagment+0x5c0>)
 80017d8:	4820      	ldr	r0, [pc, #128]	; (800185c <StateMachineManagment+0x5c4>)
 80017da:	f006 f9ca 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80017de:	491d      	ldr	r1, [pc, #116]	; (8001854 <StateMachineManagment+0x5bc>)
 80017e0:	481d      	ldr	r0, [pc, #116]	; (8001858 <StateMachineManagment+0x5c0>)
 80017e2:	f007 fa23 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <StateMachineManagment+0x5c0>)
 80017e8:	f7fe fcfa 	bl	80001e0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f4:	4918      	ldr	r1, [pc, #96]	; (8001858 <StateMachineManagment+0x5c0>)
 80017f6:	4819      	ldr	r0, [pc, #100]	; (800185c <StateMachineManagment+0x5c4>)
 80017f8:	f006 f9bb 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <StateMachineManagment+0x5b8>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001802:	2202      	movs	r2, #2
 8001804:	4927      	ldr	r1, [pc, #156]	; (80018a4 <StateMachineManagment+0x60c>)
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <StateMachineManagment+0x5c4>)
 8001808:	f006 fa45 	bl	8007c96 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 800180c:	f000 fd48 	bl	80022a0 <UARTRecieveIT>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <StateMachineManagment+0x610>)
 8001816:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <StateMachineManagment+0x610>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001822:	f000 823c 	beq.w	8001c9e <StateMachineManagment+0xa06>
						if(inputchar == 'x')
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <StateMachineManagment+0x610>)
 8001828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182c:	2b78      	cmp	r3, #120	; 0x78
 800182e:	d13d      	bne.n	80018ac <StateMachineManagment+0x614>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <StateMachineManagment+0x5e4>)
 8001832:	78da      	ldrb	r2, [r3, #3]
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <StateMachineManagment+0x5e4>)
 8001836:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <StateMachineManagment+0x5e4>)
 800183a:	791a      	ldrb	r2, [r3, #4]
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <StateMachineManagment+0x5e4>)
 800183e:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <StateMachineManagment+0x5b8>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <StateMachineManagment+0x5dc>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
					break;
 800184c:	e227      	b.n	8001c9e <StateMachineManagment+0xa06>
 800184e:	bf00      	nop
 8001850:	20000324 	.word	0x20000324
 8001854:	08009538 	.word	0x08009538
 8001858:	200002e4 	.word	0x200002e4
 800185c:	20000280 	.word	0x20000280
 8001860:	08009654 	.word	0x08009654
 8001864:	20000329 	.word	0x20000329
 8001868:	20000002 	.word	0x20000002
 800186c:	2000032c 	.word	0x2000032c
 8001870:	0800966c 	.word	0x0800966c
 8001874:	200002df 	.word	0x200002df
 8001878:	20000328 	.word	0x20000328
 800187c:	200002d8 	.word	0x200002d8
 8001880:	20000330 	.word	0x20000330
 8001884:	200002e0 	.word	0x200002e0
 8001888:	080096a0 	.word	0x080096a0
 800188c:	08009570 	.word	0x08009570
 8001890:	080095a4 	.word	0x080095a4
 8001894:	080096c4 	.word	0x080096c4
 8001898:	080096e8 	.word	0x080096e8
 800189c:	0800970c 	.word	0x0800970c
 80018a0:	08009720 	.word	0x08009720
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000326 	.word	0x20000326
						else if(inputchar == '1')
 80018ac:	4b8a      	ldr	r3, [pc, #552]	; (8001ad8 <StateMachineManagment+0x840>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	2b31      	cmp	r3, #49	; 0x31
 80018b4:	d106      	bne.n	80018c4 <StateMachineManagment+0x62c>
							flagUART = 0;
 80018b6:	4b89      	ldr	r3, [pc, #548]	; (8001adc <StateMachineManagment+0x844>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 80018bc:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <StateMachineManagment+0x848>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
					break;
 80018c2:	e1ec      	b.n	8001c9e <StateMachineManagment+0xa06>
						else if(inputchar == '2')
 80018c4:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <StateMachineManagment+0x840>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	2b32      	cmp	r3, #50	; 0x32
 80018cc:	d106      	bne.n	80018dc <StateMachineManagment+0x644>
							flagUART = 0;
 80018ce:	4b83      	ldr	r3, [pc, #524]	; (8001adc <StateMachineManagment+0x844>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 80018d4:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <StateMachineManagment+0x848>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
					break;
 80018da:	e1e0      	b.n	8001c9e <StateMachineManagment+0xa06>
						else if(inputchar == 's')
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <StateMachineManagment+0x840>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	2b73      	cmp	r3, #115	; 0x73
 80018e4:	d124      	bne.n	8001930 <StateMachineManagment+0x698>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <StateMachineManagment+0x84c>)
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <StateMachineManagment+0x84c>)
 80018ec:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <StateMachineManagment+0x84c>)
 80018f0:	785a      	ldrb	r2, [r3, #1]
 80018f2:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <StateMachineManagment+0x84c>)
 80018f4:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <StateMachineManagment+0x850>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 80018fc:	4b79      	ldr	r3, [pc, #484]	; (8001ae4 <StateMachineManagment+0x84c>)
 80018fe:	78da      	ldrb	r2, [r3, #3]
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <StateMachineManagment+0x854>)
 8001902:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8001904:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001906:	791a      	ldrb	r2, [r3, #4]
 8001908:	4b78      	ldr	r3, [pc, #480]	; (8001aec <StateMachineManagment+0x854>)
 800190a:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 800190c:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <StateMachineManagment+0x84c>)
 800190e:	795a      	ldrb	r2, [r3, #5]
 8001910:	4b76      	ldr	r3, [pc, #472]	; (8001aec <StateMachineManagment+0x854>)
 8001912:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001914:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <StateMachineManagment+0x858>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	220a      	movs	r2, #10
 800191a:	4619      	mov	r1, r3
 800191c:	4873      	ldr	r0, [pc, #460]	; (8001aec <StateMachineManagment+0x854>)
 800191e:	f000 fc6f 	bl	8002200 <EEPROMWriteFcn>
							flagUART = 0;
 8001922:	4b6e      	ldr	r3, [pc, #440]	; (8001adc <StateMachineManagment+0x844>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001928:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <StateMachineManagment+0x85c>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
					break;
 800192e:	e1b6      	b.n	8001c9e <StateMachineManagment+0xa06>
							flagUART = 0;
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <StateMachineManagment+0x844>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001936:	4970      	ldr	r1, [pc, #448]	; (8001af8 <StateMachineManagment+0x860>)
 8001938:	4870      	ldr	r0, [pc, #448]	; (8001afc <StateMachineManagment+0x864>)
 800193a:	f007 f977 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800193e:	486f      	ldr	r0, [pc, #444]	; (8001afc <StateMachineManagment+0x864>)
 8001940:	f7fe fc4e 	bl	80001e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	496b      	ldr	r1, [pc, #428]	; (8001afc <StateMachineManagment+0x864>)
 800194e:	486c      	ldr	r0, [pc, #432]	; (8001b00 <StateMachineManagment+0x868>)
 8001950:	f006 f90f 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001954:	e1a3      	b.n	8001c9e <StateMachineManagment+0xa06>
					if(flagUART == 0){
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <StateMachineManagment+0x844>)
 8001958:	f993 3000 	ldrsb.w	r3, [r3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d14d      	bne.n	80019fc <StateMachineManagment+0x764>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8001960:	4968      	ldr	r1, [pc, #416]	; (8001b04 <StateMachineManagment+0x86c>)
 8001962:	4866      	ldr	r0, [pc, #408]	; (8001afc <StateMachineManagment+0x864>)
 8001964:	f007 f962 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001968:	4864      	ldr	r0, [pc, #400]	; (8001afc <StateMachineManagment+0x864>)
 800196a:	f7fe fc39 	bl	80001e0 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	b29a      	uxth	r2, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	4961      	ldr	r1, [pc, #388]	; (8001afc <StateMachineManagment+0x864>)
 8001978:	4861      	ldr	r0, [pc, #388]	; (8001b00 <StateMachineManagment+0x868>)
 800197a:	f006 f8fa 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 800197e:	4962      	ldr	r1, [pc, #392]	; (8001b08 <StateMachineManagment+0x870>)
 8001980:	485e      	ldr	r0, [pc, #376]	; (8001afc <StateMachineManagment+0x864>)
 8001982:	f007 f953 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001986:	485d      	ldr	r0, [pc, #372]	; (8001afc <StateMachineManagment+0x864>)
 8001988:	f7fe fc2a 	bl	80001e0 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001994:	4959      	ldr	r1, [pc, #356]	; (8001afc <StateMachineManagment+0x864>)
 8001996:	485a      	ldr	r0, [pc, #360]	; (8001b00 <StateMachineManagment+0x868>)
 8001998:	f006 f8eb 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 800199c:	495b      	ldr	r1, [pc, #364]	; (8001b0c <StateMachineManagment+0x874>)
 800199e:	4857      	ldr	r0, [pc, #348]	; (8001afc <StateMachineManagment+0x864>)
 80019a0:	f007 f944 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80019a4:	4855      	ldr	r0, [pc, #340]	; (8001afc <StateMachineManagment+0x864>)
 80019a6:	f7fe fc1b 	bl	80001e0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	4952      	ldr	r1, [pc, #328]	; (8001afc <StateMachineManagment+0x864>)
 80019b4:	4852      	ldr	r0, [pc, #328]	; (8001b00 <StateMachineManagment+0x868>)
 80019b6:	f006 f8dc 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 80019ba:	4955      	ldr	r1, [pc, #340]	; (8001b10 <StateMachineManagment+0x878>)
 80019bc:	484f      	ldr	r0, [pc, #316]	; (8001afc <StateMachineManagment+0x864>)
 80019be:	f007 f935 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80019c2:	484e      	ldr	r0, [pc, #312]	; (8001afc <StateMachineManagment+0x864>)
 80019c4:	f7fe fc0c 	bl	80001e0 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	494a      	ldr	r1, [pc, #296]	; (8001afc <StateMachineManagment+0x864>)
 80019d2:	484b      	ldr	r0, [pc, #300]	; (8001b00 <StateMachineManagment+0x868>)
 80019d4:	f006 f8cd 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 80019d8:	494e      	ldr	r1, [pc, #312]	; (8001b14 <StateMachineManagment+0x87c>)
 80019da:	4848      	ldr	r0, [pc, #288]	; (8001afc <StateMachineManagment+0x864>)
 80019dc:	f007 f926 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80019e0:	4846      	ldr	r0, [pc, #280]	; (8001afc <StateMachineManagment+0x864>)
 80019e2:	f7fe fbfd 	bl	80001e0 <strlen>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	4943      	ldr	r1, [pc, #268]	; (8001afc <StateMachineManagment+0x864>)
 80019f0:	4843      	ldr	r0, [pc, #268]	; (8001b00 <StateMachineManagment+0x868>)
 80019f2:	f006 f8be 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <StateMachineManagment+0x844>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80019fc:	2202      	movs	r2, #2
 80019fe:	4946      	ldr	r1, [pc, #280]	; (8001b18 <StateMachineManagment+0x880>)
 8001a00:	483f      	ldr	r0, [pc, #252]	; (8001b00 <StateMachineManagment+0x868>)
 8001a02:	f006 f948 	bl	8007c96 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001a06:	f000 fc4b 	bl	80022a0 <UARTRecieveIT>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <StateMachineManagment+0x840>)
 8001a10:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <StateMachineManagment+0x840>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	f000 8141 	beq.w	8001ca2 <StateMachineManagment+0xa0a>
						if(inputchar == 'x')
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <StateMachineManagment+0x840>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	2b78      	cmp	r3, #120	; 0x78
 8001a28:	d106      	bne.n	8001a38 <StateMachineManagment+0x7a0>
							flagUART = 0;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <StateMachineManagment+0x844>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <StateMachineManagment+0x848>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
					break;
 8001a36:	e134      	b.n	8001ca2 <StateMachineManagment+0xa0a>
						else if(inputchar == '+')
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <StateMachineManagment+0x840>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	2b2b      	cmp	r3, #43	; 0x2b
 8001a40:	d118      	bne.n	8001a74 <StateMachineManagment+0x7dc>
							Robot.WaitingTimeBuffer++;
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a4c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4931      	ldr	r1, [pc, #196]	; (8001b1c <StateMachineManagment+0x884>)
 8001a56:	4829      	ldr	r0, [pc, #164]	; (8001afc <StateMachineManagment+0x864>)
 8001a58:	f007 f8e8 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a5c:	4827      	ldr	r0, [pc, #156]	; (8001afc <StateMachineManagment+0x864>)
 8001a5e:	f7fe fbbf 	bl	80001e0 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	4924      	ldr	r1, [pc, #144]	; (8001afc <StateMachineManagment+0x864>)
 8001a6c:	4824      	ldr	r0, [pc, #144]	; (8001b00 <StateMachineManagment+0x868>)
 8001a6e:	f006 f880 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001a72:	e116      	b.n	8001ca2 <StateMachineManagment+0xa0a>
						else if(inputchar == '-')
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <StateMachineManagment+0x840>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	2b2d      	cmp	r3, #45	; 0x2d
 8001a7c:	d118      	bne.n	8001ab0 <StateMachineManagment+0x818>
							Robot.WaitingTimeBuffer--;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a88:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <StateMachineManagment+0x84c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <StateMachineManagment+0x884>)
 8001a92:	481a      	ldr	r0, [pc, #104]	; (8001afc <StateMachineManagment+0x864>)
 8001a94:	f007 f8ca 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a98:	4818      	ldr	r0, [pc, #96]	; (8001afc <StateMachineManagment+0x864>)
 8001a9a:	f7fe fba1 	bl	80001e0 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	4915      	ldr	r1, [pc, #84]	; (8001afc <StateMachineManagment+0x864>)
 8001aa8:	4815      	ldr	r0, [pc, #84]	; (8001b00 <StateMachineManagment+0x868>)
 8001aaa:	f006 f862 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001aae:	e0f8      	b.n	8001ca2 <StateMachineManagment+0xa0a>
							flagUART = 0;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <StateMachineManagment+0x844>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001ab6:	4910      	ldr	r1, [pc, #64]	; (8001af8 <StateMachineManagment+0x860>)
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <StateMachineManagment+0x864>)
 8001aba:	f007 f8b7 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001abe:	480f      	ldr	r0, [pc, #60]	; (8001afc <StateMachineManagment+0x864>)
 8001ac0:	f7fe fb8e 	bl	80001e0 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001acc:	490b      	ldr	r1, [pc, #44]	; (8001afc <StateMachineManagment+0x864>)
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <StateMachineManagment+0x868>)
 8001ad0:	f006 f84f 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001ad4:	e0e5      	b.n	8001ca2 <StateMachineManagment+0xa0a>
 8001ad6:	bf00      	nop
 8001ad8:	20000326 	.word	0x20000326
 8001adc:	20000324 	.word	0x20000324
 8001ae0:	200002e0 	.word	0x200002e0
 8001ae4:	200002d8 	.word	0x200002d8
 8001ae8:	20000328 	.word	0x20000328
 8001aec:	20000330 	.word	0x20000330
 8001af0:	20000002 	.word	0x20000002
 8001af4:	200002df 	.word	0x200002df
 8001af8:	0800963c 	.word	0x0800963c
 8001afc:	200002e4 	.word	0x200002e4
 8001b00:	20000280 	.word	0x20000280
 8001b04:	08009734 	.word	0x08009734
 8001b08:	08009750 	.word	0x08009750
 8001b0c:	08009768 	.word	0x08009768
 8001b10:	08009780 	.word	0x08009780
 8001b14:	08009794 	.word	0x08009794
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	080097b0 	.word	0x080097b0
					if(flagUART == 0){
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <StateMachineManagment+0xa34>)
 8001b22:	f993 3000 	ldrsb.w	r3, [r3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d14d      	bne.n	8001bc6 <StateMachineManagment+0x92e>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8001b2a:	4969      	ldr	r1, [pc, #420]	; (8001cd0 <StateMachineManagment+0xa38>)
 8001b2c:	4869      	ldr	r0, [pc, #420]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b2e:	f007 f87d 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b32:	4868      	ldr	r0, [pc, #416]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b34:	f7fe fb54 	bl	80001e0 <strlen>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b40:	4964      	ldr	r1, [pc, #400]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b42:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001b44:	f006 f815 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001b48:	4964      	ldr	r1, [pc, #400]	; (8001cdc <StateMachineManagment+0xa44>)
 8001b4a:	4862      	ldr	r0, [pc, #392]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b4c:	f007 f86e 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b50:	4860      	ldr	r0, [pc, #384]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b52:	f7fe fb45 	bl	80001e0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	495d      	ldr	r1, [pc, #372]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b60:	485d      	ldr	r0, [pc, #372]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001b62:	f006 f806 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001b66:	495e      	ldr	r1, [pc, #376]	; (8001ce0 <StateMachineManagment+0xa48>)
 8001b68:	485a      	ldr	r0, [pc, #360]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b6a:	f007 f85f 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b6e:	4859      	ldr	r0, [pc, #356]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b70:	f7fe fb36 	bl	80001e0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7c:	4955      	ldr	r1, [pc, #340]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b7e:	4856      	ldr	r0, [pc, #344]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001b80:	f005 fff7 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001b84:	4957      	ldr	r1, [pc, #348]	; (8001ce4 <StateMachineManagment+0xa4c>)
 8001b86:	4853      	ldr	r0, [pc, #332]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b88:	f007 f850 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b8c:	4851      	ldr	r0, [pc, #324]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b8e:	f7fe fb27 	bl	80001e0 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	494e      	ldr	r1, [pc, #312]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001b9c:	484e      	ldr	r0, [pc, #312]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001b9e:	f005 ffe8 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001ba2:	4951      	ldr	r1, [pc, #324]	; (8001ce8 <StateMachineManagment+0xa50>)
 8001ba4:	484b      	ldr	r0, [pc, #300]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001ba6:	f007 f841 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001baa:	484a      	ldr	r0, [pc, #296]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001bac:	f7fe fb18 	bl	80001e0 <strlen>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	4946      	ldr	r1, [pc, #280]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001bba:	4847      	ldr	r0, [pc, #284]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001bbc:	f005 ffd9 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <StateMachineManagment+0xa34>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4948      	ldr	r1, [pc, #288]	; (8001cec <StateMachineManagment+0xa54>)
 8001bca:	4843      	ldr	r0, [pc, #268]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001bcc:	f006 f863 	bl	8007c96 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001bd0:	f000 fb66 	bl	80022a0 <UARTRecieveIT>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <StateMachineManagment+0xa58>)
 8001bda:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <StateMachineManagment+0xa58>)
 8001bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	d05e      	beq.n	8001ca6 <StateMachineManagment+0xa0e>
						if(inputchar == 'x')
 8001be8:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <StateMachineManagment+0xa58>)
 8001bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bee:	2b78      	cmp	r3, #120	; 0x78
 8001bf0:	d106      	bne.n	8001c00 <StateMachineManagment+0x968>
							flagUART = 0;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <StateMachineManagment+0xa34>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <StateMachineManagment+0xa5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
					break;
 8001bfe:	e052      	b.n	8001ca6 <StateMachineManagment+0xa0e>
						else if(inputchar == '+')
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <StateMachineManagment+0xa58>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	2b2b      	cmp	r3, #43	; 0x2b
 8001c08:	d118      	bne.n	8001c3c <StateMachineManagment+0x9a4>
							Robot.OperationTimeBuffer++;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c14:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4937      	ldr	r1, [pc, #220]	; (8001cfc <StateMachineManagment+0xa64>)
 8001c1e:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c20:	f007 f804 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c24:	482b      	ldr	r0, [pc, #172]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c26:	f7fe fadb 	bl	80001e0 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	4928      	ldr	r1, [pc, #160]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c34:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001c36:	f005 ff9c 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001c3a:	e034      	b.n	8001ca6 <StateMachineManagment+0xa0e>
						else if(inputchar == '-')
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <StateMachineManagment+0xa58>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	2b2d      	cmp	r3, #45	; 0x2d
 8001c44:	d118      	bne.n	8001c78 <StateMachineManagment+0x9e0>
							Robot.OperationTimeBuffer--;
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c50:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <StateMachineManagment+0xa60>)
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4928      	ldr	r1, [pc, #160]	; (8001cfc <StateMachineManagment+0xa64>)
 8001c5a:	481e      	ldr	r0, [pc, #120]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c5c:	f006 ffe6 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c60:	481c      	ldr	r0, [pc, #112]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c62:	f7fe fabd 	bl	80001e0 <strlen>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	4919      	ldr	r1, [pc, #100]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c70:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001c72:	f005 ff7e 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001c76:	e016      	b.n	8001ca6 <StateMachineManagment+0xa0e>
							flagUART = 0;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <StateMachineManagment+0xa34>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001c7e:	4920      	ldr	r1, [pc, #128]	; (8001d00 <StateMachineManagment+0xa68>)
 8001c80:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c82:	f006 ffd3 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c86:	4813      	ldr	r0, [pc, #76]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c88:	f7fe faaa 	bl	80001e0 <strlen>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c94:	490f      	ldr	r1, [pc, #60]	; (8001cd4 <StateMachineManagment+0xa3c>)
 8001c96:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <StateMachineManagment+0xa40>)
 8001c98:	f005 ff6b 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001c9c:	e003      	b.n	8001ca6 <StateMachineManagment+0xa0e>
					break;
 8001c9e:	bf00      	nop
 8001ca0:	e23b      	b.n	800211a <StateMachineManagment+0xe82>
					break;
 8001ca2:	bf00      	nop
 8001ca4:	e239      	b.n	800211a <StateMachineManagment+0xe82>
					break;
 8001ca6:	bf00      	nop
			break;
 8001ca8:	e237      	b.n	800211a <StateMachineManagment+0xe82>
		case StantionChoosing:
			switch (StantionChoosingState)
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <StateMachineManagment+0xa6c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	f200 8235 	bhi.w	800211e <StateMachineManagment+0xe86>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <StateMachineManagment+0xa24>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001d09 	.word	0x08001d09
 8001cc0:	08001f47 	.word	0x08001f47
 8001cc4:	08001fd5 	.word	0x08001fd5
 8001cc8:	08002069 	.word	0x08002069
 8001ccc:	20000324 	.word	0x20000324
 8001cd0:	080097cc 	.word	0x080097cc
 8001cd4:	200002e4 	.word	0x200002e4
 8001cd8:	20000280 	.word	0x20000280
 8001cdc:	08009750 	.word	0x08009750
 8001ce0:	08009768 	.word	0x08009768
 8001ce4:	08009780 	.word	0x08009780
 8001ce8:	08009794 	.word	0x08009794
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000326 	.word	0x20000326
 8001cf4:	200002e0 	.word	0x200002e0
 8001cf8:	200002d8 	.word	0x200002d8
 8001cfc:	080097ec 	.word	0x080097ec
 8001d00:	0800963c 	.word	0x0800963c
 8001d04:	200002e1 	.word	0x200002e1
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 8001d08:	4b9d      	ldr	r3, [pc, #628]	; (8001f80 <StateMachineManagment+0xce8>)
 8001d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8085 	bne.w	8001e1e <StateMachineManagment+0xb86>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 8001d14:	499b      	ldr	r1, [pc, #620]	; (8001f84 <StateMachineManagment+0xcec>)
 8001d16:	489c      	ldr	r0, [pc, #624]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d18:	f006 ff88 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d1c:	489a      	ldr	r0, [pc, #616]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d1e:	f7fe fa5f 	bl	80001e0 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	4997      	ldr	r1, [pc, #604]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d2c:	4897      	ldr	r0, [pc, #604]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001d2e:	f005 ff20 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8001d32:	4b97      	ldr	r3, [pc, #604]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	4995      	ldr	r1, [pc, #596]	; (8001f94 <StateMachineManagment+0xcfc>)
 8001d3e:	4892      	ldr	r0, [pc, #584]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d40:	f006 ff74 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d44:	4890      	ldr	r0, [pc, #576]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d46:	f7fe fa4b 	bl	80001e0 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	498d      	ldr	r1, [pc, #564]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d54:	488d      	ldr	r0, [pc, #564]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001d56:	f005 ff0c 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001d5c:	799b      	ldrb	r3, [r3, #6]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	498c      	ldr	r1, [pc, #560]	; (8001f98 <StateMachineManagment+0xd00>)
 8001d66:	4888      	ldr	r0, [pc, #544]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d68:	f006 ff60 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d6c:	4886      	ldr	r0, [pc, #536]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d6e:	f7fe fa37 	bl	80001e0 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	4983      	ldr	r1, [pc, #524]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d7c:	4883      	ldr	r0, [pc, #524]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001d7e:	f005 fef8 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type + for +1 Station\r\n");
 8001d82:	4986      	ldr	r1, [pc, #536]	; (8001f9c <StateMachineManagment+0xd04>)
 8001d84:	4880      	ldr	r0, [pc, #512]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d86:	f006 ff51 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d8a:	487f      	ldr	r0, [pc, #508]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d8c:	f7fe fa28 	bl	80001e0 <strlen>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d98:	497b      	ldr	r1, [pc, #492]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001d9a:	487c      	ldr	r0, [pc, #496]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001d9c:	f005 fee9 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001da0:	497f      	ldr	r1, [pc, #508]	; (8001fa0 <StateMachineManagment+0xd08>)
 8001da2:	4879      	ldr	r0, [pc, #484]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001da4:	f006 ff42 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001da8:	4877      	ldr	r0, [pc, #476]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001daa:	f7fe fa19 	bl	80001e0 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	4974      	ldr	r1, [pc, #464]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001db8:	4874      	ldr	r0, [pc, #464]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001dba:	f005 feda 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8001dbe:	4979      	ldr	r1, [pc, #484]	; (8001fa4 <StateMachineManagment+0xd0c>)
 8001dc0:	4871      	ldr	r0, [pc, #452]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001dc2:	f006 ff33 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dc6:	4870      	ldr	r0, [pc, #448]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001dc8:	f7fe fa0a 	bl	80001e0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	496c      	ldr	r1, [pc, #432]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001dd6:	486d      	ldr	r0, [pc, #436]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001dd8:	f005 fecb 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type g to Start Operating\r\n");
 8001ddc:	4972      	ldr	r1, [pc, #456]	; (8001fa8 <StateMachineManagment+0xd10>)
 8001dde:	486a      	ldr	r0, [pc, #424]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001de0:	f006 ff24 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001de4:	4868      	ldr	r0, [pc, #416]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001de6:	f7fe f9fb 	bl	80001e0 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	4965      	ldr	r1, [pc, #404]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001df4:	4865      	ldr	r0, [pc, #404]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001df6:	f005 febc 	bl	8007b72 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001dfa:	496c      	ldr	r1, [pc, #432]	; (8001fac <StateMachineManagment+0xd14>)
 8001dfc:	4862      	ldr	r0, [pc, #392]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001dfe:	f006 ff15 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e02:	4861      	ldr	r0, [pc, #388]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001e04:	f7fe f9ec 	bl	80001e0 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e10:	495d      	ldr	r1, [pc, #372]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001e12:	485e      	ldr	r0, [pc, #376]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001e14:	f005 fead 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 8001e18:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <StateMachineManagment+0xce8>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4963      	ldr	r1, [pc, #396]	; (8001fb0 <StateMachineManagment+0xd18>)
 8001e22:	485a      	ldr	r0, [pc, #360]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001e24:	f005 ff37 	bl	8007c96 <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4961      	ldr	r1, [pc, #388]	; (8001fb0 <StateMachineManagment+0xd18>)
 8001e2c:	4857      	ldr	r0, [pc, #348]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001e2e:	f005 ff32 	bl	8007c96 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001e32:	f000 fa35 	bl	80022a0 <UARTRecieveIT>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001e3c:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	f000 815f 	beq.w	800210a <StateMachineManagment+0xe72>
					{
						if(inputchar == 'x')
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	2b78      	cmp	r3, #120	; 0x78
 8001e54:	d10a      	bne.n	8001e6c <StateMachineManagment+0xbd4>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e58:	795a      	ldrb	r2, [r3, #5]
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e5c:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 8001e5e:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <StateMachineManagment+0xce8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001e64:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <StateMachineManagment+0xd20>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 8001e6a:	e14e      	b.n	800210a <StateMachineManagment+0xe72>
						else if(inputchar == '+')
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	2b2b      	cmp	r3, #43	; 0x2b
 8001e74:	d11f      	bne.n	8001eb6 <StateMachineManagment+0xc1e>
							Robot.EndStationBuffer++;
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e80:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e8e:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001e90:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001e92:	789b      	ldrb	r3, [r3, #2]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4949      	ldr	r1, [pc, #292]	; (8001fbc <StateMachineManagment+0xd24>)
 8001e98:	483b      	ldr	r0, [pc, #236]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001e9a:	f006 fec7 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e9e:	483a      	ldr	r0, [pc, #232]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001ea0:	f7fe f99e 	bl	80001e0 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eac:	4936      	ldr	r1, [pc, #216]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001eae:	4837      	ldr	r0, [pc, #220]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001eb0:	f005 fe5f 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001eb4:	e129      	b.n	800210a <StateMachineManagment+0xe72>
						else if(inputchar == '-')
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ebe:	d11f      	bne.n	8001f00 <StateMachineManagment+0xc68>
							Robot.EndStationBuffer--;
 8001ec0:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001ec2:	789b      	ldrb	r3, [r3, #2]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001eca:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001ece:	789b      	ldrb	r3, [r3, #2]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001ed8:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4936      	ldr	r1, [pc, #216]	; (8001fbc <StateMachineManagment+0xd24>)
 8001ee2:	4829      	ldr	r0, [pc, #164]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001ee4:	f006 fea2 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001eea:	f7fe f979 	bl	80001e0 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	4924      	ldr	r1, [pc, #144]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001ef8:	4824      	ldr	r0, [pc, #144]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001efa:	f005 fe3a 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001efe:	e104      	b.n	800210a <StateMachineManagment+0xe72>
						else if(inputchar == 'g')
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <StateMachineManagment+0xd1c>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	2b67      	cmp	r3, #103	; 0x67
 8001f08:	d10a      	bne.n	8001f20 <StateMachineManagment+0xc88>
							Robot.EndStation = Robot.EndStationBuffer;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001f0c:	789a      	ldrb	r2, [r3, #2]
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001f10:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <StateMachineManagment+0xce8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <StateMachineManagment+0xd28>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
					break;
 8001f1e:	e0f4      	b.n	800210a <StateMachineManagment+0xe72>
							flagUART = 0;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <StateMachineManagment+0xce8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001f26:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <StateMachineManagment+0xd2c>)
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001f2a:	f006 fe7f 	bl	8008c2c <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001f30:	f7fe f956 	bl	80001e0 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3c:	4912      	ldr	r1, [pc, #72]	; (8001f88 <StateMachineManagment+0xcf0>)
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <StateMachineManagment+0xcf4>)
 8001f40:	f005 fe17 	bl	8007b72 <HAL_UART_Transmit>
					break;
 8001f44:	e0e1      	b.n	800210a <StateMachineManagment+0xe72>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <StateMachineManagment+0xd30>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001f4e:	78da      	ldrb	r2, [r3, #3]
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <StateMachineManagment+0xd34>)
 8001f52:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001f56:	791a      	ldrb	r2, [r3, #4]
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <StateMachineManagment+0xd34>)
 8001f5a:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <StateMachineManagment+0xcf8>)
 8001f5e:	795a      	ldrb	r2, [r3, #5]
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <StateMachineManagment+0xd34>)
 8001f62:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <StateMachineManagment+0xd38>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	220a      	movs	r2, #10
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4817      	ldr	r0, [pc, #92]	; (8001fcc <StateMachineManagment+0xd34>)
 8001f6e:	f000 f947 	bl	8002200 <EEPROMWriteFcn>
					flagUART = 0;
 8001f72:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <StateMachineManagment+0xce8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <StateMachineManagment+0xd28>)
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
					break;
 8001f7e:	e0c9      	b.n	8002114 <StateMachineManagment+0xe7c>
 8001f80:	20000324 	.word	0x20000324
 8001f84:	08009810 	.word	0x08009810
 8001f88:	200002e4 	.word	0x200002e4
 8001f8c:	20000280 	.word	0x20000280
 8001f90:	200002d8 	.word	0x200002d8
 8001f94:	08009570 	.word	0x08009570
 8001f98:	080095a4 	.word	0x080095a4
 8001f9c:	08009838 	.word	0x08009838
 8001fa0:	08009854 	.word	0x08009854
 8001fa4:	08009720 	.word	0x08009720
 8001fa8:	08009870 	.word	0x08009870
 8001fac:	08009538 	.word	0x08009538
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000326 	.word	0x20000326
 8001fb8:	200002df 	.word	0x200002df
 8001fbc:	08009890 	.word	0x08009890
 8001fc0:	200002e1 	.word	0x200002e1
 8001fc4:	0800963c 	.word	0x0800963c
 8001fc8:	20000328 	.word	0x20000328
 8001fcc:	20000330 	.word	0x20000330
 8001fd0:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 8001fd4:	4b55      	ldr	r3, [pc, #340]	; (800212c <StateMachineManagment+0xe94>)
 8001fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d123      	bne.n	8002026 <StateMachineManagment+0xd8e>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 8001fde:	4954      	ldr	r1, [pc, #336]	; (8002130 <StateMachineManagment+0xe98>)
 8001fe0:	4854      	ldr	r0, [pc, #336]	; (8002134 <StateMachineManagment+0xe9c>)
 8001fe2:	f006 fe23 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001fe6:	4853      	ldr	r0, [pc, #332]	; (8002134 <StateMachineManagment+0xe9c>)
 8001fe8:	f7fe f8fa 	bl	80001e0 <strlen>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff4:	494f      	ldr	r1, [pc, #316]	; (8002134 <StateMachineManagment+0xe9c>)
 8001ff6:	4850      	ldr	r0, [pc, #320]	; (8002138 <StateMachineManagment+0xea0>)
 8001ff8:	f005 fdbb 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <StateMachineManagment+0xe94>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 8002002:	f000 f9c3 	bl	800238c <micros>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	494c      	ldr	r1, [pc, #304]	; (800213c <StateMachineManagment+0xea4>)
 800200c:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <StateMachineManagment+0xea8>)
 8002012:	7818      	ldrb	r0, [r3, #0]
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <StateMachineManagment+0xeac>)
 8002016:	7819      	ldrb	r1, [r3, #0]
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <StateMachineManagment+0xeb0>)
 800201a:	799b      	ldrb	r3, [r3, #6]
 800201c:	43db      	mvns	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	f000 f899 	bl	8002158 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 8002026:	f000 f9b1 	bl	800238c <micros>
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <StateMachineManagment+0xea4>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	ebb0 0802 	subs.w	r8, r0, r2
 8002034:	eb61 0903 	sbc.w	r9, r1, r3
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <StateMachineManagment+0xeb0>)
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	461a      	mov	r2, r3
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <StateMachineManagment+0xeb4>)
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	17da      	asrs	r2, r3, #31
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800204e:	460b      	mov	r3, r1
 8002050:	4543      	cmp	r3, r8
 8002052:	4613      	mov	r3, r2
 8002054:	eb73 0309 	sbcs.w	r3, r3, r9
 8002058:	d259      	bcs.n	800210e <StateMachineManagment+0xe76>
					{
						flagUART = 0;
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <StateMachineManagment+0xe94>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 8002060:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <StateMachineManagment+0xeb8>)
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
					}

					break;
 8002066:	e052      	b.n	800210e <StateMachineManagment+0xe76>
				case RobotOperatingPart2:
					if(flagUART == 0)
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <StateMachineManagment+0xe94>)
 800206a:	f993 3000 	ldrsb.w	r3, [r3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d123      	bne.n	80020ba <StateMachineManagment+0xe22>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 8002072:	4938      	ldr	r1, [pc, #224]	; (8002154 <StateMachineManagment+0xebc>)
 8002074:	482f      	ldr	r0, [pc, #188]	; (8002134 <StateMachineManagment+0xe9c>)
 8002076:	f006 fdd9 	bl	8008c2c <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800207a:	482e      	ldr	r0, [pc, #184]	; (8002134 <StateMachineManagment+0xe9c>)
 800207c:	f7fe f8b0 	bl	80001e0 <strlen>
 8002080:	4603      	mov	r3, r0
 8002082:	b29a      	uxth	r2, r3
 8002084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002088:	492a      	ldr	r1, [pc, #168]	; (8002134 <StateMachineManagment+0xe9c>)
 800208a:	482b      	ldr	r0, [pc, #172]	; (8002138 <StateMachineManagment+0xea0>)
 800208c:	f005 fd71 	bl	8007b72 <HAL_UART_Transmit>
						flagUART = 1;
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <StateMachineManagment+0xe94>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 8002096:	f000 f979 	bl	800238c <micros>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <StateMachineManagment+0xea4>)
 80020a0:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <StateMachineManagment+0xea8>)
 80020a6:	7818      	ldrb	r0, [r3, #0]
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <StateMachineManagment+0xeac>)
 80020aa:	7819      	ldrb	r1, [r3, #0]
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <StateMachineManagment+0xeb0>)
 80020ae:	795b      	ldrb	r3, [r3, #5]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	f000 f84f 	bl	8002158 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 80020ba:	f000 f967 	bl	800238c <micros>
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <StateMachineManagment+0xea4>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	1a84      	subs	r4, r0, r2
 80020c6:	eb61 0503 	sbc.w	r5, r1, r3
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <StateMachineManagment+0xeb0>)
 80020cc:	791b      	ldrb	r3, [r3, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <StateMachineManagment+0xeb4>)
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	17da      	asrs	r2, r3, #31
 80020d8:	469a      	mov	sl, r3
 80020da:	4693      	mov	fp, r2
 80020dc:	45a2      	cmp	sl, r4
 80020de:	eb7b 0305 	sbcs.w	r3, fp, r5
 80020e2:	d216      	bcs.n	8002112 <StateMachineManagment+0xe7a>
					{
						Robot.StartStation = Robot.EndStation;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <StateMachineManagment+0xeb0>)
 80020e6:	795a      	ldrb	r2, [r3, #5]
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <StateMachineManagment+0xeb0>)
 80020ea:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <StateMachineManagment+0xe94>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <StateMachineManagment+0xea8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <StateMachineManagment+0xeac>)
 80020f8:	7811      	ldrb	r1, [r2, #0]
 80020fa:	22ff      	movs	r2, #255	; 0xff
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f82b 	bl	8002158 <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <StateMachineManagment+0xeb8>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
					}

					break;
 8002108:	e003      	b.n	8002112 <StateMachineManagment+0xe7a>
					break;
 800210a:	bf00      	nop
 800210c:	e007      	b.n	800211e <StateMachineManagment+0xe86>
					break;
 800210e:	bf00      	nop
 8002110:	e005      	b.n	800211e <StateMachineManagment+0xe86>
					break;
 8002112:	bf00      	nop
			}
			break;
 8002114:	e003      	b.n	800211e <StateMachineManagment+0xe86>
			break;
 8002116:	bf00      	nop
 8002118:	e002      	b.n	8002120 <StateMachineManagment+0xe88>
			break;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <StateMachineManagment+0xe88>
			break;
 800211e:	bf00      	nop
	}
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212a:	bf00      	nop
 800212c:	20000324 	.word	0x20000324
 8002130:	080098ac 	.word	0x080098ac
 8002134:	200002e4 	.word	0x200002e4
 8002138:	20000280 	.word	0x20000280
 800213c:	200002d0 	.word	0x200002d0
 8002140:	20000004 	.word	0x20000004
 8002144:	20000005 	.word	0x20000005
 8002148:	200002d8 	.word	0x200002d8
 800214c:	000f4240 	.word	0x000f4240
 8002150:	200002e1 	.word	0x200002e1
 8002154:	080098d0 	.word	0x080098d0

08002158 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	460b      	mov	r3, r1
 8002164:	71bb      	strb	r3, [r7, #6]
 8002166:	4613      	mov	r3, r2
 8002168:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <MCP23017SetOutput+0x44>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <MCP23017SetOutput+0x44>)
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <MCP23017SetOutput+0x44>)
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002182:	4807      	ldr	r0, [pc, #28]	; (80021a0 <MCP23017SetOutput+0x48>)
 8002184:	f002 f87c 	bl	8004280 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 8002188:	2203      	movs	r2, #3
 800218a:	4904      	ldr	r1, [pc, #16]	; (800219c <MCP23017SetOutput+0x44>)
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MCP23017SetOutput+0x4c>)
 800218e:	f004 fd43 	bl	8006c18 <HAL_SPI_Transmit_IT>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000334 	.word	0x20000334
 80021a0:	40020400 	.word	0x40020400
 80021a4:	20000198 	.word	0x20000198

080021a8 <MCP23017SetInit>:

void MCP23017SetInit()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MCP23017SetInit+0x20>)
 80021b4:	f002 f864 	bl	8004280 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 80021b8:	2203      	movs	r2, #3
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <MCP23017SetInit+0x24>)
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MCP23017SetInit+0x28>)
 80021be:	f004 fd2b 	bl	8006c18 <HAL_SPI_Transmit_IT>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020400 	.word	0x40020400
 80021cc:	20000008 	.word	0x20000008
 80021d0:	20000198 	.word	0x20000198

080021d4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_SPI_TxCpltCallback+0x24>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d105      	bne.n	80021f0 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ea:	4804      	ldr	r0, [pc, #16]	; (80021fc <HAL_SPI_TxCpltCallback+0x28>)
 80021ec:	f002 f848 	bl	8004280 <HAL_GPIO_WritePin>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000198 	.word	0x20000198
 80021fc:	40020400 	.word	0x40020400

08002200 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <EEPROMWriteFcn+0x48>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <EEPROMWriteFcn+0x3e>
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <EEPROMWriteFcn+0x4c>)
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	d10c      	bne.n	800223e <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8002224:	883a      	ldrh	r2, [r7, #0]
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2310      	movs	r3, #16
 8002230:	21a0      	movs	r1, #160	; 0xa0
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <EEPROMWriteFcn+0x4c>)
 8002234:	f002 f982 	bl	800453c <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <EEPROMWriteFcn+0x48>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
	}
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000328 	.word	0x20000328
 800224c:	20000144 	.word	0x20000144

08002250 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af02      	add	r7, sp, #8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <EEPROMReadFcn+0x48>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <EEPROMReadFcn+0x3e>
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <EEPROMReadFcn+0x4c>)
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b20      	cmp	r3, #32
 8002272:	d10c      	bne.n	800228e <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8002274:	883a      	ldrh	r2, [r7, #0]
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2310      	movs	r3, #16
 8002280:	21a0      	movs	r1, #160	; 0xa0
 8002282:	4806      	ldr	r0, [pc, #24]	; (800229c <EEPROMReadFcn+0x4c>)
 8002284:	f002 fa0c 	bl	80046a0 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <EEPROMReadFcn+0x48>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
	}
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000329 	.word	0x20000329
 800229c:	20000144 	.word	0x20000144

080022a0 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80022a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022aa:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <UARTRecieveIT+0x54>)
 80022ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <UARTRecieveIT+0x54>)
 80022b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <UARTRecieveIT+0x58>)
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	4293      	cmp	r3, r2
 80022c0:	d010      	beq.n	80022e4 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <UARTRecieveIT+0x58>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <UARTRecieveIT+0x5c>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <UARTRecieveIT+0x58>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <UARTRecieveIT+0x54>)
 80022d4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80022d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022da:	fb01 f202 	mul.w	r2, r1, r2
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <UARTRecieveIT+0x58>)
 80022e2:	6013      	str	r3, [r2, #0]
	}
	return data;
 80022e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000280 	.word	0x20000280
 80022f8:	20000408 	.word	0x20000408
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002300:	b4b0      	push	{r4, r5, r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10b      	bne.n	8002328 <HAL_TIM_PeriodElapsedCallback+0x28>
		_micro += 65535;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800231a:	1854      	adds	r4, r2, r1
 800231c:	f143 0500 	adc.w	r5, r3, #0
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002322:	e9c3 4500 	strd	r4, r5, [r3]
	else if (htim == &htim3) {
		Temp100Sec[TempPos] = ADCin;
		TempPos++;
		TempPos %=100;
	}
}
 8002326:	e01e      	b.n	8002366 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim == &htim3) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d11a      	bne.n	8002366 <HAL_TIM_PeriodElapsedCallback+0x66>
		Temp100Sec[TempPos] = ADCin;
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002338:	8819      	ldrh	r1, [r3, #0]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800233c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		TempPos++;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800234a:	701a      	strb	r2, [r3, #0]
		TempPos %=100;
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002352:	fba2 1203 	umull	r1, r2, r2, r3
 8002356:	0952      	lsrs	r2, r2, #5
 8002358:	2164      	movs	r1, #100	; 0x64
 800235a:	fb01 f202 	mul.w	r2, r1, r2
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bcb0      	pop	{r4, r5, r7}
 800236e:	4770      	bx	lr
 8002370:	20000238 	.word	0x20000238
 8002374:	200002c8 	.word	0x200002c8
 8002378:	200001f0 	.word	0x200001f0
 800237c:	20000404 	.word	0x20000404
 8002380:	20000338 	.word	0x20000338
 8002384:	2000033c 	.word	0x2000033c
 8002388:	51eb851f 	.word	0x51eb851f

0800238c <micros>:

uint64_t micros() {
 800238c:	b4b0      	push	{r4, r5, r7}
 800238e:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <micros+0x2c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2200      	movs	r2, #0
 8002398:	4618      	mov	r0, r3
 800239a:	4611      	mov	r1, r2
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <micros+0x30>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	1884      	adds	r4, r0, r2
 80023a4:	eb41 0503 	adc.w	r5, r1, r3
 80023a8:	4622      	mov	r2, r4
 80023aa:	462b      	mov	r3, r5
}
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bcb0      	pop	{r4, r5, r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000238 	.word	0x20000238
 80023bc:	200002c8 	.word	0x200002c8

080023c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	//（ Unit is °C）= {(V SENSE — V 25 ) / Avg_Slope} + 25
	Currenttemp = ((ADCin* (3.3 / 4096)- 0.76)/ 0.0025) + 25;
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_ADC_ConvCpltCallback+0x88>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8b1 	bl	8000534 <__aeabi_i2d>
 80023d2:	a317      	add	r3, pc, #92	; (adr r3, 8002430 <HAL_ADC_ConvCpltCallback+0x70>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f916 	bl	8000608 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	a314      	add	r3, pc, #80	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x78>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd ff55 	bl	8000298 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	a312      	add	r3, pc, #72	; (adr r3, 8002440 <HAL_ADC_ConvCpltCallback+0x80>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe fa2e 	bl	800085c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_ADC_ConvCpltCallback+0x8c>)
 800240e:	f7fd ff45 	bl	800029c <__adddf3>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fb07 	bl	8000a2c <__aeabi_d2uiz>
 800241e:	4603      	mov	r3, r0
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_ADC_ConvCpltCallback+0x90>)
 8002424:	801a      	strh	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	66666666 	.word	0x66666666
 8002434:	3f4a6666 	.word	0x3f4a6666
 8002438:	851eb852 	.word	0x851eb852
 800243c:	3fe851eb 	.word	0x3fe851eb
 8002440:	47ae147b 	.word	0x47ae147b
 8002444:	3f647ae1 	.word	0x3f647ae1
 8002448:	20000338 	.word	0x20000338
 800244c:	40390000 	.word	0x40390000
 8002450:	20000406 	.word	0x20000406

08002454 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002470:	e7fe      	b.n	8002470 <Error_Handler+0x8>
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x4c>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x4c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b2:	2007      	movs	r0, #7
 80024b4:	f001 f90e 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_ADC_MspInit+0xa8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d145      	bne.n	8002562 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_ADC_MspInit+0xac>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_ADC_MspInit+0xac>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_ADC_MspInit+0xac>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <HAL_ADC_MspInit+0xb4>)
 80024f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002518:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 800251c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002520:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002528:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002536:	480f      	ldr	r0, [pc, #60]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 8002538:	f001 f90e 	bl	8003758 <HAL_DMA_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8002542:	f7ff ff91 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
 800254c:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_ADC_MspInit+0xb0>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2012      	movs	r0, #18
 8002558:	f001 f8c7 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800255c:	2012      	movs	r0, #18
 800255e:	f001 f8e0 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40012000 	.word	0x40012000
 8002570:	40023800 	.word	0x40023800
 8002574:	200000e4 	.word	0x200000e4
 8002578:	40026410 	.word	0x40026410

0800257c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_I2C_MspInit+0xa4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d13c      	bne.n	8002618 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025cc:	2304      	movs	r3, #4
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4814      	ldr	r0, [pc, #80]	; (8002628 <HAL_I2C_MspInit+0xac>)
 80025d8:	f001 fcce 	bl	8003f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_I2C_MspInit+0xa8>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	201f      	movs	r0, #31
 80025fe:	f001 f874 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002602:	201f      	movs	r0, #31
 8002604:	f001 f88d 	bl	8003722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	2020      	movs	r0, #32
 800260e:	f001 f86c 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002612:	2020      	movs	r0, #32
 8002614:	f001 f885 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40005400 	.word	0x40005400
 8002624:	40023800 	.word	0x40023800
 8002628:	40020400 	.word	0x40020400

0800262c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_SPI_MspInit+0x94>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d133      	bne.n	80026b6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_SPI_MspInit+0x98>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002686:	2338      	movs	r3, #56	; 0x38
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002696:	2306      	movs	r3, #6
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4809      	ldr	r0, [pc, #36]	; (80026c8 <HAL_SPI_MspInit+0x9c>)
 80026a2:	f001 fc69 	bl	8003f78 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	2033      	movs	r0, #51	; 0x33
 80026ac:	f001 f81d 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80026b0:	2033      	movs	r0, #51	; 0x33
 80026b2:	f001 f836 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	; 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40003c00 	.word	0x40003c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400

080026cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_TIM_Base_MspInit+0x80>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d116      	bne.n	800270c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	201d      	movs	r0, #29
 8002700:	f000 fff3 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002704:	201d      	movs	r0, #29
 8002706:	f001 f80c 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800270a:	e01a      	b.n	8002742 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIM_Base_MspInit+0x88>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d115      	bne.n	8002742 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_TIM_Base_MspInit+0x84>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	201a      	movs	r0, #26
 8002738:	f000 ffd7 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800273c:	201a      	movs	r0, #26
 800273e:	f000 fff0 	bl	8003722 <HAL_NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40000400 	.word	0x40000400
 8002750:	40023800 	.word	0x40023800
 8002754:	40014800 	.word	0x40014800

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_UART_MspInit+0x94>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d133      	bne.n	80027e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_UART_MspInit+0x98>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_UART_MspInit+0x98>)
 8002784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0x98>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_UART_MspInit+0x98>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_UART_MspInit+0x98>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_UART_MspInit+0x98>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027b2:	230c      	movs	r3, #12
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c2:	2307      	movs	r3, #7
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4809      	ldr	r0, [pc, #36]	; (80027f4 <HAL_UART_MspInit+0x9c>)
 80027ce:	f001 fbd3 	bl	8003f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2026      	movs	r0, #38	; 0x26
 80027d8:	f000 ff87 	bl	80036ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027dc:	2026      	movs	r0, #38	; 0x26
 80027de:	f000 ffa0 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40004400 	.word	0x40004400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 f916 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <ADC_IRQHandler+0x10>)
 8002852:	f000 f996 	bl	8002b82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000009c 	.word	0x2000009c

08002860 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002866:	f004 fda3 	bl	80073b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000238 	.word	0x20000238

08002874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <TIM3_IRQHandler+0x10>)
 800287a:	f004 fd99 	bl	80073b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200001f0 	.word	0x200001f0

08002888 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <I2C1_EV_IRQHandler+0x10>)
 800288e:	f001 ffc5 	bl	800481c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000144 	.word	0x20000144

0800289c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <I2C1_ER_IRQHandler+0x10>)
 80028a2:	f002 f92c 	bl	8004afe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000144 	.word	0x20000144

080028b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <USART2_IRQHandler+0x10>)
 80028b6:	f005 fa1f 	bl	8007cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000280 	.word	0x20000280

080028c4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <SPI3_IRQHandler+0x10>)
 80028ca:	f004 fa2f 	bl	8006d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000198 	.word	0x20000198

080028d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <DMA2_Stream0_IRQHandler+0x10>)
 80028de:	f001 f8d3 	bl	8003a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000e4 	.word	0x200000e4

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f006 f954 	bl	8008bc8 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20020000 	.word	0x20020000
 800294c:	00000400 	.word	0x00000400
 8002950:	2000040c 	.word	0x2000040c
 8002954:	20000428 	.word	0x20000428

08002958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029a6:	f7ff ffd7 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f006 f913 	bl	8008bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe f9df 	bl	8000d70 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80029c0:	08009958 	.word	0x08009958
  ldr r2, =_sbss
 80029c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029c8:	20000424 	.word	0x20000424

080029cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <DMA1_Stream0_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fe6b 	bl	80036d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fd36 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fe83 	bl	800373e <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 fe4b 	bl	80036ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	20000014 	.word	0x20000014
 8002a70:	20000010 	.word	0x20000010

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000014 	.word	0x20000014
 8002a98:	20000410 	.word	0x20000410

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000410 	.word	0x20000410

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000014 	.word	0x20000014

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e033      	b.n	8002b7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fcd2 	bl	80024c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb68 	bl	8003224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d049      	beq.n	8002c4c <HAL_ADC_IRQHandler+0xca>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d046      	beq.n	8002c4c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12b      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d127      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0220 	bic.w	r2, r2, #32
 8002c16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fbbf 	bl	80023c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0212 	mvn.w	r2, #18
 8002c4a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d057      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x190>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d054      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d139      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d12b      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d124      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11d      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fc0c 	bl	8003520 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 020c 	mvn.w	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f925 	bl	8002f98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f06f 0201 	mvn.w	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d66:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x218>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0220 	mvn.w	r2, #32
 8002d88:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f90e 	bl	8002fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0220 	mvn.w	r2, #32
 8002d98:	601a      	str	r2, [r3, #0]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Start_DMA+0x1e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0ce      	b.n	8002f60 <HAL_ADC_Start_DMA+0x1bc>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d018      	beq.n	8002e0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_ADC_Start_DMA+0x1c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5f      	ldr	r2, [pc, #380]	; (8002f6c <HAL_ADC_Start_DMA+0x1c8>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0c9a      	lsrs	r2, r3, #18
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f9      	bne.n	8002dfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e18:	d107      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f040 8086 	bne.w	8002f46 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d106      	bne.n	8002e88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f023 0206 	bic.w	r2, r3, #6
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
 8002e86:	e002      	b.n	8002e8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HAL_ADC_Start_DMA+0x1cc>)
 8002e98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	4a35      	ldr	r2, [pc, #212]	; (8002f74 <HAL_ADC_Start_DMA+0x1d0>)
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <HAL_ADC_Start_DMA+0x1d4>)
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <HAL_ADC_Start_DMA+0x1d8>)
 8002eb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002eca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	334c      	adds	r3, #76	; 0x4c
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f000 fce2 	bl	80038b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d129      	bne.n	8002f5e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	e020      	b.n	8002f5e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_ADC_Start_DMA+0x1dc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d11b      	bne.n	8002f5e <HAL_ADC_Start_DMA+0x1ba>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d114      	bne.n	8002f5e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e00b      	b.n	8002f5e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000000c 	.word	0x2000000c
 8002f6c:	431bde83 	.word	0x431bde83
 8002f70:	40012300 	.word	0x40012300
 8002f74:	0800341d 	.word	0x0800341d
 8002f78:	080034d7 	.word	0x080034d7
 8002f7c:	080034f3 	.word	0x080034f3
 8002f80:	40012000 	.word	0x40012000

08002f84 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e113      	b.n	8003204 <HAL_ADC_ConfigChannel+0x244>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d925      	bls.n	8003038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68d9      	ldr	r1, [r3, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	3b1e      	subs	r3, #30
 8003002:	2207      	movs	r2, #7
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	4603      	mov	r3, r0
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4403      	add	r3, r0
 800302a:	3b1e      	subs	r3, #30
 800302c:	409a      	lsls	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e022      	b.n	800307e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6919      	ldr	r1, [r3, #16]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	2207      	movs	r2, #7
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6919      	ldr	r1, [r3, #16]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	4603      	mov	r3, r0
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4403      	add	r3, r0
 8003074:	409a      	lsls	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d824      	bhi.n	80030d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b05      	subs	r3, #5
 8003098:	221f      	movs	r2, #31
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	400a      	ands	r2, r1
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	3b05      	subs	r3, #5
 80030c2:	fa00 f203 	lsl.w	r2, r0, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
 80030ce:	e04c      	b.n	800316a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d824      	bhi.n	8003122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b23      	subs	r3, #35	; 0x23
 80030ea:	221f      	movs	r2, #31
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43da      	mvns	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	400a      	ands	r2, r1
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	3b23      	subs	r3, #35	; 0x23
 8003114:	fa00 f203 	lsl.w	r2, r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
 8003120:	e023      	b.n	800316a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b41      	subs	r3, #65	; 0x41
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	; 0x41
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316a:	4b29      	ldr	r3, [pc, #164]	; (8003210 <HAL_ADC_ConfigChannel+0x250>)
 800316c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <HAL_ADC_ConfigChannel+0x254>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10f      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1d8>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b12      	cmp	r3, #18
 800317e:	d10b      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_ADC_ConfigChannel+0x254>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12b      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x23a>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_ADC_ConfigChannel+0x258>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x1f4>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b11      	cmp	r3, #17
 80031b2:	d122      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a11      	ldr	r2, [pc, #68]	; (8003218 <HAL_ADC_ConfigChannel+0x258>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d111      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_ADC_ConfigChannel+0x25c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_ADC_ConfigChannel+0x260>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	0c9a      	lsrs	r2, r3, #18
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40012300 	.word	0x40012300
 8003214:	40012000 	.word	0x40012000
 8003218:	10000012 	.word	0x10000012
 800321c:	2000000c 	.word	0x2000000c
 8003220:	431bde83 	.word	0x431bde83

08003224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322c:	4b79      	ldr	r3, [pc, #484]	; (8003414 <ADC_Init+0x1f0>)
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800327c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	4a58      	ldr	r2, [pc, #352]	; (8003418 <ADC_Init+0x1f4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e00f      	b.n	8003322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0202 	bic.w	r2, r2, #2
 8003330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	005a      	lsls	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800336e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	3b01      	subs	r3, #1
 800337c:	035a      	lsls	r2, r3, #13
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e007      	b.n	8003398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	051a      	lsls	r2, r3, #20
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033da:	025a      	lsls	r2, r3, #9
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	029a      	lsls	r2, r3, #10
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	0f000001 	.word	0x0f000001

0800341c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d13c      	bne.n	80034b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d12b      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003454:	2b00      	cmp	r3, #0
 8003456:	d127      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003470:	2b00      	cmp	r3, #0
 8003472:	d119      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0220 	bic.w	r2, r2, #32
 8003482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fe ff89 	bl	80023c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ae:	e00e      	b.n	80034ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fd75 	bl	8002fac <HAL_ADC_ErrorCallback>
}
 80034c2:	e004      	b.n	80034ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff fd4d 	bl	8002f84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fd4a 	bl	8002fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60d3      	str	r3, [r2, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	; (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a0:	d301      	bcc.n	80036a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00f      	b.n	80036c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <SysTick_Config+0x40>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ae:	210f      	movs	r1, #15
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	f7ff ff8e 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <SysTick_Config+0x40>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036be:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <SysTick_Config+0x40>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000e010 	.word	0xe000e010

080036d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff29 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036fc:	f7ff ff3e 	bl	800357c <__NVIC_GetPriorityGrouping>
 8003700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff8e 	bl	8003628 <NVIC_EncodePriority>
 800370c:	4602      	mov	r2, r0
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5d 	bl	80035d4 <__NVIC_SetPriority>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff31 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffa2 	bl	8003690 <SysTick_Config>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff f99a 	bl	8002a9c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e099      	b.n	80038a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003794:	e00f      	b.n	80037b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003796:	f7ff f981 	bl	8002a9c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d908      	bls.n	80037b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2203      	movs	r2, #3
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e078      	b.n	80038a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e8      	bne.n	8003796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_DMA_Init+0x158>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4313      	orrs	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0307 	bic.w	r3, r3, #7
 8003836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b04      	cmp	r3, #4
 8003848:	d117      	bne.n	800387a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb0f 	bl	8003e80 <DMA_CheckFifoParam>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003876:	2301      	movs	r3, #1
 8003878:	e016      	b.n	80038a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fac6 	bl	8003e14 <DMA_CalcBaseAndBitshift>
 8003888:	4603      	mov	r3, r0
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	223f      	movs	r2, #63	; 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	f010803f 	.word	0xf010803f

080038b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_DMA_Start_IT+0x26>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e040      	b.n	800395c <HAL_DMA_Start_IT+0xa8>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d12f      	bne.n	800394e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa58 	bl	8003db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	223f      	movs	r2, #63	; 0x3f
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0216 	orr.w	r2, r2, #22
 8003922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0208 	orr.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e005      	b.n	800395a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003956:	2302      	movs	r3, #2
 8003958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003972:	f7ff f893 	bl	8002a9c <HAL_GetTick>
 8003976:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d008      	beq.n	8003996 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e052      	b.n	8003a3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0216 	bic.w	r2, r2, #22
 80039a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_DMA_Abort+0x62>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0208 	bic.w	r2, r2, #8
 80039d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e6:	e013      	b.n	8003a10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e8:	f7ff f858 	bl	8002a9c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d90c      	bls.n	8003a10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e015      	b.n	8003a3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e4      	bne.n	80039e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	223f      	movs	r2, #63	; 0x3f
 8003a24:	409a      	lsls	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00c      	b.n	8003a7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2205      	movs	r2, #5
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a94:	4b8e      	ldr	r3, [pc, #568]	; (8003cd0 <HAL_DMA_IRQHandler+0x248>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a8e      	ldr	r2, [pc, #568]	; (8003cd4 <HAL_DMA_IRQHandler+0x24c>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01a      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	2204      	movs	r2, #4
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d012      	beq.n	8003b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	2210      	movs	r2, #16
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d043      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2210      	movs	r2, #16
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d024      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e01f      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e016      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0208 	bic.w	r2, r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 808f 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8087 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	2220      	movs	r2, #32
 8003c20:	409a      	lsls	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d136      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0216 	bic.w	r2, r2, #22
 8003c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_DMA_IRQHandler+0x1da>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0208 	bic.w	r2, r2, #8
 8003c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	223f      	movs	r2, #63	; 0x3f
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d07e      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
        }
        return;
 8003c9e:	e079      	b.n	8003d94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01d      	beq.n	8003cea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10d      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d031      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
 8003ccc:	e02c      	b.n	8003d28 <HAL_DMA_IRQHandler+0x2a0>
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d023      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
 8003ce8:	e01e      	b.n	8003d28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0210 	bic.w	r2, r2, #16
 8003d06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d032      	beq.n	8003d96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d022      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2205      	movs	r2, #5
 8003d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d307      	bcc.n	8003d70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f2      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x2cc>
 8003d6e:	e000      	b.n	8003d72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
 8003d92:	e000      	b.n	8003d96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d94:	bf00      	nop
    }
  }
}
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003daa:	b2db      	uxtb	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d108      	bne.n	8003df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003df6:	e007      	b.n	8003e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	3b10      	subs	r3, #16
 8003e24:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <DMA_CalcBaseAndBitshift+0x64>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <DMA_CalcBaseAndBitshift+0x68>)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d909      	bls.n	8003e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
 8003e54:	e007      	b.n	8003e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	aaaaaaab 	.word	0xaaaaaaab
 8003e7c:	0800990c 	.word	0x0800990c

08003e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11f      	bne.n	8003eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d856      	bhi.n	8003f4e <DMA_CheckFifoParam+0xce>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <DMA_CheckFifoParam+0x28>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ecb 	.word	0x08003ecb
 8003eb0:	08003eb9 	.word	0x08003eb9
 8003eb4:	08003f4f 	.word	0x08003f4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d046      	beq.n	8003f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec8:	e043      	b.n	8003f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed2:	d140      	bne.n	8003f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e03d      	b.n	8003f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	d121      	bne.n	8003f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d837      	bhi.n	8003f5a <DMA_CheckFifoParam+0xda>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <DMA_CheckFifoParam+0x70>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f07 	.word	0x08003f07
 8003ef8:	08003f01 	.word	0x08003f01
 8003efc:	08003f19 	.word	0x08003f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      break;
 8003f04:	e030      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d025      	beq.n	8003f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f16:	e022      	b.n	8003f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f20:	d11f      	bne.n	8003f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f26:	e01c      	b.n	8003f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d903      	bls.n	8003f36 <DMA_CheckFifoParam+0xb6>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d003      	beq.n	8003f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f34:	e018      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3a:	e015      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e00b      	b.n	8003f66 <DMA_CheckFifoParam+0xe6>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e00a      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;
 8003f52:	bf00      	nop
 8003f54:	e008      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;
 8003f56:	bf00      	nop
 8003f58:	e006      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e004      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
    }
  } 
  
  return status; 
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop

08003f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	e159      	b.n	8004248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f94:	2201      	movs	r2, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	f040 8148 	bne.w	8004242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d005      	beq.n	8003fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d130      	bne.n	800402c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004000:	2201      	movs	r2, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 0201 	and.w	r2, r3, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b03      	cmp	r3, #3
 8004036:	d017      	beq.n	8004068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2203      	movs	r2, #3
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d123      	bne.n	80040bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	220f      	movs	r2, #15
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	08da      	lsrs	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3208      	adds	r2, #8
 80040b6:	69b9      	ldr	r1, [r7, #24]
 80040b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0203 	and.w	r2, r3, #3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a2 	beq.w	8004242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <HAL_GPIO_Init+0x2e8>)
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	4a56      	ldr	r2, [pc, #344]	; (8004260 <HAL_GPIO_Init+0x2e8>)
 8004108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800410c:	6453      	str	r3, [r2, #68]	; 0x44
 800410e:	4b54      	ldr	r3, [pc, #336]	; (8004260 <HAL_GPIO_Init+0x2e8>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800411a:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_GPIO_Init+0x2ec>)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	3302      	adds	r3, #2
 8004122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	220f      	movs	r2, #15
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a49      	ldr	r2, [pc, #292]	; (8004268 <HAL_GPIO_Init+0x2f0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d019      	beq.n	800417a <HAL_GPIO_Init+0x202>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a48      	ldr	r2, [pc, #288]	; (800426c <HAL_GPIO_Init+0x2f4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_Init+0x1fe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a47      	ldr	r2, [pc, #284]	; (8004270 <HAL_GPIO_Init+0x2f8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00d      	beq.n	8004172 <HAL_GPIO_Init+0x1fa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a46      	ldr	r2, [pc, #280]	; (8004274 <HAL_GPIO_Init+0x2fc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <HAL_GPIO_Init+0x1f6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a45      	ldr	r2, [pc, #276]	; (8004278 <HAL_GPIO_Init+0x300>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_GPIO_Init+0x1f2>
 8004166:	2304      	movs	r3, #4
 8004168:	e008      	b.n	800417c <HAL_GPIO_Init+0x204>
 800416a:	2307      	movs	r3, #7
 800416c:	e006      	b.n	800417c <HAL_GPIO_Init+0x204>
 800416e:	2303      	movs	r3, #3
 8004170:	e004      	b.n	800417c <HAL_GPIO_Init+0x204>
 8004172:	2302      	movs	r3, #2
 8004174:	e002      	b.n	800417c <HAL_GPIO_Init+0x204>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_GPIO_Init+0x204>
 800417a:	2300      	movs	r3, #0
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f002 0203 	and.w	r2, r2, #3
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4093      	lsls	r3, r2
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800418c:	4935      	ldr	r1, [pc, #212]	; (8004264 <HAL_GPIO_Init+0x2ec>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800419a:	4b38      	ldr	r3, [pc, #224]	; (800427c <HAL_GPIO_Init+0x304>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_GPIO_Init+0x304>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_GPIO_Init+0x304>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <HAL_GPIO_Init+0x304>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_GPIO_Init+0x304>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004212:	4a1a      	ldr	r2, [pc, #104]	; (800427c <HAL_GPIO_Init+0x304>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004218:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_GPIO_Init+0x304>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <HAL_GPIO_Init+0x304>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	f67f aea2 	bls.w	8003f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	40013800 	.word	0x40013800
 8004268:	40020000 	.word	0x40020000
 800426c:	40020400 	.word	0x40020400
 8004270:	40020800 	.word	0x40020800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40021000 	.word	0x40021000
 800427c:	40013c00 	.word	0x40013c00

08004280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
 800428c:	4613      	mov	r3, r2
 800428e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004290:	787b      	ldrb	r3, [r7, #1]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800429c:	e003      	b.n	80042a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	041a      	lsls	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e12b      	b.n	800451e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe f94e 	bl	800257c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004318:	f002 fbcc 	bl	8006ab4 <HAL_RCC_GetPCLK1Freq>
 800431c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a81      	ldr	r2, [pc, #516]	; (8004528 <HAL_I2C_Init+0x274>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d807      	bhi.n	8004338 <HAL_I2C_Init+0x84>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_I2C_Init+0x278>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e006      	b.n	8004346 <HAL_I2C_Init+0x92>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a7d      	ldr	r2, [pc, #500]	; (8004530 <HAL_I2C_Init+0x27c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0e7      	b.n	800451e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a78      	ldr	r2, [pc, #480]	; (8004534 <HAL_I2C_Init+0x280>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_I2C_Init+0x274>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <HAL_I2C_Init+0xd4>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	e009      	b.n	800439c <HAL_I2C_Init+0xe8>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_I2C_Init+0x284>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	495c      	ldr	r1, [pc, #368]	; (8004528 <HAL_I2C_Init+0x274>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d819      	bhi.n	80043f0 <HAL_I2C_Init+0x13c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e59      	subs	r1, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d0:	400b      	ands	r3, r1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_Init+0x138>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e59      	subs	r1, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e051      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e04f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_I2C_Init+0x168>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	fbb0 f3f3 	udiv	r3, r0, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_I2C_Init+0x18e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Init+0x196>
 8004446:	2301      	movs	r3, #1
 8004448:	e022      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_Init+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	440b      	add	r3, r1
 8004460:	fbb0 f3f3 	udiv	r3, r0, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6911      	ldr	r1, [r2, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	000186a0 	.word	0x000186a0
 800452c:	001e847f 	.word	0x001e847f
 8004530:	003d08ff 	.word	0x003d08ff
 8004534:	431bde83 	.word	0x431bde83
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	f040 808e 	bne.w	8004684 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004568:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_I2C_Mem_Write_IT+0x158>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_I2C_Mem_Write_IT+0x15c>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	0a1a      	lsrs	r2, r3, #8
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009a      	lsls	r2, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3b01      	subs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e064      	b.n	8004686 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d0db      	beq.n	8004582 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2C_Mem_Write_IT+0x9c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e056      	b.n	8004686 <HAL_I2C_Mem_Write_IT+0x14a>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d007      	beq.n	80045fe <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2240      	movs	r2, #64	; 0x40
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_I2C_Mem_Write_IT+0x160>)
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004640:	897a      	ldrh	r2, [r7, #10]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004646:	893a      	ldrh	r2, [r7, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004666:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800467e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	2000000c 	.word	0x2000000c
 8004698:	14f8b589 	.word	0x14f8b589
 800469c:	ffff0000 	.word	0xffff0000

080046a0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	4608      	mov	r0, r1
 80046aa:	4611      	mov	r1, r2
 80046ac:	461a      	mov	r2, r3
 80046ae:	4603      	mov	r3, r0
 80046b0:	817b      	strh	r3, [r7, #10]
 80046b2:	460b      	mov	r3, r1
 80046b4:	813b      	strh	r3, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	f040 809a 	bne.w	8004800 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_I2C_Mem_Read_IT+0x170>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	4a50      	ldr	r2, [pc, #320]	; (8004814 <HAL_I2C_Mem_Read_IT+0x174>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	0a1a      	lsrs	r2, r3, #8
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009a      	lsls	r2, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e070      	b.n	8004802 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d0db      	beq.n	80046e6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_Mem_Read_IT+0x9c>
 8004738:	2302      	movs	r3, #2
 800473a:	e062      	b.n	8004802 <HAL_I2C_Mem_Read_IT+0x162>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d007      	beq.n	8004762 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2222      	movs	r2, #34	; 0x22
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2240      	movs	r2, #64	; 0x40
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_I2C_Mem_Read_IT+0x178>)
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80047a4:	897a      	ldrh	r2, [r7, #10]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80047aa:	893a      	ldrh	r2, [r7, #8]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ca:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047fa:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c
 8004814:	14f8b589 	.word	0x14f8b589
 8004818:	ffff0000 	.word	0xffff0000

0800481c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b10      	cmp	r3, #16
 800484a:	d003      	beq.n	8004854 <HAL_I2C_EV_IRQHandler+0x38>
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	f040 80c1 	bne.w	80049d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <HAL_I2C_EV_IRQHandler+0x6e>
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004874:	d003      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x62>
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800487c:	d101      	bne.n	8004882 <HAL_I2C_EV_IRQHandler+0x66>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x68>
 8004882:	2300      	movs	r3, #0
 8004884:	2b01      	cmp	r3, #1
 8004886:	f000 8132 	beq.w	8004aee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x92>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	0a5b      	lsrs	r3, r3, #9
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f001 fc7b 	bl	800619c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fd83 	bl	80053b2 <I2C_Master_SB>
 80048ac:	e092      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_I2C_EV_IRQHandler+0xb2>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fdf9 	bl	80054be <I2C_Master_ADD10>
 80048cc:	e082      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0xd2>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0a5b      	lsrs	r3, r3, #9
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fe13 	bl	8005512 <I2C_Master_ADDR>
 80048ec:	e072      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03b      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004908:	f000 80f3 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	09db      	lsrs	r3, r3, #7
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00f      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x11c>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	0a9b      	lsrs	r3, r3, #10
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x11c>
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f9f3 	bl	8004d1c <I2C_MasterTransmit_TXE>
 8004936:	e04d      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80d6 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	0a5b      	lsrs	r3, r3, #9
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80cf 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004954:	7bbb      	ldrb	r3, [r7, #14]
 8004956:	2b21      	cmp	r3, #33	; 0x21
 8004958:	d103      	bne.n	8004962 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa7a 	bl	8004e54 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004960:	e0c7      	b.n	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	f040 80c4 	bne.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fae8 	bl	8004f40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004970:	e0bf      	b.n	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004980:	f000 80b7 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00f      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x194>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x194>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb5d 	bl	8005068 <I2C_MasterReceive_RXNE>
 80049ae:	e011      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 809a 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	0a5b      	lsrs	r3, r3, #9
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8093 	beq.w	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fc06 	bl	80051de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049d2:	e08e      	b.n	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049d4:	e08d      	b.n	8004af2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e007      	b.n	80049f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x20e>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 ffc4 	bl	80059b0 <I2C_Slave_ADDR>
 8004a28:	e066      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_I2C_EV_IRQHandler+0x22e>
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	0a5b      	lsrs	r3, r3, #9
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fffe 	bl	8005a44 <I2C_Slave_STOPF>
 8004a48:	e056      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	2b21      	cmp	r3, #33	; 0x21
 8004a4e:	d002      	beq.n	8004a56 <HAL_I2C_EV_IRQHandler+0x23a>
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	2b29      	cmp	r3, #41	; 0x29
 8004a54:	d125      	bne.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	09db      	lsrs	r3, r3, #7
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00f      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x266>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	0a9b      	lsrs	r3, r3, #10
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x266>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 feda 	bl	8005834 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a80:	e039      	b.n	8004af6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d033      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02d      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 ff07 	bl	80058ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aa0:	e029      	b.n	8004af6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00f      	beq.n	8004ace <HAL_I2C_EV_IRQHandler+0x2b2>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	0a9b      	lsrs	r3, r3, #10
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HAL_I2C_EV_IRQHandler+0x2b2>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ff12 	bl	80058f0 <I2C_SlaveReceive_RXNE>
 8004acc:	e014      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 ff40 	bl	800596c <I2C_SlaveReceive_BTF>
 8004aec:	e004      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08a      	sub	sp, #40	; 0x28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b20:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <HAL_I2C_ER_IRQHandler+0x4e>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b4a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	0a5b      	lsrs	r3, r3, #9
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <HAL_I2C_ER_IRQHandler+0x78>
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	f043 0302 	orr.w	r3, r3, #2
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	0a9b      	lsrs	r3, r3, #10
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03f      	beq.n	8004c02 <HAL_I2C_ER_IRQHandler+0x104>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d039      	beq.n	8004c02 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b8e:	7efb      	ldrb	r3, [r7, #27]
 8004b90:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ba8:	7ebb      	ldrb	r3, [r7, #26]
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d112      	bne.n	8004bd4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	2b21      	cmp	r3, #33	; 0x21
 8004bb8:	d008      	beq.n	8004bcc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	2b29      	cmp	r3, #41	; 0x29
 8004bbe:	d005      	beq.n	8004bcc <HAL_I2C_ER_IRQHandler+0xce>
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b28      	cmp	r3, #40	; 0x28
 8004bc4:	d106      	bne.n	8004bd4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b21      	cmp	r3, #33	; 0x21
 8004bca:	d103      	bne.n	8004bd4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 f869 	bl	8005ca4 <I2C_Slave_AF>
 8004bd2:	e016      	b.n	8004c02 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bdc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004be6:	7efb      	ldrb	r3, [r7, #27]
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d002      	beq.n	8004bf2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004bec:	7efb      	ldrb	r3, [r7, #27]
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d107      	bne.n	8004c02 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c00:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	0adb      	lsrs	r3, r3, #11
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <HAL_I2C_ER_IRQHandler+0x12e>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004c2a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f8a0 	bl	8005d84 <I2C_ITError>
  }
}
 8004c44:	bf00      	nop
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d150      	bne.n	8004de4 <I2C_MasterTransmit_TXE+0xc8>
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b21      	cmp	r3, #33	; 0x21
 8004d46:	d14d      	bne.n	8004de4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d01d      	beq.n	8004d8a <I2C_MasterTransmit_TXE+0x6e>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d01a      	beq.n	8004d8a <I2C_MasterTransmit_TXE+0x6e>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d5a:	d016      	beq.n	8004d8a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2211      	movs	r2, #17
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff62 	bl	8004c4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d88:	e060      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d98:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d107      	bne.n	8004dd4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff7d 	bl	8004ccc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dd2:	e03b      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff35 	bl	8004c4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004de2:	e033      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b21      	cmp	r3, #33	; 0x21
 8004de8:	d005      	beq.n	8004df6 <I2C_MasterTransmit_TXE+0xda>
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d12d      	bne.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b22      	cmp	r3, #34	; 0x22
 8004df4:	d12a      	bne.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e10:	e01c      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d103      	bne.n	8004e26 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f88e 	bl	8004f40 <I2C_MemoryTransmit_TXE_BTF>
}
 8004e24:	e012      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e4a:	e7ff      	b.n	8004e4c <I2C_MasterTransmit_TXE+0x130>
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b21      	cmp	r3, #33	; 0x21
 8004e6c:	d164      	bne.n	8004f38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e9c:	e04c      	b.n	8004f38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d01d      	beq.n	8004ee0 <I2C_MasterTransmit_BTF+0x8c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d01a      	beq.n	8004ee0 <I2C_MasterTransmit_BTF+0x8c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eb0:	d016      	beq.n	8004ee0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ec0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2211      	movs	r2, #17
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff feb7 	bl	8004c4c <HAL_I2C_MasterTxCpltCallback>
}
 8004ede:	e02b      	b.n	8004f38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d107      	bne.n	8004f2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fed2 	bl	8004ccc <HAL_I2C_MemTxCpltCallback>
}
 8004f28:	e006      	b.n	8004f38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fe8a 	bl	8004c4c <HAL_I2C_MasterTxCpltCallback>
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11d      	bne.n	8004f94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10b      	bne.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f76:	e073      	b.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	121b      	asrs	r3, r3, #8
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f92:	e065      	b.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10b      	bne.n	8004fb4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fb2:	e055      	b.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d151      	bne.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b22      	cmp	r3, #34	; 0x22
 8004fc0:	d10d      	bne.n	8004fde <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fdc:	e040      	b.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b21      	cmp	r3, #33	; 0x21
 8004fec:	d112      	bne.n	8005014 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005012:	e025      	b.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d120      	bne.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b21      	cmp	r3, #33	; 0x21
 8005022:	d11d      	bne.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005032:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005042:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fe36 	bl	8004ccc <HAL_I2C_MemTxCpltCallback>
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b22      	cmp	r3, #34	; 0x22
 800507a:	f040 80ac 	bne.w	80051d6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d921      	bls.n	80050d0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	f040 808c 	bne.w	80051d6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80050ce:	e082      	b.n	80051d6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d075      	beq.n	80051c4 <I2C_MasterReceive_RXNE+0x15c>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d002      	beq.n	80050e4 <I2C_MasterReceive_RXNE+0x7c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d16f      	bne.n	80051c4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 f827 	bl	8006138 <I2C_WaitOnSTOPRequestThroughIT>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d142      	bne.n	8005176 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d10a      	bne.n	8005160 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fdc1 	bl	8004ce0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800515e:	e03a      	b.n	80051d6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2212      	movs	r2, #18
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fd76 	bl	8004c60 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005174:	e02f      	b.n	80051d6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005184:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fd99 	bl	8004cf4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051c2:	e008      	b.n	80051d6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	605a      	str	r2, [r3, #4]
}
 80051d4:	e7ff      	b.n	80051d6 <I2C_MasterReceive_RXNE+0x16e>
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d11b      	bne.n	800522e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005204:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800522c:	e0bd      	b.n	80053aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b03      	cmp	r3, #3
 8005236:	d129      	bne.n	800528c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005246:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d00a      	beq.n	8005264 <I2C_MasterReceive_BTF+0x86>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d007      	beq.n	8005264 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005262:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800528a:	e08e      	b.n	80053aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d176      	bne.n	8005384 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d002      	beq.n	80052a2 <I2C_MasterReceive_BTF+0xc4>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d108      	bne.n	80052b4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e019      	b.n	80052e8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d002      	beq.n	80052c0 <I2C_MasterReceive_BTF+0xe2>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d108      	bne.n	80052d2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e00a      	b.n	80052e8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d007      	beq.n	80052e8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005342:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d10a      	bne.n	800536e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fcba 	bl	8004ce0 <HAL_I2C_MemRxCpltCallback>
}
 800536c:	e01d      	b.n	80053aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2212      	movs	r2, #18
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fc6f 	bl	8004c60 <HAL_I2C_MasterRxCpltCallback>
}
 8005382:	e012      	b.n	80053aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d117      	bne.n	80053f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80053e0:	e067      	b.n	80054b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]
}
 80053f4:	e05d      	b.n	80054b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fe:	d133      	bne.n	8005468 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b21      	cmp	r3, #33	; 0x21
 800540a:	d109      	bne.n	8005420 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800541c:	611a      	str	r2, [r3, #16]
 800541e:	e008      	b.n	8005432 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <I2C_Master_SB+0x92>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d032      	beq.n	80054b2 <I2C_Master_SB+0x100>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d02d      	beq.n	80054b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005464:	605a      	str	r2, [r3, #4]
}
 8005466:	e024      	b.n	80054b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10e      	bne.n	800548e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	b29b      	uxth	r3, r3
 8005476:	11db      	asrs	r3, r3, #7
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f003 0306 	and.w	r3, r3, #6
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f063 030f 	orn	r3, r3, #15
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]
}
 800548c:	e011      	b.n	80054b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005492:	2b01      	cmp	r3, #1
 8005494:	d10d      	bne.n	80054b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	b29b      	uxth	r3, r3
 800549c:	11db      	asrs	r3, r3, #7
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 0306 	and.w	r3, r3, #6
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f063 030e 	orn	r3, r3, #14
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	611a      	str	r2, [r3, #16]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <I2C_Master_ADD10+0x26>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d108      	bne.n	80054f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <I2C_Master_ADD10+0x48>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005504:	605a      	str	r2, [r3, #4]
  }
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005512:	b480      	push	{r7}
 8005514:	b091      	sub	sp, #68	; 0x44
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b22      	cmp	r3, #34	; 0x22
 800553a:	f040 8169 	bne.w	8005810 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <I2C_Master_ADDR+0x54>
 8005546:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d10b      	bne.n	8005566 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554e:	2300      	movs	r3, #0
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	e160      	b.n	8005828 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11d      	bne.n	80055aa <I2C_Master_ADDR+0x98>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005576:	d118      	bne.n	80055aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	651a      	str	r2, [r3, #80]	; 0x50
 80055a8:	e13e      	b.n	8005828 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d113      	bne.n	80055dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e115      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	f040 808a 	bne.w	80056fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ee:	d137      	bne.n	8005660 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560e:	d113      	bne.n	8005638 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	e0e7      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005638:	2300      	movs	r3, #0
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e0d3      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	2b08      	cmp	r3, #8
 8005664:	d02e      	beq.n	80056c4 <I2C_Master_ADDR+0x1b2>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b20      	cmp	r3, #32
 800566a:	d02b      	beq.n	80056c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	2b12      	cmp	r3, #18
 8005670:	d102      	bne.n	8005678 <I2C_Master_ADDR+0x166>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b01      	cmp	r3, #1
 8005676:	d125      	bne.n	80056c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b04      	cmp	r3, #4
 800567c:	d00e      	beq.n	800569c <I2C_Master_ADDR+0x18a>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b02      	cmp	r3, #2
 8005682:	d00b      	beq.n	800569c <I2C_Master_ADDR+0x18a>
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	2b10      	cmp	r3, #16
 8005688:	d008      	beq.n	800569c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e007      	b.n	80056ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	e0a1      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e085      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d14d      	bne.n	80057a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b04      	cmp	r3, #4
 800570a:	d016      	beq.n	800573a <I2C_Master_ADDR+0x228>
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	2b02      	cmp	r3, #2
 8005710:	d013      	beq.n	800573a <I2C_Master_ADDR+0x228>
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	2b10      	cmp	r3, #16
 8005716:	d010      	beq.n	800573a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005726:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e007      	b.n	800574a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005748:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005758:	d117      	bne.n	800578a <I2C_Master_ADDR+0x278>
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005760:	d00b      	beq.n	800577a <I2C_Master_ADDR+0x268>
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b01      	cmp	r3, #1
 8005766:	d008      	beq.n	800577a <I2C_Master_ADDR+0x268>
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2b08      	cmp	r3, #8
 800576c:	d005      	beq.n	800577a <I2C_Master_ADDR+0x268>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	2b10      	cmp	r3, #16
 8005772:	d002      	beq.n	800577a <I2C_Master_ADDR+0x268>
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	2b20      	cmp	r3, #32
 8005778:	d107      	bne.n	800578a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005788:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	e032      	b.n	8005808 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c0:	d117      	bne.n	80057f2 <I2C_Master_ADDR+0x2e0>
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c8:	d00b      	beq.n	80057e2 <I2C_Master_ADDR+0x2d0>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d008      	beq.n	80057e2 <I2C_Master_ADDR+0x2d0>
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d005      	beq.n	80057e2 <I2C_Master_ADDR+0x2d0>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d002      	beq.n	80057e2 <I2C_Master_ADDR+0x2d0>
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d107      	bne.n	80057f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800580e:	e00b      	b.n	8005828 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	e7ff      	b.n	8005828 <I2C_Master_ADDR+0x316>
 8005828:	bf00      	nop
 800582a:	3744      	adds	r7, #68	; 0x44
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005842:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d02b      	beq.n	80058a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d114      	bne.n	80058a6 <I2C_SlaveTransmit_TXE+0x72>
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b29      	cmp	r3, #41	; 0x29
 8005880:	d111      	bne.n	80058a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005890:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2228      	movs	r2, #40	; 0x28
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff f9e7 	bl	8004c74 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d02c      	beq.n	8005964 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d114      	bne.n	8005964 <I2C_SlaveReceive_RXNE+0x74>
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b2a      	cmp	r3, #42	; 0x2a
 800593e:	d111      	bne.n	8005964 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2222      	movs	r2, #34	; 0x22
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2228      	movs	r2, #40	; 0x28
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff f992 	bl	8004c88 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d012      	beq.n	80059a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ca:	2b28      	cmp	r3, #40	; 0x28
 80059cc:	d127      	bne.n	8005a1e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	09db      	lsrs	r3, r3, #7
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	81bb      	strh	r3, [r7, #12]
 8005a00:	e002      	b.n	8005a08 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a10:	89ba      	ldrh	r2, [r7, #12]
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff f940 	bl	8004c9c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a1c:	e00e      	b.n	8005a3c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a52:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a62:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a90:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa0:	d172      	bne.n	8005b88 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b22      	cmp	r3, #34	; 0x22
 8005aa6:	d002      	beq.n	8005aae <I2C_Slave_STOPF+0x6a>
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d135      	bne.n	8005b1a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe f958 	bl	8003d9c <HAL_DMA_GetState>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d049      	beq.n	8005b86 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	4a69      	ldr	r2, [pc, #420]	; (8005c9c <I2C_Slave_STOPF+0x258>)
 8005af8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fd ffa0 	bl	8003a44 <HAL_DMA_Abort_IT>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d03d      	beq.n	8005b86 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b18:	e035      	b.n	8005b86 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0204 	orr.w	r2, r3, #4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe f922 	bl	8003d9c <HAL_DMA_GetState>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d014      	beq.n	8005b88 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	4a4e      	ldr	r2, [pc, #312]	; (8005c9c <I2C_Slave_STOPF+0x258>)
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd ff6a 	bl	8003a44 <HAL_DMA_Abort_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	e000      	b.n	8005b88 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b86:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d03e      	beq.n	8005c10 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d112      	bne.n	8005bc6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d112      	bne.n	8005bfa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8b3 	bl	8005d84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c1e:	e039      	b.n	8005c94 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b2a      	cmp	r3, #42	; 0x2a
 8005c24:	d109      	bne.n	8005c3a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2228      	movs	r2, #40	; 0x28
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff f827 	bl	8004c88 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b28      	cmp	r3, #40	; 0x28
 8005c44:	d111      	bne.n	8005c6a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <I2C_Slave_STOPF+0x25c>)
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff f828 	bl	8004cb8 <HAL_I2C_ListenCpltCallback>
}
 8005c68:	e014      	b.n	8005c94 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	d002      	beq.n	8005c78 <I2C_Slave_STOPF+0x234>
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b22      	cmp	r3, #34	; 0x22
 8005c76:	d10d      	bne.n	8005c94 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fe fffa 	bl	8004c88 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c94:	bf00      	nop
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08005fe9 	.word	0x08005fe9
 8005ca0:	ffff0000 	.word	0xffff0000

08005ca4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d002      	beq.n	8005cc6 <I2C_Slave_AF+0x22>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d129      	bne.n	8005d1a <I2C_Slave_AF+0x76>
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b28      	cmp	r3, #40	; 0x28
 8005cca:	d126      	bne.n	8005d1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a2c      	ldr	r2, [pc, #176]	; (8005d80 <I2C_Slave_AF+0xdc>)
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe ffd0 	bl	8004cb8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005d18:	e02e      	b.n	8005d78 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b21      	cmp	r3, #33	; 0x21
 8005d1e:	d126      	bne.n	8005d6e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <I2C_Slave_AF+0xdc>)
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2221      	movs	r2, #33	; 0x21
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d64:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe ff84 	bl	8004c74 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d6c:	e004      	b.n	8005d78 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d76:	615a      	str	r2, [r3, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	ffff0000 	.word	0xffff0000

08005d84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d002      	beq.n	8005da8 <I2C_ITError+0x24>
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d10a      	bne.n	8005dbe <I2C_ITError+0x3a>
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b22      	cmp	r3, #34	; 0x22
 8005dac:	d107      	bne.n	8005dbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dc4:	2b28      	cmp	r3, #40	; 0x28
 8005dc6:	d107      	bne.n	8005dd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2228      	movs	r2, #40	; 0x28
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dd6:	e015      	b.n	8005e04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de6:	d00a      	beq.n	8005dfe <I2C_ITError+0x7a>
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b60      	cmp	r3, #96	; 0x60
 8005dec:	d007      	beq.n	8005dfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e12:	d162      	bne.n	8005eda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d020      	beq.n	8005e74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	4a6a      	ldr	r2, [pc, #424]	; (8005fe0 <I2C_ITError+0x25c>)
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fe00 	bl	8003a44 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8089 	beq.w	8005f5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	e074      	b.n	8005f5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	4a59      	ldr	r2, [pc, #356]	; (8005fe0 <I2C_ITError+0x25c>)
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fd fddf 	bl	8003a44 <HAL_DMA_Abort_IT>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d068      	beq.n	8005f5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d10b      	bne.n	8005eb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
 8005ed8:	e041      	b.n	8005f5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b60      	cmp	r3, #96	; 0x60
 8005ee4:	d125      	bne.n	8005f32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d10b      	bne.n	8005f1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fe feec 	bl	8004d08 <HAL_I2C_AbortCpltCallback>
 8005f30:	e015      	b.n	8005f5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d10b      	bne.n	8005f58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fe fecb 	bl	8004cf4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10e      	bne.n	8005f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d113      	bne.n	8005fd8 <I2C_ITError+0x254>
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b28      	cmp	r3, #40	; 0x28
 8005fb4:	d110      	bne.n	8005fd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <I2C_ITError+0x260>)
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fe fe70 	bl	8004cb8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	08005fe9 	.word	0x08005fe9
 8005fe4:	ffff0000 	.word	0xffff0000

08005fe8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006002:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <I2C_DMAAbort+0x148>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	4a4a      	ldr	r2, [pc, #296]	; (8006134 <I2C_DMAAbort+0x14c>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	0a1a      	lsrs	r2, r3, #8
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00da      	lsls	r2, r3, #3
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800602e:	e00a      	b.n	8006046 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d0ea      	beq.n	800601c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	2200      	movs	r2, #0
 8006054:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2200      	movs	r2, #0
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	2200      	movs	r2, #0
 800608a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	2200      	movs	r2, #0
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b60      	cmp	r3, #96	; 0x60
 80060b6:	d10e      	bne.n	80060d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ce:	6978      	ldr	r0, [r7, #20]
 80060d0:	f7fe fe1a 	bl	8004d08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060d4:	e027      	b.n	8006126 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060dc:	2b28      	cmp	r3, #40	; 0x28
 80060de:	d117      	bne.n	8006110 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2228      	movs	r2, #40	; 0x28
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800610e:	e007      	b.n	8006120 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7fe fde7 	bl	8004cf4 <HAL_I2C_ErrorCallback>
}
 8006126:	bf00      	nop
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000000c 	.word	0x2000000c
 8006134:	14f8b589 	.word	0x14f8b589

08006138 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	08db      	lsrs	r3, r3, #3
 800614a:	4a13      	ldr	r2, [pc, #76]	; (8006198 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	0a1a      	lsrs	r2, r3, #8
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b01      	subs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f043 0220 	orr.w	r2, r3, #32
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e008      	b.n	8006188 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006184:	d0e9      	beq.n	800615a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	2000000c 	.word	0x2000000c
 8006198:	14f8b589 	.word	0x14f8b589

0800619c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061ac:	d103      	bne.n	80061b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061b4:	e007      	b.n	80061c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061be:	d102      	bne.n	80061c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2208      	movs	r2, #8
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e267      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d075      	beq.n	80062de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061f2:	4b88      	ldr	r3, [pc, #544]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d00c      	beq.n	8006218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fe:	4b85      	ldr	r3, [pc, #532]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006206:	2b08      	cmp	r3, #8
 8006208:	d112      	bne.n	8006230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800620a:	4b82      	ldr	r3, [pc, #520]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006216:	d10b      	bne.n	8006230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	4b7e      	ldr	r3, [pc, #504]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d05b      	beq.n	80062dc <HAL_RCC_OscConfig+0x108>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d157      	bne.n	80062dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e242      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d106      	bne.n	8006248 <HAL_RCC_OscConfig+0x74>
 800623a:	4b76      	ldr	r3, [pc, #472]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a75      	ldr	r2, [pc, #468]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e01d      	b.n	8006284 <HAL_RCC_OscConfig+0xb0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006250:	d10c      	bne.n	800626c <HAL_RCC_OscConfig+0x98>
 8006252:	4b70      	ldr	r3, [pc, #448]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a6f      	ldr	r2, [pc, #444]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4b6d      	ldr	r3, [pc, #436]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a6c      	ldr	r2, [pc, #432]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e00b      	b.n	8006284 <HAL_RCC_OscConfig+0xb0>
 800626c:	4b69      	ldr	r3, [pc, #420]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a68      	ldr	r2, [pc, #416]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b66      	ldr	r3, [pc, #408]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a65      	ldr	r2, [pc, #404]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 800627e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fc fc06 	bl	8002a9c <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006294:	f7fc fc02 	bl	8002a9c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e207      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0xc0>
 80062b2:	e014      	b.n	80062de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fc fbf2 	bl	8002a9c <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062bc:	f7fc fbee 	bl	8002a9c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	; 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e1f3      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ce:	4b51      	ldr	r3, [pc, #324]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0xe8>
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d063      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ea:	4b4a      	ldr	r3, [pc, #296]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d11c      	bne.n	800633c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006302:	4b44      	ldr	r3, [pc, #272]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	4b41      	ldr	r3, [pc, #260]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_RCC_OscConfig+0x152>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d001      	beq.n	8006326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e1c7      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4937      	ldr	r1, [pc, #220]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006336:	4313      	orrs	r3, r2
 8006338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	e03a      	b.n	80063b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006344:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_OscConfig+0x244>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634a:	f7fc fba7 	bl	8002a9c <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006352:	f7fc fba3 	bl	8002a9c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e1a8      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006370:	4b28      	ldr	r3, [pc, #160]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4925      	ldr	r1, [pc, #148]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]
 8006384:	e015      	b.n	80063b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <HAL_RCC_OscConfig+0x244>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc fb86 	bl	8002a9c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006394:	f7fc fb82 	bl	8002a9c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e187      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d036      	beq.n	800642c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <HAL_RCC_OscConfig+0x248>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fc fb66 	bl	8002a9c <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d4:	f7fc fb62 	bl	8002a9c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e167      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_OscConfig+0x240>)
 80063e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x200>
 80063f2:	e01b      	b.n	800642c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <HAL_RCC_OscConfig+0x248>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fa:	f7fc fb4f 	bl	8002a9c <HAL_GetTick>
 80063fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006400:	e00e      	b.n	8006420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006402:	f7fc fb4b 	bl	8002a9c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d907      	bls.n	8006420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e150      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
 8006414:	40023800 	.word	0x40023800
 8006418:	42470000 	.word	0x42470000
 800641c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006420:	4b88      	ldr	r3, [pc, #544]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1ea      	bne.n	8006402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8097 	beq.w	8006568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643e:	4b81      	ldr	r3, [pc, #516]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	4b7d      	ldr	r3, [pc, #500]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4a7c      	ldr	r2, [pc, #496]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6413      	str	r3, [r2, #64]	; 0x40
 800645a:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646a:	4b77      	ldr	r3, [pc, #476]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d118      	bne.n	80064a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006476:	4b74      	ldr	r3, [pc, #464]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a73      	ldr	r2, [pc, #460]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006482:	f7fc fb0b 	bl	8002a9c <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648a:	f7fc fb07 	bl	8002a9c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e10c      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649c:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCC_OscConfig+0x474>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x2ea>
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	4a63      	ldr	r2, [pc, #396]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	; 0x70
 80064bc:	e01c      	b.n	80064f8 <HAL_RCC_OscConfig+0x324>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x30c>
 80064c6:	4b5f      	ldr	r3, [pc, #380]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064cc:	f043 0304 	orr.w	r3, r3, #4
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
 80064d2:	4b5c      	ldr	r3, [pc, #368]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a5b      	ldr	r2, [pc, #364]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
 80064de:	e00b      	b.n	80064f8 <HAL_RCC_OscConfig+0x324>
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a57      	ldr	r2, [pc, #348]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	; 0x70
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	4a54      	ldr	r2, [pc, #336]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80064f2:	f023 0304 	bic.w	r3, r3, #4
 80064f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fc facc 	bl	8002a9c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	e00a      	b.n	800651e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006508:	f7fc fac8 	bl	8002a9c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f241 3288 	movw	r2, #5000	; 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e0cb      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651e:	4b49      	ldr	r3, [pc, #292]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ee      	beq.n	8006508 <HAL_RCC_OscConfig+0x334>
 800652a:	e014      	b.n	8006556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652c:	f7fc fab6 	bl	8002a9c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fc fab2 	bl	8002a9c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0b5      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654a:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1ee      	bne.n	8006534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	4a38      	ldr	r2, [pc, #224]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80a1 	beq.w	80066b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006572:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b08      	cmp	r3, #8
 800657c:	d05c      	beq.n	8006638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d141      	bne.n	800660a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_OscConfig+0x478>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fc fa86 	bl	8002a9c <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006594:	f7fc fa82 	bl	8002a9c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e087      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a6:	4b27      	ldr	r3, [pc, #156]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	3b01      	subs	r3, #1
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	491b      	ldr	r1, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x478>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e2:	f7fc fa5b 	bl	8002a9c <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ea:	f7fc fa57 	bl	8002a9c <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e05c      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x416>
 8006608:	e054      	b.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCC_OscConfig+0x478>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006610:	f7fc fa44 	bl	8002a9c <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006618:	f7fc fa40 	bl	8002a9c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e045      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662a:	4b06      	ldr	r3, [pc, #24]	; (8006644 <HAL_RCC_OscConfig+0x470>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x444>
 8006636:	e03d      	b.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e038      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000
 800664c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006650:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <HAL_RCC_OscConfig+0x4ec>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d028      	beq.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d121      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d11a      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006680:	4013      	ands	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006688:	4293      	cmp	r3, r2
 800668a:	d111      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	3b01      	subs	r3, #1
 800669a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d107      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800

080066c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0cc      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d8:	4b68      	ldr	r3, [pc, #416]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d90c      	bls.n	8006700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b65      	ldr	r3, [pc, #404]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b63      	ldr	r3, [pc, #396]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0b8      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d020      	beq.n	800674e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006718:	4b59      	ldr	r3, [pc, #356]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	4a58      	ldr	r2, [pc, #352]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006730:	4b53      	ldr	r3, [pc, #332]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4a52      	ldr	r2, [pc, #328]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800673a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673c:	4b50      	ldr	r3, [pc, #320]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	494d      	ldr	r1, [pc, #308]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d044      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b47      	ldr	r3, [pc, #284]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d119      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e07f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d003      	beq.n	8006782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677e:	2b03      	cmp	r3, #3
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006782:	4b3f      	ldr	r3, [pc, #252]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e06f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006792:	4b3b      	ldr	r3, [pc, #236]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e067      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 0203 	bic.w	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4934      	ldr	r1, [pc, #208]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b4:	f7fc f972 	bl	8002a9c <HAL_GetTick>
 80067b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067bc:	f7fc f96e 	bl	8002a9c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e04f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 020c 	and.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d1eb      	bne.n	80067bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d20c      	bcs.n	800680c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b22      	ldr	r3, [pc, #136]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d001      	beq.n	800680c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e032      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4916      	ldr	r1, [pc, #88]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	490e      	ldr	r1, [pc, #56]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800684a:	f000 f821 	bl	8006890 <HAL_RCC_GetSysClockFreq>
 800684e:	4602      	mov	r2, r0
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	490a      	ldr	r1, [pc, #40]	; (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 800685c:	5ccb      	ldrb	r3, [r1, r3]
 800685e:	fa22 f303 	lsr.w	r3, r2, r3
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCC_ClockConfig+0x1c8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fc f8d2 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023c00 	.word	0x40023c00
 8006880:	40023800 	.word	0x40023800
 8006884:	080098f4 	.word	0x080098f4
 8006888:	2000000c 	.word	0x2000000c
 800688c:	20000010 	.word	0x20000010

08006890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006894:	b094      	sub	sp, #80	; 0x50
 8006896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	647b      	str	r3, [r7, #68]	; 0x44
 800689c:	2300      	movs	r3, #0
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a0:	2300      	movs	r3, #0
 80068a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a8:	4b79      	ldr	r3, [pc, #484]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d00d      	beq.n	80068d0 <HAL_RCC_GetSysClockFreq+0x40>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	f200 80e1 	bhi.w	8006a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x34>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d003      	beq.n	80068ca <HAL_RCC_GetSysClockFreq+0x3a>
 80068c2:	e0db      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b73      	ldr	r3, [pc, #460]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068c8:	e0db      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ca:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80068cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068ce:	e0d8      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d0:	4b6f      	ldr	r3, [pc, #444]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068da:	4b6d      	ldr	r3, [pc, #436]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d063      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e6:	4b6a      	ldr	r3, [pc, #424]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	2200      	movs	r2, #0
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30
 80068fa:	2300      	movs	r3, #0
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
 80068fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f04f 0000 	mov.w	r0, #0
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	0159      	lsls	r1, r3, #5
 8006910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006914:	0150      	lsls	r0, r2, #5
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4621      	mov	r1, r4
 800691c:	1a51      	subs	r1, r2, r1
 800691e:	6139      	str	r1, [r7, #16]
 8006920:	4629      	mov	r1, r5
 8006922:	eb63 0301 	sbc.w	r3, r3, r1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006934:	4659      	mov	r1, fp
 8006936:	018b      	lsls	r3, r1, #6
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800693e:	4651      	mov	r1, sl
 8006940:	018a      	lsls	r2, r1, #6
 8006942:	4651      	mov	r1, sl
 8006944:	ebb2 0801 	subs.w	r8, r2, r1
 8006948:	4659      	mov	r1, fp
 800694a:	eb63 0901 	sbc.w	r9, r3, r1
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800695a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800695e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006962:	4690      	mov	r8, r2
 8006964:	4699      	mov	r9, r3
 8006966:	4623      	mov	r3, r4
 8006968:	eb18 0303 	adds.w	r3, r8, r3
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	462b      	mov	r3, r5
 8006970:	eb49 0303 	adc.w	r3, r9, r3
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006982:	4629      	mov	r1, r5
 8006984:	024b      	lsls	r3, r1, #9
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800698c:	4621      	mov	r1, r4
 800698e:	024a      	lsls	r2, r1, #9
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006996:	2200      	movs	r2, #0
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
 800699a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800699c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a0:	f7fa f864 	bl	8000a6c <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ac:	e058      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ae:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	099b      	lsrs	r3, r3, #6
 80069b4:	2200      	movs	r2, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	4611      	mov	r1, r2
 80069ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069be:	623b      	str	r3, [r7, #32]
 80069c0:	2300      	movs	r3, #0
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	f04f 0000 	mov.w	r0, #0
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	0159      	lsls	r1, r3, #5
 80069d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069da:	0150      	lsls	r0, r2, #5
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4641      	mov	r1, r8
 80069e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a00:	ebb2 040a 	subs.w	r4, r2, sl
 8006a04:	eb63 050b 	sbc.w	r5, r3, fp
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	00eb      	lsls	r3, r5, #3
 8006a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a16:	00e2      	lsls	r2, r4, #3
 8006a18:	4614      	mov	r4, r2
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	4643      	mov	r3, r8
 8006a1e:	18e3      	adds	r3, r4, r3
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	464b      	mov	r3, r9
 8006a24:	eb45 0303 	adc.w	r3, r5, r3
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a36:	4629      	mov	r1, r5
 8006a38:	028b      	lsls	r3, r1, #10
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a40:	4621      	mov	r1, r4
 8006a42:	028a      	lsls	r2, r1, #10
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	61fa      	str	r2, [r7, #28]
 8006a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a54:	f7fa f80a 	bl	8000a6c <__aeabi_uldivmod>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3750      	adds	r7, #80	; 0x50
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a8e:	bf00      	nop
 8006a90:	40023800 	.word	0x40023800
 8006a94:	00f42400 	.word	0x00f42400
 8006a98:	007a1200 	.word	0x007a1200

08006a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ab8:	f7ff fff0 	bl	8006a9c <HAL_RCC_GetHCLKFreq>
 8006abc:	4602      	mov	r2, r0
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	0a9b      	lsrs	r3, r3, #10
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	4903      	ldr	r1, [pc, #12]	; (8006ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aca:	5ccb      	ldrb	r3, [r1, r3]
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	08009904 	.word	0x08009904

08006adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ae0:	f7ff ffdc 	bl	8006a9c <HAL_RCC_GetHCLKFreq>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0b5b      	lsrs	r3, r3, #13
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	4903      	ldr	r1, [pc, #12]	; (8006b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40023800 	.word	0x40023800
 8006b00:	08009904 	.word	0x08009904

08006b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e07b      	b.n	8006c0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d108      	bne.n	8006b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b26:	d009      	beq.n	8006b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	e005      	b.n	8006b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb fd68 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	ea42 0103 	orr.w	r1, r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	f003 0104 	and.w	r1, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f003 0210 	and.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_SPI_Transmit_IT+0x20>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e06f      	b.n	8006d18 <HAL_SPI_Transmit_IT+0x100>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit_IT+0x34>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c50:	e05d      	b.n	8006d0e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c62:	e054      	b.n	8006d0e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2203      	movs	r2, #3
 8006c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	; (8006d24 <HAL_SPI_Transmit_IT+0x10c>)
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8006caa:	e002      	b.n	8006cb2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <HAL_SPI_Transmit_IT+0x110>)
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cba:	d10f      	bne.n	8006cdc <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006cea:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d008      	beq.n	8006d0c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e000      	b.n	8006d0e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8006d0c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	08006faf 	.word	0x08006faf
 8006d28:	08006f69 	.word	0x08006f69

08006d2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10f      	bne.n	8006d70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	099b      	lsrs	r3, r3, #6
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
    return;
 8006d6e:	e0d7      	b.n	8006f20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_SPI_IRQHandler+0x66>
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
    return;
 8006d90:	e0c6      	b.n	8006f20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10c      	bne.n	8006db8 <HAL_SPI_IRQHandler+0x8c>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	099b      	lsrs	r3, r3, #6
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	0a1b      	lsrs	r3, r3, #8
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80b4 	beq.w	8006f20 <HAL_SPI_IRQHandler+0x1f4>
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80ad 	beq.w	8006f20 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	099b      	lsrs	r3, r3, #6
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d023      	beq.n	8006e1a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d011      	beq.n	8006e02 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	f043 0204 	orr.w	r2, r3, #4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	e00b      	b.n	8006e1a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	693b      	ldr	r3, [r7, #16]
        return;
 8006e18:	e082      	b.n	8006f20 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d014      	beq.n	8006e50 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f043 0201 	orr.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00c      	beq.n	8006e76 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f043 0208 	orr.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04f      	beq.n	8006f1e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_SPI_IRQHandler+0x17e>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d034      	beq.n	8006f14 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0203 	bic.w	r2, r2, #3
 8006eb8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d011      	beq.n	8006ee6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <HAL_SPI_IRQHandler+0x1fc>)
 8006ec8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc fdb8 	bl	8003a44 <HAL_DMA_Abort_IT>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	; (8006f28 <HAL_SPI_IRQHandler+0x1fc>)
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fc fda2 	bl	8003a44 <HAL_DMA_Abort_IT>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006f12:	e003      	b.n	8006f1c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f809 	bl	8006f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f1a:	e000      	b.n	8006f1e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006f1c:	bf00      	nop
    return;
 8006f1e:	bf00      	nop
  }
}
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	08006f41 	.word	0x08006f41

08006f2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff ffe6 	bl	8006f2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f8f1 	bl	8007188 <SPI_CloseTx_ISR>
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	881a      	ldrh	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	1c9a      	adds	r2, r3, #2
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8cf 	bl	8007188 <SPI_CloseTx_ISR>
  }
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007004:	f7fb fd4a 	bl	8002a9c <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4413      	add	r3, r2
 8007012:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007014:	f7fb fd42 	bl	8002a9c <HAL_GetTick>
 8007018:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	015b      	lsls	r3, r3, #5
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800702a:	e054      	b.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d050      	beq.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007034:	f7fb fd32 	bl	8002a9c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	429a      	cmp	r2, r3
 8007042:	d902      	bls.n	800704a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d13d      	bne.n	80070c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007058:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007062:	d111      	bne.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800706c:	d004      	beq.n	8007078 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007076:	d107      	bne.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007090:	d10f      	bne.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e017      	b.n	80070f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d19b      	bne.n	800702c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2000000c 	.word	0x2000000c

08007104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007110:	4b1b      	ldr	r3, [pc, #108]	; (8007180 <SPI_EndRxTxTransaction+0x7c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <SPI_EndRxTxTransaction+0x80>)
 8007116:	fba2 2303 	umull	r2, r3, r2, r3
 800711a:	0d5b      	lsrs	r3, r3, #21
 800711c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712e:	d112      	bne.n	8007156 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff ff5a 	bl	8006ff4 <SPI_WaitFlagStateUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e00f      	b.n	8007176 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3b01      	subs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d0f2      	beq.n	8007156 <SPI_EndRxTxTransaction+0x52>
 8007170:	e000      	b.n	8007174 <SPI_EndRxTxTransaction+0x70>
        break;
 8007172:	bf00      	nop
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	2000000c 	.word	0x2000000c
 8007184:	165e9f81 	.word	0x165e9f81

08007188 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007190:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <SPI_CloseTx_ISR+0xbc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a2c      	ldr	r2, [pc, #176]	; (8007248 <SPI_CloseTx_ISR+0xc0>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	0a5b      	lsrs	r3, r3, #9
 800719c:	2264      	movs	r2, #100	; 0x64
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071a4:	f7fb fc7a 	bl	8002a9c <HAL_GetTick>
 80071a8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	f043 0220 	orr.w	r2, r3, #32
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071bc:	e009      	b.n	80071d2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0eb      	beq.n	80071aa <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071e0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	2164      	movs	r1, #100	; 0x64
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff ff8c 	bl	8007104 <SPI_EndRxTxTransaction>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	f043 0220 	orr.w	r2, r3, #32
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff fe7d 	bl	8006f2c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007232:	e002      	b.n	800723a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fa ffcd 	bl	80021d4 <HAL_SPI_TxCpltCallback>
}
 800723a:	bf00      	nop
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000000c 	.word	0x2000000c
 8007248:	057619f1 	.word	0x057619f1

0800724c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e041      	b.n	80072e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fb fa2a 	bl	80026cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f000 fa88 	bl	80077a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d001      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e044      	b.n	800738e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1e      	ldr	r2, [pc, #120]	; (800739c <HAL_TIM_Base_Start_IT+0xb0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x6c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d013      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x6c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x6c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x6c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0x6c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_TIM_Base_Start_IT+0xc0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d111      	bne.n	800737c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b06      	cmp	r3, #6
 8007368:	d010      	beq.n	800738c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	e007      	b.n	800738c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40010000 	.word	0x40010000
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40000c00 	.word	0x40000c00
 80073ac:	40014000 	.word	0x40014000

080073b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d122      	bne.n	800740c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d11b      	bne.n	800740c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0202 	mvn.w	r2, #2
 80073dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9b5 	bl	8007762 <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9a7 	bl	800774e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9b8 	bl	8007776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d122      	bne.n	8007460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b04      	cmp	r3, #4
 8007426:	d11b      	bne.n	8007460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0204 	mvn.w	r2, #4
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f98b 	bl	8007762 <HAL_TIM_IC_CaptureCallback>
 800744c:	e005      	b.n	800745a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f97d 	bl	800774e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f98e 	bl	8007776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b08      	cmp	r3, #8
 800746c:	d122      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d11b      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0208 	mvn.w	r2, #8
 8007484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2204      	movs	r2, #4
 800748a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f961 	bl	8007762 <HAL_TIM_IC_CaptureCallback>
 80074a0:	e005      	b.n	80074ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f953 	bl	800774e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f964 	bl	8007776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d122      	bne.n	8007508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d11b      	bne.n	8007508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0210 	mvn.w	r2, #16
 80074d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2208      	movs	r2, #8
 80074de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f937 	bl	8007762 <HAL_TIM_IC_CaptureCallback>
 80074f4:	e005      	b.n	8007502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f929 	bl	800774e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f93a 	bl	8007776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	d10e      	bne.n	8007534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d107      	bne.n	8007534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0201 	mvn.w	r2, #1
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fa fee6 	bl	8002300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d10e      	bne.n	8007560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754c:	2b80      	cmp	r3, #128	; 0x80
 800754e:	d107      	bne.n	8007560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fab2 	bl	8007ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8ff 	bl	800778a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b20      	cmp	r3, #32
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0220 	mvn.w	r2, #32
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa7c 	bl	8007ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_TIM_ConfigClockSource+0x1c>
 80075d8:	2302      	movs	r3, #2
 80075da:	e0b4      	b.n	8007746 <HAL_TIM_ConfigClockSource+0x186>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007614:	d03e      	beq.n	8007694 <HAL_TIM_ConfigClockSource+0xd4>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	f200 8087 	bhi.w	800772c <HAL_TIM_ConfigClockSource+0x16c>
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	f000 8086 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x172>
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762a:	d87f      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 800762c:	2b70      	cmp	r3, #112	; 0x70
 800762e:	d01a      	beq.n	8007666 <HAL_TIM_ConfigClockSource+0xa6>
 8007630:	2b70      	cmp	r3, #112	; 0x70
 8007632:	d87b      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 8007634:	2b60      	cmp	r3, #96	; 0x60
 8007636:	d050      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x11a>
 8007638:	2b60      	cmp	r3, #96	; 0x60
 800763a:	d877      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 800763c:	2b50      	cmp	r3, #80	; 0x50
 800763e:	d03c      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0xfa>
 8007640:	2b50      	cmp	r3, #80	; 0x50
 8007642:	d873      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d058      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x13a>
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	d86f      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 800764c:	2b30      	cmp	r3, #48	; 0x30
 800764e:	d064      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x15a>
 8007650:	2b30      	cmp	r3, #48	; 0x30
 8007652:	d86b      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 8007654:	2b20      	cmp	r3, #32
 8007656:	d060      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x15a>
 8007658:	2b20      	cmp	r3, #32
 800765a:	d867      	bhi.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d05c      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x15a>
 8007660:	2b10      	cmp	r3, #16
 8007662:	d05a      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x15a>
 8007664:	e062      	b.n	800772c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6899      	ldr	r1, [r3, #8]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f000 f98d 	bl	8007994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	609a      	str	r2, [r3, #8]
      break;
 8007692:	e04f      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f000 f976 	bl	8007994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076b6:	609a      	str	r2, [r3, #8]
      break;
 80076b8:	e03c      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 f8ea 	bl	80078a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2150      	movs	r1, #80	; 0x50
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f943 	bl	800795e <TIM_ITRx_SetConfig>
      break;
 80076d8:	e02c      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6859      	ldr	r1, [r3, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f000 f909 	bl	80078fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2160      	movs	r1, #96	; 0x60
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f933 	bl	800795e <TIM_ITRx_SetConfig>
      break;
 80076f8:	e01c      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	461a      	mov	r2, r3
 8007708:	f000 f8ca 	bl	80078a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2140      	movs	r1, #64	; 0x40
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f923 	bl	800795e <TIM_ITRx_SetConfig>
      break;
 8007718:	e00c      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 f91a 	bl	800795e <TIM_ITRx_SetConfig>
      break;
 800772a:	e003      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
      break;
 8007730:	e000      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a34      	ldr	r2, [pc, #208]	; (8007884 <TIM_Base_SetConfig+0xe4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00f      	beq.n	80077d8 <TIM_Base_SetConfig+0x38>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d00b      	beq.n	80077d8 <TIM_Base_SetConfig+0x38>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a31      	ldr	r2, [pc, #196]	; (8007888 <TIM_Base_SetConfig+0xe8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d007      	beq.n	80077d8 <TIM_Base_SetConfig+0x38>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a30      	ldr	r2, [pc, #192]	; (800788c <TIM_Base_SetConfig+0xec>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0x38>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a2f      	ldr	r2, [pc, #188]	; (8007890 <TIM_Base_SetConfig+0xf0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d108      	bne.n	80077ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a25      	ldr	r2, [pc, #148]	; (8007884 <TIM_Base_SetConfig+0xe4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01b      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f8:	d017      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <TIM_Base_SetConfig+0xe8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	; (800788c <TIM_Base_SetConfig+0xec>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <TIM_Base_SetConfig+0xf0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <TIM_Base_SetConfig+0xf4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <TIM_Base_SetConfig+0xf8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_Base_SetConfig+0x8a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1d      	ldr	r2, [pc, #116]	; (800789c <TIM_Base_SetConfig+0xfc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d108      	bne.n	800783c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a08      	ldr	r2, [pc, #32]	; (8007884 <TIM_Base_SetConfig+0xe4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d103      	bne.n	8007870 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	615a      	str	r2, [r3, #20]
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40014000 	.word	0x40014000
 8007898:	40014400 	.word	0x40014400
 800789c:	40014800 	.word	0x40014800

080078a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0201 	bic.w	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 030a 	bic.w	r3, r3, #10
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	621a      	str	r2, [r3, #32]
}
 80078f2:	bf00      	nop
 80078f4:	371c      	adds	r7, #28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078fe:	b480      	push	{r7}
 8007900:	b087      	sub	sp, #28
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f023 0210 	bic.w	r2, r3, #16
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	031b      	lsls	r3, r3, #12
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800793a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	f043 0307 	orr.w	r3, r3, #7
 8007980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	021a      	lsls	r2, r3, #8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	609a      	str	r2, [r3, #8]
}
 80079c8:	bf00      	nop
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e050      	b.n	8007a8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1c      	ldr	r2, [pc, #112]	; (8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d018      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d013      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d10c      	bne.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40014000 	.word	0x40014000

08007ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e03f      	b.n	8007b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fa fe2a 	bl	8002758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2224      	movs	r2, #36	; 0x24
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fddf 	bl	80086e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695a      	ldr	r2, [r3, #20]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b08a      	sub	sp, #40	; 0x28
 8007b76:	af02      	add	r7, sp, #8
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	d17c      	bne.n	8007c8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_UART_Transmit+0x2c>
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e075      	b.n	8007c8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_UART_Transmit+0x3e>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e06e      	b.n	8007c8e <HAL_UART_Transmit+0x11c>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2221      	movs	r2, #33	; 0x21
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bc6:	f7fa ff69 	bl	8002a9c <HAL_GetTick>
 8007bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be0:	d108      	bne.n	8007bf4 <HAL_UART_Transmit+0x82>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e003      	b.n	8007bfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c04:	e02a      	b.n	8007c5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2180      	movs	r1, #128	; 0x80
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fb1f 	bl	8008254 <UART_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e036      	b.n	8007c8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10b      	bne.n	8007c3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	3302      	adds	r3, #2
 8007c3a:	61bb      	str	r3, [r7, #24]
 8007c3c:	e007      	b.n	8007c4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1cf      	bne.n	8007c06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2140      	movs	r1, #64	; 0x40
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 faef 	bl	8008254 <UART_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e006      	b.n	8007c8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e000      	b.n	8007c8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
  }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d11d      	bne.n	8007cec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_UART_Receive_IT+0x26>
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e016      	b.n	8007cee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Receive_IT+0x38>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e00f      	b.n	8007cee <HAL_UART_Receive_IT+0x58>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fb24 	bl	8008330 <UART_Start_Receive_IT>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	e000      	b.n	8007cee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cec:	2302      	movs	r3, #2
  }
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b0ba      	sub	sp, #232	; 0xe8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10f      	bne.n	8007d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <HAL_UART_IRQHandler+0x66>
 8007d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fc07 	bl	800856a <UART_Receive_IT>
      return;
 8007d5c:	e256      	b.n	800820c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80de 	beq.w	8007f24 <HAL_UART_IRQHandler+0x22c>
 8007d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80d1 	beq.w	8007f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <HAL_UART_IRQHandler+0xae>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f043 0201 	orr.w	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <HAL_UART_IRQHandler+0xd2>
 8007db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f043 0202 	orr.w	r2, r3, #2
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <HAL_UART_IRQHandler+0xf6>
 8007dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f043 0204 	orr.w	r2, r3, #4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <HAL_UART_IRQHandler+0x126>
 8007dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f043 0208 	orr.w	r2, r3, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 81ed 	beq.w	8008202 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x14e>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fb92 	bl	800856a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	bf0c      	ite	eq
 8007e54:	2301      	moveq	r3, #1
 8007e56:	2300      	movne	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f003 0308 	and.w	r3, r3, #8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <HAL_UART_IRQHandler+0x17a>
 8007e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04f      	beq.n	8007f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa9a 	bl	80083ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d141      	bne.n	8007f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3314      	adds	r3, #20
 8007e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3314      	adds	r3, #20
 8007eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1d9      	bne.n	8007e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d013      	beq.n	8007f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	4a7d      	ldr	r2, [pc, #500]	; (80080d4 <HAL_UART_IRQHandler+0x3dc>)
 8007ee0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fb fdac 	bl	8003a44 <HAL_DMA_Abort_IT>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f00:	e00e      	b.n	8007f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f990 	bl	8008228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f08:	e00a      	b.n	8007f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f98c 	bl	8008228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f10:	e006      	b.n	8007f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f988 	bl	8008228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f1e:	e170      	b.n	8008202 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f20:	bf00      	nop
    return;
 8007f22:	e16e      	b.n	8008202 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f040 814a 	bne.w	80081c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8143 	beq.w	80081c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 813c 	beq.w	80081c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	f040 80b4 	bne.w	80080d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8140 	beq.w	8008206 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	f080 8139 	bcs.w	8008206 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa6:	f000 8088 	beq.w	80080ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	330c      	adds	r3, #12
 8007fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1d9      	bne.n	8007faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3314      	adds	r3, #20
 8007ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3314      	adds	r3, #20
 8008016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800801a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800801e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800802c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e1      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3314      	adds	r3, #20
 8008052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800805c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e3      	bne.n	8008032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808a:	f023 0310 	bic.w	r3, r3, #16
 800808e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	330c      	adds	r3, #12
 8008098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800809c:	65ba      	str	r2, [r7, #88]	; 0x58
 800809e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e3      	bne.n	8008078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fb fc55 	bl	8003964 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8b6 	bl	800823c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080d0:	e099      	b.n	8008206 <HAL_UART_IRQHandler+0x50e>
 80080d2:	bf00      	nop
 80080d4:	08008473 	.word	0x08008473
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 808b 	beq.w	800820a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8086 	beq.w	800820a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	330c      	adds	r3, #12
 8008104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008122:	647a      	str	r2, [r7, #68]	; 0x44
 8008124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e3      	bne.n	80080fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	623b      	str	r3, [r7, #32]
   return(result);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3314      	adds	r3, #20
 8008156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800815a:	633a      	str	r2, [r7, #48]	; 0x30
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	60fb      	str	r3, [r7, #12]
   return(result);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80081a0:	61fa      	str	r2, [r7, #28]
 80081a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	69b9      	ldr	r1, [r7, #24]
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	617b      	str	r3, [r7, #20]
   return(result);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e3      	bne.n	800817c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f83e 	bl	800823c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081c0:	e023      	b.n	800820a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_UART_IRQHandler+0x4ea>
 80081ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f95d 	bl	800849a <UART_Transmit_IT>
    return;
 80081e0:	e014      	b.n	800820c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00e      	beq.n	800820c <HAL_UART_IRQHandler+0x514>
 80081ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f99d 	bl	800853a <UART_EndTransmit_IT>
    return;
 8008200:	e004      	b.n	800820c <HAL_UART_IRQHandler+0x514>
    return;
 8008202:	bf00      	nop
 8008204:	e002      	b.n	800820c <HAL_UART_IRQHandler+0x514>
      return;
 8008206:	bf00      	nop
 8008208:	e000      	b.n	800820c <HAL_UART_IRQHandler+0x514>
      return;
 800820a:	bf00      	nop
  }
}
 800820c:	37e8      	adds	r7, #232	; 0xe8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b090      	sub	sp, #64	; 0x40
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	4613      	mov	r3, r2
 8008262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008264:	e050      	b.n	8008308 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d04c      	beq.n	8008308 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800826e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <UART_WaitOnFlagUntilTimeout+0x30>
 8008274:	f7fa fc12 	bl	8002a9c <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008280:	429a      	cmp	r2, r3
 8008282:	d241      	bcs.n	8008308 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082a4:	637a      	str	r2, [r7, #52]	; 0x34
 80082a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3314      	adds	r3, #20
 80082be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	613b      	str	r3, [r7, #16]
   return(result);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f023 0301 	bic.w	r3, r3, #1
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3314      	adds	r3, #20
 80082d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d8:	623a      	str	r2, [r7, #32]
 80082da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	69f9      	ldr	r1, [r7, #28]
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e5      	bne.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e00f      	b.n	8008328 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4013      	ands	r3, r2
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	429a      	cmp	r2, r3
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	429a      	cmp	r2, r3
 8008324:	d09f      	beq.n	8008266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3740      	adds	r7, #64	; 0x40
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	88fa      	ldrh	r2, [r7, #6]
 8008348:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	88fa      	ldrh	r2, [r7, #6]
 800834e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2222      	movs	r2, #34	; 0x22
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695a      	ldr	r2, [r3, #20]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0201 	orr.w	r2, r2, #1
 800838c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0220 	orr.w	r2, r2, #32
 800839c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b095      	sub	sp, #84	; 0x54
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d4:	643a      	str	r2, [r7, #64]	; 0x40
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e5      	bne.n	80083b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3314      	adds	r3, #20
 80083ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3314      	adds	r3, #20
 8008406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e5      	bne.n	80083e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	2b01      	cmp	r3, #1
 8008422:	d119      	bne.n	8008458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	60bb      	str	r3, [r7, #8]
   return(result);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f023 0310 	bic.w	r3, r3, #16
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	330c      	adds	r3, #12
 8008442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008444:	61ba      	str	r2, [r7, #24]
 8008446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6979      	ldr	r1, [r7, #20]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	613b      	str	r3, [r7, #16]
   return(result);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008466:	bf00      	nop
 8008468:	3754      	adds	r7, #84	; 0x54
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7ff fecb 	bl	8008228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b21      	cmp	r3, #33	; 0x21
 80084ac:	d13e      	bne.n	800852c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	d114      	bne.n	80084e2 <UART_Transmit_IT+0x48>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d110      	bne.n	80084e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	1c9a      	adds	r2, r3, #2
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	621a      	str	r2, [r3, #32]
 80084e0:	e008      	b.n	80084f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	1c59      	adds	r1, r3, #1
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6211      	str	r1, [r2, #32]
 80084ec:	781a      	ldrb	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4619      	mov	r1, r3
 8008502:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10f      	bne.n	8008528 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008516:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008526:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008550:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fe5a 	bl	8008214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b08c      	sub	sp, #48	; 0x30
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b22      	cmp	r3, #34	; 0x22
 800857c:	f040 80ab 	bne.w	80086d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008588:	d117      	bne.n	80085ba <UART_Receive_IT+0x50>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d113      	bne.n	80085ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b2:	1c9a      	adds	r2, r3, #2
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	629a      	str	r2, [r3, #40]	; 0x28
 80085b8:	e026      	b.n	8008608 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085c0:	2300      	movs	r3, #0
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085cc:	d007      	beq.n	80085de <UART_Receive_IT+0x74>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <UART_Receive_IT+0x82>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e008      	b.n	80085fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29b      	uxth	r3, r3
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4619      	mov	r1, r3
 8008616:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008618:	2b00      	cmp	r3, #0
 800861a:	d15a      	bne.n	80086d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0220 	bic.w	r2, r2, #32
 800862a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800863a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0201 	bic.w	r2, r2, #1
 800864a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	2b01      	cmp	r3, #1
 800865a:	d135      	bne.n	80086c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	613b      	str	r3, [r7, #16]
   return(result);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f023 0310 	bic.w	r3, r3, #16
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008682:	623a      	str	r2, [r7, #32]
 8008684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	69f9      	ldr	r1, [r7, #28]
 8008688:	6a3a      	ldr	r2, [r7, #32]
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b10      	cmp	r3, #16
 80086a2:	d10a      	bne.n	80086ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fdbb 	bl	800823c <HAL_UARTEx_RxEventCallback>
 80086c6:	e002      	b.n	80086ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7f9 fec3 	bl	8002454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e002      	b.n	80086d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
  }
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3730      	adds	r7, #48	; 0x30
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086e4:	b0c0      	sub	sp, #256	; 0x100
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	68d9      	ldr	r1, [r3, #12]
 80086fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	ea40 0301 	orr.w	r3, r0, r1
 8008708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	431a      	orrs	r2, r3
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	431a      	orrs	r2, r3
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008738:	f021 010c 	bic.w	r1, r1, #12
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008746:	430b      	orrs	r3, r1
 8008748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875a:	6999      	ldr	r1, [r3, #24]
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	ea40 0301 	orr.w	r3, r0, r1
 8008766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4b8f      	ldr	r3, [pc, #572]	; (80089ac <UART_SetConfig+0x2cc>)
 8008770:	429a      	cmp	r2, r3
 8008772:	d005      	beq.n	8008780 <UART_SetConfig+0xa0>
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b8d      	ldr	r3, [pc, #564]	; (80089b0 <UART_SetConfig+0x2d0>)
 800877c:	429a      	cmp	r2, r3
 800877e:	d104      	bne.n	800878a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008780:	f7fe f9ac 	bl	8006adc <HAL_RCC_GetPCLK2Freq>
 8008784:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008788:	e003      	b.n	8008792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800878a:	f7fe f993 	bl	8006ab4 <HAL_RCC_GetPCLK1Freq>
 800878e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800879c:	f040 810c 	bne.w	80089b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087a4:	2200      	movs	r2, #0
 80087a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087b2:	4622      	mov	r2, r4
 80087b4:	462b      	mov	r3, r5
 80087b6:	1891      	adds	r1, r2, r2
 80087b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80087ba:	415b      	adcs	r3, r3
 80087bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087c2:	4621      	mov	r1, r4
 80087c4:	eb12 0801 	adds.w	r8, r2, r1
 80087c8:	4629      	mov	r1, r5
 80087ca:	eb43 0901 	adc.w	r9, r3, r1
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	f04f 0300 	mov.w	r3, #0
 80087d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087e2:	4690      	mov	r8, r2
 80087e4:	4699      	mov	r9, r3
 80087e6:	4623      	mov	r3, r4
 80087e8:	eb18 0303 	adds.w	r3, r8, r3
 80087ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087f0:	462b      	mov	r3, r5
 80087f2:	eb49 0303 	adc.w	r3, r9, r3
 80087f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008806:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800880a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800880e:	460b      	mov	r3, r1
 8008810:	18db      	adds	r3, r3, r3
 8008812:	653b      	str	r3, [r7, #80]	; 0x50
 8008814:	4613      	mov	r3, r2
 8008816:	eb42 0303 	adc.w	r3, r2, r3
 800881a:	657b      	str	r3, [r7, #84]	; 0x54
 800881c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008824:	f7f8 f922 	bl	8000a6c <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <UART_SetConfig+0x2d4>)
 800882e:	fba3 2302 	umull	r2, r3, r3, r2
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	011c      	lsls	r4, r3, #4
 8008836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883a:	2200      	movs	r2, #0
 800883c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008840:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	1891      	adds	r1, r2, r2
 800884e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008850:	415b      	adcs	r3, r3
 8008852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008858:	4641      	mov	r1, r8
 800885a:	eb12 0a01 	adds.w	sl, r2, r1
 800885e:	4649      	mov	r1, r9
 8008860:	eb43 0b01 	adc.w	fp, r3, r1
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008878:	4692      	mov	sl, r2
 800887a:	469b      	mov	fp, r3
 800887c:	4643      	mov	r3, r8
 800887e:	eb1a 0303 	adds.w	r3, sl, r3
 8008882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008886:	464b      	mov	r3, r9
 8008888:	eb4b 0303 	adc.w	r3, fp, r3
 800888c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800889c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088a4:	460b      	mov	r3, r1
 80088a6:	18db      	adds	r3, r3, r3
 80088a8:	643b      	str	r3, [r7, #64]	; 0x40
 80088aa:	4613      	mov	r3, r2
 80088ac:	eb42 0303 	adc.w	r3, r2, r3
 80088b0:	647b      	str	r3, [r7, #68]	; 0x44
 80088b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088ba:	f7f8 f8d7 	bl	8000a6c <__aeabi_uldivmod>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	4b3b      	ldr	r3, [pc, #236]	; (80089b4 <UART_SetConfig+0x2d4>)
 80088c6:	fba3 2301 	umull	r2, r3, r3, r1
 80088ca:	095b      	lsrs	r3, r3, #5
 80088cc:	2264      	movs	r2, #100	; 0x64
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	1acb      	subs	r3, r1, r3
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088da:	4b36      	ldr	r3, [pc, #216]	; (80089b4 <UART_SetConfig+0x2d4>)
 80088dc:	fba3 2302 	umull	r2, r3, r3, r2
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088e8:	441c      	add	r4, r3
 80088ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088fc:	4642      	mov	r2, r8
 80088fe:	464b      	mov	r3, r9
 8008900:	1891      	adds	r1, r2, r2
 8008902:	63b9      	str	r1, [r7, #56]	; 0x38
 8008904:	415b      	adcs	r3, r3
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800890c:	4641      	mov	r1, r8
 800890e:	1851      	adds	r1, r2, r1
 8008910:	6339      	str	r1, [r7, #48]	; 0x30
 8008912:	4649      	mov	r1, r9
 8008914:	414b      	adcs	r3, r1
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008924:	4659      	mov	r1, fp
 8008926:	00cb      	lsls	r3, r1, #3
 8008928:	4651      	mov	r1, sl
 800892a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800892e:	4651      	mov	r1, sl
 8008930:	00ca      	lsls	r2, r1, #3
 8008932:	4610      	mov	r0, r2
 8008934:	4619      	mov	r1, r3
 8008936:	4603      	mov	r3, r0
 8008938:	4642      	mov	r2, r8
 800893a:	189b      	adds	r3, r3, r2
 800893c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008940:	464b      	mov	r3, r9
 8008942:	460a      	mov	r2, r1
 8008944:	eb42 0303 	adc.w	r3, r2, r3
 8008948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008958:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800895c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008960:	460b      	mov	r3, r1
 8008962:	18db      	adds	r3, r3, r3
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
 8008966:	4613      	mov	r3, r2
 8008968:	eb42 0303 	adc.w	r3, r2, r3
 800896c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800896e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008976:	f7f8 f879 	bl	8000a6c <__aeabi_uldivmod>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <UART_SetConfig+0x2d4>)
 8008980:	fba3 1302 	umull	r1, r3, r3, r2
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	2164      	movs	r1, #100	; 0x64
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	3332      	adds	r3, #50	; 0x32
 8008992:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <UART_SetConfig+0x2d4>)
 8008994:	fba2 2303 	umull	r2, r3, r2, r3
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	f003 0207 	and.w	r2, r3, #7
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4422      	add	r2, r4
 80089a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089a8:	e105      	b.n	8008bb6 <UART_SetConfig+0x4d6>
 80089aa:	bf00      	nop
 80089ac:	40011000 	.word	0x40011000
 80089b0:	40011400 	.word	0x40011400
 80089b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089ca:	4642      	mov	r2, r8
 80089cc:	464b      	mov	r3, r9
 80089ce:	1891      	adds	r1, r2, r2
 80089d0:	6239      	str	r1, [r7, #32]
 80089d2:	415b      	adcs	r3, r3
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
 80089d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089da:	4641      	mov	r1, r8
 80089dc:	1854      	adds	r4, r2, r1
 80089de:	4649      	mov	r1, r9
 80089e0:	eb43 0501 	adc.w	r5, r3, r1
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	f04f 0300 	mov.w	r3, #0
 80089ec:	00eb      	lsls	r3, r5, #3
 80089ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089f2:	00e2      	lsls	r2, r4, #3
 80089f4:	4614      	mov	r4, r2
 80089f6:	461d      	mov	r5, r3
 80089f8:	4643      	mov	r3, r8
 80089fa:	18e3      	adds	r3, r4, r3
 80089fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a00:	464b      	mov	r3, r9
 8008a02:	eb45 0303 	adc.w	r3, r5, r3
 8008a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a26:	4629      	mov	r1, r5
 8008a28:	008b      	lsls	r3, r1, #2
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a30:	4621      	mov	r1, r4
 8008a32:	008a      	lsls	r2, r1, #2
 8008a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a38:	f7f8 f818 	bl	8000a6c <__aeabi_uldivmod>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4b60      	ldr	r3, [pc, #384]	; (8008bc4 <UART_SetConfig+0x4e4>)
 8008a42:	fba3 2302 	umull	r2, r3, r3, r2
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	011c      	lsls	r4, r3, #4
 8008a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	464b      	mov	r3, r9
 8008a60:	1891      	adds	r1, r2, r2
 8008a62:	61b9      	str	r1, [r7, #24]
 8008a64:	415b      	adcs	r3, r3
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a6c:	4641      	mov	r1, r8
 8008a6e:	1851      	adds	r1, r2, r1
 8008a70:	6139      	str	r1, [r7, #16]
 8008a72:	4649      	mov	r1, r9
 8008a74:	414b      	adcs	r3, r1
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a84:	4659      	mov	r1, fp
 8008a86:	00cb      	lsls	r3, r1, #3
 8008a88:	4651      	mov	r1, sl
 8008a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a8e:	4651      	mov	r1, sl
 8008a90:	00ca      	lsls	r2, r1, #3
 8008a92:	4610      	mov	r0, r2
 8008a94:	4619      	mov	r1, r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	4642      	mov	r2, r8
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	460a      	mov	r2, r1
 8008aa4:	eb42 0303 	adc.w	r3, r2, r3
 8008aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	008b      	lsls	r3, r1, #2
 8008ac8:	4641      	mov	r1, r8
 8008aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ace:	4641      	mov	r1, r8
 8008ad0:	008a      	lsls	r2, r1, #2
 8008ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ad6:	f7f7 ffc9 	bl	8000a6c <__aeabi_uldivmod>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4b39      	ldr	r3, [pc, #228]	; (8008bc4 <UART_SetConfig+0x4e4>)
 8008ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae4:	095b      	lsrs	r3, r3, #5
 8008ae6:	2164      	movs	r1, #100	; 0x64
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	3332      	adds	r3, #50	; 0x32
 8008af2:	4a34      	ldr	r2, [pc, #208]	; (8008bc4 <UART_SetConfig+0x4e4>)
 8008af4:	fba2 2303 	umull	r2, r3, r2, r3
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008afe:	441c      	add	r4, r3
 8008b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b04:	2200      	movs	r2, #0
 8008b06:	673b      	str	r3, [r7, #112]	; 0x70
 8008b08:	677a      	str	r2, [r7, #116]	; 0x74
 8008b0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b0e:	4642      	mov	r2, r8
 8008b10:	464b      	mov	r3, r9
 8008b12:	1891      	adds	r1, r2, r2
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	415b      	adcs	r3, r3
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b1e:	4641      	mov	r1, r8
 8008b20:	1851      	adds	r1, r2, r1
 8008b22:	6039      	str	r1, [r7, #0]
 8008b24:	4649      	mov	r1, r9
 8008b26:	414b      	adcs	r3, r1
 8008b28:	607b      	str	r3, [r7, #4]
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b36:	4659      	mov	r1, fp
 8008b38:	00cb      	lsls	r3, r1, #3
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b40:	4651      	mov	r1, sl
 8008b42:	00ca      	lsls	r2, r1, #3
 8008b44:	4610      	mov	r0, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	189b      	adds	r3, r3, r2
 8008b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b50:	464b      	mov	r3, r9
 8008b52:	460a      	mov	r2, r1
 8008b54:	eb42 0303 	adc.w	r3, r2, r3
 8008b58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	663b      	str	r3, [r7, #96]	; 0x60
 8008b64:	667a      	str	r2, [r7, #100]	; 0x64
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b72:	4649      	mov	r1, r9
 8008b74:	008b      	lsls	r3, r1, #2
 8008b76:	4641      	mov	r1, r8
 8008b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	008a      	lsls	r2, r1, #2
 8008b80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b84:	f7f7 ff72 	bl	8000a6c <__aeabi_uldivmod>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <UART_SetConfig+0x4e4>)
 8008b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b92:	095b      	lsrs	r3, r3, #5
 8008b94:	2164      	movs	r1, #100	; 0x64
 8008b96:	fb01 f303 	mul.w	r3, r1, r3
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	3332      	adds	r3, #50	; 0x32
 8008ba0:	4a08      	ldr	r2, [pc, #32]	; (8008bc4 <UART_SetConfig+0x4e4>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	095b      	lsrs	r3, r3, #5
 8008ba8:	f003 020f 	and.w	r2, r3, #15
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4422      	add	r2, r4
 8008bb4:	609a      	str	r2, [r3, #8]
}
 8008bb6:	bf00      	nop
 8008bb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc2:	bf00      	nop
 8008bc4:	51eb851f 	.word	0x51eb851f

08008bc8 <__errno>:
 8008bc8:	4b01      	ldr	r3, [pc, #4]	; (8008bd0 <__errno+0x8>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000018 	.word	0x20000018

08008bd4 <__libc_init_array>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4d0d      	ldr	r5, [pc, #52]	; (8008c0c <__libc_init_array+0x38>)
 8008bd8:	4c0d      	ldr	r4, [pc, #52]	; (8008c10 <__libc_init_array+0x3c>)
 8008bda:	1b64      	subs	r4, r4, r5
 8008bdc:	10a4      	asrs	r4, r4, #2
 8008bde:	2600      	movs	r6, #0
 8008be0:	42a6      	cmp	r6, r4
 8008be2:	d109      	bne.n	8008bf8 <__libc_init_array+0x24>
 8008be4:	4d0b      	ldr	r5, [pc, #44]	; (8008c14 <__libc_init_array+0x40>)
 8008be6:	4c0c      	ldr	r4, [pc, #48]	; (8008c18 <__libc_init_array+0x44>)
 8008be8:	f000 fc8e 	bl	8009508 <_init>
 8008bec:	1b64      	subs	r4, r4, r5
 8008bee:	10a4      	asrs	r4, r4, #2
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	42a6      	cmp	r6, r4
 8008bf4:	d105      	bne.n	8008c02 <__libc_init_array+0x2e>
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfc:	4798      	blx	r3
 8008bfe:	3601      	adds	r6, #1
 8008c00:	e7ee      	b.n	8008be0 <__libc_init_array+0xc>
 8008c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c06:	4798      	blx	r3
 8008c08:	3601      	adds	r6, #1
 8008c0a:	e7f2      	b.n	8008bf2 <__libc_init_array+0x1e>
 8008c0c:	08009950 	.word	0x08009950
 8008c10:	08009950 	.word	0x08009950
 8008c14:	08009950 	.word	0x08009950
 8008c18:	08009954 	.word	0x08009954

08008c1c <memset>:
 8008c1c:	4402      	add	r2, r0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d100      	bne.n	8008c26 <memset+0xa>
 8008c24:	4770      	bx	lr
 8008c26:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2a:	e7f9      	b.n	8008c20 <memset+0x4>

08008c2c <siprintf>:
 8008c2c:	b40e      	push	{r1, r2, r3}
 8008c2e:	b500      	push	{lr}
 8008c30:	b09c      	sub	sp, #112	; 0x70
 8008c32:	ab1d      	add	r3, sp, #116	; 0x74
 8008c34:	9002      	str	r0, [sp, #8]
 8008c36:	9006      	str	r0, [sp, #24]
 8008c38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c3c:	4809      	ldr	r0, [pc, #36]	; (8008c64 <siprintf+0x38>)
 8008c3e:	9107      	str	r1, [sp, #28]
 8008c40:	9104      	str	r1, [sp, #16]
 8008c42:	4909      	ldr	r1, [pc, #36]	; (8008c68 <siprintf+0x3c>)
 8008c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c48:	9105      	str	r1, [sp, #20]
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	a902      	add	r1, sp, #8
 8008c50:	f000 f868 	bl	8008d24 <_svfiprintf_r>
 8008c54:	9b02      	ldr	r3, [sp, #8]
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	b01c      	add	sp, #112	; 0x70
 8008c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c60:	b003      	add	sp, #12
 8008c62:	4770      	bx	lr
 8008c64:	20000018 	.word	0x20000018
 8008c68:	ffff0208 	.word	0xffff0208

08008c6c <__ssputs_r>:
 8008c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c70:	688e      	ldr	r6, [r1, #8]
 8008c72:	429e      	cmp	r6, r3
 8008c74:	4682      	mov	sl, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	4690      	mov	r8, r2
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	d838      	bhi.n	8008cf0 <__ssputs_r+0x84>
 8008c7e:	898a      	ldrh	r2, [r1, #12]
 8008c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c84:	d032      	beq.n	8008cec <__ssputs_r+0x80>
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	6909      	ldr	r1, [r1, #16]
 8008c8a:	eba5 0901 	sub.w	r9, r5, r1
 8008c8e:	6965      	ldr	r5, [r4, #20]
 8008c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c98:	3301      	adds	r3, #1
 8008c9a:	444b      	add	r3, r9
 8008c9c:	106d      	asrs	r5, r5, #1
 8008c9e:	429d      	cmp	r5, r3
 8008ca0:	bf38      	it	cc
 8008ca2:	461d      	movcc	r5, r3
 8008ca4:	0553      	lsls	r3, r2, #21
 8008ca6:	d531      	bpl.n	8008d0c <__ssputs_r+0xa0>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f000 fb63 	bl	8009374 <_malloc_r>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	b950      	cbnz	r0, 8008cc8 <__ssputs_r+0x5c>
 8008cb2:	230c      	movs	r3, #12
 8008cb4:	f8ca 3000 	str.w	r3, [sl]
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc8:	6921      	ldr	r1, [r4, #16]
 8008cca:	464a      	mov	r2, r9
 8008ccc:	f000 fabe 	bl	800924c <memcpy>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	6126      	str	r6, [r4, #16]
 8008cde:	6165      	str	r5, [r4, #20]
 8008ce0:	444e      	add	r6, r9
 8008ce2:	eba5 0509 	sub.w	r5, r5, r9
 8008ce6:	6026      	str	r6, [r4, #0]
 8008ce8:	60a5      	str	r5, [r4, #8]
 8008cea:	463e      	mov	r6, r7
 8008cec:	42be      	cmp	r6, r7
 8008cee:	d900      	bls.n	8008cf2 <__ssputs_r+0x86>
 8008cf0:	463e      	mov	r6, r7
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	4632      	mov	r2, r6
 8008cf6:	4641      	mov	r1, r8
 8008cf8:	f000 fab6 	bl	8009268 <memmove>
 8008cfc:	68a3      	ldr	r3, [r4, #8]
 8008cfe:	1b9b      	subs	r3, r3, r6
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	4433      	add	r3, r6
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	2000      	movs	r0, #0
 8008d0a:	e7db      	b.n	8008cc4 <__ssputs_r+0x58>
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	f000 fba5 	bl	800945c <_realloc_r>
 8008d12:	4606      	mov	r6, r0
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1e1      	bne.n	8008cdc <__ssputs_r+0x70>
 8008d18:	6921      	ldr	r1, [r4, #16]
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	f000 fabe 	bl	800929c <_free_r>
 8008d20:	e7c7      	b.n	8008cb2 <__ssputs_r+0x46>
	...

08008d24 <_svfiprintf_r>:
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	4698      	mov	r8, r3
 8008d2a:	898b      	ldrh	r3, [r1, #12]
 8008d2c:	061b      	lsls	r3, r3, #24
 8008d2e:	b09d      	sub	sp, #116	; 0x74
 8008d30:	4607      	mov	r7, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	d50e      	bpl.n	8008d56 <_svfiprintf_r+0x32>
 8008d38:	690b      	ldr	r3, [r1, #16]
 8008d3a:	b963      	cbnz	r3, 8008d56 <_svfiprintf_r+0x32>
 8008d3c:	2140      	movs	r1, #64	; 0x40
 8008d3e:	f000 fb19 	bl	8009374 <_malloc_r>
 8008d42:	6028      	str	r0, [r5, #0]
 8008d44:	6128      	str	r0, [r5, #16]
 8008d46:	b920      	cbnz	r0, 8008d52 <_svfiprintf_r+0x2e>
 8008d48:	230c      	movs	r3, #12
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	e0d1      	b.n	8008ef6 <_svfiprintf_r+0x1d2>
 8008d52:	2340      	movs	r3, #64	; 0x40
 8008d54:	616b      	str	r3, [r5, #20]
 8008d56:	2300      	movs	r3, #0
 8008d58:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5a:	2320      	movs	r3, #32
 8008d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d64:	2330      	movs	r3, #48	; 0x30
 8008d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f10 <_svfiprintf_r+0x1ec>
 8008d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d6e:	f04f 0901 	mov.w	r9, #1
 8008d72:	4623      	mov	r3, r4
 8008d74:	469a      	mov	sl, r3
 8008d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d7a:	b10a      	cbz	r2, 8008d80 <_svfiprintf_r+0x5c>
 8008d7c:	2a25      	cmp	r2, #37	; 0x25
 8008d7e:	d1f9      	bne.n	8008d74 <_svfiprintf_r+0x50>
 8008d80:	ebba 0b04 	subs.w	fp, sl, r4
 8008d84:	d00b      	beq.n	8008d9e <_svfiprintf_r+0x7a>
 8008d86:	465b      	mov	r3, fp
 8008d88:	4622      	mov	r2, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff ff6d 	bl	8008c6c <__ssputs_r>
 8008d92:	3001      	adds	r0, #1
 8008d94:	f000 80aa 	beq.w	8008eec <_svfiprintf_r+0x1c8>
 8008d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9a:	445a      	add	r2, fp
 8008d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 80a2 	beq.w	8008eec <_svfiprintf_r+0x1c8>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db2:	f10a 0a01 	add.w	sl, sl, #1
 8008db6:	9304      	str	r3, [sp, #16]
 8008db8:	9307      	str	r3, [sp, #28]
 8008dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc0:	4654      	mov	r4, sl
 8008dc2:	2205      	movs	r2, #5
 8008dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc8:	4851      	ldr	r0, [pc, #324]	; (8008f10 <_svfiprintf_r+0x1ec>)
 8008dca:	f7f7 fa11 	bl	80001f0 <memchr>
 8008dce:	9a04      	ldr	r2, [sp, #16]
 8008dd0:	b9d8      	cbnz	r0, 8008e0a <_svfiprintf_r+0xe6>
 8008dd2:	06d0      	lsls	r0, r2, #27
 8008dd4:	bf44      	itt	mi
 8008dd6:	2320      	movmi	r3, #32
 8008dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ddc:	0711      	lsls	r1, r2, #28
 8008dde:	bf44      	itt	mi
 8008de0:	232b      	movmi	r3, #43	; 0x2b
 8008de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dea:	2b2a      	cmp	r3, #42	; 0x2a
 8008dec:	d015      	beq.n	8008e1a <_svfiprintf_r+0xf6>
 8008dee:	9a07      	ldr	r2, [sp, #28]
 8008df0:	4654      	mov	r4, sl
 8008df2:	2000      	movs	r0, #0
 8008df4:	f04f 0c0a 	mov.w	ip, #10
 8008df8:	4621      	mov	r1, r4
 8008dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dfe:	3b30      	subs	r3, #48	; 0x30
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d94e      	bls.n	8008ea2 <_svfiprintf_r+0x17e>
 8008e04:	b1b0      	cbz	r0, 8008e34 <_svfiprintf_r+0x110>
 8008e06:	9207      	str	r2, [sp, #28]
 8008e08:	e014      	b.n	8008e34 <_svfiprintf_r+0x110>
 8008e0a:	eba0 0308 	sub.w	r3, r0, r8
 8008e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e12:	4313      	orrs	r3, r2
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	46a2      	mov	sl, r4
 8008e18:	e7d2      	b.n	8008dc0 <_svfiprintf_r+0x9c>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	1d19      	adds	r1, r3, #4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	9103      	str	r1, [sp, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bfbb      	ittet	lt
 8008e26:	425b      	neglt	r3, r3
 8008e28:	f042 0202 	orrlt.w	r2, r2, #2
 8008e2c:	9307      	strge	r3, [sp, #28]
 8008e2e:	9307      	strlt	r3, [sp, #28]
 8008e30:	bfb8      	it	lt
 8008e32:	9204      	strlt	r2, [sp, #16]
 8008e34:	7823      	ldrb	r3, [r4, #0]
 8008e36:	2b2e      	cmp	r3, #46	; 0x2e
 8008e38:	d10c      	bne.n	8008e54 <_svfiprintf_r+0x130>
 8008e3a:	7863      	ldrb	r3, [r4, #1]
 8008e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3e:	d135      	bne.n	8008eac <_svfiprintf_r+0x188>
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	1d1a      	adds	r2, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	9203      	str	r2, [sp, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfb8      	it	lt
 8008e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e50:	3402      	adds	r4, #2
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f20 <_svfiprintf_r+0x1fc>
 8008e58:	7821      	ldrb	r1, [r4, #0]
 8008e5a:	2203      	movs	r2, #3
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	f7f7 f9c7 	bl	80001f0 <memchr>
 8008e62:	b140      	cbz	r0, 8008e76 <_svfiprintf_r+0x152>
 8008e64:	2340      	movs	r3, #64	; 0x40
 8008e66:	eba0 000a 	sub.w	r0, r0, sl
 8008e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	4303      	orrs	r3, r0
 8008e72:	3401      	adds	r4, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4826      	ldr	r0, [pc, #152]	; (8008f14 <_svfiprintf_r+0x1f0>)
 8008e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e80:	2206      	movs	r2, #6
 8008e82:	f7f7 f9b5 	bl	80001f0 <memchr>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d038      	beq.n	8008efc <_svfiprintf_r+0x1d8>
 8008e8a:	4b23      	ldr	r3, [pc, #140]	; (8008f18 <_svfiprintf_r+0x1f4>)
 8008e8c:	bb1b      	cbnz	r3, 8008ed6 <_svfiprintf_r+0x1b2>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	3308      	adds	r3, #8
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	4433      	add	r3, r6
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	e767      	b.n	8008d72 <_svfiprintf_r+0x4e>
 8008ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e7a5      	b.n	8008df8 <_svfiprintf_r+0xd4>
 8008eac:	2300      	movs	r3, #0
 8008eae:	3401      	adds	r4, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ebe:	3a30      	subs	r2, #48	; 0x30
 8008ec0:	2a09      	cmp	r2, #9
 8008ec2:	d903      	bls.n	8008ecc <_svfiprintf_r+0x1a8>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c5      	beq.n	8008e54 <_svfiprintf_r+0x130>
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	e7c3      	b.n	8008e54 <_svfiprintf_r+0x130>
 8008ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e7f0      	b.n	8008eb8 <_svfiprintf_r+0x194>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <_svfiprintf_r+0x1f8>)
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f3af 8000 	nop.w
 8008ee6:	1c42      	adds	r2, r0, #1
 8008ee8:	4606      	mov	r6, r0
 8008eea:	d1d6      	bne.n	8008e9a <_svfiprintf_r+0x176>
 8008eec:	89ab      	ldrh	r3, [r5, #12]
 8008eee:	065b      	lsls	r3, r3, #25
 8008ef0:	f53f af2c 	bmi.w	8008d4c <_svfiprintf_r+0x28>
 8008ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef6:	b01d      	add	sp, #116	; 0x74
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	ab03      	add	r3, sp, #12
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	462a      	mov	r2, r5
 8008f02:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <_svfiprintf_r+0x1f8>)
 8008f04:	a904      	add	r1, sp, #16
 8008f06:	4638      	mov	r0, r7
 8008f08:	f000 f87a 	bl	8009000 <_printf_i>
 8008f0c:	e7eb      	b.n	8008ee6 <_svfiprintf_r+0x1c2>
 8008f0e:	bf00      	nop
 8008f10:	08009914 	.word	0x08009914
 8008f14:	0800991e 	.word	0x0800991e
 8008f18:	00000000 	.word	0x00000000
 8008f1c:	08008c6d 	.word	0x08008c6d
 8008f20:	0800991a 	.word	0x0800991a

08008f24 <_printf_common>:
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4616      	mov	r6, r2
 8008f2a:	4699      	mov	r9, r3
 8008f2c:	688a      	ldr	r2, [r1, #8]
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfb8      	it	lt
 8008f38:	4613      	movlt	r3, r2
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f40:	4607      	mov	r7, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b10a      	cbz	r2, 8008f4a <_printf_common+0x26>
 8008f46:	3301      	adds	r3, #1
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	0699      	lsls	r1, r3, #26
 8008f4e:	bf42      	ittt	mi
 8008f50:	6833      	ldrmi	r3, [r6, #0]
 8008f52:	3302      	addmi	r3, #2
 8008f54:	6033      	strmi	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f015 0506 	ands.w	r5, r5, #6
 8008f5c:	d106      	bne.n	8008f6c <_printf_common+0x48>
 8008f5e:	f104 0a19 	add.w	sl, r4, #25
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	6832      	ldr	r2, [r6, #0]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc26      	bgt.n	8008fba <_printf_common+0x96>
 8008f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f70:	1e13      	subs	r3, r2, #0
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	bf18      	it	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	0692      	lsls	r2, r2, #26
 8008f7a:	d42b      	bmi.n	8008fd4 <_printf_common+0xb0>
 8008f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f80:	4649      	mov	r1, r9
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d01e      	beq.n	8008fc8 <_printf_common+0xa4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	68e5      	ldr	r5, [r4, #12]
 8008f8e:	6832      	ldr	r2, [r6, #0]
 8008f90:	f003 0306 	and.w	r3, r3, #6
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	bf08      	it	eq
 8008f98:	1aad      	subeq	r5, r5, r2
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	bf0c      	ite	eq
 8008fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa4:	2500      	movne	r5, #0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bfc4      	itt	gt
 8008faa:	1a9b      	subgt	r3, r3, r2
 8008fac:	18ed      	addgt	r5, r5, r3
 8008fae:	2600      	movs	r6, #0
 8008fb0:	341a      	adds	r4, #26
 8008fb2:	42b5      	cmp	r5, r6
 8008fb4:	d11a      	bne.n	8008fec <_printf_common+0xc8>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e008      	b.n	8008fcc <_printf_common+0xa8>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	47c0      	blx	r8
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d103      	bne.n	8008fd0 <_printf_common+0xac>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7c6      	b.n	8008f62 <_printf_common+0x3e>
 8008fd4:	18e1      	adds	r1, r4, r3
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	2030      	movs	r0, #48	; 0x30
 8008fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fde:	4422      	add	r2, r4
 8008fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fe8:	3302      	adds	r3, #2
 8008fea:	e7c7      	b.n	8008f7c <_printf_common+0x58>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	47c0      	blx	r8
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d0e6      	beq.n	8008fc8 <_printf_common+0xa4>
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7d9      	b.n	8008fb2 <_printf_common+0x8e>
	...

08009000 <_printf_i>:
 8009000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	7e0f      	ldrb	r7, [r1, #24]
 8009006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009008:	2f78      	cmp	r7, #120	; 0x78
 800900a:	4691      	mov	r9, r2
 800900c:	4680      	mov	r8, r0
 800900e:	460c      	mov	r4, r1
 8009010:	469a      	mov	sl, r3
 8009012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009016:	d807      	bhi.n	8009028 <_printf_i+0x28>
 8009018:	2f62      	cmp	r7, #98	; 0x62
 800901a:	d80a      	bhi.n	8009032 <_printf_i+0x32>
 800901c:	2f00      	cmp	r7, #0
 800901e:	f000 80d8 	beq.w	80091d2 <_printf_i+0x1d2>
 8009022:	2f58      	cmp	r7, #88	; 0x58
 8009024:	f000 80a3 	beq.w	800916e <_printf_i+0x16e>
 8009028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800902c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009030:	e03a      	b.n	80090a8 <_printf_i+0xa8>
 8009032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009036:	2b15      	cmp	r3, #21
 8009038:	d8f6      	bhi.n	8009028 <_printf_i+0x28>
 800903a:	a101      	add	r1, pc, #4	; (adr r1, 8009040 <_printf_i+0x40>)
 800903c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009040:	08009099 	.word	0x08009099
 8009044:	080090ad 	.word	0x080090ad
 8009048:	08009029 	.word	0x08009029
 800904c:	08009029 	.word	0x08009029
 8009050:	08009029 	.word	0x08009029
 8009054:	08009029 	.word	0x08009029
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009029 	.word	0x08009029
 8009060:	08009029 	.word	0x08009029
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	080091b9 	.word	0x080091b9
 8009070:	080090dd 	.word	0x080090dd
 8009074:	0800919b 	.word	0x0800919b
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091db 	.word	0x080091db
 8009084:	08009029 	.word	0x08009029
 8009088:	080090dd 	.word	0x080090dd
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	080091a3 	.word	0x080091a3
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	602a      	str	r2, [r5, #0]
 80090a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0a3      	b.n	80091f4 <_printf_i+0x1f4>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	0606      	lsls	r6, r0, #24
 80090b2:	f101 0304 	add.w	r3, r1, #4
 80090b6:	d50a      	bpl.n	80090ce <_printf_i+0xce>
 80090b8:	680e      	ldr	r6, [r1, #0]
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	2e00      	cmp	r6, #0
 80090be:	da03      	bge.n	80090c8 <_printf_i+0xc8>
 80090c0:	232d      	movs	r3, #45	; 0x2d
 80090c2:	4276      	negs	r6, r6
 80090c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c8:	485e      	ldr	r0, [pc, #376]	; (8009244 <_printf_i+0x244>)
 80090ca:	230a      	movs	r3, #10
 80090cc:	e019      	b.n	8009102 <_printf_i+0x102>
 80090ce:	680e      	ldr	r6, [r1, #0]
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090d6:	bf18      	it	ne
 80090d8:	b236      	sxthne	r6, r6
 80090da:	e7ef      	b.n	80090bc <_printf_i+0xbc>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	6820      	ldr	r0, [r4, #0]
 80090e0:	1d19      	adds	r1, r3, #4
 80090e2:	6029      	str	r1, [r5, #0]
 80090e4:	0601      	lsls	r1, r0, #24
 80090e6:	d501      	bpl.n	80090ec <_printf_i+0xec>
 80090e8:	681e      	ldr	r6, [r3, #0]
 80090ea:	e002      	b.n	80090f2 <_printf_i+0xf2>
 80090ec:	0646      	lsls	r6, r0, #25
 80090ee:	d5fb      	bpl.n	80090e8 <_printf_i+0xe8>
 80090f0:	881e      	ldrh	r6, [r3, #0]
 80090f2:	4854      	ldr	r0, [pc, #336]	; (8009244 <_printf_i+0x244>)
 80090f4:	2f6f      	cmp	r7, #111	; 0x6f
 80090f6:	bf0c      	ite	eq
 80090f8:	2308      	moveq	r3, #8
 80090fa:	230a      	movne	r3, #10
 80090fc:	2100      	movs	r1, #0
 80090fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009102:	6865      	ldr	r5, [r4, #4]
 8009104:	60a5      	str	r5, [r4, #8]
 8009106:	2d00      	cmp	r5, #0
 8009108:	bfa2      	ittt	ge
 800910a:	6821      	ldrge	r1, [r4, #0]
 800910c:	f021 0104 	bicge.w	r1, r1, #4
 8009110:	6021      	strge	r1, [r4, #0]
 8009112:	b90e      	cbnz	r6, 8009118 <_printf_i+0x118>
 8009114:	2d00      	cmp	r5, #0
 8009116:	d04d      	beq.n	80091b4 <_printf_i+0x1b4>
 8009118:	4615      	mov	r5, r2
 800911a:	fbb6 f1f3 	udiv	r1, r6, r3
 800911e:	fb03 6711 	mls	r7, r3, r1, r6
 8009122:	5dc7      	ldrb	r7, [r0, r7]
 8009124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009128:	4637      	mov	r7, r6
 800912a:	42bb      	cmp	r3, r7
 800912c:	460e      	mov	r6, r1
 800912e:	d9f4      	bls.n	800911a <_printf_i+0x11a>
 8009130:	2b08      	cmp	r3, #8
 8009132:	d10b      	bne.n	800914c <_printf_i+0x14c>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	07de      	lsls	r6, r3, #31
 8009138:	d508      	bpl.n	800914c <_printf_i+0x14c>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	6861      	ldr	r1, [r4, #4]
 800913e:	4299      	cmp	r1, r3
 8009140:	bfde      	ittt	le
 8009142:	2330      	movle	r3, #48	; 0x30
 8009144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800914c:	1b52      	subs	r2, r2, r5
 800914e:	6122      	str	r2, [r4, #16]
 8009150:	f8cd a000 	str.w	sl, [sp]
 8009154:	464b      	mov	r3, r9
 8009156:	aa03      	add	r2, sp, #12
 8009158:	4621      	mov	r1, r4
 800915a:	4640      	mov	r0, r8
 800915c:	f7ff fee2 	bl	8008f24 <_printf_common>
 8009160:	3001      	adds	r0, #1
 8009162:	d14c      	bne.n	80091fe <_printf_i+0x1fe>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b004      	add	sp, #16
 800916a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916e:	4835      	ldr	r0, [pc, #212]	; (8009244 <_printf_i+0x244>)
 8009170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009174:	6829      	ldr	r1, [r5, #0]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f851 6b04 	ldr.w	r6, [r1], #4
 800917c:	6029      	str	r1, [r5, #0]
 800917e:	061d      	lsls	r5, r3, #24
 8009180:	d514      	bpl.n	80091ac <_printf_i+0x1ac>
 8009182:	07df      	lsls	r7, r3, #31
 8009184:	bf44      	itt	mi
 8009186:	f043 0320 	orrmi.w	r3, r3, #32
 800918a:	6023      	strmi	r3, [r4, #0]
 800918c:	b91e      	cbnz	r6, 8009196 <_printf_i+0x196>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	f023 0320 	bic.w	r3, r3, #32
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	2310      	movs	r3, #16
 8009198:	e7b0      	b.n	80090fc <_printf_i+0xfc>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f043 0320 	orr.w	r3, r3, #32
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	2378      	movs	r3, #120	; 0x78
 80091a4:	4828      	ldr	r0, [pc, #160]	; (8009248 <_printf_i+0x248>)
 80091a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091aa:	e7e3      	b.n	8009174 <_printf_i+0x174>
 80091ac:	0659      	lsls	r1, r3, #25
 80091ae:	bf48      	it	mi
 80091b0:	b2b6      	uxthmi	r6, r6
 80091b2:	e7e6      	b.n	8009182 <_printf_i+0x182>
 80091b4:	4615      	mov	r5, r2
 80091b6:	e7bb      	b.n	8009130 <_printf_i+0x130>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	6826      	ldr	r6, [r4, #0]
 80091bc:	6961      	ldr	r1, [r4, #20]
 80091be:	1d18      	adds	r0, r3, #4
 80091c0:	6028      	str	r0, [r5, #0]
 80091c2:	0635      	lsls	r5, r6, #24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0x1cc>
 80091c8:	6019      	str	r1, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0x1d2>
 80091cc:	0670      	lsls	r0, r6, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0x1c8>
 80091d0:	8019      	strh	r1, [r3, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	4615      	mov	r5, r2
 80091d8:	e7ba      	b.n	8009150 <_printf_i+0x150>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	1d1a      	adds	r2, r3, #4
 80091de:	602a      	str	r2, [r5, #0]
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	2100      	movs	r1, #0
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7f7 f802 	bl	80001f0 <memchr>
 80091ec:	b108      	cbz	r0, 80091f2 <_printf_i+0x1f2>
 80091ee:	1b40      	subs	r0, r0, r5
 80091f0:	6060      	str	r0, [r4, #4]
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	6123      	str	r3, [r4, #16]
 80091f6:	2300      	movs	r3, #0
 80091f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fc:	e7a8      	b.n	8009150 <_printf_i+0x150>
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	462a      	mov	r2, r5
 8009202:	4649      	mov	r1, r9
 8009204:	4640      	mov	r0, r8
 8009206:	47d0      	blx	sl
 8009208:	3001      	adds	r0, #1
 800920a:	d0ab      	beq.n	8009164 <_printf_i+0x164>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	079b      	lsls	r3, r3, #30
 8009210:	d413      	bmi.n	800923a <_printf_i+0x23a>
 8009212:	68e0      	ldr	r0, [r4, #12]
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	4298      	cmp	r0, r3
 8009218:	bfb8      	it	lt
 800921a:	4618      	movlt	r0, r3
 800921c:	e7a4      	b.n	8009168 <_printf_i+0x168>
 800921e:	2301      	movs	r3, #1
 8009220:	4632      	mov	r2, r6
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	47d0      	blx	sl
 8009228:	3001      	adds	r0, #1
 800922a:	d09b      	beq.n	8009164 <_printf_i+0x164>
 800922c:	3501      	adds	r5, #1
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	9903      	ldr	r1, [sp, #12]
 8009232:	1a5b      	subs	r3, r3, r1
 8009234:	42ab      	cmp	r3, r5
 8009236:	dcf2      	bgt.n	800921e <_printf_i+0x21e>
 8009238:	e7eb      	b.n	8009212 <_printf_i+0x212>
 800923a:	2500      	movs	r5, #0
 800923c:	f104 0619 	add.w	r6, r4, #25
 8009240:	e7f5      	b.n	800922e <_printf_i+0x22e>
 8009242:	bf00      	nop
 8009244:	08009925 	.word	0x08009925
 8009248:	08009936 	.word	0x08009936

0800924c <memcpy>:
 800924c:	440a      	add	r2, r1
 800924e:	4291      	cmp	r1, r2
 8009250:	f100 33ff 	add.w	r3, r0, #4294967295
 8009254:	d100      	bne.n	8009258 <memcpy+0xc>
 8009256:	4770      	bx	lr
 8009258:	b510      	push	{r4, lr}
 800925a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009262:	4291      	cmp	r1, r2
 8009264:	d1f9      	bne.n	800925a <memcpy+0xe>
 8009266:	bd10      	pop	{r4, pc}

08009268 <memmove>:
 8009268:	4288      	cmp	r0, r1
 800926a:	b510      	push	{r4, lr}
 800926c:	eb01 0402 	add.w	r4, r1, r2
 8009270:	d902      	bls.n	8009278 <memmove+0x10>
 8009272:	4284      	cmp	r4, r0
 8009274:	4623      	mov	r3, r4
 8009276:	d807      	bhi.n	8009288 <memmove+0x20>
 8009278:	1e43      	subs	r3, r0, #1
 800927a:	42a1      	cmp	r1, r4
 800927c:	d008      	beq.n	8009290 <memmove+0x28>
 800927e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009286:	e7f8      	b.n	800927a <memmove+0x12>
 8009288:	4402      	add	r2, r0
 800928a:	4601      	mov	r1, r0
 800928c:	428a      	cmp	r2, r1
 800928e:	d100      	bne.n	8009292 <memmove+0x2a>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800929a:	e7f7      	b.n	800928c <memmove+0x24>

0800929c <_free_r>:
 800929c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800929e:	2900      	cmp	r1, #0
 80092a0:	d044      	beq.n	800932c <_free_r+0x90>
 80092a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a6:	9001      	str	r0, [sp, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f1a1 0404 	sub.w	r4, r1, #4
 80092ae:	bfb8      	it	lt
 80092b0:	18e4      	addlt	r4, r4, r3
 80092b2:	f000 f913 	bl	80094dc <__malloc_lock>
 80092b6:	4a1e      	ldr	r2, [pc, #120]	; (8009330 <_free_r+0x94>)
 80092b8:	9801      	ldr	r0, [sp, #4]
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	b933      	cbnz	r3, 80092cc <_free_r+0x30>
 80092be:	6063      	str	r3, [r4, #4]
 80092c0:	6014      	str	r4, [r2, #0]
 80092c2:	b003      	add	sp, #12
 80092c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c8:	f000 b90e 	b.w	80094e8 <__malloc_unlock>
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	d908      	bls.n	80092e2 <_free_r+0x46>
 80092d0:	6825      	ldr	r5, [r4, #0]
 80092d2:	1961      	adds	r1, r4, r5
 80092d4:	428b      	cmp	r3, r1
 80092d6:	bf01      	itttt	eq
 80092d8:	6819      	ldreq	r1, [r3, #0]
 80092da:	685b      	ldreq	r3, [r3, #4]
 80092dc:	1949      	addeq	r1, r1, r5
 80092de:	6021      	streq	r1, [r4, #0]
 80092e0:	e7ed      	b.n	80092be <_free_r+0x22>
 80092e2:	461a      	mov	r2, r3
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	b10b      	cbz	r3, 80092ec <_free_r+0x50>
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d9fa      	bls.n	80092e2 <_free_r+0x46>
 80092ec:	6811      	ldr	r1, [r2, #0]
 80092ee:	1855      	adds	r5, r2, r1
 80092f0:	42a5      	cmp	r5, r4
 80092f2:	d10b      	bne.n	800930c <_free_r+0x70>
 80092f4:	6824      	ldr	r4, [r4, #0]
 80092f6:	4421      	add	r1, r4
 80092f8:	1854      	adds	r4, r2, r1
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	6011      	str	r1, [r2, #0]
 80092fe:	d1e0      	bne.n	80092c2 <_free_r+0x26>
 8009300:	681c      	ldr	r4, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	6053      	str	r3, [r2, #4]
 8009306:	4421      	add	r1, r4
 8009308:	6011      	str	r1, [r2, #0]
 800930a:	e7da      	b.n	80092c2 <_free_r+0x26>
 800930c:	d902      	bls.n	8009314 <_free_r+0x78>
 800930e:	230c      	movs	r3, #12
 8009310:	6003      	str	r3, [r0, #0]
 8009312:	e7d6      	b.n	80092c2 <_free_r+0x26>
 8009314:	6825      	ldr	r5, [r4, #0]
 8009316:	1961      	adds	r1, r4, r5
 8009318:	428b      	cmp	r3, r1
 800931a:	bf04      	itt	eq
 800931c:	6819      	ldreq	r1, [r3, #0]
 800931e:	685b      	ldreq	r3, [r3, #4]
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	bf04      	itt	eq
 8009324:	1949      	addeq	r1, r1, r5
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	6054      	str	r4, [r2, #4]
 800932a:	e7ca      	b.n	80092c2 <_free_r+0x26>
 800932c:	b003      	add	sp, #12
 800932e:	bd30      	pop	{r4, r5, pc}
 8009330:	20000414 	.word	0x20000414

08009334 <sbrk_aligned>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	4e0e      	ldr	r6, [pc, #56]	; (8009370 <sbrk_aligned+0x3c>)
 8009338:	460c      	mov	r4, r1
 800933a:	6831      	ldr	r1, [r6, #0]
 800933c:	4605      	mov	r5, r0
 800933e:	b911      	cbnz	r1, 8009346 <sbrk_aligned+0x12>
 8009340:	f000 f8bc 	bl	80094bc <_sbrk_r>
 8009344:	6030      	str	r0, [r6, #0]
 8009346:	4621      	mov	r1, r4
 8009348:	4628      	mov	r0, r5
 800934a:	f000 f8b7 	bl	80094bc <_sbrk_r>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d00a      	beq.n	8009368 <sbrk_aligned+0x34>
 8009352:	1cc4      	adds	r4, r0, #3
 8009354:	f024 0403 	bic.w	r4, r4, #3
 8009358:	42a0      	cmp	r0, r4
 800935a:	d007      	beq.n	800936c <sbrk_aligned+0x38>
 800935c:	1a21      	subs	r1, r4, r0
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f8ac 	bl	80094bc <_sbrk_r>
 8009364:	3001      	adds	r0, #1
 8009366:	d101      	bne.n	800936c <sbrk_aligned+0x38>
 8009368:	f04f 34ff 	mov.w	r4, #4294967295
 800936c:	4620      	mov	r0, r4
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	20000418 	.word	0x20000418

08009374 <_malloc_r>:
 8009374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009378:	1ccd      	adds	r5, r1, #3
 800937a:	f025 0503 	bic.w	r5, r5, #3
 800937e:	3508      	adds	r5, #8
 8009380:	2d0c      	cmp	r5, #12
 8009382:	bf38      	it	cc
 8009384:	250c      	movcc	r5, #12
 8009386:	2d00      	cmp	r5, #0
 8009388:	4607      	mov	r7, r0
 800938a:	db01      	blt.n	8009390 <_malloc_r+0x1c>
 800938c:	42a9      	cmp	r1, r5
 800938e:	d905      	bls.n	800939c <_malloc_r+0x28>
 8009390:	230c      	movs	r3, #12
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	2600      	movs	r6, #0
 8009396:	4630      	mov	r0, r6
 8009398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800939c:	4e2e      	ldr	r6, [pc, #184]	; (8009458 <_malloc_r+0xe4>)
 800939e:	f000 f89d 	bl	80094dc <__malloc_lock>
 80093a2:	6833      	ldr	r3, [r6, #0]
 80093a4:	461c      	mov	r4, r3
 80093a6:	bb34      	cbnz	r4, 80093f6 <_malloc_r+0x82>
 80093a8:	4629      	mov	r1, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	f7ff ffc2 	bl	8009334 <sbrk_aligned>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	4604      	mov	r4, r0
 80093b4:	d14d      	bne.n	8009452 <_malloc_r+0xde>
 80093b6:	6834      	ldr	r4, [r6, #0]
 80093b8:	4626      	mov	r6, r4
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d140      	bne.n	8009440 <_malloc_r+0xcc>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	4631      	mov	r1, r6
 80093c2:	4638      	mov	r0, r7
 80093c4:	eb04 0803 	add.w	r8, r4, r3
 80093c8:	f000 f878 	bl	80094bc <_sbrk_r>
 80093cc:	4580      	cmp	r8, r0
 80093ce:	d13a      	bne.n	8009446 <_malloc_r+0xd2>
 80093d0:	6821      	ldr	r1, [r4, #0]
 80093d2:	3503      	adds	r5, #3
 80093d4:	1a6d      	subs	r5, r5, r1
 80093d6:	f025 0503 	bic.w	r5, r5, #3
 80093da:	3508      	adds	r5, #8
 80093dc:	2d0c      	cmp	r5, #12
 80093de:	bf38      	it	cc
 80093e0:	250c      	movcc	r5, #12
 80093e2:	4629      	mov	r1, r5
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff ffa5 	bl	8009334 <sbrk_aligned>
 80093ea:	3001      	adds	r0, #1
 80093ec:	d02b      	beq.n	8009446 <_malloc_r+0xd2>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	442b      	add	r3, r5
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	e00e      	b.n	8009414 <_malloc_r+0xa0>
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	1b52      	subs	r2, r2, r5
 80093fa:	d41e      	bmi.n	800943a <_malloc_r+0xc6>
 80093fc:	2a0b      	cmp	r2, #11
 80093fe:	d916      	bls.n	800942e <_malloc_r+0xba>
 8009400:	1961      	adds	r1, r4, r5
 8009402:	42a3      	cmp	r3, r4
 8009404:	6025      	str	r5, [r4, #0]
 8009406:	bf18      	it	ne
 8009408:	6059      	strne	r1, [r3, #4]
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	bf08      	it	eq
 800940e:	6031      	streq	r1, [r6, #0]
 8009410:	5162      	str	r2, [r4, r5]
 8009412:	604b      	str	r3, [r1, #4]
 8009414:	4638      	mov	r0, r7
 8009416:	f104 060b 	add.w	r6, r4, #11
 800941a:	f000 f865 	bl	80094e8 <__malloc_unlock>
 800941e:	f026 0607 	bic.w	r6, r6, #7
 8009422:	1d23      	adds	r3, r4, #4
 8009424:	1af2      	subs	r2, r6, r3
 8009426:	d0b6      	beq.n	8009396 <_malloc_r+0x22>
 8009428:	1b9b      	subs	r3, r3, r6
 800942a:	50a3      	str	r3, [r4, r2]
 800942c:	e7b3      	b.n	8009396 <_malloc_r+0x22>
 800942e:	6862      	ldr	r2, [r4, #4]
 8009430:	42a3      	cmp	r3, r4
 8009432:	bf0c      	ite	eq
 8009434:	6032      	streq	r2, [r6, #0]
 8009436:	605a      	strne	r2, [r3, #4]
 8009438:	e7ec      	b.n	8009414 <_malloc_r+0xa0>
 800943a:	4623      	mov	r3, r4
 800943c:	6864      	ldr	r4, [r4, #4]
 800943e:	e7b2      	b.n	80093a6 <_malloc_r+0x32>
 8009440:	4634      	mov	r4, r6
 8009442:	6876      	ldr	r6, [r6, #4]
 8009444:	e7b9      	b.n	80093ba <_malloc_r+0x46>
 8009446:	230c      	movs	r3, #12
 8009448:	603b      	str	r3, [r7, #0]
 800944a:	4638      	mov	r0, r7
 800944c:	f000 f84c 	bl	80094e8 <__malloc_unlock>
 8009450:	e7a1      	b.n	8009396 <_malloc_r+0x22>
 8009452:	6025      	str	r5, [r4, #0]
 8009454:	e7de      	b.n	8009414 <_malloc_r+0xa0>
 8009456:	bf00      	nop
 8009458:	20000414 	.word	0x20000414

0800945c <_realloc_r>:
 800945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	4680      	mov	r8, r0
 8009462:	4614      	mov	r4, r2
 8009464:	460e      	mov	r6, r1
 8009466:	b921      	cbnz	r1, 8009472 <_realloc_r+0x16>
 8009468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946c:	4611      	mov	r1, r2
 800946e:	f7ff bf81 	b.w	8009374 <_malloc_r>
 8009472:	b92a      	cbnz	r2, 8009480 <_realloc_r+0x24>
 8009474:	f7ff ff12 	bl	800929c <_free_r>
 8009478:	4625      	mov	r5, r4
 800947a:	4628      	mov	r0, r5
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	f000 f838 	bl	80094f4 <_malloc_usable_size_r>
 8009484:	4284      	cmp	r4, r0
 8009486:	4607      	mov	r7, r0
 8009488:	d802      	bhi.n	8009490 <_realloc_r+0x34>
 800948a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800948e:	d812      	bhi.n	80094b6 <_realloc_r+0x5a>
 8009490:	4621      	mov	r1, r4
 8009492:	4640      	mov	r0, r8
 8009494:	f7ff ff6e 	bl	8009374 <_malloc_r>
 8009498:	4605      	mov	r5, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	d0ed      	beq.n	800947a <_realloc_r+0x1e>
 800949e:	42bc      	cmp	r4, r7
 80094a0:	4622      	mov	r2, r4
 80094a2:	4631      	mov	r1, r6
 80094a4:	bf28      	it	cs
 80094a6:	463a      	movcs	r2, r7
 80094a8:	f7ff fed0 	bl	800924c <memcpy>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4640      	mov	r0, r8
 80094b0:	f7ff fef4 	bl	800929c <_free_r>
 80094b4:	e7e1      	b.n	800947a <_realloc_r+0x1e>
 80094b6:	4635      	mov	r5, r6
 80094b8:	e7df      	b.n	800947a <_realloc_r+0x1e>
	...

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f9 fa10 	bl	80028ec <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	2000041c 	.word	0x2000041c

080094dc <__malloc_lock>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__malloc_lock+0x8>)
 80094de:	f000 b811 	b.w	8009504 <__retarget_lock_acquire_recursive>
 80094e2:	bf00      	nop
 80094e4:	20000420 	.word	0x20000420

080094e8 <__malloc_unlock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__malloc_unlock+0x8>)
 80094ea:	f000 b80c 	b.w	8009506 <__retarget_lock_release_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000420 	.word	0x20000420

080094f4 <_malloc_usable_size_r>:
 80094f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f8:	1f18      	subs	r0, r3, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfbc      	itt	lt
 80094fe:	580b      	ldrlt	r3, [r1, r0]
 8009500:	18c0      	addlt	r0, r0, r3
 8009502:	4770      	bx	lr

08009504 <__retarget_lock_acquire_recursive>:
 8009504:	4770      	bx	lr

08009506 <__retarget_lock_release_recursive>:
 8009506:	4770      	bx	lr

08009508 <_init>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr

08009514 <_fini>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr
