
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a66c  0800a66c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a674  0800a674  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a674  0800a674  0001a674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000080  0800a6f8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800a6f8  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001522d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002649  00000000  00000000  000352d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00038c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001882e  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016483  00000000  00000000  00052676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea5f  00000000  00000000  00068af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056ec  00000000  00000000  001075a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a22c 	.word	0x0800a22c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800a22c 	.word	0x0800a22c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 ff9a 	bl	8002cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f83a 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa9a 	bl	80012b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d80:	f000 fa38 	bl	80011f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d84:	f000 f8f0 	bl	8000f68 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000d88:	f000 f91c 	bl	8000fc4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000d8c:	f000 f9c0 	bl	8001110 <MX_TIM3_Init>
  MX_DMA_Init();
 8000d90:	f000 fa5a 	bl	8001248 <MX_DMA_Init>
  MX_TIM11_Init();
 8000d94:	f000 fa0a 	bl	80011ac <MX_TIM11_Init>
  MX_ADC1_Init();
 8000d98:	f000 f892 	bl	8000ec0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f948 	bl	8001030 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000da0:	2064      	movs	r0, #100	; 0x64
 8000da2:	f001 fff5 	bl	8002d90 <HAL_Delay>
  MCP23017SetInit();
 8000da6:	f001 fa93 	bl	80022d0 <MCP23017SetInit>
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0x68>)
 8000dac:	f006 fc66 	bl	800767c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <main+0x6c>)
 8000db2:	f006 fc63 	bl	800767c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <main+0x70>)
 8000db8:	f006 fc06 	bl	80075c8 <HAL_TIM_Base_Start>
	// Start Input Cap
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &DMAdatabuffer, CAPTURENUM);
 8000dbc:	230d      	movs	r3, #13
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <main+0x74>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <main+0x70>)
 8000dc4:	f006 fd16 	bl	80077f4 <HAL_TIM_IC_Start_DMA>
	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <main+0x78>)
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <main+0x7c>)
 8000dce:	f002 f957 	bl	8003080 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 8000dd2:	f000 faf5 	bl	80013c0 <StateMachineManagment>
 8000dd6:	e7fc      	b.n	8000dd2 <main+0x62>
 8000dd8:	20000238 	.word	0x20000238
 8000ddc:	20000280 	.word	0x20000280
 8000de0:	200001f0 	.word	0x200001f0
 8000de4:	200004b0 	.word	0x200004b0
 8000de8:	200003e0 	.word	0x200003e0
 8000dec:	2000009c 	.word	0x2000009c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2230      	movs	r2, #48	; 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 fd9e 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e54:	2310      	movs	r3, #16
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e60:	2308      	movs	r3, #8
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 fb1b 	bl	80064b0 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e80:	f001 fbe6 	bl	8002650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fd7d 	bl	80069a0 <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eac:	f001 fbd0 	bl	8002650 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	; 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_ADC1_Init+0xa0>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f26:	f001 ff57 	bl	8002dd8 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f30:	f001 fb8e 	bl	8002650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_ADC1_Init+0xa4>)
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f46:	f002 f9a9 	bl	800329c <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f50:	f001 fb7e 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	40012000 	.word	0x40012000
 8000f64:	10000012 	.word	0x10000012

08000f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <MX_I2C1_Init+0x54>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x58>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa6:	f003 faf3 	bl	8004590 <HAL_I2C_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb0:	f001 fb4e 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000144 	.word	0x20000144
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	00061a80 	.word	0x00061a80

08000fc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI3_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ff8:	2230      	movs	r2, #48	; 0x30
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI3_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI3_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI3_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI3_Init+0x64>)
 8001016:	f005 fee3 	bl	8006de0 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001020:	f001 fb16 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000198 	.word	0x20000198
 800102c:	40003c00 	.word	0x40003c00

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM2_Init+0xdc>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_TIM2_Init+0xdc>)
 8001064:	f242 720f 	movw	r2, #9999	; 0x270f
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <MX_TIM2_Init+0xdc>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_TIM2_Init+0xdc>)
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_TIM2_Init+0xdc>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_TIM2_Init+0xdc>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_TIM2_Init+0xdc>)
 8001086:	f006 fa4f 	bl	8007528 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001090:	f001 fade 	bl	8002650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4619      	mov	r1, r3
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <MX_TIM2_Init+0xdc>)
 80010a2:	f006 fee7 	bl	8007e74 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010ac:	f001 fad0 	bl	8002650 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <MX_TIM2_Init+0xdc>)
 80010b2:	f006 fb45 	bl	8007740 <HAL_TIM_IC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010bc:	f001 fac8 	bl	8002650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480f      	ldr	r0, [pc, #60]	; (800110c <MX_TIM2_Init+0xdc>)
 80010d0:	f007 fb12 	bl	80086f8 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80010da:	f001 fab9 	bl	8002650 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010de:	2302      	movs	r3, #2
 80010e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e2:	2301      	movs	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM2_Init+0xdc>)
 80010f6:	f006 fe21 	bl	8007d3c <HAL_TIM_IC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001100:	f001 faa6 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f0 	.word	0x200001f0

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM3_Init+0x94>)
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_TIM3_Init+0x98>)
 8001130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001134:	f242 720f 	movw	r2, #9999	; 0x270f
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001142:	f242 720f 	movw	r2, #9999	; 0x270f
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM3_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001156:	f006 f9e7 	bl	8007528 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001160:	f001 fa76 	bl	8002650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001172:	f006 fe7f 	bl	8007e74 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800117c:	f001 fa68 	bl	8002650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001180:	2320      	movs	r3, #32
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM3_Init+0x94>)
 800118e:	f007 fab3 	bl	80086f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001198:	f001 fa5a 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000238 	.word	0x20000238
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_TIM11_Init+0x40>)
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <MX_TIM11_Init+0x44>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_TIM11_Init+0x40>)
 80011b8:	2263      	movs	r2, #99	; 0x63
 80011ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_TIM11_Init+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_TIM11_Init+0x40>)
 80011c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_TIM11_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_TIM11_Init+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM11_Init+0x40>)
 80011d8:	f006 f9a6 	bl	8007528 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80011e2:	f001 fa35 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000280 	.word	0x20000280
 80011f0:	40014800 	.word	0x40014800

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f007 fae6 	bl	80087fc <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f001 fa0b 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000328 	.word	0x20000328
 8001244:	40004400 	.word	0x40004400

08001248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_DMA_Init+0x68>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_DMA_Init+0x68>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_DMA_Init+0x68>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_DMA_Init+0x68>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <MX_DMA_Init+0x68>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_DMA_Init+0x68>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2010      	movs	r0, #16
 800128c:	f002 fb9b 	bl	80039c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001290:	2010      	movs	r0, #16
 8001292:	f002 fbb4 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2038      	movs	r0, #56	; 0x38
 800129c:	f002 fb93 	bl	80039c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a0:	2038      	movs	r0, #56	; 0x38
 80012a2:	f002 fbac 	bl	80039fe <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_GPIO_Init+0xfc>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001340:	f003 f90c 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_GPIO_Init+0x104>)
 800134c:	f003 f906 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_GPIO_Init+0x108>)
 8001368:	f002 ff74 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001384:	f002 ff66 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_GPIO_Init+0x104>)
 80013a2:	f002 ff57 	bl	8004254 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800

080013c0 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af02      	add	r7, sp, #8
	switch (MCState)
 80013c8:	4ba4      	ldr	r3, [pc, #656]	; (800165c <StateMachineManagment+0x29c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	f200 873b 	bhi.w	8002248 <StateMachineManagment+0xe88>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <StateMachineManagment+0x18>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	080014ab 	.word	0x080014ab
 80013e0:	080017d9 	.word	0x080017d9
 80013e4:	08001dd3 	.word	0x08001dd3
 80013e8:	0800179d 	.word	0x0800179d
 80013ec:	080016b9 	.word	0x080016b9
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 80013f0:	499b      	ldr	r1, [pc, #620]	; (8001660 <StateMachineManagment+0x2a0>)
 80013f2:	489c      	ldr	r0, [pc, #624]	; (8001664 <StateMachineManagment+0x2a4>)
 80013f4:	f008 faac 	bl	8009950 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013f8:	489a      	ldr	r0, [pc, #616]	; (8001664 <StateMachineManagment+0x2a4>)
 80013fa:	f7fe fef1 	bl	80001e0 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29a      	uxth	r2, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	4997      	ldr	r1, [pc, #604]	; (8001664 <StateMachineManagment+0x2a4>)
 8001408:	4897      	ldr	r0, [pc, #604]	; (8001668 <StateMachineManagment+0x2a8>)
 800140a:	f007 fa44 	bl	8008896 <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800140e:	4b97      	ldr	r3, [pc, #604]	; (800166c <StateMachineManagment+0x2ac>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4a97      	ldr	r2, [pc, #604]	; (8001670 <StateMachineManagment+0x2b0>)
 8001414:	7811      	ldrb	r1, [r2, #0]
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	4618      	mov	r0, r3
 800141a:	f000 ff31 	bl	8002280 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 800141e:	4b95      	ldr	r3, [pc, #596]	; (8001674 <StateMachineManagment+0x2b4>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8001424:	4b94      	ldr	r3, [pc, #592]	; (8001678 <StateMachineManagment+0x2b8>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 800142a:	4b94      	ldr	r3, [pc, #592]	; (800167c <StateMachineManagment+0x2bc>)
 800142c:	2200      	movs	r2, #0
 800142e:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <StateMachineManagment+0x2bc>)
 8001432:	2200      	movs	r2, #0
 8001434:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 8001436:	4b91      	ldr	r3, [pc, #580]	; (800167c <StateMachineManagment+0x2bc>)
 8001438:	2200      	movs	r2, #0
 800143a:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 800143c:	4b8f      	ldr	r3, [pc, #572]	; (800167c <StateMachineManagment+0x2bc>)
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 8001442:	4b8f      	ldr	r3, [pc, #572]	; (8001680 <StateMachineManagment+0x2c0>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8001448:	4b8e      	ldr	r3, [pc, #568]	; (8001684 <StateMachineManagment+0x2c4>)
 800144a:	2203      	movs	r2, #3
 800144c:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 800144e:	4b8d      	ldr	r3, [pc, #564]	; (8001684 <StateMachineManagment+0x2c4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	220a      	movs	r2, #10
 8001454:	4619      	mov	r1, r3
 8001456:	488c      	ldr	r0, [pc, #560]	; (8001688 <StateMachineManagment+0x2c8>)
 8001458:	f000 ff8e 	bl	8002378 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 800145c:	2064      	movs	r0, #100	; 0x64
 800145e:	f001 fc97 	bl	8002d90 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <StateMachineManagment+0x2c8>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <StateMachineManagment+0x2bc>)
 8001468:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 800146a:	4b87      	ldr	r3, [pc, #540]	; (8001688 <StateMachineManagment+0x2c8>)
 800146c:	785a      	ldrb	r2, [r3, #1]
 800146e:	4b83      	ldr	r3, [pc, #524]	; (800167c <StateMachineManagment+0x2bc>)
 8001470:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <StateMachineManagment+0x2c8>)
 8001474:	789a      	ldrb	r2, [r3, #2]
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <StateMachineManagment+0x2bc>)
 8001478:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 800147a:	4b83      	ldr	r3, [pc, #524]	; (8001688 <StateMachineManagment+0x2c8>)
 800147c:	789a      	ldrb	r2, [r3, #2]
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <StateMachineManagment+0x2bc>)
 8001480:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001482:	4b7e      	ldr	r3, [pc, #504]	; (800167c <StateMachineManagment+0x2bc>)
 8001484:	78da      	ldrb	r2, [r3, #3]
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <StateMachineManagment+0x2bc>)
 8001488:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 800148a:	4b7c      	ldr	r3, [pc, #496]	; (800167c <StateMachineManagment+0x2bc>)
 800148c:	791a      	ldrb	r2, [r3, #4]
 800148e:	4b7b      	ldr	r3, [pc, #492]	; (800167c <StateMachineManagment+0x2bc>)
 8001490:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <StateMachineManagment+0x2bc>)
 8001494:	795a      	ldrb	r2, [r3, #5]
 8001496:	4b79      	ldr	r3, [pc, #484]	; (800167c <StateMachineManagment+0x2bc>)
 8001498:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <StateMachineManagment+0x2cc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80014a0:	4b6e      	ldr	r3, [pc, #440]	; (800165c <StateMachineManagment+0x29c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
			break;
 80014a6:	f000 becf 	b.w	8002248 <StateMachineManagment+0xe88>
		case StanBy:
			// Header
			if(flagUART == 0){
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <StateMachineManagment+0x2cc>)
 80014ac:	f993 3000 	ldrsb.w	r3, [r3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 8085 	bne.w	80015c0 <StateMachineManagment+0x200>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80014b6:	4976      	ldr	r1, [pc, #472]	; (8001690 <StateMachineManagment+0x2d0>)
 80014b8:	486a      	ldr	r0, [pc, #424]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ba:	f008 fa49 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014be:	4869      	ldr	r0, [pc, #420]	; (8001664 <StateMachineManagment+0x2a4>)
 80014c0:	f7fe fe8e 	bl	80001e0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014cc:	4965      	ldr	r1, [pc, #404]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ce:	4866      	ldr	r0, [pc, #408]	; (8001668 <StateMachineManagment+0x2a8>)
 80014d0:	f007 f9e1 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 80014d4:	496f      	ldr	r1, [pc, #444]	; (8001694 <StateMachineManagment+0x2d4>)
 80014d6:	4863      	ldr	r0, [pc, #396]	; (8001664 <StateMachineManagment+0x2a4>)
 80014d8:	f008 fa3a 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014dc:	4861      	ldr	r0, [pc, #388]	; (8001664 <StateMachineManagment+0x2a4>)
 80014de:	f7fe fe7f 	bl	80001e0 <strlen>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	495e      	ldr	r1, [pc, #376]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ec:	485e      	ldr	r0, [pc, #376]	; (8001668 <StateMachineManagment+0x2a8>)
 80014ee:	f007 f9d2 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <StateMachineManagment+0x2bc>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b60      	ldr	r3, [pc, #384]	; (800167c <StateMachineManagment+0x2bc>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	4966      	ldr	r1, [pc, #408]	; (8001698 <StateMachineManagment+0x2d8>)
 80014fe:	4859      	ldr	r0, [pc, #356]	; (8001664 <StateMachineManagment+0x2a4>)
 8001500:	f008 fa26 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001504:	4857      	ldr	r0, [pc, #348]	; (8001664 <StateMachineManagment+0x2a4>)
 8001506:	f7fe fe6b 	bl	80001e0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	4954      	ldr	r1, [pc, #336]	; (8001664 <StateMachineManagment+0x2a4>)
 8001514:	4854      	ldr	r0, [pc, #336]	; (8001668 <StateMachineManagment+0x2a8>)
 8001516:	f007 f9be 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <StateMachineManagment+0x2bc>)
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	461a      	mov	r2, r3
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <StateMachineManagment+0x2bc>)
 8001522:	795b      	ldrb	r3, [r3, #5]
 8001524:	495d      	ldr	r1, [pc, #372]	; (800169c <StateMachineManagment+0x2dc>)
 8001526:	484f      	ldr	r0, [pc, #316]	; (8001664 <StateMachineManagment+0x2a4>)
 8001528:	f008 fa12 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800152c:	484d      	ldr	r0, [pc, #308]	; (8001664 <StateMachineManagment+0x2a4>)
 800152e:	f7fe fe57 	bl	80001e0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	494a      	ldr	r1, [pc, #296]	; (8001664 <StateMachineManagment+0x2a4>)
 800153c:	484a      	ldr	r0, [pc, #296]	; (8001668 <StateMachineManagment+0x2a8>)
 800153e:	f007 f9aa 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8001542:	4957      	ldr	r1, [pc, #348]	; (80016a0 <StateMachineManagment+0x2e0>)
 8001544:	4847      	ldr	r0, [pc, #284]	; (8001664 <StateMachineManagment+0x2a4>)
 8001546:	f008 fa03 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800154a:	4846      	ldr	r0, [pc, #280]	; (8001664 <StateMachineManagment+0x2a4>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4942      	ldr	r1, [pc, #264]	; (8001664 <StateMachineManagment+0x2a4>)
 800155a:	4843      	ldr	r0, [pc, #268]	; (8001668 <StateMachineManagment+0x2a8>)
 800155c:	f007 f99b 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 2 for Choosing Destination Station\r\n");
 8001560:	4950      	ldr	r1, [pc, #320]	; (80016a4 <StateMachineManagment+0x2e4>)
 8001562:	4840      	ldr	r0, [pc, #256]	; (8001664 <StateMachineManagment+0x2a4>)
 8001564:	f008 f9f4 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001568:	483e      	ldr	r0, [pc, #248]	; (8001664 <StateMachineManagment+0x2a4>)
 800156a:	f7fe fe39 	bl	80001e0 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	493b      	ldr	r1, [pc, #236]	; (8001664 <StateMachineManagment+0x2a4>)
 8001578:	483b      	ldr	r0, [pc, #236]	; (8001668 <StateMachineManagment+0x2a8>)
 800157a:	f007 f98c 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 3 for EEPROM READ\r\n");
 800157e:	494a      	ldr	r1, [pc, #296]	; (80016a8 <StateMachineManagment+0x2e8>)
 8001580:	4838      	ldr	r0, [pc, #224]	; (8001664 <StateMachineManagment+0x2a4>)
 8001582:	f008 f9e5 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001586:	4837      	ldr	r0, [pc, #220]	; (8001664 <StateMachineManagment+0x2a4>)
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	4933      	ldr	r1, [pc, #204]	; (8001664 <StateMachineManagment+0x2a4>)
 8001596:	4834      	ldr	r0, [pc, #208]	; (8001668 <StateMachineManagment+0x2a8>)
 8001598:	f007 f97d 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800159c:	493c      	ldr	r1, [pc, #240]	; (8001690 <StateMachineManagment+0x2d0>)
 800159e:	4831      	ldr	r0, [pc, #196]	; (8001664 <StateMachineManagment+0x2a4>)
 80015a0:	f008 f9d6 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <StateMachineManagment+0x2a4>)
 80015a6:	f7fe fe1b 	bl	80001e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	492c      	ldr	r1, [pc, #176]	; (8001664 <StateMachineManagment+0x2a4>)
 80015b4:	482c      	ldr	r0, [pc, #176]	; (8001668 <StateMachineManagment+0x2a8>)
 80015b6:	f007 f96e 	bl	8008896 <HAL_UART_Transmit>
				flagUART = 1;
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <StateMachineManagment+0x2cc>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80015c0:	2202      	movs	r2, #2
 80015c2:	493a      	ldr	r1, [pc, #232]	; (80016ac <StateMachineManagment+0x2ec>)
 80015c4:	4828      	ldr	r0, [pc, #160]	; (8001668 <StateMachineManagment+0x2a8>)
 80015c6:	f007 f9f8 	bl	80089ba <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 80015ca:	f000 fefd 	bl	80023c8 <UARTRecieveIT>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015d4:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	f000 862d 	beq.w	800223e <StateMachineManagment+0xe7e>
			{
				if(inputchar == '1')
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	2b31      	cmp	r3, #49	; 0x31
 80015ec:	d107      	bne.n	80015fe <StateMachineManagment+0x23e>
				{
					flagUART = 0;
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <StateMachineManagment+0x2cc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <StateMachineManagment+0x29c>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 80015fa:	f000 be20 	b.w	800223e <StateMachineManagment+0xe7e>
				else if(inputchar == '2')
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <StateMachineManagment+0x2f0>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	2b32      	cmp	r3, #50	; 0x32
 8001606:	d107      	bne.n	8001618 <StateMachineManagment+0x258>
					flagUART = 0;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <StateMachineManagment+0x2cc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <StateMachineManagment+0x29c>)
 8001610:	2203      	movs	r2, #3
 8001612:	701a      	strb	r2, [r3, #0]
			break;
 8001614:	f000 be13 	b.w	800223e <StateMachineManagment+0xe7e>
				else if(inputchar == '3')
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <StateMachineManagment+0x2f0>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	2b33      	cmp	r3, #51	; 0x33
 8001620:	d107      	bne.n	8001632 <StateMachineManagment+0x272>
					flagUART = 0;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <StateMachineManagment+0x2cc>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <StateMachineManagment+0x29c>)
 800162a:	2205      	movs	r2, #5
 800162c:	701a      	strb	r2, [r3, #0]
			break;
 800162e:	f000 be06 	b.w	800223e <StateMachineManagment+0xe7e>
					flagUART = 0;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <StateMachineManagment+0x2cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001638:	491e      	ldr	r1, [pc, #120]	; (80016b4 <StateMachineManagment+0x2f4>)
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <StateMachineManagment+0x2a4>)
 800163c:	f008 f988 	bl	8009950 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <StateMachineManagment+0x2a4>)
 8001642:	f7fe fdcd 	bl	80001e0 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	4905      	ldr	r1, [pc, #20]	; (8001664 <StateMachineManagment+0x2a4>)
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <StateMachineManagment+0x2a8>)
 8001652:	f007 f920 	bl	8008896 <HAL_UART_Transmit>
			break;
 8001656:	f000 bdf2 	b.w	800223e <StateMachineManagment+0xe7e>
 800165a:	bf00      	nop
 800165c:	20000387 	.word	0x20000387
 8001660:	0800a244 	.word	0x0800a244
 8001664:	2000038c 	.word	0x2000038c
 8001668:	20000328 	.word	0x20000328
 800166c:	20000004 	.word	0x20000004
 8001670:	20000005 	.word	0x20000005
 8001674:	20000388 	.word	0x20000388
 8001678:	20000389 	.word	0x20000389
 800167c:	20000380 	.word	0x20000380
 8001680:	200003d1 	.word	0x200003d1
 8001684:	20000002 	.word	0x20000002
 8001688:	200003d4 	.word	0x200003d4
 800168c:	200003cc 	.word	0x200003cc
 8001690:	0800a25c 	.word	0x0800a25c
 8001694:	0800a27c 	.word	0x0800a27c
 8001698:	0800a294 	.word	0x0800a294
 800169c:	0800a2c8 	.word	0x0800a2c8
 80016a0:	0800a2f0 	.word	0x0800a2f0
 80016a4:	0800a318 	.word	0x0800a318
 80016a8:	0800a344 	.word	0x0800a344
 80016ac:	20000000 	.word	0x20000000
 80016b0:	200003ce 	.word	0x200003ce
 80016b4:	0800a360 	.word	0x0800a360
		case EEpromReadState:
			// Header
			if(flagUART == 0){
 80016b8:	4baf      	ldr	r3, [pc, #700]	; (8001978 <StateMachineManagment+0x5b8>)
 80016ba:	f993 3000 	ldrsb.w	r3, [r3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12f      	bne.n	8001722 <StateMachineManagment+0x362>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80016c2:	49ae      	ldr	r1, [pc, #696]	; (800197c <StateMachineManagment+0x5bc>)
 80016c4:	48ae      	ldr	r0, [pc, #696]	; (8001980 <StateMachineManagment+0x5c0>)
 80016c6:	f008 f943 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016ca:	48ad      	ldr	r0, [pc, #692]	; (8001980 <StateMachineManagment+0x5c0>)
 80016cc:	f7fe fd88 	bl	80001e0 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d8:	49a9      	ldr	r1, [pc, #676]	; (8001980 <StateMachineManagment+0x5c0>)
 80016da:	48aa      	ldr	r0, [pc, #680]	; (8001984 <StateMachineManagment+0x5c4>)
 80016dc:	f007 f8db 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nEEPROM is Operating\r\n");
 80016e0:	49a9      	ldr	r1, [pc, #676]	; (8001988 <StateMachineManagment+0x5c8>)
 80016e2:	48a7      	ldr	r0, [pc, #668]	; (8001980 <StateMachineManagment+0x5c0>)
 80016e4:	f008 f934 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016e8:	48a5      	ldr	r0, [pc, #660]	; (8001980 <StateMachineManagment+0x5c0>)
 80016ea:	f7fe fd79 	bl	80001e0 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	49a2      	ldr	r1, [pc, #648]	; (8001980 <StateMachineManagment+0x5c0>)
 80016f8:	48a2      	ldr	r0, [pc, #648]	; (8001984 <StateMachineManagment+0x5c4>)
 80016fa:	f007 f8cc 	bl	8008896 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80016fe:	499f      	ldr	r1, [pc, #636]	; (800197c <StateMachineManagment+0x5bc>)
 8001700:	489f      	ldr	r0, [pc, #636]	; (8001980 <StateMachineManagment+0x5c0>)
 8001702:	f008 f925 	bl	8009950 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001706:	489e      	ldr	r0, [pc, #632]	; (8001980 <StateMachineManagment+0x5c0>)
 8001708:	f7fe fd6a 	bl	80001e0 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001714:	499a      	ldr	r1, [pc, #616]	; (8001980 <StateMachineManagment+0x5c0>)
 8001716:	489b      	ldr	r0, [pc, #620]	; (8001984 <StateMachineManagment+0x5c4>)
 8001718:	f007 f8bd 	bl	8008896 <HAL_UART_Transmit>
				flagUART = 1;
 800171c:	4b96      	ldr	r3, [pc, #600]	; (8001978 <StateMachineManagment+0x5b8>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
			}
			eepromReadFlag = 1;
 8001722:	4b9a      	ldr	r3, [pc, #616]	; (800198c <StateMachineManagment+0x5cc>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8001728:	4b99      	ldr	r3, [pc, #612]	; (8001990 <StateMachineManagment+0x5d0>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	220a      	movs	r2, #10
 800172e:	4619      	mov	r1, r3
 8001730:	4898      	ldr	r0, [pc, #608]	; (8001994 <StateMachineManagment+0x5d4>)
 8001732:	f000 fe21 	bl	8002378 <EEPROMReadFcn>
			HAL_Delay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f001 fb2a 	bl	8002d90 <HAL_Delay>
			sprintf(TxDataBuffer, "\r\nWaitingTime:[%d] OperationTime[%d] EndStation[%d]", eepromDataReadBack[0], eepromDataReadBack[1],eepromDataReadBack[2]);
 800173c:	4b95      	ldr	r3, [pc, #596]	; (8001994 <StateMachineManagment+0x5d4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b94      	ldr	r3, [pc, #592]	; (8001994 <StateMachineManagment+0x5d4>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	4619      	mov	r1, r3
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <StateMachineManagment+0x5d4>)
 800174a:	789b      	ldrb	r3, [r3, #2]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	460b      	mov	r3, r1
 8001750:	4991      	ldr	r1, [pc, #580]	; (8001998 <StateMachineManagment+0x5d8>)
 8001752:	488b      	ldr	r0, [pc, #556]	; (8001980 <StateMachineManagment+0x5c0>)
 8001754:	f008 f8fc 	bl	8009950 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001758:	4889      	ldr	r0, [pc, #548]	; (8001980 <StateMachineManagment+0x5c0>)
 800175a:	f7fe fd41 	bl	80001e0 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	4986      	ldr	r1, [pc, #536]	; (8001980 <StateMachineManagment+0x5c0>)
 8001768:	4886      	ldr	r0, [pc, #536]	; (8001984 <StateMachineManagment+0x5c4>)
 800176a:	f007 f894 	bl	8008896 <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800176e:	4983      	ldr	r1, [pc, #524]	; (800197c <StateMachineManagment+0x5bc>)
 8001770:	4883      	ldr	r0, [pc, #524]	; (8001980 <StateMachineManagment+0x5c0>)
 8001772:	f008 f8ed 	bl	8009950 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001776:	4882      	ldr	r0, [pc, #520]	; (8001980 <StateMachineManagment+0x5c0>)
 8001778:	f7fe fd32 	bl	80001e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	497e      	ldr	r1, [pc, #504]	; (8001980 <StateMachineManagment+0x5c0>)
 8001786:	487f      	ldr	r0, [pc, #508]	; (8001984 <StateMachineManagment+0x5c4>)
 8001788:	f007 f885 	bl	8008896 <HAL_UART_Transmit>
			flagUART = 0;
 800178c:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <StateMachineManagment+0x5b8>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8001792:	4b82      	ldr	r3, [pc, #520]	; (800199c <StateMachineManagment+0x5dc>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
			break;
 8001798:	f000 bd56 	b.w	8002248 <StateMachineManagment+0xe88>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <StateMachineManagment+0x5e0>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017a4:	78da      	ldrb	r2, [r3, #3]
 80017a6:	4b80      	ldr	r3, [pc, #512]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017a8:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 80017aa:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017ac:	791a      	ldrb	r2, [r3, #4]
 80017ae:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017b0:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017b4:	795a      	ldrb	r2, [r3, #5]
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017b8:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 80017ba:	4b75      	ldr	r3, [pc, #468]	; (8001990 <StateMachineManagment+0x5d0>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	220a      	movs	r2, #10
 80017c0:	4619      	mov	r1, r3
 80017c2:	4879      	ldr	r0, [pc, #484]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017c4:	f000 fdb0 	bl	8002328 <EEPROMWriteFcn>
			flagUART = 0;
 80017c8:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <StateMachineManagment+0x5b8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <StateMachineManagment+0x5dc>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
			break;
 80017d4:	f000 bd38 	b.w	8002248 <StateMachineManagment+0xe88>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 80017d8:	4b74      	ldr	r3, [pc, #464]	; (80019ac <StateMachineManagment+0x5ec>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f000 8233 	beq.w	8001c48 <StateMachineManagment+0x888>
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	f300 852d 	bgt.w	8002242 <StateMachineManagment+0xe82>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <StateMachineManagment+0x436>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f000 8146 	beq.w	8001a7e <StateMachineManagment+0x6be>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 80017f2:	f000 bd26 	b.w	8002242 <StateMachineManagment+0xe82>
					if(flagUART == 0){
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <StateMachineManagment+0x5b8>)
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 8094 	bne.w	800192a <StateMachineManagment+0x56a>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001802:	495e      	ldr	r1, [pc, #376]	; (800197c <StateMachineManagment+0x5bc>)
 8001804:	485e      	ldr	r0, [pc, #376]	; (8001980 <StateMachineManagment+0x5c0>)
 8001806:	f008 f8a3 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <StateMachineManagment+0x5c0>)
 800180c:	f7fe fce8 	bl	80001e0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	4959      	ldr	r1, [pc, #356]	; (8001980 <StateMachineManagment+0x5c0>)
 800181a:	485a      	ldr	r0, [pc, #360]	; (8001984 <StateMachineManagment+0x5c4>)
 800181c:	f007 f83b 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8001820:	4963      	ldr	r1, [pc, #396]	; (80019b0 <StateMachineManagment+0x5f0>)
 8001822:	4857      	ldr	r0, [pc, #348]	; (8001980 <StateMachineManagment+0x5c0>)
 8001824:	f008 f894 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001828:	4855      	ldr	r0, [pc, #340]	; (8001980 <StateMachineManagment+0x5c0>)
 800182a:	f7fe fcd9 	bl	80001e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	4952      	ldr	r1, [pc, #328]	; (8001980 <StateMachineManagment+0x5c0>)
 8001838:	4852      	ldr	r0, [pc, #328]	; (8001984 <StateMachineManagment+0x5c4>)
 800183a:	f007 f82c 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	495a      	ldr	r1, [pc, #360]	; (80019b4 <StateMachineManagment+0x5f4>)
 800184a:	484d      	ldr	r0, [pc, #308]	; (8001980 <StateMachineManagment+0x5c0>)
 800184c:	f008 f880 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001850:	484b      	ldr	r0, [pc, #300]	; (8001980 <StateMachineManagment+0x5c0>)
 8001852:	f7fe fcc5 	bl	80001e0 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	4948      	ldr	r1, [pc, #288]	; (8001980 <StateMachineManagment+0x5c0>)
 8001860:	4848      	ldr	r0, [pc, #288]	; (8001984 <StateMachineManagment+0x5c4>)
 8001862:	f007 f818 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001868:	799b      	ldrb	r3, [r3, #6]
 800186a:	461a      	mov	r2, r3
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <StateMachineManagment+0x5e4>)
 800186e:	795b      	ldrb	r3, [r3, #5]
 8001870:	4951      	ldr	r1, [pc, #324]	; (80019b8 <StateMachineManagment+0x5f8>)
 8001872:	4843      	ldr	r0, [pc, #268]	; (8001980 <StateMachineManagment+0x5c0>)
 8001874:	f008 f86c 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001878:	4841      	ldr	r0, [pc, #260]	; (8001980 <StateMachineManagment+0x5c0>)
 800187a:	f7fe fcb1 	bl	80001e0 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <StateMachineManagment+0x5c0>)
 8001888:	483e      	ldr	r0, [pc, #248]	; (8001984 <StateMachineManagment+0x5c4>)
 800188a:	f007 f804 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 800188e:	494b      	ldr	r1, [pc, #300]	; (80019bc <StateMachineManagment+0x5fc>)
 8001890:	483b      	ldr	r0, [pc, #236]	; (8001980 <StateMachineManagment+0x5c0>)
 8001892:	f008 f85d 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001896:	483a      	ldr	r0, [pc, #232]	; (8001980 <StateMachineManagment+0x5c0>)
 8001898:	f7fe fca2 	bl	80001e0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a4:	4936      	ldr	r1, [pc, #216]	; (8001980 <StateMachineManagment+0x5c0>)
 80018a6:	4837      	ldr	r0, [pc, #220]	; (8001984 <StateMachineManagment+0x5c4>)
 80018a8:	f006 fff5 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 80018ac:	4944      	ldr	r1, [pc, #272]	; (80019c0 <StateMachineManagment+0x600>)
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <StateMachineManagment+0x5c0>)
 80018b0:	f008 f84e 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018b4:	4832      	ldr	r0, [pc, #200]	; (8001980 <StateMachineManagment+0x5c0>)
 80018b6:	f7fe fc93 	bl	80001e0 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	492f      	ldr	r1, [pc, #188]	; (8001980 <StateMachineManagment+0x5c0>)
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <StateMachineManagment+0x5c4>)
 80018c6:	f006 ffe6 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 80018ca:	493e      	ldr	r1, [pc, #248]	; (80019c4 <StateMachineManagment+0x604>)
 80018cc:	482c      	ldr	r0, [pc, #176]	; (8001980 <StateMachineManagment+0x5c0>)
 80018ce:	f008 f83f 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018d2:	482b      	ldr	r0, [pc, #172]	; (8001980 <StateMachineManagment+0x5c0>)
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	4927      	ldr	r1, [pc, #156]	; (8001980 <StateMachineManagment+0x5c0>)
 80018e2:	4828      	ldr	r0, [pc, #160]	; (8001984 <StateMachineManagment+0x5c4>)
 80018e4:	f006 ffd7 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <StateMachineManagment+0x608>)
 80018ea:	4825      	ldr	r0, [pc, #148]	; (8001980 <StateMachineManagment+0x5c0>)
 80018ec:	f008 f830 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <StateMachineManagment+0x5c0>)
 80018f2:	f7fe fc75 	bl	80001e0 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	4920      	ldr	r1, [pc, #128]	; (8001980 <StateMachineManagment+0x5c0>)
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <StateMachineManagment+0x5c4>)
 8001902:	f006 ffc8 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001906:	491d      	ldr	r1, [pc, #116]	; (800197c <StateMachineManagment+0x5bc>)
 8001908:	481d      	ldr	r0, [pc, #116]	; (8001980 <StateMachineManagment+0x5c0>)
 800190a:	f008 f821 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800190e:	481c      	ldr	r0, [pc, #112]	; (8001980 <StateMachineManagment+0x5c0>)
 8001910:	f7fe fc66 	bl	80001e0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	4918      	ldr	r1, [pc, #96]	; (8001980 <StateMachineManagment+0x5c0>)
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <StateMachineManagment+0x5c4>)
 8001920:	f006 ffb9 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <StateMachineManagment+0x5b8>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 800192a:	2202      	movs	r2, #2
 800192c:	4927      	ldr	r1, [pc, #156]	; (80019cc <StateMachineManagment+0x60c>)
 800192e:	4815      	ldr	r0, [pc, #84]	; (8001984 <StateMachineManagment+0x5c4>)
 8001930:	f007 f843 	bl	80089ba <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001934:	f000 fd48 	bl	80023c8 <UARTRecieveIT>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <StateMachineManagment+0x610>)
 800193e:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <StateMachineManagment+0x610>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	f000 823c 	beq.w	8001dc6 <StateMachineManagment+0xa06>
						if(inputchar == 'x')
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <StateMachineManagment+0x610>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	2b78      	cmp	r3, #120	; 0x78
 8001956:	d13d      	bne.n	80019d4 <StateMachineManagment+0x614>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <StateMachineManagment+0x5e4>)
 800195a:	78da      	ldrb	r2, [r3, #3]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <StateMachineManagment+0x5e4>)
 800195e:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001962:	791a      	ldrb	r2, [r3, #4]
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001966:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <StateMachineManagment+0x5b8>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <StateMachineManagment+0x5dc>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
					break;
 8001974:	e227      	b.n	8001dc6 <StateMachineManagment+0xa06>
 8001976:	bf00      	nop
 8001978:	200003cc 	.word	0x200003cc
 800197c:	0800a25c 	.word	0x0800a25c
 8001980:	2000038c 	.word	0x2000038c
 8001984:	20000328 	.word	0x20000328
 8001988:	0800a378 	.word	0x0800a378
 800198c:	200003d1 	.word	0x200003d1
 8001990:	20000002 	.word	0x20000002
 8001994:	200003d4 	.word	0x200003d4
 8001998:	0800a390 	.word	0x0800a390
 800199c:	20000387 	.word	0x20000387
 80019a0:	200003d0 	.word	0x200003d0
 80019a4:	20000380 	.word	0x20000380
 80019a8:	200003d8 	.word	0x200003d8
 80019ac:	20000388 	.word	0x20000388
 80019b0:	0800a3c4 	.word	0x0800a3c4
 80019b4:	0800a294 	.word	0x0800a294
 80019b8:	0800a2c8 	.word	0x0800a2c8
 80019bc:	0800a3e8 	.word	0x0800a3e8
 80019c0:	0800a40c 	.word	0x0800a40c
 80019c4:	0800a430 	.word	0x0800a430
 80019c8:	0800a444 	.word	0x0800a444
 80019cc:	20000000 	.word	0x20000000
 80019d0:	200003ce 	.word	0x200003ce
						else if(inputchar == '1')
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <StateMachineManagment+0x840>)
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	2b31      	cmp	r3, #49	; 0x31
 80019dc:	d106      	bne.n	80019ec <StateMachineManagment+0x62c>
							flagUART = 0;
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <StateMachineManagment+0x844>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 80019e4:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <StateMachineManagment+0x848>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
					break;
 80019ea:	e1ec      	b.n	8001dc6 <StateMachineManagment+0xa06>
						else if(inputchar == '2')
 80019ec:	4b84      	ldr	r3, [pc, #528]	; (8001c00 <StateMachineManagment+0x840>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	2b32      	cmp	r3, #50	; 0x32
 80019f4:	d106      	bne.n	8001a04 <StateMachineManagment+0x644>
							flagUART = 0;
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <StateMachineManagment+0x844>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 80019fc:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <StateMachineManagment+0x848>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
					break;
 8001a02:	e1e0      	b.n	8001dc6 <StateMachineManagment+0xa06>
						else if(inputchar == 's')
 8001a04:	4b7e      	ldr	r3, [pc, #504]	; (8001c00 <StateMachineManagment+0x840>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	2b73      	cmp	r3, #115	; 0x73
 8001a0c:	d124      	bne.n	8001a58 <StateMachineManagment+0x698>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a14:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a18:	785a      	ldrb	r2, [r3, #1]
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a1c:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <StateMachineManagment+0x850>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a26:	78da      	ldrb	r2, [r3, #3]
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <StateMachineManagment+0x854>)
 8001a2a:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <StateMachineManagment+0x854>)
 8001a32:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a36:	795a      	ldrb	r2, [r3, #5]
 8001a38:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <StateMachineManagment+0x854>)
 8001a3a:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <StateMachineManagment+0x858>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	220a      	movs	r2, #10
 8001a42:	4619      	mov	r1, r3
 8001a44:	4873      	ldr	r0, [pc, #460]	; (8001c14 <StateMachineManagment+0x854>)
 8001a46:	f000 fc6f 	bl	8002328 <EEPROMWriteFcn>
							flagUART = 0;
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <StateMachineManagment+0x844>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001a50:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <StateMachineManagment+0x85c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
					break;
 8001a56:	e1b6      	b.n	8001dc6 <StateMachineManagment+0xa06>
							flagUART = 0;
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <StateMachineManagment+0x844>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001a5e:	4970      	ldr	r1, [pc, #448]	; (8001c20 <StateMachineManagment+0x860>)
 8001a60:	4870      	ldr	r0, [pc, #448]	; (8001c24 <StateMachineManagment+0x864>)
 8001a62:	f007 ff75 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a66:	486f      	ldr	r0, [pc, #444]	; (8001c24 <StateMachineManagment+0x864>)
 8001a68:	f7fe fbba 	bl	80001e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	496b      	ldr	r1, [pc, #428]	; (8001c24 <StateMachineManagment+0x864>)
 8001a76:	486c      	ldr	r0, [pc, #432]	; (8001c28 <StateMachineManagment+0x868>)
 8001a78:	f006 ff0d 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001a7c:	e1a3      	b.n	8001dc6 <StateMachineManagment+0xa06>
					if(flagUART == 0){
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <StateMachineManagment+0x844>)
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d14d      	bne.n	8001b24 <StateMachineManagment+0x764>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8001a88:	4968      	ldr	r1, [pc, #416]	; (8001c2c <StateMachineManagment+0x86c>)
 8001a8a:	4866      	ldr	r0, [pc, #408]	; (8001c24 <StateMachineManagment+0x864>)
 8001a8c:	f007 ff60 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a90:	4864      	ldr	r0, [pc, #400]	; (8001c24 <StateMachineManagment+0x864>)
 8001a92:	f7fe fba5 	bl	80001e0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	4961      	ldr	r1, [pc, #388]	; (8001c24 <StateMachineManagment+0x864>)
 8001aa0:	4861      	ldr	r0, [pc, #388]	; (8001c28 <StateMachineManagment+0x868>)
 8001aa2:	f006 fef8 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001aa6:	4962      	ldr	r1, [pc, #392]	; (8001c30 <StateMachineManagment+0x870>)
 8001aa8:	485e      	ldr	r0, [pc, #376]	; (8001c24 <StateMachineManagment+0x864>)
 8001aaa:	f007 ff51 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001aae:	485d      	ldr	r0, [pc, #372]	; (8001c24 <StateMachineManagment+0x864>)
 8001ab0:	f7fe fb96 	bl	80001e0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	4959      	ldr	r1, [pc, #356]	; (8001c24 <StateMachineManagment+0x864>)
 8001abe:	485a      	ldr	r0, [pc, #360]	; (8001c28 <StateMachineManagment+0x868>)
 8001ac0:	f006 fee9 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001ac4:	495b      	ldr	r1, [pc, #364]	; (8001c34 <StateMachineManagment+0x874>)
 8001ac6:	4857      	ldr	r0, [pc, #348]	; (8001c24 <StateMachineManagment+0x864>)
 8001ac8:	f007 ff42 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001acc:	4855      	ldr	r0, [pc, #340]	; (8001c24 <StateMachineManagment+0x864>)
 8001ace:	f7fe fb87 	bl	80001e0 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	4952      	ldr	r1, [pc, #328]	; (8001c24 <StateMachineManagment+0x864>)
 8001adc:	4852      	ldr	r0, [pc, #328]	; (8001c28 <StateMachineManagment+0x868>)
 8001ade:	f006 feda 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001ae2:	4955      	ldr	r1, [pc, #340]	; (8001c38 <StateMachineManagment+0x878>)
 8001ae4:	484f      	ldr	r0, [pc, #316]	; (8001c24 <StateMachineManagment+0x864>)
 8001ae6:	f007 ff33 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001aea:	484e      	ldr	r0, [pc, #312]	; (8001c24 <StateMachineManagment+0x864>)
 8001aec:	f7fe fb78 	bl	80001e0 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af8:	494a      	ldr	r1, [pc, #296]	; (8001c24 <StateMachineManagment+0x864>)
 8001afa:	484b      	ldr	r0, [pc, #300]	; (8001c28 <StateMachineManagment+0x868>)
 8001afc:	f006 fecb 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001b00:	494e      	ldr	r1, [pc, #312]	; (8001c3c <StateMachineManagment+0x87c>)
 8001b02:	4848      	ldr	r0, [pc, #288]	; (8001c24 <StateMachineManagment+0x864>)
 8001b04:	f007 ff24 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b08:	4846      	ldr	r0, [pc, #280]	; (8001c24 <StateMachineManagment+0x864>)
 8001b0a:	f7fe fb69 	bl	80001e0 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	4943      	ldr	r1, [pc, #268]	; (8001c24 <StateMachineManagment+0x864>)
 8001b18:	4843      	ldr	r0, [pc, #268]	; (8001c28 <StateMachineManagment+0x868>)
 8001b1a:	f006 febc 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <StateMachineManagment+0x844>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001b24:	2202      	movs	r2, #2
 8001b26:	4946      	ldr	r1, [pc, #280]	; (8001c40 <StateMachineManagment+0x880>)
 8001b28:	483f      	ldr	r0, [pc, #252]	; (8001c28 <StateMachineManagment+0x868>)
 8001b2a:	f006 ff46 	bl	80089ba <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001b2e:	f000 fc4b 	bl	80023c8 <UARTRecieveIT>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <StateMachineManagment+0x840>)
 8001b38:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <StateMachineManagment+0x840>)
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	f000 8141 	beq.w	8001dca <StateMachineManagment+0xa0a>
						if(inputchar == 'x')
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <StateMachineManagment+0x840>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	2b78      	cmp	r3, #120	; 0x78
 8001b50:	d106      	bne.n	8001b60 <StateMachineManagment+0x7a0>
							flagUART = 0;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <StateMachineManagment+0x844>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <StateMachineManagment+0x848>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
					break;
 8001b5e:	e134      	b.n	8001dca <StateMachineManagment+0xa0a>
						else if(inputchar == '+')
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <StateMachineManagment+0x840>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b2b      	cmp	r3, #43	; 0x2b
 8001b68:	d118      	bne.n	8001b9c <StateMachineManagment+0x7dc>
							Robot.WaitingTimeBuffer++;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b74:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4931      	ldr	r1, [pc, #196]	; (8001c44 <StateMachineManagment+0x884>)
 8001b7e:	4829      	ldr	r0, [pc, #164]	; (8001c24 <StateMachineManagment+0x864>)
 8001b80:	f007 fee6 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b84:	4827      	ldr	r0, [pc, #156]	; (8001c24 <StateMachineManagment+0x864>)
 8001b86:	f7fe fb2b 	bl	80001e0 <strlen>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	4924      	ldr	r1, [pc, #144]	; (8001c24 <StateMachineManagment+0x864>)
 8001b94:	4824      	ldr	r0, [pc, #144]	; (8001c28 <StateMachineManagment+0x868>)
 8001b96:	f006 fe7e 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001b9a:	e116      	b.n	8001dca <StateMachineManagment+0xa0a>
						else if(inputchar == '-')
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <StateMachineManagment+0x840>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8001ba4:	d118      	bne.n	8001bd8 <StateMachineManagment+0x818>
							Robot.WaitingTimeBuffer--;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <StateMachineManagment+0x84c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <StateMachineManagment+0x84c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <StateMachineManagment+0x84c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4922      	ldr	r1, [pc, #136]	; (8001c44 <StateMachineManagment+0x884>)
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <StateMachineManagment+0x864>)
 8001bbc:	f007 fec8 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <StateMachineManagment+0x864>)
 8001bc2:	f7fe fb0d 	bl	80001e0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	4915      	ldr	r1, [pc, #84]	; (8001c24 <StateMachineManagment+0x864>)
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <StateMachineManagment+0x868>)
 8001bd2:	f006 fe60 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001bd6:	e0f8      	b.n	8001dca <StateMachineManagment+0xa0a>
							flagUART = 0;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <StateMachineManagment+0x844>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001bde:	4910      	ldr	r1, [pc, #64]	; (8001c20 <StateMachineManagment+0x860>)
 8001be0:	4810      	ldr	r0, [pc, #64]	; (8001c24 <StateMachineManagment+0x864>)
 8001be2:	f007 feb5 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001be6:	480f      	ldr	r0, [pc, #60]	; (8001c24 <StateMachineManagment+0x864>)
 8001be8:	f7fe fafa 	bl	80001e0 <strlen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	490b      	ldr	r1, [pc, #44]	; (8001c24 <StateMachineManagment+0x864>)
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <StateMachineManagment+0x868>)
 8001bf8:	f006 fe4d 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001bfc:	e0e5      	b.n	8001dca <StateMachineManagment+0xa0a>
 8001bfe:	bf00      	nop
 8001c00:	200003ce 	.word	0x200003ce
 8001c04:	200003cc 	.word	0x200003cc
 8001c08:	20000388 	.word	0x20000388
 8001c0c:	20000380 	.word	0x20000380
 8001c10:	200003d0 	.word	0x200003d0
 8001c14:	200003d8 	.word	0x200003d8
 8001c18:	20000002 	.word	0x20000002
 8001c1c:	20000387 	.word	0x20000387
 8001c20:	0800a360 	.word	0x0800a360
 8001c24:	2000038c 	.word	0x2000038c
 8001c28:	20000328 	.word	0x20000328
 8001c2c:	0800a458 	.word	0x0800a458
 8001c30:	0800a474 	.word	0x0800a474
 8001c34:	0800a48c 	.word	0x0800a48c
 8001c38:	0800a4a4 	.word	0x0800a4a4
 8001c3c:	0800a4b8 	.word	0x0800a4b8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	0800a4d4 	.word	0x0800a4d4
					if(flagUART == 0){
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <StateMachineManagment+0xa34>)
 8001c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d14d      	bne.n	8001cee <StateMachineManagment+0x92e>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8001c52:	4969      	ldr	r1, [pc, #420]	; (8001df8 <StateMachineManagment+0xa38>)
 8001c54:	4869      	ldr	r0, [pc, #420]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c56:	f007 fe7b 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c5a:	4868      	ldr	r0, [pc, #416]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c5c:	f7fe fac0 	bl	80001e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	4964      	ldr	r1, [pc, #400]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c6a:	4865      	ldr	r0, [pc, #404]	; (8001e00 <StateMachineManagment+0xa40>)
 8001c6c:	f006 fe13 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001c70:	4964      	ldr	r1, [pc, #400]	; (8001e04 <StateMachineManagment+0xa44>)
 8001c72:	4862      	ldr	r0, [pc, #392]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c74:	f007 fe6c 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c78:	4860      	ldr	r0, [pc, #384]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c7a:	f7fe fab1 	bl	80001e0 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	495d      	ldr	r1, [pc, #372]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c88:	485d      	ldr	r0, [pc, #372]	; (8001e00 <StateMachineManagment+0xa40>)
 8001c8a:	f006 fe04 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001c8e:	495e      	ldr	r1, [pc, #376]	; (8001e08 <StateMachineManagment+0xa48>)
 8001c90:	485a      	ldr	r0, [pc, #360]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c92:	f007 fe5d 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c96:	4859      	ldr	r0, [pc, #356]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c98:	f7fe faa2 	bl	80001e0 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	4955      	ldr	r1, [pc, #340]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001ca6:	4856      	ldr	r0, [pc, #344]	; (8001e00 <StateMachineManagment+0xa40>)
 8001ca8:	f006 fdf5 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001cac:	4957      	ldr	r1, [pc, #348]	; (8001e0c <StateMachineManagment+0xa4c>)
 8001cae:	4853      	ldr	r0, [pc, #332]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cb0:	f007 fe4e 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cb4:	4851      	ldr	r0, [pc, #324]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cb6:	f7fe fa93 	bl	80001e0 <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	494e      	ldr	r1, [pc, #312]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cc4:	484e      	ldr	r0, [pc, #312]	; (8001e00 <StateMachineManagment+0xa40>)
 8001cc6:	f006 fde6 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001cca:	4951      	ldr	r1, [pc, #324]	; (8001e10 <StateMachineManagment+0xa50>)
 8001ccc:	484b      	ldr	r0, [pc, #300]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cce:	f007 fe3f 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cd2:	484a      	ldr	r0, [pc, #296]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cd4:	f7fe fa84 	bl	80001e0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce0:	4946      	ldr	r1, [pc, #280]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001ce2:	4847      	ldr	r0, [pc, #284]	; (8001e00 <StateMachineManagment+0xa40>)
 8001ce4:	f006 fdd7 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <StateMachineManagment+0xa34>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4948      	ldr	r1, [pc, #288]	; (8001e14 <StateMachineManagment+0xa54>)
 8001cf2:	4843      	ldr	r0, [pc, #268]	; (8001e00 <StateMachineManagment+0xa40>)
 8001cf4:	f006 fe61 	bl	80089ba <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001cf8:	f000 fb66 	bl	80023c8 <UARTRecieveIT>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d02:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d05e      	beq.n	8001dce <StateMachineManagment+0xa0e>
						if(inputchar == 'x')
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	2b78      	cmp	r3, #120	; 0x78
 8001d18:	d106      	bne.n	8001d28 <StateMachineManagment+0x968>
							flagUART = 0;
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <StateMachineManagment+0xa34>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <StateMachineManagment+0xa5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
					break;
 8001d26:	e052      	b.n	8001dce <StateMachineManagment+0xa0e>
						else if(inputchar == '+')
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2e:	2b2b      	cmp	r3, #43	; 0x2b
 8001d30:	d118      	bne.n	8001d64 <StateMachineManagment+0x9a4>
							Robot.OperationTimeBuffer++;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d3c:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <StateMachineManagment+0xa64>)
 8001d46:	482d      	ldr	r0, [pc, #180]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d48:	f007 fe02 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d4c:	482b      	ldr	r0, [pc, #172]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d4e:	f7fe fa47 	bl	80001e0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	4928      	ldr	r1, [pc, #160]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d5c:	4828      	ldr	r0, [pc, #160]	; (8001e00 <StateMachineManagment+0xa40>)
 8001d5e:	f006 fd9a 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001d62:	e034      	b.n	8001dce <StateMachineManagment+0xa0e>
						else if(inputchar == '-')
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6a:	2b2d      	cmp	r3, #45	; 0x2d
 8001d6c:	d118      	bne.n	8001da0 <StateMachineManagment+0x9e0>
							Robot.OperationTimeBuffer--;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d78:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4928      	ldr	r1, [pc, #160]	; (8001e24 <StateMachineManagment+0xa64>)
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d84:	f007 fde4 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d88:	481c      	ldr	r0, [pc, #112]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d8a:	f7fe fa29 	bl	80001e0 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	4919      	ldr	r1, [pc, #100]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d98:	4819      	ldr	r0, [pc, #100]	; (8001e00 <StateMachineManagment+0xa40>)
 8001d9a:	f006 fd7c 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001d9e:	e016      	b.n	8001dce <StateMachineManagment+0xa0e>
							flagUART = 0;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <StateMachineManagment+0xa34>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001da6:	4920      	ldr	r1, [pc, #128]	; (8001e28 <StateMachineManagment+0xa68>)
 8001da8:	4814      	ldr	r0, [pc, #80]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001daa:	f007 fdd1 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dae:	4813      	ldr	r0, [pc, #76]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001db0:	f7fe fa16 	bl	80001e0 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <StateMachineManagment+0xa40>)
 8001dc0:	f006 fd69 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001dc4:	e003      	b.n	8001dce <StateMachineManagment+0xa0e>
					break;
 8001dc6:	bf00      	nop
 8001dc8:	e23b      	b.n	8002242 <StateMachineManagment+0xe82>
					break;
 8001dca:	bf00      	nop
 8001dcc:	e239      	b.n	8002242 <StateMachineManagment+0xe82>
					break;
 8001dce:	bf00      	nop
			break;
 8001dd0:	e237      	b.n	8002242 <StateMachineManagment+0xe82>
		case StantionChoosing:
			switch (StantionChoosingState)
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <StateMachineManagment+0xa6c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	f200 8235 	bhi.w	8002246 <StateMachineManagment+0xe86>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <StateMachineManagment+0xa24>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001e31 	.word	0x08001e31
 8001de8:	0800206f 	.word	0x0800206f
 8001dec:	080020fd 	.word	0x080020fd
 8001df0:	08002191 	.word	0x08002191
 8001df4:	200003cc 	.word	0x200003cc
 8001df8:	0800a4f0 	.word	0x0800a4f0
 8001dfc:	2000038c 	.word	0x2000038c
 8001e00:	20000328 	.word	0x20000328
 8001e04:	0800a474 	.word	0x0800a474
 8001e08:	0800a48c 	.word	0x0800a48c
 8001e0c:	0800a4a4 	.word	0x0800a4a4
 8001e10:	0800a4b8 	.word	0x0800a4b8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200003ce 	.word	0x200003ce
 8001e1c:	20000388 	.word	0x20000388
 8001e20:	20000380 	.word	0x20000380
 8001e24:	0800a510 	.word	0x0800a510
 8001e28:	0800a360 	.word	0x0800a360
 8001e2c:	20000389 	.word	0x20000389
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <StateMachineManagment+0xce8>)
 8001e32:	f993 3000 	ldrsb.w	r3, [r3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8085 	bne.w	8001f46 <StateMachineManagment+0xb86>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 8001e3c:	499b      	ldr	r1, [pc, #620]	; (80020ac <StateMachineManagment+0xcec>)
 8001e3e:	489c      	ldr	r0, [pc, #624]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e40:	f007 fd86 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e44:	489a      	ldr	r0, [pc, #616]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e46:	f7fe f9cb 	bl	80001e0 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	4997      	ldr	r1, [pc, #604]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e54:	4897      	ldr	r0, [pc, #604]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001e56:	f006 fd1e 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8001e5a:	4b97      	ldr	r3, [pc, #604]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b95      	ldr	r3, [pc, #596]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	4995      	ldr	r1, [pc, #596]	; (80020bc <StateMachineManagment+0xcfc>)
 8001e66:	4892      	ldr	r0, [pc, #584]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e68:	f007 fd72 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e6c:	4890      	ldr	r0, [pc, #576]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e6e:	f7fe f9b7 	bl	80001e0 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	498d      	ldr	r1, [pc, #564]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e7c:	488d      	ldr	r0, [pc, #564]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001e7e:	f006 fd0a 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	498c      	ldr	r1, [pc, #560]	; (80020c0 <StateMachineManagment+0xd00>)
 8001e8e:	4888      	ldr	r0, [pc, #544]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e90:	f007 fd5e 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e94:	4886      	ldr	r0, [pc, #536]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e96:	f7fe f9a3 	bl	80001e0 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	4983      	ldr	r1, [pc, #524]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ea4:	4883      	ldr	r0, [pc, #524]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ea6:	f006 fcf6 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type + for +1 Station\r\n");
 8001eaa:	4986      	ldr	r1, [pc, #536]	; (80020c4 <StateMachineManagment+0xd04>)
 8001eac:	4880      	ldr	r0, [pc, #512]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eae:	f007 fd4f 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001eb2:	487f      	ldr	r0, [pc, #508]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eb4:	f7fe f994 	bl	80001e0 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec0:	497b      	ldr	r1, [pc, #492]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ec2:	487c      	ldr	r0, [pc, #496]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ec4:	f006 fce7 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001ec8:	497f      	ldr	r1, [pc, #508]	; (80020c8 <StateMachineManagment+0xd08>)
 8001eca:	4879      	ldr	r0, [pc, #484]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ecc:	f007 fd40 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001ed0:	4877      	ldr	r0, [pc, #476]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ed2:	f7fe f985 	bl	80001e0 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	4974      	ldr	r1, [pc, #464]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ee0:	4874      	ldr	r0, [pc, #464]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ee2:	f006 fcd8 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8001ee6:	4979      	ldr	r1, [pc, #484]	; (80020cc <StateMachineManagment+0xd0c>)
 8001ee8:	4871      	ldr	r0, [pc, #452]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eea:	f007 fd31 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001eee:	4870      	ldr	r0, [pc, #448]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ef0:	f7fe f976 	bl	80001e0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efc:	496c      	ldr	r1, [pc, #432]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001efe:	486d      	ldr	r0, [pc, #436]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f00:	f006 fcc9 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type g to Start Operating\r\n");
 8001f04:	4972      	ldr	r1, [pc, #456]	; (80020d0 <StateMachineManagment+0xd10>)
 8001f06:	486a      	ldr	r0, [pc, #424]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f08:	f007 fd22 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f0c:	4868      	ldr	r0, [pc, #416]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f0e:	f7fe f967 	bl	80001e0 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	4965      	ldr	r1, [pc, #404]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f1c:	4865      	ldr	r0, [pc, #404]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f1e:	f006 fcba 	bl	8008896 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001f22:	496c      	ldr	r1, [pc, #432]	; (80020d4 <StateMachineManagment+0xd14>)
 8001f24:	4862      	ldr	r0, [pc, #392]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f26:	f007 fd13 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f2a:	4861      	ldr	r0, [pc, #388]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f2c:	f7fe f958 	bl	80001e0 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f38:	495d      	ldr	r1, [pc, #372]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f3a:	485e      	ldr	r0, [pc, #376]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f3c:	f006 fcab 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <StateMachineManagment+0xce8>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001f46:	2202      	movs	r2, #2
 8001f48:	4963      	ldr	r1, [pc, #396]	; (80020d8 <StateMachineManagment+0xd18>)
 8001f4a:	485a      	ldr	r0, [pc, #360]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f4c:	f006 fd35 	bl	80089ba <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001f50:	2202      	movs	r2, #2
 8001f52:	4961      	ldr	r1, [pc, #388]	; (80020d8 <StateMachineManagment+0xd18>)
 8001f54:	4857      	ldr	r0, [pc, #348]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f56:	f006 fd30 	bl	80089ba <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001f5a:	f000 fa35 	bl	80023c8 <UARTRecieveIT>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f64:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	f000 815f 	beq.w	8002232 <StateMachineManagment+0xe72>
					{
						if(inputchar == 'x')
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7a:	2b78      	cmp	r3, #120	; 0x78
 8001f7c:	d10a      	bne.n	8001f94 <StateMachineManagment+0xbd4>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001f80:	795a      	ldrb	r2, [r3, #5]
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001f84:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <StateMachineManagment+0xce8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <StateMachineManagment+0xd20>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 8001f92:	e14e      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == '+')
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8001f9c:	d11f      	bne.n	8001fde <StateMachineManagment+0xc1e>
							Robot.EndStationBuffer++;
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fa0:	789b      	ldrb	r3, [r3, #2]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fa8:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fac:	789b      	ldrb	r3, [r3, #2]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fb6:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4949      	ldr	r1, [pc, #292]	; (80020e4 <StateMachineManagment+0xd24>)
 8001fc0:	483b      	ldr	r0, [pc, #236]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fc2:	f007 fcc5 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fc8:	f7fe f90a 	bl	80001e0 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd4:	4936      	ldr	r1, [pc, #216]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fd6:	4837      	ldr	r0, [pc, #220]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001fd8:	f006 fc5d 	bl	8008896 <HAL_UART_Transmit>
					break;
 8001fdc:	e129      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == '-')
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <StateMachineManagment+0xd1c>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8001fe6:	d11f      	bne.n	8002028 <StateMachineManagment+0xc68>
							Robot.EndStationBuffer--;
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fea:	789b      	ldrb	r3, [r3, #2]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001ff2:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001ff6:	789b      	ldrb	r3, [r3, #2]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002000:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002004:	789b      	ldrb	r3, [r3, #2]
 8002006:	461a      	mov	r2, r3
 8002008:	4936      	ldr	r1, [pc, #216]	; (80020e4 <StateMachineManagment+0xd24>)
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <StateMachineManagment+0xcf0>)
 800200c:	f007 fca0 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002010:	4827      	ldr	r0, [pc, #156]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002012:	f7fe f8e5 	bl	80001e0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	4924      	ldr	r1, [pc, #144]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002020:	4824      	ldr	r0, [pc, #144]	; (80020b4 <StateMachineManagment+0xcf4>)
 8002022:	f006 fc38 	bl	8008896 <HAL_UART_Transmit>
					break;
 8002026:	e104      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == 'g')
 8002028:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <StateMachineManagment+0xd1c>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	2b67      	cmp	r3, #103	; 0x67
 8002030:	d10a      	bne.n	8002048 <StateMachineManagment+0xc88>
							Robot.EndStation = Robot.EndStationBuffer;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002034:	789a      	ldrb	r2, [r3, #2]
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002038:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <StateMachineManagment+0xce8>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <StateMachineManagment+0xd28>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
					break;
 8002046:	e0f4      	b.n	8002232 <StateMachineManagment+0xe72>
							flagUART = 0;
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <StateMachineManagment+0xce8>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <StateMachineManagment+0xd2c>)
 8002050:	4817      	ldr	r0, [pc, #92]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002052:	f007 fc7d 	bl	8009950 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002058:	f7fe f8c2 	bl	80001e0 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <StateMachineManagment+0xcf4>)
 8002068:	f006 fc15 	bl	8008896 <HAL_UART_Transmit>
					break;
 800206c:	e0e1      	b.n	8002232 <StateMachineManagment+0xe72>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <StateMachineManagment+0xd30>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002076:	78da      	ldrb	r2, [r3, #3]
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <StateMachineManagment+0xd34>)
 800207a:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <StateMachineManagment+0xcf8>)
 800207e:	791a      	ldrb	r2, [r3, #4]
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <StateMachineManagment+0xd34>)
 8002082:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002086:	795a      	ldrb	r2, [r3, #5]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <StateMachineManagment+0xd34>)
 800208a:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <StateMachineManagment+0xd38>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	220a      	movs	r2, #10
 8002092:	4619      	mov	r1, r3
 8002094:	4817      	ldr	r0, [pc, #92]	; (80020f4 <StateMachineManagment+0xd34>)
 8002096:	f000 f947 	bl	8002328 <EEPROMWriteFcn>
					flagUART = 0;
 800209a:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <StateMachineManagment+0xce8>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <StateMachineManagment+0xd28>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
					break;
 80020a6:	e0c9      	b.n	800223c <StateMachineManagment+0xe7c>
 80020a8:	200003cc 	.word	0x200003cc
 80020ac:	0800a534 	.word	0x0800a534
 80020b0:	2000038c 	.word	0x2000038c
 80020b4:	20000328 	.word	0x20000328
 80020b8:	20000380 	.word	0x20000380
 80020bc:	0800a294 	.word	0x0800a294
 80020c0:	0800a2c8 	.word	0x0800a2c8
 80020c4:	0800a55c 	.word	0x0800a55c
 80020c8:	0800a578 	.word	0x0800a578
 80020cc:	0800a444 	.word	0x0800a444
 80020d0:	0800a594 	.word	0x0800a594
 80020d4:	0800a25c 	.word	0x0800a25c
 80020d8:	20000000 	.word	0x20000000
 80020dc:	200003ce 	.word	0x200003ce
 80020e0:	20000387 	.word	0x20000387
 80020e4:	0800a5b4 	.word	0x0800a5b4
 80020e8:	20000389 	.word	0x20000389
 80020ec:	0800a360 	.word	0x0800a360
 80020f0:	200003d0 	.word	0x200003d0
 80020f4:	200003d8 	.word	0x200003d8
 80020f8:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <StateMachineManagment+0xe94>)
 80020fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d123      	bne.n	800214e <StateMachineManagment+0xd8e>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 8002106:	4954      	ldr	r1, [pc, #336]	; (8002258 <StateMachineManagment+0xe98>)
 8002108:	4854      	ldr	r0, [pc, #336]	; (800225c <StateMachineManagment+0xe9c>)
 800210a:	f007 fc21 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800210e:	4853      	ldr	r0, [pc, #332]	; (800225c <StateMachineManagment+0xe9c>)
 8002110:	f7fe f866 	bl	80001e0 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211c:	494f      	ldr	r1, [pc, #316]	; (800225c <StateMachineManagment+0xe9c>)
 800211e:	4850      	ldr	r0, [pc, #320]	; (8002260 <StateMachineManagment+0xea0>)
 8002120:	f006 fbb9 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <StateMachineManagment+0xe94>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 800212a:	f000 f9c5 	bl	80024b8 <micros>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	494c      	ldr	r1, [pc, #304]	; (8002264 <StateMachineManagment+0xea4>)
 8002134:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <StateMachineManagment+0xea8>)
 800213a:	7818      	ldrb	r0, [r3, #0]
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <StateMachineManagment+0xeac>)
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <StateMachineManagment+0xeb0>)
 8002142:	799b      	ldrb	r3, [r3, #6]
 8002144:	43db      	mvns	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	f000 f899 	bl	8002280 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 800214e:	f000 f9b3 	bl	80024b8 <micros>
 8002152:	4b44      	ldr	r3, [pc, #272]	; (8002264 <StateMachineManagment+0xea4>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	ebb0 0802 	subs.w	r8, r0, r2
 800215c:	eb61 0903 	sbc.w	r9, r1, r3
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <StateMachineManagment+0xeb0>)
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	461a      	mov	r2, r3
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <StateMachineManagment+0xeb4>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	17da      	asrs	r2, r3, #31
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002176:	460b      	mov	r3, r1
 8002178:	4543      	cmp	r3, r8
 800217a:	4613      	mov	r3, r2
 800217c:	eb73 0309 	sbcs.w	r3, r3, r9
 8002180:	d259      	bcs.n	8002236 <StateMachineManagment+0xe76>
					{
						flagUART = 0;
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <StateMachineManagment+0xe94>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <StateMachineManagment+0xeb8>)
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
					}

					break;
 800218e:	e052      	b.n	8002236 <StateMachineManagment+0xe76>
				case RobotOperatingPart2:
					if(flagUART == 0)
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <StateMachineManagment+0xe94>)
 8002192:	f993 3000 	ldrsb.w	r3, [r3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d123      	bne.n	80021e2 <StateMachineManagment+0xe22>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 800219a:	4938      	ldr	r1, [pc, #224]	; (800227c <StateMachineManagment+0xebc>)
 800219c:	482f      	ldr	r0, [pc, #188]	; (800225c <StateMachineManagment+0xe9c>)
 800219e:	f007 fbd7 	bl	8009950 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80021a2:	482e      	ldr	r0, [pc, #184]	; (800225c <StateMachineManagment+0xe9c>)
 80021a4:	f7fe f81c 	bl	80001e0 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b0:	492a      	ldr	r1, [pc, #168]	; (800225c <StateMachineManagment+0xe9c>)
 80021b2:	482b      	ldr	r0, [pc, #172]	; (8002260 <StateMachineManagment+0xea0>)
 80021b4:	f006 fb6f 	bl	8008896 <HAL_UART_Transmit>
						flagUART = 1;
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <StateMachineManagment+0xe94>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 80021be:	f000 f97b 	bl	80024b8 <micros>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4927      	ldr	r1, [pc, #156]	; (8002264 <StateMachineManagment+0xea4>)
 80021c8:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <StateMachineManagment+0xea8>)
 80021ce:	7818      	ldrb	r0, [r3, #0]
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <StateMachineManagment+0xeac>)
 80021d2:	7819      	ldrb	r1, [r3, #0]
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <StateMachineManagment+0xeb0>)
 80021d6:	795b      	ldrb	r3, [r3, #5]
 80021d8:	43db      	mvns	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	f000 f84f 	bl	8002280 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 80021e2:	f000 f969 	bl	80024b8 <micros>
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <StateMachineManagment+0xea4>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	1a84      	subs	r4, r0, r2
 80021ee:	eb61 0503 	sbc.w	r5, r1, r3
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <StateMachineManagment+0xeb0>)
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <StateMachineManagment+0xeb4>)
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	17da      	asrs	r2, r3, #31
 8002200:	469a      	mov	sl, r3
 8002202:	4693      	mov	fp, r2
 8002204:	45a2      	cmp	sl, r4
 8002206:	eb7b 0305 	sbcs.w	r3, fp, r5
 800220a:	d216      	bcs.n	800223a <StateMachineManagment+0xe7a>
					{
						Robot.StartStation = Robot.EndStation;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <StateMachineManagment+0xeb0>)
 800220e:	795a      	ldrb	r2, [r3, #5]
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <StateMachineManagment+0xeb0>)
 8002212:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <StateMachineManagment+0xe94>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <StateMachineManagment+0xea8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <StateMachineManagment+0xeac>)
 8002220:	7811      	ldrb	r1, [r2, #0]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f82b 	bl	8002280 <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <StateMachineManagment+0xeb8>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
					}

					break;
 8002230:	e003      	b.n	800223a <StateMachineManagment+0xe7a>
					break;
 8002232:	bf00      	nop
 8002234:	e007      	b.n	8002246 <StateMachineManagment+0xe86>
					break;
 8002236:	bf00      	nop
 8002238:	e005      	b.n	8002246 <StateMachineManagment+0xe86>
					break;
 800223a:	bf00      	nop
			}
			break;
 800223c:	e003      	b.n	8002246 <StateMachineManagment+0xe86>
			break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <StateMachineManagment+0xe88>
			break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <StateMachineManagment+0xe88>
			break;
 8002246:	bf00      	nop
	}
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002252:	bf00      	nop
 8002254:	200003cc 	.word	0x200003cc
 8002258:	0800a5d0 	.word	0x0800a5d0
 800225c:	2000038c 	.word	0x2000038c
 8002260:	20000328 	.word	0x20000328
 8002264:	20000378 	.word	0x20000378
 8002268:	20000004 	.word	0x20000004
 800226c:	20000005 	.word	0x20000005
 8002270:	20000380 	.word	0x20000380
 8002274:	000f4240 	.word	0x000f4240
 8002278:	20000389 	.word	0x20000389
 800227c:	0800a5f4 	.word	0x0800a5f4

08002280 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	460b      	mov	r3, r1
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <MCP23017SetOutput+0x44>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <MCP23017SetOutput+0x44>)
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <MCP23017SetOutput+0x44>)
 80022a0:	797b      	ldrb	r3, [r7, #5]
 80022a2:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MCP23017SetOutput+0x48>)
 80022ac:	f002 f956 	bl	800455c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 80022b0:	2203      	movs	r2, #3
 80022b2:	4904      	ldr	r1, [pc, #16]	; (80022c4 <MCP23017SetOutput+0x44>)
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <MCP23017SetOutput+0x4c>)
 80022b6:	f004 fe1d 	bl	8006ef4 <HAL_SPI_Transmit_IT>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200003dc 	.word	0x200003dc
 80022c8:	40020400 	.word	0x40020400
 80022cc:	20000198 	.word	0x20000198

080022d0 <MCP23017SetInit>:

void MCP23017SetInit()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MCP23017SetInit+0x20>)
 80022dc:	f002 f93e 	bl	800455c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 80022e0:	2203      	movs	r2, #3
 80022e2:	4904      	ldr	r1, [pc, #16]	; (80022f4 <MCP23017SetInit+0x24>)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MCP23017SetInit+0x28>)
 80022e6:	f004 fe05 	bl	8006ef4 <HAL_SPI_Transmit_IT>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020400 	.word	0x40020400
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000198 	.word	0x20000198

080022fc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_SPI_TxCpltCallback+0x24>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d105      	bne.n	8002318 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <HAL_SPI_TxCpltCallback+0x28>)
 8002314:	f002 f922 	bl	800455c <HAL_GPIO_WritePin>
	}
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000198 	.word	0x20000198
 8002324:	40020400 	.word	0x40020400

08002328 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <EEPROMWriteFcn+0x48>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <EEPROMWriteFcn+0x3e>
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <EEPROMWriteFcn+0x4c>)
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	d10c      	bne.n	8002366 <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800234c:	883a      	ldrh	r2, [r7, #0]
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2310      	movs	r3, #16
 8002358:	21a0      	movs	r1, #160	; 0xa0
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <EEPROMWriteFcn+0x4c>)
 800235c:	f002 fa5c 	bl	8004818 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <EEPROMWriteFcn+0x48>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
	}
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200003d0 	.word	0x200003d0
 8002374:	20000144 	.word	0x20000144

08002378 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <EEPROMReadFcn+0x48>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <EEPROMReadFcn+0x3e>
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <EEPROMReadFcn+0x4c>)
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	d10c      	bne.n	80023b6 <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800239c:	883a      	ldrh	r2, [r7, #0]
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2310      	movs	r3, #16
 80023a8:	21a0      	movs	r1, #160	; 0xa0
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <EEPROMReadFcn+0x4c>)
 80023ac:	f002 fae6 	bl	800497c <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <EEPROMReadFcn+0x48>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
	}
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003d1 	.word	0x200003d1
 80023c4:	20000144 	.word	0x20000144

080023c8 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80023ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d2:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <UARTRecieveIT+0x54>)
 80023d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d8:	461a      	mov	r2, r3
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <UARTRecieveIT+0x54>)
 80023dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <UARTRecieveIT+0x58>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d010      	beq.n	800240c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <UARTRecieveIT+0x58>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <UARTRecieveIT+0x5c>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <UARTRecieveIT+0x58>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <UARTRecieveIT+0x54>)
 80023fc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80023fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002402:	fb01 f202 	mul.w	r2, r1, r2
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	4a05      	ldr	r2, [pc, #20]	; (8002420 <UARTRecieveIT+0x58>)
 800240a:	6013      	str	r3, [r2, #0]
	}
	return data;
 800240c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20000328 	.word	0x20000328
 8002420:	2000051c 	.word	0x2000051c
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a1a      	ldr	r2, [pc, #104]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10b      	bne.n	8002450 <HAL_TIM_PeriodElapsedCallback+0x28>
		_micro += 65535;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002442:	1854      	adds	r4, r2, r1
 8002444:	f143 0500 	adc.w	r5, r3, #0
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800244a:	e9c3 4500 	strd	r4, r5, [r3]
		Temp100Sec[TempPos] = ADCin;
		TempPos++;
		TempPos %=100;
		CPSReaderCycle();
	}
}
 800244e:	e020      	b.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if (htim == &htim3) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d11c      	bne.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x6a>
		Temp100Sec[TempPos] = ADCin;
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002464:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		TempPos++;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002472:	701a      	strb	r2, [r3, #0]
		TempPos %=100;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800247a:	fba2 1203 	umull	r1, r2, r2, r3
 800247e:	0952      	lsrs	r2, r2, #5
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	fb01 f202 	mul.w	r2, r1, r2
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800248c:	701a      	strb	r2, [r3, #0]
		CPSReaderCycle();
 800248e:	f000 f879 	bl	8002584 <CPSReaderCycle>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bdb0      	pop	{r4, r5, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000280 	.word	0x20000280
 80024a0:	20000370 	.word	0x20000370
 80024a4:	20000238 	.word	0x20000238
 80024a8:	200004ac 	.word	0x200004ac
 80024ac:	200003e0 	.word	0x200003e0
 80024b0:	200003e4 	.word	0x200003e4
 80024b4:	51eb851f 	.word	0x51eb851f

080024b8 <micros>:

uint64_t micros() {
 80024b8:	b4b0      	push	{r4, r5, r7}
 80024ba:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <micros+0x2c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2200      	movs	r2, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	4611      	mov	r1, r2
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <micros+0x30>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	1884      	adds	r4, r0, r2
 80024d0:	eb41 0503 	adc.w	r5, r1, r3
 80024d4:	4622      	mov	r2, r4
 80024d6:	462b      	mov	r3, r5
}
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bcb0      	pop	{r4, r5, r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000280 	.word	0x20000280
 80024e8:	20000370 	.word	0x20000370
 80024ec:	00000000 	.word	0x00000000

080024f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	//（ Unit is °C）= {(V SENSE — V 25 ) / Avg_Slope} + 25
	Currenttemp = ((ADCin* (3.3 / 4096)- 0.76)/ 0.0025) + 25;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HAL_ADC_ConvCpltCallback+0x88>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f819 	bl	8000534 <__aeabi_i2d>
 8002502:	a317      	add	r3, pc, #92	; (adr r3, 8002560 <HAL_ADC_ConvCpltCallback+0x70>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f87e 	bl	8000608 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	a314      	add	r3, pc, #80	; (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0x78>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fd febd 	bl	8000298 <__aeabi_dsub>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	a312      	add	r3, pc, #72	; (adr r3, 8002570 <HAL_ADC_ConvCpltCallback+0x80>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f996 	bl	800085c <__aeabi_ddiv>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_ADC_ConvCpltCallback+0x8c>)
 800253e:	f7fd fead 	bl	800029c <__adddf3>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fa6f 	bl	8000a2c <__aeabi_d2uiz>
 800254e:	4603      	mov	r3, r0
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_ADC_ConvCpltCallback+0x90>)
 8002554:	801a      	strh	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	66666666 	.word	0x66666666
 8002564:	3f4a6666 	.word	0x3f4a6666
 8002568:	851eb852 	.word	0x851eb852
 800256c:	3fe851eb 	.word	0x3fe851eb
 8002570:	47ae147b 	.word	0x47ae147b
 8002574:	3f647ae1 	.word	0x3f647ae1
 8002578:	200003e0 	.word	0x200003e0
 800257c:	40390000 	.word	0x40390000
 8002580:	200004ae 	.word	0x200004ae

08002584 <CPSReaderCycle>:

void CPSReaderCycle() {
 8002584:	b490      	push	{r4, r7}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
	//get DMA Position form number of data
	uint32_t CapPos = CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <CPSReaderCycle+0x94>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f1c3 030d 	rsb	r3, r3, #13
 8002596:	603b      	str	r3, [r7, #0]
	uint32_t sum = 0 ;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]

	//calculate diff from all buffer except current dma
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 800259c:	2402      	movs	r4, #2
 800259e:	e01a      	b.n	80025d6 <CPSReaderCycle+0x52>
	{
//		DiffTime[i]  = DMAdatabuffer[(CapPos+1+i)%CAPTURENUM]-DMAdatabuffer[(CapPos+i)%CAPTURENUM];
		DiffTime[i]  = DMAdatabuffer[(CapPos+1+i)%CAPTURENUM];
 80025a0:	4622      	mov	r2, r4
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <CPSReaderCycle+0x98>)
 80025aa:	fba3 2301 	umull	r2, r3, r3, r1
 80025ae:	089a      	lsrs	r2, r3, #2
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	1aca      	subs	r2, r1, r3
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <CPSReaderCycle+0x9c>)
 80025be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <CPSReaderCycle+0xa0>)
 80025c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		//Sum all  Diff
		sum += DiffTime[i];
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <CPSReaderCycle+0xa0>)
 80025ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	607b      	str	r3, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 80025d4:	3401      	adds	r4, #1
 80025d6:	2c0b      	cmp	r4, #11
 80025d8:	dde2      	ble.n	80025a0 <CPSReaderCycle+0x1c>
	}

	//mean all Diff
	Meantime = sum / 10;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a12      	ldr	r2, [pc, #72]	; (8002628 <CPSReaderCycle+0xa4>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <CPSReaderCycle+0xa8>)
 80025ee:	edc3 7a00 	vstr	s15, [r3]

	//CPS
	AvgCPS = (60/Meantime)*10000;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <CPSReaderCycle+0xa8>)
 80025f4:	ed93 7a00 	vldr	s14, [r3]
 80025f8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002630 <CPSReaderCycle+0xac>
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002634 <CPSReaderCycle+0xb0>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <CPSReaderCycle+0xb4>)
 800260a:	edc3 7a00 	vstr	s15, [r3]
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bc90      	pop	{r4, r7}
 8002616:	4770      	bx	lr
 8002618:	200001f0 	.word	0x200001f0
 800261c:	4ec4ec4f 	.word	0x4ec4ec4f
 8002620:	200004b0 	.word	0x200004b0
 8002624:	200004e4 	.word	0x200004e4
 8002628:	cccccccd 	.word	0xcccccccd
 800262c:	20000518 	.word	0x20000518
 8002630:	42700000 	.word	0x42700000
 8002634:	461c4000 	.word	0x461c4000
 8002638:	20000514 	.word	0x20000514

0800263c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002654:	b672      	cpsid	i
}
 8002656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002658:	e7fe      	b.n	8002658 <Error_Handler+0x8>
	...

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_MspInit+0x4c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x4c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800269a:	2007      	movs	r0, #7
 800269c:	f001 f988 	bl	80039b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_ADC_MspInit+0xa8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d145      	bne.n	800274a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_ADC_MspInit+0xac>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a24      	ldr	r2, [pc, #144]	; (8002758 <HAL_ADC_MspInit+0xac>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_ADC_MspInit+0xac>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_ADC_MspInit+0xb4>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_ADC_MspInit+0xb0>)
 80026fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_ADC_MspInit+0xb0>)
 8002704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_ADC_MspInit+0xb0>)
 800270c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002710:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_ADC_MspInit+0xb0>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_ADC_MspInit+0xb0>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800271e:	480f      	ldr	r0, [pc, #60]	; (800275c <HAL_ADC_MspInit+0xb0>)
 8002720:	f001 f988 	bl	8003a34 <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800272a:	f7ff ff91 	bl	8002650 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_ADC_MspInit+0xb0>)
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
 8002734:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_ADC_MspInit+0xb0>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2012      	movs	r0, #18
 8002740:	f001 f941 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002744:	2012      	movs	r0, #18
 8002746:	f001 f95a 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012000 	.word	0x40012000
 8002758:	40023800 	.word	0x40023800
 800275c:	200000e4 	.word	0x200000e4
 8002760:	40026410 	.word	0x40026410

08002764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_I2C_MspInit+0xa4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d13c      	bne.n	8002800 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_I2C_MspInit+0xa8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_I2C_MspInit+0xa8>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_I2C_MspInit+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b4:	2304      	movs	r3, #4
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4814      	ldr	r0, [pc, #80]	; (8002810 <HAL_I2C_MspInit+0xac>)
 80027c0:	f001 fd48 	bl	8004254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_I2C_MspInit+0xa8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_I2C_MspInit+0xa8>)
 80027ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_I2C_MspInit+0xa8>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	201f      	movs	r0, #31
 80027e6:	f001 f8ee 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ea:	201f      	movs	r0, #31
 80027ec:	f001 f907 	bl	80039fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2020      	movs	r0, #32
 80027f6:	f001 f8e6 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027fa:	2020      	movs	r0, #32
 80027fc:	f001 f8ff 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002800:	bf00      	nop
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40005400 	.word	0x40005400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020400 	.word	0x40020400

08002814 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_SPI_MspInit+0x94>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d133      	bne.n	800289e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_SPI_MspInit+0x98>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_SPI_MspInit+0x98>)
 8002840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_SPI_MspInit+0x98>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_SPI_MspInit+0x98>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_SPI_MspInit+0x98>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_SPI_MspInit+0x98>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800286e:	2338      	movs	r3, #56	; 0x38
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800287e:	2306      	movs	r3, #6
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <HAL_SPI_MspInit+0x9c>)
 800288a:	f001 fce3 	bl	8004254 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2033      	movs	r0, #51	; 0x33
 8002894:	f001 f897 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002898:	2033      	movs	r0, #51	; 0x33
 800289a:	f001 f8b0 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40003c00 	.word	0x40003c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020400 	.word	0x40020400

080028b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d15d      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a43      	ldr	r2, [pc, #268]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800291e:	2301      	movs	r3, #1
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	4838      	ldr	r0, [pc, #224]	; (8002a0c <HAL_TIM_Base_MspInit+0x158>)
 800292a:	f001 fc93 	bl	8004254 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_TIM_Base_MspInit+0x160>)
 8002932:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002936:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800293a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800293c:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002956:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 800295a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800295e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002966:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 800296a:	2200      	movs	r2, #0
 800296c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002974:	4826      	ldr	r0, [pc, #152]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002976:	f001 f85d 	bl	8003a34 <HAL_DMA_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8002980:	f7ff fe66 	bl	8002650 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_TIM_Base_MspInit+0x15c>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002990:	e036      	b.n	8002a00 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_TIM_Base_MspInit+0x164>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d116      	bne.n	80029ca <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	201d      	movs	r0, #29
 80029be:	f001 f802 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029c2:	201d      	movs	r0, #29
 80029c4:	f001 f81b 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 80029c8:	e01a      	b.n	8002a00 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM11)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_TIM_Base_MspInit+0x168>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d115      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e2:	6453      	str	r3, [r2, #68]	; 0x44
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_TIM_Base_MspInit+0x154>)
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	201a      	movs	r0, #26
 80029f6:	f000 ffe6 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029fa:	201a      	movs	r0, #26
 80029fc:	f000 ffff 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	200002c8 	.word	0x200002c8
 8002a14:	40026088 	.word	0x40026088
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40014800 	.word	0x40014800

08002a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_UART_MspInit+0x94>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d133      	bne.n	8002aaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_UART_MspInit+0x98>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <HAL_UART_MspInit+0x9c>)
 8002a96:	f001 fbdd 	bl	8004254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2026      	movs	r0, #38	; 0x26
 8002aa0:	f000 ff91 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aa4:	2026      	movs	r0, #38	; 0x26
 8002aa6:	f000 ffaa 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40004400 	.word	0x40004400
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aca:	e7fe      	b.n	8002aca <HardFault_Handler+0x4>

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <MemManage_Handler+0x4>

08002ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <BusFault_Handler+0x4>

08002ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <UsageFault_Handler+0x4>

08002ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0c:	f000 f920 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA1_Stream5_IRQHandler+0x10>)
 8002b1a:	f001 f923 	bl	8003d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200002c8 	.word	0x200002c8

08002b28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <ADC_IRQHandler+0x10>)
 8002b2e:	f000 f996 	bl	8002e5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000009c 	.word	0x2000009c

08002b3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002b42:	f004 fff3 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000280 	.word	0x20000280

08002b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <TIM3_IRQHandler+0x10>)
 8002b56:	f004 ffe9 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000238 	.word	0x20000238

08002b64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <I2C1_EV_IRQHandler+0x10>)
 8002b6a:	f001 ffc5 	bl	8004af8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000144 	.word	0x20000144

08002b78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <I2C1_ER_IRQHandler+0x10>)
 8002b7e:	f002 f92c 	bl	8004dda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000144 	.word	0x20000144

08002b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <USART2_IRQHandler+0x10>)
 8002b92:	f005 ff43 	bl	8008a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000328 	.word	0x20000328

08002ba0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <SPI3_IRQHandler+0x10>)
 8002ba6:	f004 fa2f 	bl	8007008 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000198 	.word	0x20000198

08002bb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bba:	f001 f8d3 	bl	8003d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000e4 	.word	0x200000e4

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f006 fe78 	bl	80098ec <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20000520 	.word	0x20000520
 8002c30:	20000538 	.word	0x20000538

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c5e:	490e      	ldr	r1, [pc, #56]	; (8002c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c60:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c74:	4c0b      	ldr	r4, [pc, #44]	; (8002ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c82:	f7ff ffd7 	bl	8002c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c86:	f006 fe37 	bl	80098f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8a:	f7fe f871 	bl	8000d70 <main>
  bx  lr    
 8002c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002c9c:	0800a67c 	.word	0x0800a67c
  ldr r2, =_sbss
 8002ca0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ca4:	20000538 	.word	0x20000538

08002ca8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <DMA1_Stream0_IRQHandler>
	...

08002cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_Init+0x40>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_Init+0x40>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_Init+0x40>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f000 fe6b 	bl	80039b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 f808 	bl	8002cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce0:	f7ff fcbc 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023c00 	.word	0x40023c00

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x54>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x58>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fe83 	bl	8003a1a <HAL_SYSTICK_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00e      	b.n	8002d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d80a      	bhi.n	8002d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f000 fe4b 	bl	80039c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d30:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <HAL_InitTick+0x5c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	20000010 	.word	0x20000010

08002d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000014 	.word	0x20000014
 8002d74:	20000524 	.word	0x20000524

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000524 	.word	0x20000524

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000014 	.word	0x20000014

08002dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e033      	b.n	8002e56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fc58 	bl	80026ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e1e:	f023 0302 	bic.w	r3, r3, #2
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fb68 	bl	8003500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d049      	beq.n	8002f28 <HAL_ADC_IRQHandler+0xca>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d046      	beq.n	8002f28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d12b      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d127      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d119      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0220 	bic.w	r2, r2, #32
 8002ef2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fae9 	bl	80024f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0212 	mvn.w	r2, #18
 8002f26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d057      	beq.n	8002fee <HAL_ADC_IRQHandler+0x190>
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d054      	beq.n	8002fee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d139      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12b      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d124      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11d      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d119      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d105      	bne.n	8002fde <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fc0c 	bl	80037fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 020c 	mvn.w	r2, #12
 8002fec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <HAL_ADC_IRQHandler+0x1d6>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10d      	bne.n	8003034 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f925 	bl	8003274 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0201 	mvn.w	r2, #1
 8003032:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003042:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_ADC_IRQHandler+0x218>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0202 	orr.w	r2, r3, #2
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f90e 	bl	8003288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0220 	mvn.w	r2, #32
 8003074:	601a      	str	r2, [r3, #0]
  }
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_ADC_Start_DMA+0x1e>
 800309a:	2302      	movs	r3, #2
 800309c:	e0ce      	b.n	800323c <HAL_ADC_Start_DMA+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d018      	beq.n	80030e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030c4:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_ADC_Start_DMA+0x1c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5f      	ldr	r2, [pc, #380]	; (8003248 <HAL_ADC_Start_DMA+0x1c8>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9a      	lsrs	r2, r3, #18
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3b01      	subs	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f4:	d107      	bne.n	8003106 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	f040 8086 	bne.w	8003222 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003140:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d106      	bne.n	8003164 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f023 0206 	bic.w	r2, r3, #6
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
 8003162:	e002      	b.n	800316a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_ADC_Start_DMA+0x1cc>)
 8003174:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	4a35      	ldr	r2, [pc, #212]	; (8003250 <HAL_ADC_Start_DMA+0x1d0>)
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_ADC_Start_DMA+0x1d4>)
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4a33      	ldr	r2, [pc, #204]	; (8003258 <HAL_ADC_Start_DMA+0x1d8>)
 800318c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003196:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	4619      	mov	r1, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f000 fce2 	bl	8003b90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d129      	bne.n	800323a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	e020      	b.n	800323a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_ADC_Start_DMA+0x1dc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d11b      	bne.n	800323a <HAL_ADC_Start_DMA+0x1ba>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d114      	bne.n	800323a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	e00b      	b.n	800323a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	2000000c 	.word	0x2000000c
 8003248:	431bde83 	.word	0x431bde83
 800324c:	40012300 	.word	0x40012300
 8003250:	080036f9 	.word	0x080036f9
 8003254:	080037b3 	.word	0x080037b3
 8003258:	080037cf 	.word	0x080037cf
 800325c:	40012000 	.word	0x40012000

08003260 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e113      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x244>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d925      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	4603      	mov	r3, r0
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4403      	add	r3, r0
 8003306:	3b1e      	subs	r3, #30
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e022      	b.n	800335a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	2207      	movs	r2, #7
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
 80033aa:	e04c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b23      	subs	r3, #35	; 0x23
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b23      	subs	r3, #35	; 0x23
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
 80033fc:	e023      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	; 0x41
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b41      	subs	r3, #65	; 0x41
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_ADC_ConfigChannel+0x250>)
 8003448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <HAL_ADC_ConfigChannel+0x254>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10f      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1d8>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d10b      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_ADC_ConfigChannel+0x254>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12b      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_ADC_ConfigChannel+0x258>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x1f4>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b11      	cmp	r3, #17
 800348e:	d122      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <HAL_ADC_ConfigChannel+0x258>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d111      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_ADC_ConfigChannel+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_ADC_ConfigChannel+0x260>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	0c9a      	lsrs	r2, r3, #18
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40012300 	.word	0x40012300
 80034f0:	40012000 	.word	0x40012000
 80034f4:	10000012 	.word	0x10000012
 80034f8:	2000000c 	.word	0x2000000c
 80034fc:	431bde83 	.word	0x431bde83

08003500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <ADC_Init+0x1f0>)
 800350a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <ADC_Init+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	e00f      	b.n	80035fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0202 	bic.w	r2, r2, #2
 800360c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6899      	ldr	r1, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	005a      	lsls	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800364a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	3b01      	subs	r3, #1
 8003658:	035a      	lsls	r2, r3, #13
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e007      	b.n	8003674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003672:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	3b01      	subs	r3, #1
 8003690:	051a      	lsls	r2, r3, #20
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036b6:	025a      	lsls	r2, r3, #9
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	029a      	lsls	r2, r3, #10
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012300 	.word	0x40012300
 80036f4:	0f000001 	.word	0x0f000001

080036f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13c      	bne.n	800378c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d12b      	bne.n	8003784 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003730:	2b00      	cmp	r3, #0
 8003732:	d127      	bne.n	8003784 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800374c:	2b00      	cmp	r3, #0
 800374e:	d119      	bne.n	8003784 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0220 	bic.w	r2, r2, #32
 800375e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7fe feb3 	bl	80024f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800378a:	e00e      	b.n	80037aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fd75 	bl	8003288 <HAL_ADC_ErrorCallback>
}
 800379e:	e004      	b.n	80037aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fd4d 	bl	8003260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f043 0204 	orr.w	r2, r3, #4
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fd4a 	bl	8003288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <__NVIC_SetPriorityGrouping+0x44>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800382c:	4013      	ands	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800383c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003842:	4a04      	ldr	r2, [pc, #16]	; (8003854 <__NVIC_SetPriorityGrouping+0x44>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	60d3      	str	r3, [r2, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <__NVIC_GetPriorityGrouping+0x18>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	f003 0307 	and.w	r3, r3, #7
}
 8003866:	4618      	mov	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	2b00      	cmp	r3, #0
 8003884:	db0b      	blt.n	800389e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	4907      	ldr	r1, [pc, #28]	; (80038ac <__NVIC_EnableIRQ+0x38>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2001      	movs	r0, #1
 8003896:	fa00 f202 	lsl.w	r2, r0, r2
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e100 	.word	0xe000e100

080038b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	db0a      	blt.n	80038da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	490c      	ldr	r1, [pc, #48]	; (80038fc <__NVIC_SetPriority+0x4c>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	440b      	add	r3, r1
 80038d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d8:	e00a      	b.n	80038f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4908      	ldr	r1, [pc, #32]	; (8003900 <__NVIC_SetPriority+0x50>)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3b04      	subs	r3, #4
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	440b      	add	r3, r1
 80038ee:	761a      	strb	r2, [r3, #24]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003904:	b480      	push	{r7}
 8003906:	b089      	sub	sp, #36	; 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f1c3 0307 	rsb	r3, r3, #7
 800391e:	2b04      	cmp	r3, #4
 8003920:	bf28      	it	cs
 8003922:	2304      	movcs	r3, #4
 8003924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3304      	adds	r3, #4
 800392a:	2b06      	cmp	r3, #6
 800392c:	d902      	bls.n	8003934 <NVIC_EncodePriority+0x30>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3b03      	subs	r3, #3
 8003932:	e000      	b.n	8003936 <NVIC_EncodePriority+0x32>
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	f04f 32ff 	mov.w	r2, #4294967295
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800394c:	f04f 31ff 	mov.w	r1, #4294967295
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	43d9      	mvns	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	4313      	orrs	r3, r2
         );
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800397c:	d301      	bcc.n	8003982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397e:	2301      	movs	r3, #1
 8003980:	e00f      	b.n	80039a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <SysTick_Config+0x40>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398a:	210f      	movs	r1, #15
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f7ff ff8e 	bl	80038b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <SysTick_Config+0x40>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <SysTick_Config+0x40>)
 800399c:	2207      	movs	r2, #7
 800399e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	e000e010 	.word	0xe000e010

080039b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff29 	bl	8003810 <__NVIC_SetPriorityGrouping>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d8:	f7ff ff3e 	bl	8003858 <__NVIC_GetPriorityGrouping>
 80039dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f7ff ff8e 	bl	8003904 <NVIC_EncodePriority>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff5d 	bl	80038b0 <__NVIC_SetPriority>
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff31 	bl	8003874 <__NVIC_EnableIRQ>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ffa2 	bl	800396c <SysTick_Config>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a40:	f7ff f99a 	bl	8002d78 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e099      	b.n	8003b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	e00f      	b.n	8003a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a72:	f7ff f981 	bl	8002d78 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d908      	bls.n	8003a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e078      	b.n	8003b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e8      	bne.n	8003a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_DMA_Init+0x158>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d107      	bne.n	8003afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4313      	orrs	r3, r2
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d117      	bne.n	8003b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb0f 	bl	800415c <DMA_CheckFifoParam>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b52:	2301      	movs	r3, #1
 8003b54:	e016      	b.n	8003b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fac6 	bl	80040f0 <DMA_CalcBaseAndBitshift>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	f010803f 	.word	0xf010803f

08003b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Start_IT+0x26>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e040      	b.n	8003c38 <HAL_DMA_Start_IT+0xa8>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d12f      	bne.n	8003c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fa58 	bl	8004094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	223f      	movs	r2, #63	; 0x3f
 8003bea:	409a      	lsls	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0216 	orr.w	r2, r2, #22
 8003bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0208 	orr.w	r2, r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e005      	b.n	8003c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c4e:	f7ff f893 	bl	8002d78 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d008      	beq.n	8003c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e052      	b.n	8003d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_Abort+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	e013      	b.n	8003cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc4:	f7ff f858 	bl	8002d78 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d90c      	bls.n	8003cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e015      	b.n	8003d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e4      	bne.n	8003cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e00c      	b.n	8003d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2205      	movs	r2, #5
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d70:	4b8e      	ldr	r3, [pc, #568]	; (8003fac <HAL_DMA_IRQHandler+0x248>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a8e      	ldr	r2, [pc, #568]	; (8003fb0 <HAL_DMA_IRQHandler+0x24c>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2208      	movs	r2, #8
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01a      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2201      	movs	r2, #1
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	f043 0202 	orr.w	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2204      	movs	r2, #4
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2210      	movs	r2, #16
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d043      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d03c      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	2210      	movs	r2, #16
 8003e60:	409a      	lsls	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d018      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d024      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
 8003e92:	e01f      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
 8003ea4:	e016      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0208 	bic.w	r2, r2, #8
 8003ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2220      	movs	r2, #32
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 808f 	beq.w	8004004 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8087 	beq.w	8004004 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2220      	movs	r2, #32
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d136      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0216 	bic.w	r2, r2, #22
 8003f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x1da>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0208 	bic.w	r2, r2, #8
 8003f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	223f      	movs	r2, #63	; 0x3f
 8003f54:	409a      	lsls	r2, r3
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d07e      	beq.n	8004070 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
        }
        return;
 8003f7a:	e079      	b.n	8004070 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01d      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d031      	beq.n	8004004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
 8003fa8:	e02c      	b.n	8004004 <HAL_DMA_IRQHandler+0x2a0>
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d023      	beq.n	8004004 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
 8003fc4:	e01e      	b.n	8004004 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0210 	bic.w	r2, r2, #16
 8003fe2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2b00      	cmp	r3, #0
 800400a:	d032      	beq.n	8004072 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d022      	beq.n	800405e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2205      	movs	r2, #5
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	429a      	cmp	r2, r3
 800403a:	d307      	bcc.n	800404c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f2      	bne.n	8004030 <HAL_DMA_IRQHandler+0x2cc>
 800404a:	e000      	b.n	800404e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800404c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	e000      	b.n	8004072 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004070:	bf00      	nop
    }
  }
}
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004086:	b2db      	uxtb	r3, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d108      	bne.n	80040d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040d2:	e007      	b.n	80040e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	3b10      	subs	r3, #16
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <DMA_CalcBaseAndBitshift+0x64>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <DMA_CalcBaseAndBitshift+0x68>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d909      	bls.n	8004132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	659a      	str	r2, [r3, #88]	; 0x58
 8004130:	e007      	b.n	8004142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	aaaaaaab 	.word	0xaaaaaaab
 8004158:	0800a630 	.word	0x0800a630

0800415c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11f      	bne.n	80041b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d856      	bhi.n	800422a <DMA_CheckFifoParam+0xce>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <DMA_CheckFifoParam+0x28>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	08004195 	.word	0x08004195
 8004190:	0800422b 	.word	0x0800422b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d046      	beq.n	800422e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a4:	e043      	b.n	800422e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ae:	d140      	bne.n	8004232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b4:	e03d      	b.n	8004232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d121      	bne.n	8004204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d837      	bhi.n	8004236 <DMA_CheckFifoParam+0xda>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <DMA_CheckFifoParam+0x70>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041e3 	.word	0x080041e3
 80041d4:	080041dd 	.word	0x080041dd
 80041d8:	080041f5 	.word	0x080041f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e030      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d025      	beq.n	800423a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f2:	e022      	b.n	800423a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041fc:	d11f      	bne.n	800423e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004202:	e01c      	b.n	800423e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d903      	bls.n	8004212 <DMA_CheckFifoParam+0xb6>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d003      	beq.n	8004218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004210:	e018      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      break;
 8004216:	e015      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e00b      	b.n	8004242 <DMA_CheckFifoParam+0xe6>
      break;
 800422a:	bf00      	nop
 800422c:	e00a      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
 8004230:	e008      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004232:	bf00      	nop
 8004234:	e006      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004236:	bf00      	nop
 8004238:	e004      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;   
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
    }
  } 
  
  return status; 
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop

08004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e159      	b.n	8004524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	f040 8148 	bne.w	800451e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d005      	beq.n	80042a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d130      	bne.n	8004308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 0201 	and.w	r2, r3, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b03      	cmp	r3, #3
 8004312:	d017      	beq.n	8004344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d123      	bne.n	8004398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0203 	and.w	r2, r3, #3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a2 	beq.w	800451e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a56      	ldr	r2, [pc, #344]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b54      	ldr	r3, [pc, #336]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f6:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <HAL_GPIO_Init+0x2f0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x202>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a48      	ldr	r2, [pc, #288]	; (8004548 <HAL_GPIO_Init+0x2f4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x1fe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a47      	ldr	r2, [pc, #284]	; (800454c <HAL_GPIO_Init+0x2f8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x1fa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a46      	ldr	r2, [pc, #280]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x1f6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a45      	ldr	r2, [pc, #276]	; (8004554 <HAL_GPIO_Init+0x300>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x1f2>
 8004442:	2304      	movs	r3, #4
 8004444:	e008      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004446:	2307      	movs	r3, #7
 8004448:	e006      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444a:	2303      	movs	r3, #3
 800444c:	e004      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444e:	2302      	movs	r3, #2
 8004450:	e002      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004456:	2300      	movs	r3, #0
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f002 0203 	and.w	r2, r2, #3
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	4093      	lsls	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004468:	4935      	ldr	r1, [pc, #212]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_GPIO_Init+0x304>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800449a:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_GPIO_Init+0x304>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ee:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_GPIO_Init+0x304>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	f67f aea2 	bls.w	8004270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40013800 	.word	0x40013800
 8004544:	40020000 	.word	0x40020000
 8004548:	40020400 	.word	0x40020400
 800454c:	40020800 	.word	0x40020800
 8004550:	40020c00 	.word	0x40020c00
 8004554:	40021000 	.word	0x40021000
 8004558:	40013c00 	.word	0x40013c00

0800455c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
 8004568:	4613      	mov	r3, r2
 800456a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800456c:	787b      	ldrb	r3, [r7, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004578:	e003      	b.n	8004582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	041a      	lsls	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e12b      	b.n	80047fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe f8d4 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	; 0x24
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f4:	f002 fbcc 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4a81      	ldr	r2, [pc, #516]	; (8004804 <HAL_I2C_Init+0x274>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d807      	bhi.n	8004614 <HAL_I2C_Init+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_I2C_Init+0x278>)
 8004608:	4293      	cmp	r3, r2
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e006      	b.n	8004622 <HAL_I2C_Init+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a7d      	ldr	r2, [pc, #500]	; (800480c <HAL_I2C_Init+0x27c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0e7      	b.n	80047fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a78      	ldr	r2, [pc, #480]	; (8004810 <HAL_I2C_Init+0x280>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0c9b      	lsrs	r3, r3, #18
 8004634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a6a      	ldr	r2, [pc, #424]	; (8004804 <HAL_I2C_Init+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d802      	bhi.n	8004664 <HAL_I2C_Init+0xd4>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3301      	adds	r3, #1
 8004662:	e009      	b.n	8004678 <HAL_I2C_Init+0xe8>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	4a69      	ldr	r2, [pc, #420]	; (8004814 <HAL_I2C_Init+0x284>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	3301      	adds	r3, #1
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	430b      	orrs	r3, r1
 800467e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800468a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	495c      	ldr	r1, [pc, #368]	; (8004804 <HAL_I2C_Init+0x274>)
 8004694:	428b      	cmp	r3, r1
 8004696:	d819      	bhi.n	80046cc <HAL_I2C_Init+0x13c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e59      	subs	r1, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046ac:	400b      	ands	r3, r1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_I2C_Init+0x138>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1e59      	subs	r1, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	e051      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e04f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d111      	bne.n	80046f8 <HAL_I2C_Init+0x168>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1e58      	subs	r0, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e012      	b.n	800471e <HAL_I2C_Init+0x18e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e58      	subs	r0, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	0099      	lsls	r1, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Init+0x196>
 8004722:	2301      	movs	r3, #1
 8004724:	e022      	b.n	800476c <HAL_I2C_Init+0x1dc>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <HAL_I2C_Init+0x1bc>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1e58      	subs	r0, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	440b      	add	r3, r1
 800473c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	e00f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800479a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6911      	ldr	r1, [r2, #16]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	4311      	orrs	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	000186a0 	.word	0x000186a0
 8004808:	001e847f 	.word	0x001e847f
 800480c:	003d08ff 	.word	0x003d08ff
 8004810:	431bde83 	.word	0x431bde83
 8004814:	10624dd3 	.word	0x10624dd3

08004818 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	f040 808e 	bne.w	8004960 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004844:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <HAL_I2C_Mem_Write_IT+0x158>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	4a4a      	ldr	r2, [pc, #296]	; (8004974 <HAL_I2C_Mem_Write_IT+0x15c>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	0a1a      	lsrs	r2, r3, #8
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3b01      	subs	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d116      	bne.n	8004898 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e064      	b.n	8004962 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d0db      	beq.n	800485e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2C_Mem_Write_IT+0x9c>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e056      	b.n	8004962 <HAL_I2C_Mem_Write_IT+0x14a>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d007      	beq.n	80048da <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2221      	movs	r2, #33	; 0x21
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_I2C_Mem_Write_IT+0x160>)
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800491c:	897a      	ldrh	r2, [r7, #10]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004922:	893a      	ldrh	r2, [r7, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004942:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800495a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c
 8004974:	14f8b589 	.word	0x14f8b589
 8004978:	ffff0000 	.word	0xffff0000

0800497c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	460b      	mov	r3, r1
 8004990:	813b      	strh	r3, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 809a 	bne.w	8004adc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_I2C_Mem_Read_IT+0x170>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	4a50      	ldr	r2, [pc, #320]	; (8004af0 <HAL_I2C_Mem_Read_IT+0x174>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	0a1a      	lsrs	r2, r3, #8
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d116      	bne.n	80049fc <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e070      	b.n	8004ade <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d0db      	beq.n	80049c2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_I2C_Mem_Read_IT+0x9c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e062      	b.n	8004ade <HAL_I2C_Mem_Read_IT+0x162>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d007      	beq.n	8004a3e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a4c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2222      	movs	r2, #34	; 0x22
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a3a      	ldr	r2, [r7, #32]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <HAL_I2C_Mem_Read_IT+0x178>)
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a80:	897a      	ldrh	r2, [r7, #10]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004a86:	893a      	ldrh	r2, [r7, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ad6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	14f8b589 	.word	0x14f8b589
 8004af4:	ffff0000 	.word	0xffff0000

08004af8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d003      	beq.n	8004b30 <HAL_I2C_EV_IRQHandler+0x38>
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	f040 80c1 	bne.w	8004cb2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <HAL_I2C_EV_IRQHandler+0x6e>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b50:	d003      	beq.n	8004b5a <HAL_I2C_EV_IRQHandler+0x62>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b58:	d101      	bne.n	8004b5e <HAL_I2C_EV_IRQHandler+0x66>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <HAL_I2C_EV_IRQHandler+0x68>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	f000 8132 	beq.w	8004dca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x92>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	0a5b      	lsrs	r3, r3, #9
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fc7b 	bl	8006478 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fd83 	bl	800568e <I2C_Master_SB>
 8004b88:	e092      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_I2C_EV_IRQHandler+0xb2>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	0a5b      	lsrs	r3, r3, #9
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fdf9 	bl	800579a <I2C_Master_ADD10>
 8004ba8:	e082      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0xd2>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	0a5b      	lsrs	r3, r3, #9
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe13 	bl	80057ee <I2C_Master_ADDR>
 8004bc8:	e072      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03b      	beq.n	8004c4e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	f000 80f3 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	09db      	lsrs	r3, r3, #7
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00f      	beq.n	8004c14 <HAL_I2C_EV_IRQHandler+0x11c>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f9f3 	bl	8004ff8 <I2C_MasterTransmit_TXE>
 8004c12:	e04d      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80d6 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	0a5b      	lsrs	r3, r3, #9
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80cf 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c30:	7bbb      	ldrb	r3, [r7, #14]
 8004c32:	2b21      	cmp	r3, #33	; 0x21
 8004c34:	d103      	bne.n	8004c3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa7a 	bl	8005130 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c3c:	e0c7      	b.n	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	f040 80c4 	bne.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fae8 	bl	800521c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c4c:	e0bf      	b.n	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5c:	f000 80b7 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00f      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x194>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x194>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fb5d 	bl	8005344 <I2C_MasterReceive_RXNE>
 8004c8a:	e011      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 809a 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8093 	beq.w	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fc06 	bl	80054ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cae:	e08e      	b.n	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cb0:	e08d      	b.n	8004dce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e007      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <HAL_I2C_EV_IRQHandler+0x20e>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	0a5b      	lsrs	r3, r3, #9
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00c      	beq.n	8004d06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 ffc4 	bl	8005c8c <I2C_Slave_ADDR>
 8004d04:	e066      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x22e>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0a5b      	lsrs	r3, r3, #9
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fffe 	bl	8005d20 <I2C_Slave_STOPF>
 8004d24:	e056      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	2b21      	cmp	r3, #33	; 0x21
 8004d2a:	d002      	beq.n	8004d32 <HAL_I2C_EV_IRQHandler+0x23a>
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b29      	cmp	r3, #41	; 0x29
 8004d30:	d125      	bne.n	8004d7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	09db      	lsrs	r3, r3, #7
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00f      	beq.n	8004d5e <HAL_I2C_EV_IRQHandler+0x266>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	0a9b      	lsrs	r3, r3, #10
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_I2C_EV_IRQHandler+0x266>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 feda 	bl	8005b10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d5c:	e039      	b.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d033      	beq.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	0a5b      	lsrs	r3, r3, #9
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02d      	beq.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 ff07 	bl	8005b8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d7c:	e029      	b.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00f      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	0a9b      	lsrs	r3, r3, #10
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ff12 	bl	8005bcc <I2C_SlaveReceive_RXNE>
 8004da8:	e014      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00e      	beq.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	0a5b      	lsrs	r3, r3, #9
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 ff40 	bl	8005c48 <I2C_SlaveReceive_BTF>
 8004dc8:	e004      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004dca:	bf00      	nop
 8004dcc:	e002      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b08a      	sub	sp, #40	; 0x28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00e      	beq.n	8004e28 <HAL_I2C_ER_IRQHandler+0x4e>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0x78>
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f043 0302 	orr.w	r3, r3, #2
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004e50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	0a9b      	lsrs	r3, r3, #10
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d03f      	beq.n	8004ede <HAL_I2C_ER_IRQHandler+0x104>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d039      	beq.n	8004ede <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e84:	7ebb      	ldrb	r3, [r7, #26]
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d112      	bne.n	8004eb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e90:	7cfb      	ldrb	r3, [r7, #19]
 8004e92:	2b21      	cmp	r3, #33	; 0x21
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b29      	cmp	r3, #41	; 0x29
 8004e9a:	d005      	beq.n	8004ea8 <HAL_I2C_ER_IRQHandler+0xce>
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	2b28      	cmp	r3, #40	; 0x28
 8004ea0:	d106      	bne.n	8004eb0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b21      	cmp	r3, #33	; 0x21
 8004ea6:	d103      	bne.n	8004eb0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 f869 	bl	8005f80 <I2C_Slave_AF>
 8004eae:	e016      	b.n	8004ede <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ec2:	7efb      	ldrb	r3, [r7, #27]
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d002      	beq.n	8004ece <HAL_I2C_ER_IRQHandler+0xf4>
 8004ec8:	7efb      	ldrb	r3, [r7, #27]
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d107      	bne.n	8004ede <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	0adb      	lsrs	r3, r3, #11
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_I2C_ER_IRQHandler+0x12e>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004f06:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 f8a0 	bl	8006060 <I2C_ITError>
  }
}
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	; 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
 8004f84:	4613      	mov	r3, r2
 8004f86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800500e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d150      	bne.n	80050c0 <I2C_MasterTransmit_TXE+0xc8>
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b21      	cmp	r3, #33	; 0x21
 8005022:	d14d      	bne.n	80050c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d01d      	beq.n	8005066 <I2C_MasterTransmit_TXE+0x6e>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b20      	cmp	r3, #32
 800502e:	d01a      	beq.n	8005066 <I2C_MasterTransmit_TXE+0x6e>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005036:	d016      	beq.n	8005066 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005046:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2211      	movs	r2, #17
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff ff62 	bl	8004f28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005064:	e060      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005074:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005084:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d107      	bne.n	80050b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff ff7d 	bl	8004fa8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050ae:	e03b      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff35 	bl	8004f28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050be:	e033      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b21      	cmp	r3, #33	; 0x21
 80050c4:	d005      	beq.n	80050d2 <I2C_MasterTransmit_TXE+0xda>
 80050c6:	7bbb      	ldrb	r3, [r7, #14]
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d12d      	bne.n	8005128 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b22      	cmp	r3, #34	; 0x22
 80050d0:	d12a      	bne.n	8005128 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050ec:	e01c      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d103      	bne.n	8005102 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f88e 	bl	800521c <I2C_MemoryTransmit_TXE_BTF>
}
 8005100:	e012      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005126:	e7ff      	b.n	8005128 <I2C_MasterTransmit_TXE+0x130>
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b21      	cmp	r3, #33	; 0x21
 8005148:	d164      	bne.n	8005214 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005178:	e04c      	b.n	8005214 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d01d      	beq.n	80051bc <I2C_MasterTransmit_BTF+0x8c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b20      	cmp	r3, #32
 8005184:	d01a      	beq.n	80051bc <I2C_MasterTransmit_BTF+0x8c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800518c:	d016      	beq.n	80051bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800519c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2211      	movs	r2, #17
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff feb7 	bl	8004f28 <HAL_I2C_MasterTxCpltCallback>
}
 80051ba:	e02b      	b.n	8005214 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d107      	bne.n	8005206 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fed2 	bl	8004fa8 <HAL_I2C_MemTxCpltCallback>
}
 8005204:	e006      	b.n	8005214 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe8a 	bl	8004f28 <HAL_I2C_MasterTxCpltCallback>
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11d      	bne.n	8005270 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10b      	bne.n	8005254 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	b2da      	uxtb	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524c:	1c9a      	adds	r2, r3, #2
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005252:	e073      	b.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	b29b      	uxth	r3, r3
 800525a:	121b      	asrs	r3, r3, #8
 800525c:	b2da      	uxtb	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800526e:	e065      	b.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10b      	bne.n	8005290 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	b2da      	uxtb	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800528e:	e055      	b.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005294:	2b02      	cmp	r3, #2
 8005296:	d151      	bne.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b22      	cmp	r3, #34	; 0x22
 800529c:	d10d      	bne.n	80052ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052b8:	e040      	b.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b21      	cmp	r3, #33	; 0x21
 80052c8:	d112      	bne.n	80052f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052ee:	e025      	b.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d120      	bne.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b21      	cmp	r3, #33	; 0x21
 80052fe:	d11d      	bne.n	800533c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800530e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fe36 	bl	8004fa8 <HAL_I2C_MemTxCpltCallback>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b22      	cmp	r3, #34	; 0x22
 8005356:	f040 80ac 	bne.w	80054b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d921      	bls.n	80053ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b03      	cmp	r3, #3
 8005396:	f040 808c 	bne.w	80054b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80053aa:	e082      	b.n	80054b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d075      	beq.n	80054a0 <I2C_MasterReceive_RXNE+0x15c>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <I2C_MasterReceive_RXNE+0x7c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d16f      	bne.n	80054a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f827 	bl	8006414 <I2C_WaitOnSTOPRequestThroughIT>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d142      	bne.n	8005452 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d10a      	bne.n	800543c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff fdc1 	bl	8004fbc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800543a:	e03a      	b.n	80054b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2212      	movs	r2, #18
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fd76 	bl	8004f3c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005450:	e02f      	b.n	80054b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005460:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fd99 	bl	8004fd0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800549e:	e008      	b.n	80054b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	605a      	str	r2, [r3, #4]
}
 80054b0:	e7ff      	b.n	80054b2 <I2C_MasterReceive_RXNE+0x16e>
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d11b      	bne.n	800550a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005508:	e0bd      	b.n	8005686 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b03      	cmp	r3, #3
 8005512:	d129      	bne.n	8005568 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d00a      	beq.n	8005540 <I2C_MasterReceive_BTF+0x86>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d007      	beq.n	8005540 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005566:	e08e      	b.n	8005686 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d176      	bne.n	8005660 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d002      	beq.n	800557e <I2C_MasterReceive_BTF+0xc4>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b10      	cmp	r3, #16
 800557c:	d108      	bne.n	8005590 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e019      	b.n	80055c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d002      	beq.n	800559c <I2C_MasterReceive_BTF+0xe2>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d108      	bne.n	80055ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e00a      	b.n	80055c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d007      	beq.n	80055c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800561e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d10a      	bne.n	800564a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fcba 	bl	8004fbc <HAL_I2C_MemRxCpltCallback>
}
 8005648:	e01d      	b.n	8005686 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2212      	movs	r2, #18
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fc6f 	bl	8004f3c <HAL_I2C_MasterRxCpltCallback>
}
 800565e:	e012      	b.n	8005686 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d117      	bne.n	80056d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80056bc:	e067      	b.n	800578e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	611a      	str	r2, [r3, #16]
}
 80056d0:	e05d      	b.n	800578e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056da:	d133      	bne.n	8005744 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b21      	cmp	r3, #33	; 0x21
 80056e6:	d109      	bne.n	80056fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	e008      	b.n	800570e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <I2C_Master_SB+0x92>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d108      	bne.n	8005732 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d032      	beq.n	800578e <I2C_Master_SB+0x100>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02d      	beq.n	800578e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005740:	605a      	str	r2, [r3, #4]
}
 8005742:	e024      	b.n	800578e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10e      	bne.n	800576a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	b29b      	uxth	r3, r3
 8005752:	11db      	asrs	r3, r3, #7
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f003 0306 	and.w	r3, r3, #6
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f063 030f 	orn	r3, r3, #15
 8005760:	b2da      	uxtb	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
}
 8005768:	e011      	b.n	800578e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	2b01      	cmp	r3, #1
 8005770:	d10d      	bne.n	800578e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	b29b      	uxth	r3, r3
 8005778:	11db      	asrs	r3, r3, #7
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 0306 	and.w	r3, r3, #6
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f063 030e 	orn	r3, r3, #14
 8005786:	b2da      	uxtb	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	611a      	str	r2, [r3, #16]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <I2C_Master_ADD10+0x26>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <I2C_Master_ADD10+0x48>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e0:	605a      	str	r2, [r3, #4]
  }
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b091      	sub	sp, #68	; 0x44
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b22      	cmp	r3, #34	; 0x22
 8005816:	f040 8169 	bne.w	8005aec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <I2C_Master_ADDR+0x54>
 8005822:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d10b      	bne.n	8005842 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582a:	2300      	movs	r3, #0
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	e160      	b.n	8005b04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d11d      	bne.n	8005886 <I2C_Master_ADDR+0x98>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005852:	d118      	bne.n	8005886 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005854:	2300      	movs	r3, #0
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	651a      	str	r2, [r3, #80]	; 0x50
 8005884:	e13e      	b.n	8005b04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d113      	bne.n	80058b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005890:	2300      	movs	r3, #0
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e115      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	f040 808a 	bne.w	80059d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058ca:	d137      	bne.n	800593c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ea:	d113      	bne.n	8005914 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	e0e7      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005914:	2300      	movs	r3, #0
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e0d3      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b08      	cmp	r3, #8
 8005940:	d02e      	beq.n	80059a0 <I2C_Master_ADDR+0x1b2>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2b20      	cmp	r3, #32
 8005946:	d02b      	beq.n	80059a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	2b12      	cmp	r3, #18
 800594c:	d102      	bne.n	8005954 <I2C_Master_ADDR+0x166>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b01      	cmp	r3, #1
 8005952:	d125      	bne.n	80059a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00e      	beq.n	8005978 <I2C_Master_ADDR+0x18a>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2b02      	cmp	r3, #2
 800595e:	d00b      	beq.n	8005978 <I2C_Master_ADDR+0x18a>
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	2b10      	cmp	r3, #16
 8005964:	d008      	beq.n	8005978 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e007      	b.n	8005988 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005986:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	e0a1      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e085      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d14d      	bne.n	8005a7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d016      	beq.n	8005a16 <I2C_Master_ADDR+0x228>
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d013      	beq.n	8005a16 <I2C_Master_ADDR+0x228>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d010      	beq.n	8005a16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e007      	b.n	8005a26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a34:	d117      	bne.n	8005a66 <I2C_Master_ADDR+0x278>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a3c:	d00b      	beq.n	8005a56 <I2C_Master_ADDR+0x268>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d008      	beq.n	8005a56 <I2C_Master_ADDR+0x268>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d005      	beq.n	8005a56 <I2C_Master_ADDR+0x268>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d002      	beq.n	8005a56 <I2C_Master_ADDR+0x268>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d107      	bne.n	8005a66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	e032      	b.n	8005ae4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9c:	d117      	bne.n	8005ace <I2C_Master_ADDR+0x2e0>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aa4:	d00b      	beq.n	8005abe <I2C_Master_ADDR+0x2d0>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d008      	beq.n	8005abe <I2C_Master_ADDR+0x2d0>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d005      	beq.n	8005abe <I2C_Master_ADDR+0x2d0>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d002      	beq.n	8005abe <I2C_Master_ADDR+0x2d0>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d107      	bne.n	8005ace <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005acc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005aea:	e00b      	b.n	8005b04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
}
 8005b02:	e7ff      	b.n	8005b04 <I2C_Master_ADDR+0x316>
 8005b04:	bf00      	nop
 8005b06:	3744      	adds	r7, #68	; 0x44
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02b      	beq.n	8005b82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d114      	bne.n	8005b82 <I2C_SlaveTransmit_TXE+0x72>
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b29      	cmp	r3, #41	; 0x29
 8005b5c:	d111      	bne.n	8005b82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2228      	movs	r2, #40	; 0x28
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff f9e7 	bl	8004f50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d011      	beq.n	8005bc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d02c      	beq.n	8005c40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d114      	bne.n	8005c40 <I2C_SlaveReceive_RXNE+0x74>
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1a:	d111      	bne.n	8005c40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2222      	movs	r2, #34	; 0x22
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2228      	movs	r2, #40	; 0x28
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff f992 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ca6:	2b28      	cmp	r3, #40	; 0x28
 8005ca8:	d127      	bne.n	8005cfa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	09db      	lsrs	r3, r3, #7
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	81bb      	strh	r3, [r7, #12]
 8005cdc:	e002      	b.n	8005ce4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005cec:	89ba      	ldrh	r2, [r7, #12]
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff f940 	bl	8004f78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005cf8:	e00e      	b.n	8005d18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7c:	d172      	bne.n	8005e64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b22      	cmp	r3, #34	; 0x22
 8005d82:	d002      	beq.n	8005d8a <I2C_Slave_STOPF+0x6a>
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b2a      	cmp	r3, #42	; 0x2a
 8005d88:	d135      	bne.n	8005df6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe f958 	bl	8004078 <HAL_DMA_GetState>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d049      	beq.n	8005e62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	4a69      	ldr	r2, [pc, #420]	; (8005f78 <I2C_Slave_STOPF+0x258>)
 8005dd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd ffa0 	bl	8003d20 <HAL_DMA_Abort_IT>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d03d      	beq.n	8005e62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005df0:	4610      	mov	r0, r2
 8005df2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005df4:	e035      	b.n	8005e62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe f922 	bl	8004078 <HAL_DMA_GetState>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d014      	beq.n	8005e64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	4a4e      	ldr	r2, [pc, #312]	; (8005f78 <I2C_Slave_STOPF+0x258>)
 8005e40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ff6a 	bl	8003d20 <HAL_DMA_Abort_IT>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	e000      	b.n	8005e64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d03e      	beq.n	8005eec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d112      	bne.n	8005ea2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d112      	bne.n	8005ed6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f043 0204 	orr.w	r2, r3, #4
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8b3 	bl	8006060 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005efa:	e039      	b.n	8005f70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b2a      	cmp	r3, #42	; 0x2a
 8005f00:	d109      	bne.n	8005f16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2228      	movs	r2, #40	; 0x28
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff f827 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b28      	cmp	r3, #40	; 0x28
 8005f20:	d111      	bne.n	8005f46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <I2C_Slave_STOPF+0x25c>)
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff f828 	bl	8004f94 <HAL_I2C_ListenCpltCallback>
}
 8005f44:	e014      	b.n	8005f70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	2b22      	cmp	r3, #34	; 0x22
 8005f4c:	d002      	beq.n	8005f54 <I2C_Slave_STOPF+0x234>
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b22      	cmp	r3, #34	; 0x22
 8005f52:	d10d      	bne.n	8005f70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fe fffa 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	080062c5 	.word	0x080062c5
 8005f7c:	ffff0000 	.word	0xffff0000

08005f80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d002      	beq.n	8005fa2 <I2C_Slave_AF+0x22>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d129      	bne.n	8005ff6 <I2C_Slave_AF+0x76>
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b28      	cmp	r3, #40	; 0x28
 8005fa6:	d126      	bne.n	8005ff6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a2c      	ldr	r2, [pc, #176]	; (800605c <I2C_Slave_AF+0xdc>)
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fe ffd0 	bl	8004f94 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ff4:	e02e      	b.n	8006054 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b21      	cmp	r3, #33	; 0x21
 8005ffa:	d126      	bne.n	800604a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	; (800605c <I2C_Slave_AF+0xdc>)
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2221      	movs	r2, #33	; 0x21
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006026:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006030:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fe ff84 	bl	8004f50 <HAL_I2C_SlaveTxCpltCallback>
}
 8006048:	e004      	b.n	8006054 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006052:	615a      	str	r2, [r3, #20]
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	ffff0000 	.word	0xffff0000

08006060 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006076:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	2b10      	cmp	r3, #16
 800607c:	d002      	beq.n	8006084 <I2C_ITError+0x24>
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d10a      	bne.n	800609a <I2C_ITError+0x3a>
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b22      	cmp	r3, #34	; 0x22
 8006088:	d107      	bne.n	800609a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006098:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060a0:	2b28      	cmp	r3, #40	; 0x28
 80060a2:	d107      	bne.n	80060b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2228      	movs	r2, #40	; 0x28
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060b2:	e015      	b.n	80060e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c2:	d00a      	beq.n	80060da <I2C_ITError+0x7a>
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b60      	cmp	r3, #96	; 0x60
 80060c8:	d007      	beq.n	80060da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ee:	d162      	bne.n	80061b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	d020      	beq.n	8006150 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	4a6a      	ldr	r2, [pc, #424]	; (80062bc <I2C_ITError+0x25c>)
 8006114:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	4618      	mov	r0, r3
 800611c:	f7fd fe00 	bl	8003d20 <HAL_DMA_Abort_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8089 	beq.w	800623a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800614a:	4610      	mov	r0, r2
 800614c:	4798      	blx	r3
 800614e:	e074      	b.n	800623a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	4a59      	ldr	r2, [pc, #356]	; (80062bc <I2C_ITError+0x25c>)
 8006156:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	4618      	mov	r0, r3
 800615e:	f7fd fddf 	bl	8003d20 <HAL_DMA_Abort_IT>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d068      	beq.n	800623a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d10b      	bne.n	800618e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
 80061b4:	e041      	b.n	800623a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b60      	cmp	r3, #96	; 0x60
 80061c0:	d125      	bne.n	800620e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d10b      	bne.n	80061f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fe feec 	bl	8004fe4 <HAL_I2C_AbortCpltCallback>
 800620c:	e015      	b.n	800623a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d10b      	bne.n	8006234 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe fecb 	bl	8004fd0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10e      	bne.n	8006268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006276:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b04      	cmp	r3, #4
 800628a:	d113      	bne.n	80062b4 <I2C_ITError+0x254>
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b28      	cmp	r3, #40	; 0x28
 8006290:	d110      	bne.n	80062b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <I2C_ITError+0x260>)
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fe fe70 	bl	8004f94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	080062c5 	.word	0x080062c5
 80062c0:	ffff0000 	.word	0xffff0000

080062c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <I2C_DMAAbort+0x148>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <I2C_DMAAbort+0x14c>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a1a      	lsrs	r2, r3, #8
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00da      	lsls	r2, r3, #3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800630a:	e00a      	b.n	8006322 <I2C_DMAAbort+0x5e>
    }
    count--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b01      	subs	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d0ea      	beq.n	80062f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	2200      	movs	r2, #0
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	2200      	movs	r2, #0
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006350:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	2200      	movs	r2, #0
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	2200      	movs	r2, #0
 8006376:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b60      	cmp	r3, #96	; 0x60
 8006392:	d10e      	bne.n	80063b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7fe fe1a 	bl	8004fe4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063b0:	e027      	b.n	8006402 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063b2:	7cfb      	ldrb	r3, [r7, #19]
 80063b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063b8:	2b28      	cmp	r3, #40	; 0x28
 80063ba:	d117      	bne.n	80063ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2228      	movs	r2, #40	; 0x28
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063ea:	e007      	b.n	80063fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f7fe fde7 	bl	8004fd0 <HAL_I2C_ErrorCallback>
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000000c 	.word	0x2000000c
 8006410:	14f8b589 	.word	0x14f8b589

08006414 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	08db      	lsrs	r3, r3, #3
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0a1a      	lsrs	r2, r3, #8
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b01      	subs	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f043 0220 	orr.w	r2, r3, #32
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e008      	b.n	8006464 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d0e9      	beq.n	8006436 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	2000000c 	.word	0x2000000c
 8006474:	14f8b589 	.word	0x14f8b589

08006478 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006488:	d103      	bne.n	8006492 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006490:	e007      	b.n	80064a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800649a:	d102      	bne.n	80064a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2208      	movs	r2, #8
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e267      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d075      	beq.n	80065ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ce:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d00c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064da:	4b85      	ldr	r3, [pc, #532]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d112      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e6:	4b82      	ldr	r3, [pc, #520]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f2:	d10b      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	4b7e      	ldr	r3, [pc, #504]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05b      	beq.n	80065b8 <HAL_RCC_OscConfig+0x108>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d157      	bne.n	80065b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e242      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006514:	d106      	bne.n	8006524 <HAL_RCC_OscConfig+0x74>
 8006516:	4b76      	ldr	r3, [pc, #472]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a75      	ldr	r2, [pc, #468]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x98>
 800652e:	4b70      	ldr	r3, [pc, #448]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a6f      	ldr	r2, [pc, #444]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b6d      	ldr	r3, [pc, #436]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6c      	ldr	r2, [pc, #432]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006548:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a68      	ldr	r2, [pc, #416]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006568:	f7fc fc06 	bl	8002d78 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006570:	f7fc fc02 	bl	8002d78 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e207      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b5b      	ldr	r3, [pc, #364]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xc0>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006590:	f7fc fbf2 	bl	8002d78 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006598:	f7fc fbee 	bl	8002d78 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1f3      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0xe8>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d063      	beq.n	800668e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065c6:	4b4a      	ldr	r3, [pc, #296]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065d2:	4b47      	ldr	r3, [pc, #284]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d11c      	bne.n	8006618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065de:	4b44      	ldr	r3, [pc, #272]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d116      	bne.n	8006618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ea:	4b41      	ldr	r3, [pc, #260]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_RCC_OscConfig+0x152>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e1c7      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006602:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4937      	ldr	r1, [pc, #220]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	e03a      	b.n	800668e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006620:	4b34      	ldr	r3, [pc, #208]	; (80066f4 <HAL_RCC_OscConfig+0x244>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fc fba7 	bl	8002d78 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662e:	f7fc fba3 	bl	8002d78 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1a8      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664c:	4b28      	ldr	r3, [pc, #160]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4925      	ldr	r1, [pc, #148]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
 8006660:	e015      	b.n	800668e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_OscConfig+0x244>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fc fb86 	bl	8002d78 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006670:	f7fc fb82 	bl	8002d78 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e187      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d036      	beq.n	8006708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <HAL_RCC_OscConfig+0x248>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fc fb66 	bl	8002d78 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b0:	f7fc fb62 	bl	8002d78 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e167      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <HAL_RCC_OscConfig+0x240>)
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x200>
 80066ce:	e01b      	b.n	8006708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d0:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_RCC_OscConfig+0x248>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d6:	f7fc fb4f 	bl	8002d78 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066dc:	e00e      	b.n	80066fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066de:	f7fc fb4b 	bl	8002d78 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d907      	bls.n	80066fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e150      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	42470000 	.word	0x42470000
 80066f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066fc:	4b88      	ldr	r3, [pc, #544]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ea      	bne.n	80066de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8097 	beq.w	8006844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800671a:	4b81      	ldr	r3, [pc, #516]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	4b7d      	ldr	r3, [pc, #500]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a7c      	ldr	r2, [pc, #496]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b7a      	ldr	r3, [pc, #488]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006746:	4b77      	ldr	r3, [pc, #476]	; (8006924 <HAL_RCC_OscConfig+0x474>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d118      	bne.n	8006784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006752:	4b74      	ldr	r3, [pc, #464]	; (8006924 <HAL_RCC_OscConfig+0x474>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a73      	ldr	r2, [pc, #460]	; (8006924 <HAL_RCC_OscConfig+0x474>)
 8006758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800675e:	f7fc fb0b 	bl	8002d78 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006766:	f7fc fb07 	bl	8002d78 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e10c      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006778:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <HAL_RCC_OscConfig+0x474>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d106      	bne.n	800679a <HAL_RCC_OscConfig+0x2ea>
 800678c:	4b64      	ldr	r3, [pc, #400]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	4a63      	ldr	r2, [pc, #396]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6713      	str	r3, [r2, #112]	; 0x70
 8006798:	e01c      	b.n	80067d4 <HAL_RCC_OscConfig+0x324>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x30c>
 80067a2:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067a8:	f043 0304 	orr.w	r3, r3, #4
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
 80067ae:	4b5c      	ldr	r3, [pc, #368]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a5b      	ldr	r2, [pc, #364]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	e00b      	b.n	80067d4 <HAL_RCC_OscConfig+0x324>
 80067bc:	4b58      	ldr	r3, [pc, #352]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	6713      	str	r3, [r2, #112]	; 0x70
 80067c8:	4b55      	ldr	r3, [pc, #340]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4a54      	ldr	r2, [pc, #336]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067ce:	f023 0304 	bic.w	r3, r3, #4
 80067d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d015      	beq.n	8006808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fc facc 	bl	8002d78 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067e4:	f7fc fac8 	bl	8002d78 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e0cb      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fa:	4b49      	ldr	r3, [pc, #292]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0ee      	beq.n	80067e4 <HAL_RCC_OscConfig+0x334>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006808:	f7fc fab6 	bl	8002d78 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680e:	e00a      	b.n	8006826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006810:	f7fc fab2 	bl	8002d78 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f241 3288 	movw	r2, #5000	; 0x1388
 800681e:	4293      	cmp	r3, r2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0b5      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006826:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ee      	bne.n	8006810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006838:	4b39      	ldr	r3, [pc, #228]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	4a38      	ldr	r2, [pc, #224]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 800683e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a1 	beq.w	8006990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800684e:	4b34      	ldr	r3, [pc, #208]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
 8006856:	2b08      	cmp	r3, #8
 8006858:	d05c      	beq.n	8006914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d141      	bne.n	80068e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006862:	4b31      	ldr	r3, [pc, #196]	; (8006928 <HAL_RCC_OscConfig+0x478>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006868:	f7fc fa86 	bl	8002d78 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006870:	f7fc fa82 	bl	8002d78 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e087      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006882:	4b27      	ldr	r3, [pc, #156]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69da      	ldr	r2, [r3, #28]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	3b01      	subs	r3, #1
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	061b      	lsls	r3, r3, #24
 80068b2:	491b      	ldr	r1, [pc, #108]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b8:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_RCC_OscConfig+0x478>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fc fa5b 	bl	8002d78 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c6:	f7fc fa57 	bl	8002d78 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e05c      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x416>
 80068e4:	e054      	b.n	8006990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_RCC_OscConfig+0x478>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ec:	f7fc fa44 	bl	8002d78 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f4:	f7fc fa40 	bl	8002d78 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e045      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_OscConfig+0x470>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x444>
 8006912:	e03d      	b.n	8006990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e038      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
 8006920:	40023800 	.word	0x40023800
 8006924:	40007000 	.word	0x40007000
 8006928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <HAL_RCC_OscConfig+0x4ec>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d028      	beq.n	800698c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d121      	bne.n	800698c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d11a      	bne.n	800698c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800695c:	4013      	ands	r3, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006964:	4293      	cmp	r3, r2
 8006966:	d111      	bne.n	800698c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	3b01      	subs	r3, #1
 8006976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006978:	429a      	cmp	r2, r3
 800697a:	d107      	bne.n	800698c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023800 	.word	0x40023800

080069a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0cc      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b4:	4b68      	ldr	r3, [pc, #416]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d90c      	bls.n	80069dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b65      	ldr	r3, [pc, #404]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b63      	ldr	r3, [pc, #396]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0b8      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d020      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f4:	4b59      	ldr	r3, [pc, #356]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4a58      	ldr	r2, [pc, #352]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a0c:	4b53      	ldr	r3, [pc, #332]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4a52      	ldr	r2, [pc, #328]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a18:	4b50      	ldr	r3, [pc, #320]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	494d      	ldr	r1, [pc, #308]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d044      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	4b47      	ldr	r3, [pc, #284]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d119      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e07f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d003      	beq.n	8006a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5e:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e06f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6e:	4b3b      	ldr	r3, [pc, #236]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e067      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7e:	4b37      	ldr	r3, [pc, #220]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f023 0203 	bic.w	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4934      	ldr	r1, [pc, #208]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a90:	f7fc f972 	bl	8002d78 <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7fc f96e 	bl	8002d78 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e04f      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aae:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d1eb      	bne.n	8006a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac0:	4b25      	ldr	r3, [pc, #148]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d20c      	bcs.n	8006ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b22      	ldr	r3, [pc, #136]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad6:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e032      	b.n	8006b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af4:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4916      	ldr	r1, [pc, #88]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	490e      	ldr	r1, [pc, #56]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b26:	f000 f821 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	490a      	ldr	r1, [pc, #40]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006b38:	5ccb      	ldrb	r3, [r1, r3]
 8006b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3e:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b42:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fc f8d2 	bl	8002cf0 <HAL_InitTick>

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40023c00 	.word	0x40023c00
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	0800a618 	.word	0x0800a618
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	20000010 	.word	0x20000010

08006b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b70:	b094      	sub	sp, #80	; 0x50
 8006b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44
 8006b78:	2300      	movs	r3, #0
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b84:	4b79      	ldr	r3, [pc, #484]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 030c 	and.w	r3, r3, #12
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d00d      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0x40>
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	f200 80e1 	bhi.w	8006d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b9e:	e0db      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba0:	4b73      	ldr	r3, [pc, #460]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ba4:	e0db      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ba6:	4b73      	ldr	r3, [pc, #460]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006baa:	e0d8      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bac:	4b6f      	ldr	r3, [pc, #444]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bb6:	4b6d      	ldr	r3, [pc, #436]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d063      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bc2:	4b6a      	ldr	r3, [pc, #424]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	099b      	lsrs	r3, r3, #6
 8006bc8:	2200      	movs	r2, #0
 8006bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f04f 0100 	mov.w	r1, #0
 8006bea:	0159      	lsls	r1, r3, #5
 8006bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bf0:	0150      	lsls	r0, r2, #5
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	1a51      	subs	r1, r2, r1
 8006bfa:	6139      	str	r1, [r7, #16]
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c10:	4659      	mov	r1, fp
 8006c12:	018b      	lsls	r3, r1, #6
 8006c14:	4651      	mov	r1, sl
 8006c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c1a:	4651      	mov	r1, sl
 8006c1c:	018a      	lsls	r2, r1, #6
 8006c1e:	4651      	mov	r1, sl
 8006c20:	ebb2 0801 	subs.w	r8, r2, r1
 8006c24:	4659      	mov	r1, fp
 8006c26:	eb63 0901 	sbc.w	r9, r3, r1
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3e:	4690      	mov	r8, r2
 8006c40:	4699      	mov	r9, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	eb18 0303 	adds.w	r3, r8, r3
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	eb49 0303 	adc.w	r3, r9, r3
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c5e:	4629      	mov	r1, r5
 8006c60:	024b      	lsls	r3, r1, #9
 8006c62:	4621      	mov	r1, r4
 8006c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c68:	4621      	mov	r1, r4
 8006c6a:	024a      	lsls	r2, r1, #9
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c72:	2200      	movs	r2, #0
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c7c:	f7f9 fef6 	bl	8000a6c <__aeabi_uldivmod>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4613      	mov	r3, r2
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	e058      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8a:	4b38      	ldr	r3, [pc, #224]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	099b      	lsrs	r3, r3, #6
 8006c90:	2200      	movs	r2, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	4611      	mov	r1, r2
 8006c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c9a:	623b      	str	r3, [r7, #32]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	f04f 0000 	mov.w	r0, #0
 8006cac:	f04f 0100 	mov.w	r1, #0
 8006cb0:	0159      	lsls	r1, r3, #5
 8006cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cb6:	0150      	lsls	r0, r2, #5
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8006ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	00eb      	lsls	r3, r5, #3
 8006cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cf2:	00e2      	lsls	r2, r4, #3
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	4643      	mov	r3, r8
 8006cfa:	18e3      	adds	r3, r4, r3
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	464b      	mov	r3, r9
 8006d00:	eb45 0303 	adc.w	r3, r5, r3
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d12:	4629      	mov	r1, r5
 8006d14:	028b      	lsls	r3, r1, #10
 8006d16:	4621      	mov	r1, r4
 8006d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	028a      	lsls	r2, r1, #10
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d26:	2200      	movs	r2, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d30:	f7f9 fe9c 	bl	8000a6c <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4613      	mov	r3, r2
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	0c1b      	lsrs	r3, r3, #16
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	3301      	adds	r3, #1
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d56:	e002      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3750      	adds	r7, #80	; 0x50
 8006d64:	46bd      	mov	sp, r7
 8006d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	00f42400 	.word	0x00f42400
 8006d74:	007a1200 	.word	0x007a1200

08006d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d94:	f7ff fff0 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	0a9b      	lsrs	r3, r3, #10
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	4903      	ldr	r1, [pc, #12]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da6:	5ccb      	ldrb	r3, [r1, r3]
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40023800 	.word	0x40023800
 8006db4:	0800a628 	.word	0x0800a628

08006db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006dbc:	f7ff ffdc 	bl	8006d78 <HAL_RCC_GetHCLKFreq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0b5b      	lsrs	r3, r3, #13
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4903      	ldr	r1, [pc, #12]	; (8006ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dce:	5ccb      	ldrb	r3, [r1, r3]
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	0800a628 	.word	0x0800a628

08006de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e07b      	b.n	8006eea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d108      	bne.n	8006e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e02:	d009      	beq.n	8006e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
 8006e0a:	e005      	b.n	8006e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb fcee 	bl	8002814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	f003 0104 	and.w	r1, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0210 	and.w	r2, r3, #16
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_SPI_Transmit_IT+0x20>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e06f      	b.n	8006ff4 <HAL_SPI_Transmit_IT+0x100>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_SPI_Transmit_IT+0x34>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f2c:	e05d      	b.n	8006fea <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d002      	beq.n	8006f40 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f3e:	e054      	b.n	8006fea <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2203      	movs	r2, #3
 8006f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	88fa      	ldrh	r2, [r7, #6]
 8006f5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <HAL_SPI_Transmit_IT+0x10c>)
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44
 8006f86:	e002      	b.n	8006f8e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <HAL_SPI_Transmit_IT+0x110>)
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f96:	d10f      	bne.n	8006fb8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006fc6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d008      	beq.n	8006fe8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e000      	b.n	8006fea <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8006fe8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	0800728b 	.word	0x0800728b
 8007004:	08007245 	.word	0x08007245

08007008 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	099b      	lsrs	r3, r3, #6
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10f      	bne.n	800704c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
    return;
 800704a:	e0d7      	b.n	80071fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_SPI_IRQHandler+0x66>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	09db      	lsrs	r3, r3, #7
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
    return;
 800706c:	e0c6      	b.n	80071fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10c      	bne.n	8007094 <HAL_SPI_IRQHandler+0x8c>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	099b      	lsrs	r3, r3, #6
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80b4 	beq.w	80071fc <HAL_SPI_IRQHandler+0x1f4>
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80ad 	beq.w	80071fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	099b      	lsrs	r3, r3, #6
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d023      	beq.n	80070f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d011      	beq.n	80070de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e00b      	b.n	80070f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	693b      	ldr	r3, [r7, #16]
        return;
 80070f4:	e082      	b.n	80071fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d014      	beq.n	800712c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	f043 0201 	orr.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00c      	beq.n	8007152 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	f043 0208 	orr.w	r2, r3, #8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007144:	2300      	movs	r3, #0
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	2b00      	cmp	r3, #0
 8007158:	d04f      	beq.n	80071fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007168:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_SPI_IRQHandler+0x17e>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d034      	beq.n	80071f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0203 	bic.w	r2, r2, #3
 8007194:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_SPI_IRQHandler+0x1fc>)
 80071a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fc fdb8 	bl	8003d20 <HAL_DMA_Abort_IT>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ce:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <HAL_SPI_IRQHandler+0x1fc>)
 80071d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fc fda2 	bl	8003d20 <HAL_DMA_Abort_IT>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80071ee:	e003      	b.n	80071f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f809 	bl	8007208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071f6:	e000      	b.n	80071fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80071f8:	bf00      	nop
    return;
 80071fa:	bf00      	nop
  }
}
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	0800721d 	.word	0x0800721d

08007208 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff ffe6 	bl	8007208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8f1 	bl	8007464 <SPI_CloseTx_ISR>
  }
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	881a      	ldrh	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	1c9a      	adds	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8cf 	bl	8007464 <SPI_CloseTx_ISR>
  }
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072e0:	f7fb fd4a 	bl	8002d78 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	4413      	add	r3, r2
 80072ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072f0:	f7fb fd42 	bl	8002d78 <HAL_GetTick>
 80072f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	015b      	lsls	r3, r3, #5
 80072fc:	0d1b      	lsrs	r3, r3, #20
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	fb02 f303 	mul.w	r3, r2, r3
 8007304:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007306:	e054      	b.n	80073b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d050      	beq.n	80073b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007310:	f7fb fd32 	bl	8002d78 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	429a      	cmp	r2, r3
 800731e:	d902      	bls.n	8007326 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d13d      	bne.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733e:	d111      	bne.n	8007364 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007348:	d004      	beq.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007352:	d107      	bne.n	8007364 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736c:	d10f      	bne.n	800738e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800738c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e017      	b.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d19b      	bne.n	8007308 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	2000000c 	.word	0x2000000c

080073e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073ec:	4b1b      	ldr	r3, [pc, #108]	; (800745c <SPI_EndRxTxTransaction+0x7c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <SPI_EndRxTxTransaction+0x80>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	0d5b      	lsrs	r3, r3, #21
 80073f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800740a:	d112      	bne.n	8007432 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff ff5a 	bl	80072d0 <SPI_WaitFlagStateUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e00f      	b.n	8007452 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	3b01      	subs	r3, #1
 800743c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b80      	cmp	r3, #128	; 0x80
 800744a:	d0f2      	beq.n	8007432 <SPI_EndRxTxTransaction+0x52>
 800744c:	e000      	b.n	8007450 <SPI_EndRxTxTransaction+0x70>
        break;
 800744e:	bf00      	nop
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	2000000c 	.word	0x2000000c
 8007460:	165e9f81 	.word	0x165e9f81

08007464 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <SPI_CloseTx_ISR+0xbc>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2c      	ldr	r2, [pc, #176]	; (8007524 <SPI_CloseTx_ISR+0xc0>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0a5b      	lsrs	r3, r3, #9
 8007478:	2264      	movs	r2, #100	; 0x64
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007480:	f7fb fc7a 	bl	8002d78 <HAL_GetTick>
 8007484:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007498:	e009      	b.n	80074ae <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3b01      	subs	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0eb      	beq.n	8007486 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074bc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	2164      	movs	r1, #100	; 0x64
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ff8c 	bl	80073e0 <SPI_EndRxTxTransaction>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fe7d 	bl	8007208 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800750e:	e002      	b.n	8007516 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fa fef3 	bl	80022fc <HAL_SPI_TxCpltCallback>
}
 8007516:	bf00      	nop
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	2000000c 	.word	0x2000000c
 8007524:	057619f1 	.word	0x057619f1

08007528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e041      	b.n	80075be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fb f9b0 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f000 fe68 	bl	800823c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e03c      	b.n	800765a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <HAL_TIM_Base_Start+0xa0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d018      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fa:	d013      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1a      	ldr	r2, [pc, #104]	; (800766c <HAL_TIM_Base_Start+0xa4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a19      	ldr	r2, [pc, #100]	; (8007670 <HAL_TIM_Base_Start+0xa8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a17      	ldr	r2, [pc, #92]	; (8007674 <HAL_TIM_Base_Start+0xac>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_TIM_Base_Start+0x5c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a16      	ldr	r2, [pc, #88]	; (8007678 <HAL_TIM_Base_Start+0xb0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d111      	bne.n	8007648 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b06      	cmp	r3, #6
 8007634:	d010      	beq.n	8007658 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0201 	orr.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007646:	e007      	b.n	8007658 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40014000 	.word	0x40014000

0800767c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	d001      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e044      	b.n	800771e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1e      	ldr	r2, [pc, #120]	; (800772c <HAL_TIM_Base_Start_IT+0xb0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x6c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x6c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1a      	ldr	r2, [pc, #104]	; (8007730 <HAL_TIM_Base_Start_IT+0xb4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x6c>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a19      	ldr	r2, [pc, #100]	; (8007734 <HAL_TIM_Base_Start_IT+0xb8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x6c>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <HAL_TIM_Base_Start_IT+0xbc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start_IT+0x6c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <HAL_TIM_Base_Start_IT+0xc0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d111      	bne.n	800770c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d010      	beq.n	800771c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	e007      	b.n	800771c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40014000 	.word	0x40014000

08007740 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e041      	b.n	80077d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f839 	bl	80077de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f000 fd5c 	bl	800823c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start_DMA+0x22>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e013      	b.n	800783e <HAL_TIM_IC_Start_DMA+0x4a>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b04      	cmp	r3, #4
 800781a:	d104      	bne.n	8007826 <HAL_TIM_IC_Start_DMA+0x32>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e00b      	b.n	800783e <HAL_TIM_IC_Start_DMA+0x4a>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d104      	bne.n	8007836 <HAL_TIM_IC_Start_DMA+0x42>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007832:	b2db      	uxtb	r3, r3
 8007834:	e003      	b.n	800783e <HAL_TIM_IC_Start_DMA+0x4a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783c:	b2db      	uxtb	r3, r3
 800783e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <HAL_TIM_IC_Start_DMA+0x5c>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800784c:	b2db      	uxtb	r3, r3
 800784e:	e013      	b.n	8007878 <HAL_TIM_IC_Start_DMA+0x84>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b04      	cmp	r3, #4
 8007854:	d104      	bne.n	8007860 <HAL_TIM_IC_Start_DMA+0x6c>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e00b      	b.n	8007878 <HAL_TIM_IC_Start_DMA+0x84>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b08      	cmp	r3, #8
 8007864:	d104      	bne.n	8007870 <HAL_TIM_IC_Start_DMA+0x7c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e003      	b.n	8007878 <HAL_TIM_IC_Start_DMA+0x84>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007876:	b2db      	uxtb	r3, r3
 8007878:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800787a:	7dbb      	ldrb	r3, [r7, #22]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d002      	beq.n	8007886 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007880:	7d7b      	ldrb	r3, [r7, #21]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d101      	bne.n	800788a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
 8007888:	e13c      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800788a:	7dbb      	ldrb	r3, [r7, #22]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d143      	bne.n	8007918 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007890:	7d7b      	ldrb	r3, [r7, #21]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d140      	bne.n	8007918 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_IC_Start_DMA+0xb2>
 800789c:	887b      	ldrh	r3, [r7, #2]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e12e      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <HAL_TIM_IC_Start_DMA+0xc2>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b4:	e013      	b.n	80078de <HAL_TIM_IC_Start_DMA+0xea>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_IC_Start_DMA+0xd2>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c4:	e00b      	b.n	80078de <HAL_TIM_IC_Start_DMA+0xea>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_IC_Start_DMA+0xe2>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d4:	e003      	b.n	80078de <HAL_TIM_IC_Start_DMA+0xea>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_IC_Start_DMA+0xfa>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80078ec:	e016      	b.n	800791c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_IC_Start_DMA+0x10a>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80078fc:	e00e      	b.n	800791c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b08      	cmp	r3, #8
 8007902:	d104      	bne.n	800790e <HAL_TIM_IC_Start_DMA+0x11a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800790c:	e006      	b.n	800791c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2202      	movs	r2, #2
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007916:	e001      	b.n	800791c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e0f3      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fec1 	bl	80086ac <TIM_CCxChannelCmd>

  switch (Channel)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	f200 80ad 	bhi.w	8007a8c <HAL_TIM_IC_Start_DMA+0x298>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <HAL_TIM_IC_Start_DMA+0x144>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800796d 	.word	0x0800796d
 800793c:	08007a8d 	.word	0x08007a8d
 8007940:	08007a8d 	.word	0x08007a8d
 8007944:	08007a8d 	.word	0x08007a8d
 8007948:	080079b5 	.word	0x080079b5
 800794c:	08007a8d 	.word	0x08007a8d
 8007950:	08007a8d 	.word	0x08007a8d
 8007954:	08007a8d 	.word	0x08007a8d
 8007958:	080079fd 	.word	0x080079fd
 800795c:	08007a8d 	.word	0x08007a8d
 8007960:	08007a8d 	.word	0x08007a8d
 8007964:	08007a8d 	.word	0x08007a8d
 8007968:	08007a45 	.word	0x08007a45
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	4a66      	ldr	r2, [pc, #408]	; (8007b0c <HAL_TIM_IC_Start_DMA+0x318>)
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	4a65      	ldr	r2, [pc, #404]	; (8007b10 <HAL_TIM_IC_Start_DMA+0x31c>)
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	4a64      	ldr	r2, [pc, #400]	; (8007b14 <HAL_TIM_IC_Start_DMA+0x320>)
 8007982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3334      	adds	r3, #52	; 0x34
 800798e:	4619      	mov	r1, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	887b      	ldrh	r3, [r7, #2]
 8007994:	f7fc f8fc 	bl	8003b90 <HAL_DMA_Start_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e0b0      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e06e      	b.n	8007a92 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	4a54      	ldr	r2, [pc, #336]	; (8007b0c <HAL_TIM_IC_Start_DMA+0x318>)
 80079ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	4a53      	ldr	r2, [pc, #332]	; (8007b10 <HAL_TIM_IC_Start_DMA+0x31c>)
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	4a52      	ldr	r2, [pc, #328]	; (8007b14 <HAL_TIM_IC_Start_DMA+0x320>)
 80079ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3338      	adds	r3, #56	; 0x38
 80079d6:	4619      	mov	r1, r3
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	f7fc f8d8 	bl	8003b90 <HAL_DMA_Start_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e08c      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079f8:	60da      	str	r2, [r3, #12]
      break;
 80079fa:	e04a      	b.n	8007a92 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a42      	ldr	r2, [pc, #264]	; (8007b0c <HAL_TIM_IC_Start_DMA+0x318>)
 8007a02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	4a41      	ldr	r2, [pc, #260]	; (8007b10 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4a40      	ldr	r2, [pc, #256]	; (8007b14 <HAL_TIM_IC_Start_DMA+0x320>)
 8007a12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	333c      	adds	r3, #60	; 0x3c
 8007a1e:	4619      	mov	r1, r3
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	887b      	ldrh	r3, [r7, #2]
 8007a24:	f7fc f8b4 	bl	8003b90 <HAL_DMA_Start_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e068      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	60da      	str	r2, [r3, #12]
      break;
 8007a42:	e026      	b.n	8007a92 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	4a30      	ldr	r2, [pc, #192]	; (8007b0c <HAL_TIM_IC_Start_DMA+0x318>)
 8007a4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	4a2f      	ldr	r2, [pc, #188]	; (8007b10 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	4a2e      	ldr	r2, [pc, #184]	; (8007b14 <HAL_TIM_IC_Start_DMA+0x320>)
 8007a5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3340      	adds	r3, #64	; 0x40
 8007a66:	4619      	mov	r1, r3
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	887b      	ldrh	r3, [r7, #2]
 8007a6c:	f7fc f890 	bl	8003b90 <HAL_DMA_Start_IT>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e044      	b.n	8007b04 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a88:	60da      	str	r2, [r3, #12]
      break;
 8007a8a:	e002      	b.n	8007a92 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a20      	ldr	r2, [pc, #128]	; (8007b18 <HAL_TIM_IC_Start_DMA+0x324>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_TIM_IC_Start_DMA+0x2da>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa4:	d013      	beq.n	8007ace <HAL_TIM_IC_Start_DMA+0x2da>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <HAL_TIM_IC_Start_DMA+0x328>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_TIM_IC_Start_DMA+0x2da>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_TIM_IC_Start_DMA+0x2da>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <HAL_TIM_IC_Start_DMA+0x330>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIM_IC_Start_DMA+0x2da>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <HAL_TIM_IC_Start_DMA+0x334>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d111      	bne.n	8007af2 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d010      	beq.n	8007b02 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af0:	e007      	b.n	8007b02 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	0800810d 	.word	0x0800810d
 8007b10:	080081d5 	.word	0x080081d5
 8007b14:	0800807b 	.word	0x0800807b
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40014000 	.word	0x40014000

08007b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0202 	mvn.w	r2, #2
 8007b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa51 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa43 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa5e 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d122      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0204 	mvn.w	r2, #4
 8007bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa27 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007bc8:	e005      	b.n	8007bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa19 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fa34 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d122      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d11b      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0208 	mvn.w	r2, #8
 8007c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2204      	movs	r2, #4
 8007c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f9fd 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007c1c:	e005      	b.n	8007c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9ef 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa0a 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d122      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0210 	mvn.w	r2, #16
 8007c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9d3 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9c5 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9e0 	bl	800803e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10e      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d107      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0201 	mvn.w	r2, #1
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fa fbbc 	bl	8002428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d10e      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d107      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fd86 	bl	80087e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d10e      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d107      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9a5 	bl	8008052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d10e      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d107      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0220 	mvn.w	r2, #32
 8007d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fd50 	bl	80087d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e088      	b.n	8007e6c <HAL_TIM_IC_ConfigChannel+0x130>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11b      	bne.n	8007da0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f000 fae0 	bl	800833c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 020c 	bic.w	r2, r2, #12
 8007d8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	619a      	str	r2, [r3, #24]
 8007d9e:	e060      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d11c      	bne.n	8007de0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6819      	ldr	r1, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f000 fb58 	bl	800846a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dc8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6999      	ldr	r1, [r3, #24]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	619a      	str	r2, [r3, #24]
 8007dde:	e040      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d11b      	bne.n	8007e1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f000 fba5 	bl	8008544 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 020c 	bic.w	r2, r2, #12
 8007e08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	61da      	str	r2, [r3, #28]
 8007e1c:	e021      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d11c      	bne.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f000 fbc2 	bl	80085bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69d9      	ldr	r1, [r3, #28]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	61da      	str	r2, [r3, #28]
 8007e5c:	e001      	b.n	8007e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_ConfigClockSource+0x1c>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e0b4      	b.n	8007ffa <HAL_TIM_ConfigClockSource+0x186>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec8:	d03e      	beq.n	8007f48 <HAL_TIM_ConfigClockSource+0xd4>
 8007eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ece:	f200 8087 	bhi.w	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed6:	f000 8086 	beq.w	8007fe6 <HAL_TIM_ConfigClockSource+0x172>
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ede:	d87f      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b70      	cmp	r3, #112	; 0x70
 8007ee2:	d01a      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0xa6>
 8007ee4:	2b70      	cmp	r3, #112	; 0x70
 8007ee6:	d87b      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b60      	cmp	r3, #96	; 0x60
 8007eea:	d050      	beq.n	8007f8e <HAL_TIM_ConfigClockSource+0x11a>
 8007eec:	2b60      	cmp	r3, #96	; 0x60
 8007eee:	d877      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b50      	cmp	r3, #80	; 0x50
 8007ef2:	d03c      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0xfa>
 8007ef4:	2b50      	cmp	r3, #80	; 0x50
 8007ef6:	d873      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b40      	cmp	r3, #64	; 0x40
 8007efa:	d058      	beq.n	8007fae <HAL_TIM_ConfigClockSource+0x13a>
 8007efc:	2b40      	cmp	r3, #64	; 0x40
 8007efe:	d86f      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b30      	cmp	r3, #48	; 0x30
 8007f02:	d064      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	2b30      	cmp	r3, #48	; 0x30
 8007f06:	d86b      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d060      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d867      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d05c      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d05a      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f18:	e062      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6899      	ldr	r1, [r3, #8]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f000 fb9f 	bl	800866c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	609a      	str	r2, [r3, #8]
      break;
 8007f46:	e04f      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6899      	ldr	r1, [r3, #8]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f000 fb88 	bl	800866c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f6a:	609a      	str	r2, [r3, #8]
      break;
 8007f6c:	e03c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6859      	ldr	r1, [r3, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f000 fa46 	bl	800840c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2150      	movs	r1, #80	; 0x50
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fb55 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8007f8c:	e02c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6859      	ldr	r1, [r3, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f000 faa2 	bl	80084e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2160      	movs	r1, #96	; 0x60
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fb45 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8007fac:	e01c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6859      	ldr	r1, [r3, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f000 fa26 	bl	800840c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2140      	movs	r1, #64	; 0x40
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fb35 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f000 fb2c 	bl	8008636 <TIM_ITRx_SetConfig>
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	429a      	cmp	r2, r3
 8008090:	d107      	bne.n	80080a2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a0:	e02a      	b.n	80080f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d107      	bne.n	80080bc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2202      	movs	r2, #2
 80080b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ba:	e01d      	b.n	80080f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d107      	bne.n	80080d6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2204      	movs	r2, #4
 80080ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d4:	e010      	b.n	80080f8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d107      	bne.n	80080f0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2208      	movs	r2, #8
 80080e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ee:	e003      	b.n	80080f8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff ffb4 	bl	8008066 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
}
 8008104:	bf00      	nop
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d10f      	bne.n	8008144 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d146      	bne.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008142:	e03d      	b.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d10f      	bne.n	800816e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2202      	movs	r2, #2
 8008152:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d131      	bne.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800816c:	e028      	b.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d10f      	bne.n	8008198 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2204      	movs	r2, #4
 800817c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d11c      	bne.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008196:	e013      	b.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d10e      	bne.n	80081c0 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2208      	movs	r2, #8
 80081a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff ff28 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d103      	bne.n	80081f4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	771a      	strb	r2, [r3, #28]
 80081f2:	e019      	b.n	8008228 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d103      	bne.n	8008206 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2202      	movs	r2, #2
 8008202:	771a      	strb	r2, [r3, #28]
 8008204:	e010      	b.n	8008228 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d103      	bne.n	8008218 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2204      	movs	r2, #4
 8008214:	771a      	strb	r2, [r3, #28]
 8008216:	e007      	b.n	8008228 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	429a      	cmp	r2, r3
 8008220:	d102      	bne.n	8008228 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2208      	movs	r2, #8
 8008226:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff fefe 	bl	800802a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	771a      	strb	r2, [r3, #28]
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a34      	ldr	r2, [pc, #208]	; (8008320 <TIM_Base_SetConfig+0xe4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00f      	beq.n	8008274 <TIM_Base_SetConfig+0x38>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d00b      	beq.n	8008274 <TIM_Base_SetConfig+0x38>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a31      	ldr	r2, [pc, #196]	; (8008324 <TIM_Base_SetConfig+0xe8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d007      	beq.n	8008274 <TIM_Base_SetConfig+0x38>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a30      	ldr	r2, [pc, #192]	; (8008328 <TIM_Base_SetConfig+0xec>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_Base_SetConfig+0x38>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a2f      	ldr	r2, [pc, #188]	; (800832c <TIM_Base_SetConfig+0xf0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d108      	bne.n	8008286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a25      	ldr	r2, [pc, #148]	; (8008320 <TIM_Base_SetConfig+0xe4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01b      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008294:	d017      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a22      	ldr	r2, [pc, #136]	; (8008324 <TIM_Base_SetConfig+0xe8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a21      	ldr	r2, [pc, #132]	; (8008328 <TIM_Base_SetConfig+0xec>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00f      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a20      	ldr	r2, [pc, #128]	; (800832c <TIM_Base_SetConfig+0xf0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00b      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <TIM_Base_SetConfig+0xf4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d007      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <TIM_Base_SetConfig+0xf8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_Base_SetConfig+0x8a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <TIM_Base_SetConfig+0xfc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d108      	bne.n	80082d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a08      	ldr	r2, [pc, #32]	; (8008320 <TIM_Base_SetConfig+0xe4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d103      	bne.n	800830c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	615a      	str	r2, [r3, #20]
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40010000 	.word	0x40010000
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4a24      	ldr	r2, [pc, #144]	; (80083f8 <TIM_TI1_SetConfig+0xbc>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <TIM_TI1_SetConfig+0x56>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d00f      	beq.n	8008392 <TIM_TI1_SetConfig+0x56>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a21      	ldr	r2, [pc, #132]	; (80083fc <TIM_TI1_SetConfig+0xc0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00b      	beq.n	8008392 <TIM_TI1_SetConfig+0x56>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a20      	ldr	r2, [pc, #128]	; (8008400 <TIM_TI1_SetConfig+0xc4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_TI1_SetConfig+0x56>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <TIM_TI1_SetConfig+0xc8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_TI1_SetConfig+0x56>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <TIM_TI1_SetConfig+0xcc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <TIM_TI1_SetConfig+0x5a>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <TIM_TI1_SetConfig+0x5c>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f023 0303 	bic.w	r3, r3, #3
 80083a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e003      	b.n	80083b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f043 0301 	orr.w	r3, r3, #1
 80083b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f003 030a 	and.w	r3, r3, #10
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40014000 	.word	0x40014000

0800840c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f023 030a 	bic.w	r3, r3, #10
 8008448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800846a:	b480      	push	{r7}
 800846c:	b087      	sub	sp, #28
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	f023 0210 	bic.w	r2, r3, #16
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008496:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	031b      	lsls	r3, r3, #12
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	621a      	str	r2, [r3, #32]
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f023 0210 	bic.w	r2, r3, #16
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800850e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	031b      	lsls	r3, r3, #12
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	621a      	str	r2, [r3, #32]
}
 8008538:	bf00      	nop
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	b2db      	uxtb	r3, r3
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008594:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	031b      	lsls	r3, r3, #12
 8008600:	b29b      	uxth	r3, r3
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800860e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	031b      	lsls	r3, r3, #12
 8008614:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4313      	orrs	r3, r2
 8008654:	f043 0307 	orr.w	r3, r3, #7
 8008658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	609a      	str	r2, [r3, #8]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	021a      	lsls	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	431a      	orrs	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4313      	orrs	r3, r2
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f003 031f 	and.w	r3, r3, #31
 80086be:	2201      	movs	r2, #1
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1a      	ldr	r2, [r3, #32]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	43db      	mvns	r3, r3
 80086ce:	401a      	ands	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1a      	ldr	r2, [r3, #32]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f003 031f 	and.w	r3, r3, #31
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	fa01 f303 	lsl.w	r3, r1, r3
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800870c:	2302      	movs	r3, #2
 800870e:	e050      	b.n	80087b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d018      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875c:	d013      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a18      	ldr	r2, [pc, #96]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00e      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a16      	ldr	r2, [pc, #88]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d009      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a15      	ldr	r2, [pc, #84]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a13      	ldr	r2, [pc, #76]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d10c      	bne.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	4313      	orrs	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40014000 	.word	0x40014000

080087d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e03f      	b.n	800888e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fa f8fc 	bl	8002a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2224      	movs	r2, #36	; 0x24
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800883e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fddf 	bl	8009404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b08a      	sub	sp, #40	; 0x28
 800889a:	af02      	add	r7, sp, #8
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d17c      	bne.n	80089b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <HAL_UART_Transmit+0x2c>
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e075      	b.n	80089b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_UART_Transmit+0x3e>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e06e      	b.n	80089b2 <HAL_UART_Transmit+0x11c>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2221      	movs	r2, #33	; 0x21
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ea:	f7fa fa45 	bl	8002d78 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	88fa      	ldrh	r2, [r7, #6]
 80088fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008904:	d108      	bne.n	8008918 <HAL_UART_Transmit+0x82>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	e003      	b.n	8008920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008928:	e02a      	b.n	8008980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2200      	movs	r2, #0
 8008932:	2180      	movs	r1, #128	; 0x80
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 fb1f 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e036      	b.n	80089b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	3302      	adds	r3, #2
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e007      	b.n	8008972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	781a      	ldrb	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	3301      	adds	r3, #1
 8008970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1cf      	bne.n	800892a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2200      	movs	r2, #0
 8008992:	2140      	movs	r1, #64	; 0x40
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 faef 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e006      	b.n	80089b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e000      	b.n	80089b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089b0:	2302      	movs	r3, #2
  }
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d11d      	bne.n	8008a10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_UART_Receive_IT+0x26>
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e016      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_UART_Receive_IT+0x38>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e00f      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fb24 	bl	8009054 <UART_Start_Receive_IT>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	e000      	b.n	8008a12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b0ba      	sub	sp, #232	; 0xe8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10f      	bne.n	8008a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_UART_IRQHandler+0x66>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc07 	bl	800928e <UART_Receive_IT>
      return;
 8008a80:	e256      	b.n	8008f30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80de 	beq.w	8008c48 <HAL_UART_IRQHandler+0x22c>
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80d1 	beq.w	8008c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <HAL_UART_IRQHandler+0xae>
 8008ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <HAL_UART_IRQHandler+0xd2>
 8008ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f043 0202 	orr.w	r2, r3, #2
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <HAL_UART_IRQHandler+0xf6>
 8008afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f043 0204 	orr.w	r2, r3, #4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <HAL_UART_IRQHandler+0x126>
 8008b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b22:	f003 0320 	and.w	r3, r3, #32
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f043 0208 	orr.w	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 81ed 	beq.w	8008f26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d008      	beq.n	8008b6a <HAL_UART_IRQHandler+0x14e>
 8008b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fb92 	bl	800928e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	bf0c      	ite	eq
 8008b78:	2301      	moveq	r3, #1
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f003 0308 	and.w	r3, r3, #8
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <HAL_UART_IRQHandler+0x17a>
 8008b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d04f      	beq.n	8008c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa9a 	bl	80090d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d141      	bne.n	8008c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3314      	adds	r3, #20
 8008bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3314      	adds	r3, #20
 8008bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1d9      	bne.n	8008baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d013      	beq.n	8008c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	4a7d      	ldr	r2, [pc, #500]	; (8008df8 <HAL_UART_IRQHandler+0x3dc>)
 8008c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fb f888 	bl	8003d20 <HAL_DMA_Abort_IT>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d016      	beq.n	8008c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c24:	e00e      	b.n	8008c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f990 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2c:	e00a      	b.n	8008c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f98c 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	e006      	b.n	8008c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f988 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c42:	e170      	b.n	8008f26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	bf00      	nop
    return;
 8008c46:	e16e      	b.n	8008f26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	f040 814a 	bne.w	8008ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c56:	f003 0310 	and.w	r3, r3, #16
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8143 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 813c 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60bb      	str	r3, [r7, #8]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60bb      	str	r3, [r7, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	f040 80b4 	bne.w	8008dfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8140 	beq.w	8008f2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	f080 8139 	bcs.w	8008f2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cca:	f000 8088 	beq.w	8008dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d9      	bne.n	8008cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3314      	adds	r3, #20
 8008d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e1      	bne.n	8008d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3314      	adds	r3, #20
 8008d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	330c      	adds	r3, #12
 8008da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dae:	f023 0310 	bic.w	r3, r3, #16
 8008db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e3      	bne.n	8008d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa ff31 	bl	8003c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8b6 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008df4:	e099      	b.n	8008f2a <HAL_UART_IRQHandler+0x50e>
 8008df6:	bf00      	nop
 8008df8:	08009197 	.word	0x08009197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 808b 	beq.w	8008f2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8086 	beq.w	8008f2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e46:	647a      	str	r2, [r7, #68]	; 0x44
 8008e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e3      	bne.n	8008e22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3314      	adds	r3, #20
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	623b      	str	r3, [r7, #32]
   return(result);
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	f023 0301 	bic.w	r3, r3, #1
 8008e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e3      	bne.n	8008e5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	330c      	adds	r3, #12
 8008ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0310 	bic.w	r3, r3, #16
 8008eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	330c      	adds	r3, #12
 8008ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ec4:	61fa      	str	r2, [r7, #28]
 8008ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	69b9      	ldr	r1, [r7, #24]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e3      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f83e 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ee4:	e023      	b.n	8008f2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d009      	beq.n	8008f06 <HAL_UART_IRQHandler+0x4ea>
 8008ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f95d 	bl	80091be <UART_Transmit_IT>
    return;
 8008f04:	e014      	b.n	8008f30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00e      	beq.n	8008f30 <HAL_UART_IRQHandler+0x514>
 8008f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f99d 	bl	800925e <UART_EndTransmit_IT>
    return;
 8008f24:	e004      	b.n	8008f30 <HAL_UART_IRQHandler+0x514>
    return;
 8008f26:	bf00      	nop
 8008f28:	e002      	b.n	8008f30 <HAL_UART_IRQHandler+0x514>
      return;
 8008f2a:	bf00      	nop
 8008f2c:	e000      	b.n	8008f30 <HAL_UART_IRQHandler+0x514>
      return;
 8008f2e:	bf00      	nop
  }
}
 8008f30:	37e8      	adds	r7, #232	; 0xe8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop

08008f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b090      	sub	sp, #64	; 0x40
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f88:	e050      	b.n	800902c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d04c      	beq.n	800902c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f98:	f7f9 feee 	bl	8002d78 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d241      	bcs.n	800902c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	330c      	adds	r3, #12
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fc8:	637a      	str	r2, [r7, #52]	; 0x34
 8008fca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3314      	adds	r3, #20
 8008fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	613b      	str	r3, [r7, #16]
   return(result);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffc:	623a      	str	r2, [r7, #32]
 8008ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	69f9      	ldr	r1, [r7, #28]
 8009002:	6a3a      	ldr	r2, [r7, #32]
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	61bb      	str	r3, [r7, #24]
   return(result);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e5      	bne.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e00f      	b.n	800904c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4013      	ands	r3, r2
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	429a      	cmp	r2, r3
 800903a:	bf0c      	ite	eq
 800903c:	2301      	moveq	r3, #1
 800903e:	2300      	movne	r3, #0
 8009040:	b2db      	uxtb	r3, r3
 8009042:	461a      	mov	r2, r3
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	429a      	cmp	r2, r3
 8009048:	d09f      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3740      	adds	r7, #64	; 0x40
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	88fa      	ldrh	r2, [r7, #6]
 800906c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2222      	movs	r2, #34	; 0x22
 800907e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695a      	ldr	r2, [r3, #20]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 0220 	orr.w	r2, r2, #32
 80090c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b095      	sub	sp, #84	; 0x54
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	330c      	adds	r3, #12
 80090de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f8:	643a      	str	r2, [r7, #64]	; 0x40
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e5      	bne.n	80090d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3314      	adds	r3, #20
 8009112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	61fb      	str	r3, [r7, #28]
   return(result);
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	64bb      	str	r3, [r7, #72]	; 0x48
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3314      	adds	r3, #20
 800912a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e5      	bne.n	800910c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	2b01      	cmp	r3, #1
 8009146:	d119      	bne.n	800917c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	330c      	adds	r3, #12
 800914e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	60bb      	str	r3, [r7, #8]
   return(result);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f023 0310 	bic.w	r3, r3, #16
 800915e:	647b      	str	r3, [r7, #68]	; 0x44
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009168:	61ba      	str	r2, [r7, #24]
 800916a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6979      	ldr	r1, [r7, #20]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	613b      	str	r3, [r7, #16]
   return(result);
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e5      	bne.n	8009148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800918a:	bf00      	nop
 800918c:	3754      	adds	r7, #84	; 0x54
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fecb 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b21      	cmp	r3, #33	; 0x21
 80091d0:	d13e      	bne.n	8009250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091da:	d114      	bne.n	8009206 <UART_Transmit_IT+0x48>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d110      	bne.n	8009206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]
 8009204:	e008      	b.n	8009218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	1c59      	adds	r1, r3, #1
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6211      	str	r1, [r2, #32]
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4619      	mov	r1, r3
 8009226:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10f      	bne.n	800924c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800923a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	e000      	b.n	8009252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009250:	2302      	movs	r3, #2
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fe5a 	bl	8008f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b08c      	sub	sp, #48	; 0x30
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b22      	cmp	r3, #34	; 0x22
 80092a0:	f040 80ab 	bne.w	80093fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ac:	d117      	bne.n	80092de <UART_Receive_IT+0x50>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d113      	bne.n	80092de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	1c9a      	adds	r2, r3, #2
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	629a      	str	r2, [r3, #40]	; 0x28
 80092dc:	e026      	b.n	800932c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f0:	d007      	beq.n	8009302 <UART_Receive_IT+0x74>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <UART_Receive_IT+0x82>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	b2da      	uxtb	r2, r3
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e008      	b.n	8009322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931c:	b2da      	uxtb	r2, r3
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29b      	uxth	r3, r3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	4619      	mov	r1, r3
 800933a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800933c:	2b00      	cmp	r3, #0
 800933e:	d15a      	bne.n	80093f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0220 	bic.w	r2, r2, #32
 800934e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800935e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 0201 	bic.w	r2, r2, #1
 800936e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	2b01      	cmp	r3, #1
 800937e:	d135      	bne.n	80093ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	613b      	str	r3, [r7, #16]
   return(result);
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f023 0310 	bic.w	r3, r3, #16
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	330c      	adds	r3, #12
 80093a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a6:	623a      	str	r2, [r7, #32]
 80093a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	69f9      	ldr	r1, [r7, #28]
 80093ac:	6a3a      	ldr	r2, [r7, #32]
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e5      	bne.n	8009386 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d10a      	bne.n	80093de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fdbb 	bl	8008f60 <HAL_UARTEx_RxEventCallback>
 80093ea:	e002      	b.n	80093f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7f9 f925 	bl	800263c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e002      	b.n	80093fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e000      	b.n	80093fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3730      	adds	r7, #48	; 0x30
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009408:	b0c0      	sub	sp, #256	; 0x100
 800940a:	af00      	add	r7, sp, #0
 800940c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009420:	68d9      	ldr	r1, [r3, #12]
 8009422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	ea40 0301 	orr.w	r3, r0, r1
 800942c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800942e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	431a      	orrs	r2, r3
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	431a      	orrs	r2, r3
 8009444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4313      	orrs	r3, r2
 800944c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800945c:	f021 010c 	bic.w	r1, r1, #12
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800946a:	430b      	orrs	r3, r1
 800946c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800946e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947e:	6999      	ldr	r1, [r3, #24]
 8009480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	ea40 0301 	orr.w	r3, r0, r1
 800948a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800948c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b8f      	ldr	r3, [pc, #572]	; (80096d0 <UART_SetConfig+0x2cc>)
 8009494:	429a      	cmp	r2, r3
 8009496:	d005      	beq.n	80094a4 <UART_SetConfig+0xa0>
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b8d      	ldr	r3, [pc, #564]	; (80096d4 <UART_SetConfig+0x2d0>)
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d104      	bne.n	80094ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094a4:	f7fd fc88 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
 80094a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80094ac:	e003      	b.n	80094b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094ae:	f7fd fc6f 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 80094b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c0:	f040 810c 	bne.w	80096dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80094d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80094d6:	4622      	mov	r2, r4
 80094d8:	462b      	mov	r3, r5
 80094da:	1891      	adds	r1, r2, r2
 80094dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80094de:	415b      	adcs	r3, r3
 80094e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094e6:	4621      	mov	r1, r4
 80094e8:	eb12 0801 	adds.w	r8, r2, r1
 80094ec:	4629      	mov	r1, r5
 80094ee:	eb43 0901 	adc.w	r9, r3, r1
 80094f2:	f04f 0200 	mov.w	r2, #0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009506:	4690      	mov	r8, r2
 8009508:	4699      	mov	r9, r3
 800950a:	4623      	mov	r3, r4
 800950c:	eb18 0303 	adds.w	r3, r8, r3
 8009510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009514:	462b      	mov	r3, r5
 8009516:	eb49 0303 	adc.w	r3, r9, r3
 800951a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800952a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800952e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009532:	460b      	mov	r3, r1
 8009534:	18db      	adds	r3, r3, r3
 8009536:	653b      	str	r3, [r7, #80]	; 0x50
 8009538:	4613      	mov	r3, r2
 800953a:	eb42 0303 	adc.w	r3, r2, r3
 800953e:	657b      	str	r3, [r7, #84]	; 0x54
 8009540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009548:	f7f7 fa90 	bl	8000a6c <__aeabi_uldivmod>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4b61      	ldr	r3, [pc, #388]	; (80096d8 <UART_SetConfig+0x2d4>)
 8009552:	fba3 2302 	umull	r2, r3, r3, r2
 8009556:	095b      	lsrs	r3, r3, #5
 8009558:	011c      	lsls	r4, r3, #4
 800955a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800955e:	2200      	movs	r2, #0
 8009560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800956c:	4642      	mov	r2, r8
 800956e:	464b      	mov	r3, r9
 8009570:	1891      	adds	r1, r2, r2
 8009572:	64b9      	str	r1, [r7, #72]	; 0x48
 8009574:	415b      	adcs	r3, r3
 8009576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800957c:	4641      	mov	r1, r8
 800957e:	eb12 0a01 	adds.w	sl, r2, r1
 8009582:	4649      	mov	r1, r9
 8009584:	eb43 0b01 	adc.w	fp, r3, r1
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800959c:	4692      	mov	sl, r2
 800959e:	469b      	mov	fp, r3
 80095a0:	4643      	mov	r3, r8
 80095a2:	eb1a 0303 	adds.w	r3, sl, r3
 80095a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095aa:	464b      	mov	r3, r9
 80095ac:	eb4b 0303 	adc.w	r3, fp, r3
 80095b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095c8:	460b      	mov	r3, r1
 80095ca:	18db      	adds	r3, r3, r3
 80095cc:	643b      	str	r3, [r7, #64]	; 0x40
 80095ce:	4613      	mov	r3, r2
 80095d0:	eb42 0303 	adc.w	r3, r2, r3
 80095d4:	647b      	str	r3, [r7, #68]	; 0x44
 80095d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80095de:	f7f7 fa45 	bl	8000a6c <__aeabi_uldivmod>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	4b3b      	ldr	r3, [pc, #236]	; (80096d8 <UART_SetConfig+0x2d4>)
 80095ea:	fba3 2301 	umull	r2, r3, r3, r1
 80095ee:	095b      	lsrs	r3, r3, #5
 80095f0:	2264      	movs	r2, #100	; 0x64
 80095f2:	fb02 f303 	mul.w	r3, r2, r3
 80095f6:	1acb      	subs	r3, r1, r3
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80095fe:	4b36      	ldr	r3, [pc, #216]	; (80096d8 <UART_SetConfig+0x2d4>)
 8009600:	fba3 2302 	umull	r2, r3, r3, r2
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800960c:	441c      	add	r4, r3
 800960e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009612:	2200      	movs	r2, #0
 8009614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800961c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009620:	4642      	mov	r2, r8
 8009622:	464b      	mov	r3, r9
 8009624:	1891      	adds	r1, r2, r2
 8009626:	63b9      	str	r1, [r7, #56]	; 0x38
 8009628:	415b      	adcs	r3, r3
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009630:	4641      	mov	r1, r8
 8009632:	1851      	adds	r1, r2, r1
 8009634:	6339      	str	r1, [r7, #48]	; 0x30
 8009636:	4649      	mov	r1, r9
 8009638:	414b      	adcs	r3, r1
 800963a:	637b      	str	r3, [r7, #52]	; 0x34
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009648:	4659      	mov	r1, fp
 800964a:	00cb      	lsls	r3, r1, #3
 800964c:	4651      	mov	r1, sl
 800964e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009652:	4651      	mov	r1, sl
 8009654:	00ca      	lsls	r2, r1, #3
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	4603      	mov	r3, r0
 800965c:	4642      	mov	r2, r8
 800965e:	189b      	adds	r3, r3, r2
 8009660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009664:	464b      	mov	r3, r9
 8009666:	460a      	mov	r2, r1
 8009668:	eb42 0303 	adc.w	r3, r2, r3
 800966c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800967c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009684:	460b      	mov	r3, r1
 8009686:	18db      	adds	r3, r3, r3
 8009688:	62bb      	str	r3, [r7, #40]	; 0x28
 800968a:	4613      	mov	r3, r2
 800968c:	eb42 0303 	adc.w	r3, r2, r3
 8009690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800969a:	f7f7 f9e7 	bl	8000a6c <__aeabi_uldivmod>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <UART_SetConfig+0x2d4>)
 80096a4:	fba3 1302 	umull	r1, r3, r3, r2
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	2164      	movs	r1, #100	; 0x64
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	3332      	adds	r3, #50	; 0x32
 80096b6:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <UART_SetConfig+0x2d4>)
 80096b8:	fba2 2303 	umull	r2, r3, r2, r3
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	f003 0207 	and.w	r2, r3, #7
 80096c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4422      	add	r2, r4
 80096ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096cc:	e105      	b.n	80098da <UART_SetConfig+0x4d6>
 80096ce:	bf00      	nop
 80096d0:	40011000 	.word	0x40011000
 80096d4:	40011400 	.word	0x40011400
 80096d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80096ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80096ee:	4642      	mov	r2, r8
 80096f0:	464b      	mov	r3, r9
 80096f2:	1891      	adds	r1, r2, r2
 80096f4:	6239      	str	r1, [r7, #32]
 80096f6:	415b      	adcs	r3, r3
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
 80096fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096fe:	4641      	mov	r1, r8
 8009700:	1854      	adds	r4, r2, r1
 8009702:	4649      	mov	r1, r9
 8009704:	eb43 0501 	adc.w	r5, r3, r1
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	00eb      	lsls	r3, r5, #3
 8009712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009716:	00e2      	lsls	r2, r4, #3
 8009718:	4614      	mov	r4, r2
 800971a:	461d      	mov	r5, r3
 800971c:	4643      	mov	r3, r8
 800971e:	18e3      	adds	r3, r4, r3
 8009720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009724:	464b      	mov	r3, r9
 8009726:	eb45 0303 	adc.w	r3, r5, r3
 800972a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800972e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800973a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800974a:	4629      	mov	r1, r5
 800974c:	008b      	lsls	r3, r1, #2
 800974e:	4621      	mov	r1, r4
 8009750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009754:	4621      	mov	r1, r4
 8009756:	008a      	lsls	r2, r1, #2
 8009758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800975c:	f7f7 f986 	bl	8000a6c <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4b60      	ldr	r3, [pc, #384]	; (80098e8 <UART_SetConfig+0x4e4>)
 8009766:	fba3 2302 	umull	r2, r3, r3, r2
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	011c      	lsls	r4, r3, #4
 800976e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800977c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	1891      	adds	r1, r2, r2
 8009786:	61b9      	str	r1, [r7, #24]
 8009788:	415b      	adcs	r3, r3
 800978a:	61fb      	str	r3, [r7, #28]
 800978c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009790:	4641      	mov	r1, r8
 8009792:	1851      	adds	r1, r2, r1
 8009794:	6139      	str	r1, [r7, #16]
 8009796:	4649      	mov	r1, r9
 8009798:	414b      	adcs	r3, r1
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097a8:	4659      	mov	r1, fp
 80097aa:	00cb      	lsls	r3, r1, #3
 80097ac:	4651      	mov	r1, sl
 80097ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097b2:	4651      	mov	r1, sl
 80097b4:	00ca      	lsls	r2, r1, #3
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	4642      	mov	r2, r8
 80097be:	189b      	adds	r3, r3, r2
 80097c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097c4:	464b      	mov	r3, r9
 80097c6:	460a      	mov	r2, r1
 80097c8:	eb42 0303 	adc.w	r3, r2, r3
 80097cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80097da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80097dc:	f04f 0200 	mov.w	r2, #0
 80097e0:	f04f 0300 	mov.w	r3, #0
 80097e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80097e8:	4649      	mov	r1, r9
 80097ea:	008b      	lsls	r3, r1, #2
 80097ec:	4641      	mov	r1, r8
 80097ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097f2:	4641      	mov	r1, r8
 80097f4:	008a      	lsls	r2, r1, #2
 80097f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097fa:	f7f7 f937 	bl	8000a6c <__aeabi_uldivmod>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4b39      	ldr	r3, [pc, #228]	; (80098e8 <UART_SetConfig+0x4e4>)
 8009804:	fba3 1302 	umull	r1, r3, r3, r2
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	2164      	movs	r1, #100	; 0x64
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	3332      	adds	r3, #50	; 0x32
 8009816:	4a34      	ldr	r2, [pc, #208]	; (80098e8 <UART_SetConfig+0x4e4>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009822:	441c      	add	r4, r3
 8009824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009828:	2200      	movs	r2, #0
 800982a:	673b      	str	r3, [r7, #112]	; 0x70
 800982c:	677a      	str	r2, [r7, #116]	; 0x74
 800982e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009832:	4642      	mov	r2, r8
 8009834:	464b      	mov	r3, r9
 8009836:	1891      	adds	r1, r2, r2
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	415b      	adcs	r3, r3
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009842:	4641      	mov	r1, r8
 8009844:	1851      	adds	r1, r2, r1
 8009846:	6039      	str	r1, [r7, #0]
 8009848:	4649      	mov	r1, r9
 800984a:	414b      	adcs	r3, r1
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	f04f 0300 	mov.w	r3, #0
 8009856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800985a:	4659      	mov	r1, fp
 800985c:	00cb      	lsls	r3, r1, #3
 800985e:	4651      	mov	r1, sl
 8009860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009864:	4651      	mov	r1, sl
 8009866:	00ca      	lsls	r2, r1, #3
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	4603      	mov	r3, r0
 800986e:	4642      	mov	r2, r8
 8009870:	189b      	adds	r3, r3, r2
 8009872:	66bb      	str	r3, [r7, #104]	; 0x68
 8009874:	464b      	mov	r3, r9
 8009876:	460a      	mov	r2, r1
 8009878:	eb42 0303 	adc.w	r3, r2, r3
 800987c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800987e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	663b      	str	r3, [r7, #96]	; 0x60
 8009888:	667a      	str	r2, [r7, #100]	; 0x64
 800988a:	f04f 0200 	mov.w	r2, #0
 800988e:	f04f 0300 	mov.w	r3, #0
 8009892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009896:	4649      	mov	r1, r9
 8009898:	008b      	lsls	r3, r1, #2
 800989a:	4641      	mov	r1, r8
 800989c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098a0:	4641      	mov	r1, r8
 80098a2:	008a      	lsls	r2, r1, #2
 80098a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80098a8:	f7f7 f8e0 	bl	8000a6c <__aeabi_uldivmod>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <UART_SetConfig+0x4e4>)
 80098b2:	fba3 1302 	umull	r1, r3, r3, r2
 80098b6:	095b      	lsrs	r3, r3, #5
 80098b8:	2164      	movs	r1, #100	; 0x64
 80098ba:	fb01 f303 	mul.w	r3, r1, r3
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	3332      	adds	r3, #50	; 0x32
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <UART_SetConfig+0x4e4>)
 80098c6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	f003 020f 	and.w	r2, r3, #15
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4422      	add	r2, r4
 80098d8:	609a      	str	r2, [r3, #8]
}
 80098da:	bf00      	nop
 80098dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80098e0:	46bd      	mov	sp, r7
 80098e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098e6:	bf00      	nop
 80098e8:	51eb851f 	.word	0x51eb851f

080098ec <__errno>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	; (80098f4 <__errno+0x8>)
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000018 	.word	0x20000018

080098f8 <__libc_init_array>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4d0d      	ldr	r5, [pc, #52]	; (8009930 <__libc_init_array+0x38>)
 80098fc:	4c0d      	ldr	r4, [pc, #52]	; (8009934 <__libc_init_array+0x3c>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	2600      	movs	r6, #0
 8009904:	42a6      	cmp	r6, r4
 8009906:	d109      	bne.n	800991c <__libc_init_array+0x24>
 8009908:	4d0b      	ldr	r5, [pc, #44]	; (8009938 <__libc_init_array+0x40>)
 800990a:	4c0c      	ldr	r4, [pc, #48]	; (800993c <__libc_init_array+0x44>)
 800990c:	f000 fc8e 	bl	800a22c <_init>
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	2600      	movs	r6, #0
 8009916:	42a6      	cmp	r6, r4
 8009918:	d105      	bne.n	8009926 <__libc_init_array+0x2e>
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009920:	4798      	blx	r3
 8009922:	3601      	adds	r6, #1
 8009924:	e7ee      	b.n	8009904 <__libc_init_array+0xc>
 8009926:	f855 3b04 	ldr.w	r3, [r5], #4
 800992a:	4798      	blx	r3
 800992c:	3601      	adds	r6, #1
 800992e:	e7f2      	b.n	8009916 <__libc_init_array+0x1e>
 8009930:	0800a674 	.word	0x0800a674
 8009934:	0800a674 	.word	0x0800a674
 8009938:	0800a674 	.word	0x0800a674
 800993c:	0800a678 	.word	0x0800a678

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <siprintf>:
 8009950:	b40e      	push	{r1, r2, r3}
 8009952:	b500      	push	{lr}
 8009954:	b09c      	sub	sp, #112	; 0x70
 8009956:	ab1d      	add	r3, sp, #116	; 0x74
 8009958:	9002      	str	r0, [sp, #8]
 800995a:	9006      	str	r0, [sp, #24]
 800995c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009960:	4809      	ldr	r0, [pc, #36]	; (8009988 <siprintf+0x38>)
 8009962:	9107      	str	r1, [sp, #28]
 8009964:	9104      	str	r1, [sp, #16]
 8009966:	4909      	ldr	r1, [pc, #36]	; (800998c <siprintf+0x3c>)
 8009968:	f853 2b04 	ldr.w	r2, [r3], #4
 800996c:	9105      	str	r1, [sp, #20]
 800996e:	6800      	ldr	r0, [r0, #0]
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	a902      	add	r1, sp, #8
 8009974:	f000 f868 	bl	8009a48 <_svfiprintf_r>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	b01c      	add	sp, #112	; 0x70
 8009980:	f85d eb04 	ldr.w	lr, [sp], #4
 8009984:	b003      	add	sp, #12
 8009986:	4770      	bx	lr
 8009988:	20000018 	.word	0x20000018
 800998c:	ffff0208 	.word	0xffff0208

08009990 <__ssputs_r>:
 8009990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009994:	688e      	ldr	r6, [r1, #8]
 8009996:	429e      	cmp	r6, r3
 8009998:	4682      	mov	sl, r0
 800999a:	460c      	mov	r4, r1
 800999c:	4690      	mov	r8, r2
 800999e:	461f      	mov	r7, r3
 80099a0:	d838      	bhi.n	8009a14 <__ssputs_r+0x84>
 80099a2:	898a      	ldrh	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099a8:	d032      	beq.n	8009a10 <__ssputs_r+0x80>
 80099aa:	6825      	ldr	r5, [r4, #0]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	eba5 0901 	sub.w	r9, r5, r1
 80099b2:	6965      	ldr	r5, [r4, #20]
 80099b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099bc:	3301      	adds	r3, #1
 80099be:	444b      	add	r3, r9
 80099c0:	106d      	asrs	r5, r5, #1
 80099c2:	429d      	cmp	r5, r3
 80099c4:	bf38      	it	cc
 80099c6:	461d      	movcc	r5, r3
 80099c8:	0553      	lsls	r3, r2, #21
 80099ca:	d531      	bpl.n	8009a30 <__ssputs_r+0xa0>
 80099cc:	4629      	mov	r1, r5
 80099ce:	f000 fb63 	bl	800a098 <_malloc_r>
 80099d2:	4606      	mov	r6, r0
 80099d4:	b950      	cbnz	r0, 80099ec <__ssputs_r+0x5c>
 80099d6:	230c      	movs	r3, #12
 80099d8:	f8ca 3000 	str.w	r3, [sl]
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	6921      	ldr	r1, [r4, #16]
 80099ee:	464a      	mov	r2, r9
 80099f0:	f000 fabe 	bl	8009f70 <memcpy>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	6126      	str	r6, [r4, #16]
 8009a02:	6165      	str	r5, [r4, #20]
 8009a04:	444e      	add	r6, r9
 8009a06:	eba5 0509 	sub.w	r5, r5, r9
 8009a0a:	6026      	str	r6, [r4, #0]
 8009a0c:	60a5      	str	r5, [r4, #8]
 8009a0e:	463e      	mov	r6, r7
 8009a10:	42be      	cmp	r6, r7
 8009a12:	d900      	bls.n	8009a16 <__ssputs_r+0x86>
 8009a14:	463e      	mov	r6, r7
 8009a16:	6820      	ldr	r0, [r4, #0]
 8009a18:	4632      	mov	r2, r6
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	f000 fab6 	bl	8009f8c <memmove>
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	1b9b      	subs	r3, r3, r6
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4433      	add	r3, r6
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e7db      	b.n	80099e8 <__ssputs_r+0x58>
 8009a30:	462a      	mov	r2, r5
 8009a32:	f000 fba5 	bl	800a180 <_realloc_r>
 8009a36:	4606      	mov	r6, r0
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1e1      	bne.n	8009a00 <__ssputs_r+0x70>
 8009a3c:	6921      	ldr	r1, [r4, #16]
 8009a3e:	4650      	mov	r0, sl
 8009a40:	f000 fabe 	bl	8009fc0 <_free_r>
 8009a44:	e7c7      	b.n	80099d6 <__ssputs_r+0x46>
	...

08009a48 <_svfiprintf_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4698      	mov	r8, r3
 8009a4e:	898b      	ldrh	r3, [r1, #12]
 8009a50:	061b      	lsls	r3, r3, #24
 8009a52:	b09d      	sub	sp, #116	; 0x74
 8009a54:	4607      	mov	r7, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	d50e      	bpl.n	8009a7a <_svfiprintf_r+0x32>
 8009a5c:	690b      	ldr	r3, [r1, #16]
 8009a5e:	b963      	cbnz	r3, 8009a7a <_svfiprintf_r+0x32>
 8009a60:	2140      	movs	r1, #64	; 0x40
 8009a62:	f000 fb19 	bl	800a098 <_malloc_r>
 8009a66:	6028      	str	r0, [r5, #0]
 8009a68:	6128      	str	r0, [r5, #16]
 8009a6a:	b920      	cbnz	r0, 8009a76 <_svfiprintf_r+0x2e>
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e0d1      	b.n	8009c1a <_svfiprintf_r+0x1d2>
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	2320      	movs	r3, #32
 8009a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a88:	2330      	movs	r3, #48	; 0x30
 8009a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c34 <_svfiprintf_r+0x1ec>
 8009a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a92:	f04f 0901 	mov.w	r9, #1
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x5c>
 8009aa0:	2a25      	cmp	r2, #37	; 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x50>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7a>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6d 	bl	8009990 <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80aa 	beq.w	8009c10 <_svfiprintf_r+0x1c8>
 8009abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 80a2 	beq.w	8009c10 <_svfiprintf_r+0x1c8>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad6:	f10a 0a01 	add.w	sl, sl, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	4851      	ldr	r0, [pc, #324]	; (8009c34 <_svfiprintf_r+0x1ec>)
 8009aee:	f7f6 fb7f 	bl	80001f0 <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xe6>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	; 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xf6>
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	4654      	mov	r4, sl
 8009b16:	2000      	movs	r0, #0
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	; 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94e      	bls.n	8009bc6 <_svfiprintf_r+0x17e>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x110>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x110>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	fa09 f303 	lsl.w	r3, r9, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	46a2      	mov	sl, r4
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0x9c>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5c:	d10c      	bne.n	8009b78 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	; 0x2a
 8009b62:	d135      	bne.n	8009bd0 <_svfiprintf_r+0x188>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d1a      	adds	r2, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9203      	str	r2, [sp, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfb8      	it	lt
 8009b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b74:	3402      	adds	r4, #2
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c44 <_svfiprintf_r+0x1fc>
 8009b7c:	7821      	ldrb	r1, [r4, #0]
 8009b7e:	2203      	movs	r2, #3
 8009b80:	4650      	mov	r0, sl
 8009b82:	f7f6 fb35 	bl	80001f0 <memchr>
 8009b86:	b140      	cbz	r0, 8009b9a <_svfiprintf_r+0x152>
 8009b88:	2340      	movs	r3, #64	; 0x40
 8009b8a:	eba0 000a 	sub.w	r0, r0, sl
 8009b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	4303      	orrs	r3, r0
 8009b96:	3401      	adds	r4, #1
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	4826      	ldr	r0, [pc, #152]	; (8009c38 <_svfiprintf_r+0x1f0>)
 8009ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba4:	2206      	movs	r2, #6
 8009ba6:	f7f6 fb23 	bl	80001f0 <memchr>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d038      	beq.n	8009c20 <_svfiprintf_r+0x1d8>
 8009bae:	4b23      	ldr	r3, [pc, #140]	; (8009c3c <_svfiprintf_r+0x1f4>)
 8009bb0:	bb1b      	cbnz	r3, 8009bfa <_svfiprintf_r+0x1b2>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	3307      	adds	r3, #7
 8009bb6:	f023 0307 	bic.w	r3, r3, #7
 8009bba:	3308      	adds	r3, #8
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	4433      	add	r3, r6
 8009bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc4:	e767      	b.n	8009a96 <_svfiprintf_r+0x4e>
 8009bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bca:	460c      	mov	r4, r1
 8009bcc:	2001      	movs	r0, #1
 8009bce:	e7a5      	b.n	8009b1c <_svfiprintf_r+0xd4>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	3401      	adds	r4, #1
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	f04f 0c0a 	mov.w	ip, #10
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be2:	3a30      	subs	r2, #48	; 0x30
 8009be4:	2a09      	cmp	r2, #9
 8009be6:	d903      	bls.n	8009bf0 <_svfiprintf_r+0x1a8>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0c5      	beq.n	8009b78 <_svfiprintf_r+0x130>
 8009bec:	9105      	str	r1, [sp, #20]
 8009bee:	e7c3      	b.n	8009b78 <_svfiprintf_r+0x130>
 8009bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e7f0      	b.n	8009bdc <_svfiprintf_r+0x194>
 8009bfa:	ab03      	add	r3, sp, #12
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <_svfiprintf_r+0x1f8>)
 8009c02:	a904      	add	r1, sp, #16
 8009c04:	4638      	mov	r0, r7
 8009c06:	f3af 8000 	nop.w
 8009c0a:	1c42      	adds	r2, r0, #1
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	d1d6      	bne.n	8009bbe <_svfiprintf_r+0x176>
 8009c10:	89ab      	ldrh	r3, [r5, #12]
 8009c12:	065b      	lsls	r3, r3, #25
 8009c14:	f53f af2c 	bmi.w	8009a70 <_svfiprintf_r+0x28>
 8009c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c1a:	b01d      	add	sp, #116	; 0x74
 8009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462a      	mov	r2, r5
 8009c26:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <_svfiprintf_r+0x1f8>)
 8009c28:	a904      	add	r1, sp, #16
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f000 f87a 	bl	8009d24 <_printf_i>
 8009c30:	e7eb      	b.n	8009c0a <_svfiprintf_r+0x1c2>
 8009c32:	bf00      	nop
 8009c34:	0800a638 	.word	0x0800a638
 8009c38:	0800a642 	.word	0x0800a642
 8009c3c:	00000000 	.word	0x00000000
 8009c40:	08009991 	.word	0x08009991
 8009c44:	0800a63e 	.word	0x0800a63e

08009c48 <_printf_common>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	4699      	mov	r9, r3
 8009c50:	688a      	ldr	r2, [r1, #8]
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bfb8      	it	lt
 8009c5c:	4613      	movlt	r3, r2
 8009c5e:	6033      	str	r3, [r6, #0]
 8009c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c64:	4607      	mov	r7, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	b10a      	cbz	r2, 8009c6e <_printf_common+0x26>
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	6033      	str	r3, [r6, #0]
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	0699      	lsls	r1, r3, #26
 8009c72:	bf42      	ittt	mi
 8009c74:	6833      	ldrmi	r3, [r6, #0]
 8009c76:	3302      	addmi	r3, #2
 8009c78:	6033      	strmi	r3, [r6, #0]
 8009c7a:	6825      	ldr	r5, [r4, #0]
 8009c7c:	f015 0506 	ands.w	r5, r5, #6
 8009c80:	d106      	bne.n	8009c90 <_printf_common+0x48>
 8009c82:	f104 0a19 	add.w	sl, r4, #25
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	6832      	ldr	r2, [r6, #0]
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	42ab      	cmp	r3, r5
 8009c8e:	dc26      	bgt.n	8009cde <_printf_common+0x96>
 8009c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c94:	1e13      	subs	r3, r2, #0
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	bf18      	it	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	0692      	lsls	r2, r2, #26
 8009c9e:	d42b      	bmi.n	8009cf8 <_printf_common+0xb0>
 8009ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d01e      	beq.n	8009cec <_printf_common+0xa4>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	68e5      	ldr	r5, [r4, #12]
 8009cb2:	6832      	ldr	r2, [r6, #0]
 8009cb4:	f003 0306 	and.w	r3, r3, #6
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	bf08      	it	eq
 8009cbc:	1aad      	subeq	r5, r5, r2
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	bf0c      	ite	eq
 8009cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc8:	2500      	movne	r5, #0
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	bfc4      	itt	gt
 8009cce:	1a9b      	subgt	r3, r3, r2
 8009cd0:	18ed      	addgt	r5, r5, r3
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	341a      	adds	r4, #26
 8009cd6:	42b5      	cmp	r5, r6
 8009cd8:	d11a      	bne.n	8009d10 <_printf_common+0xc8>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e008      	b.n	8009cf0 <_printf_common+0xa8>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4652      	mov	r2, sl
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	47c0      	blx	r8
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d103      	bne.n	8009cf4 <_printf_common+0xac>
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	e7c6      	b.n	8009c86 <_printf_common+0x3e>
 8009cf8:	18e1      	adds	r1, r4, r3
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	2030      	movs	r0, #48	; 0x30
 8009cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d02:	4422      	add	r2, r4
 8009d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	e7c7      	b.n	8009ca0 <_printf_common+0x58>
 8009d10:	2301      	movs	r3, #1
 8009d12:	4622      	mov	r2, r4
 8009d14:	4649      	mov	r1, r9
 8009d16:	4638      	mov	r0, r7
 8009d18:	47c0      	blx	r8
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d0e6      	beq.n	8009cec <_printf_common+0xa4>
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7d9      	b.n	8009cd6 <_printf_common+0x8e>
	...

08009d24 <_printf_i>:
 8009d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	7e0f      	ldrb	r7, [r1, #24]
 8009d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d2c:	2f78      	cmp	r7, #120	; 0x78
 8009d2e:	4691      	mov	r9, r2
 8009d30:	4680      	mov	r8, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	469a      	mov	sl, r3
 8009d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d3a:	d807      	bhi.n	8009d4c <_printf_i+0x28>
 8009d3c:	2f62      	cmp	r7, #98	; 0x62
 8009d3e:	d80a      	bhi.n	8009d56 <_printf_i+0x32>
 8009d40:	2f00      	cmp	r7, #0
 8009d42:	f000 80d8 	beq.w	8009ef6 <_printf_i+0x1d2>
 8009d46:	2f58      	cmp	r7, #88	; 0x58
 8009d48:	f000 80a3 	beq.w	8009e92 <_printf_i+0x16e>
 8009d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d54:	e03a      	b.n	8009dcc <_printf_i+0xa8>
 8009d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d5a:	2b15      	cmp	r3, #21
 8009d5c:	d8f6      	bhi.n	8009d4c <_printf_i+0x28>
 8009d5e:	a101      	add	r1, pc, #4	; (adr r1, 8009d64 <_printf_i+0x40>)
 8009d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d64:	08009dbd 	.word	0x08009dbd
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009d4d 	.word	0x08009d4d
 8009d70:	08009d4d 	.word	0x08009d4d
 8009d74:	08009d4d 	.word	0x08009d4d
 8009d78:	08009d4d 	.word	0x08009d4d
 8009d7c:	08009dd1 	.word	0x08009dd1
 8009d80:	08009d4d 	.word	0x08009d4d
 8009d84:	08009d4d 	.word	0x08009d4d
 8009d88:	08009d4d 	.word	0x08009d4d
 8009d8c:	08009d4d 	.word	0x08009d4d
 8009d90:	08009edd 	.word	0x08009edd
 8009d94:	08009e01 	.word	0x08009e01
 8009d98:	08009ebf 	.word	0x08009ebf
 8009d9c:	08009d4d 	.word	0x08009d4d
 8009da0:	08009d4d 	.word	0x08009d4d
 8009da4:	08009eff 	.word	0x08009eff
 8009da8:	08009d4d 	.word	0x08009d4d
 8009dac:	08009e01 	.word	0x08009e01
 8009db0:	08009d4d 	.word	0x08009d4d
 8009db4:	08009d4d 	.word	0x08009d4d
 8009db8:	08009ec7 	.word	0x08009ec7
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	602a      	str	r2, [r5, #0]
 8009dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e0a3      	b.n	8009f18 <_printf_i+0x1f4>
 8009dd0:	6820      	ldr	r0, [r4, #0]
 8009dd2:	6829      	ldr	r1, [r5, #0]
 8009dd4:	0606      	lsls	r6, r0, #24
 8009dd6:	f101 0304 	add.w	r3, r1, #4
 8009dda:	d50a      	bpl.n	8009df2 <_printf_i+0xce>
 8009ddc:	680e      	ldr	r6, [r1, #0]
 8009dde:	602b      	str	r3, [r5, #0]
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	da03      	bge.n	8009dec <_printf_i+0xc8>
 8009de4:	232d      	movs	r3, #45	; 0x2d
 8009de6:	4276      	negs	r6, r6
 8009de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dec:	485e      	ldr	r0, [pc, #376]	; (8009f68 <_printf_i+0x244>)
 8009dee:	230a      	movs	r3, #10
 8009df0:	e019      	b.n	8009e26 <_printf_i+0x102>
 8009df2:	680e      	ldr	r6, [r1, #0]
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dfa:	bf18      	it	ne
 8009dfc:	b236      	sxthne	r6, r6
 8009dfe:	e7ef      	b.n	8009de0 <_printf_i+0xbc>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1d19      	adds	r1, r3, #4
 8009e06:	6029      	str	r1, [r5, #0]
 8009e08:	0601      	lsls	r1, r0, #24
 8009e0a:	d501      	bpl.n	8009e10 <_printf_i+0xec>
 8009e0c:	681e      	ldr	r6, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <_printf_i+0xf2>
 8009e10:	0646      	lsls	r6, r0, #25
 8009e12:	d5fb      	bpl.n	8009e0c <_printf_i+0xe8>
 8009e14:	881e      	ldrh	r6, [r3, #0]
 8009e16:	4854      	ldr	r0, [pc, #336]	; (8009f68 <_printf_i+0x244>)
 8009e18:	2f6f      	cmp	r7, #111	; 0x6f
 8009e1a:	bf0c      	ite	eq
 8009e1c:	2308      	moveq	r3, #8
 8009e1e:	230a      	movne	r3, #10
 8009e20:	2100      	movs	r1, #0
 8009e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e26:	6865      	ldr	r5, [r4, #4]
 8009e28:	60a5      	str	r5, [r4, #8]
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	bfa2      	ittt	ge
 8009e2e:	6821      	ldrge	r1, [r4, #0]
 8009e30:	f021 0104 	bicge.w	r1, r1, #4
 8009e34:	6021      	strge	r1, [r4, #0]
 8009e36:	b90e      	cbnz	r6, 8009e3c <_printf_i+0x118>
 8009e38:	2d00      	cmp	r5, #0
 8009e3a:	d04d      	beq.n	8009ed8 <_printf_i+0x1b4>
 8009e3c:	4615      	mov	r5, r2
 8009e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e42:	fb03 6711 	mls	r7, r3, r1, r6
 8009e46:	5dc7      	ldrb	r7, [r0, r7]
 8009e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e4c:	4637      	mov	r7, r6
 8009e4e:	42bb      	cmp	r3, r7
 8009e50:	460e      	mov	r6, r1
 8009e52:	d9f4      	bls.n	8009e3e <_printf_i+0x11a>
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d10b      	bne.n	8009e70 <_printf_i+0x14c>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07de      	lsls	r6, r3, #31
 8009e5c:	d508      	bpl.n	8009e70 <_printf_i+0x14c>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	6861      	ldr	r1, [r4, #4]
 8009e62:	4299      	cmp	r1, r3
 8009e64:	bfde      	ittt	le
 8009e66:	2330      	movle	r3, #48	; 0x30
 8009e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e70:	1b52      	subs	r2, r2, r5
 8009e72:	6122      	str	r2, [r4, #16]
 8009e74:	f8cd a000 	str.w	sl, [sp]
 8009e78:	464b      	mov	r3, r9
 8009e7a:	aa03      	add	r2, sp, #12
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7ff fee2 	bl	8009c48 <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d14c      	bne.n	8009f22 <_printf_i+0x1fe>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b004      	add	sp, #16
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	4835      	ldr	r0, [pc, #212]	; (8009f68 <_printf_i+0x244>)
 8009e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e98:	6829      	ldr	r1, [r5, #0]
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ea0:	6029      	str	r1, [r5, #0]
 8009ea2:	061d      	lsls	r5, r3, #24
 8009ea4:	d514      	bpl.n	8009ed0 <_printf_i+0x1ac>
 8009ea6:	07df      	lsls	r7, r3, #31
 8009ea8:	bf44      	itt	mi
 8009eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8009eae:	6023      	strmi	r3, [r4, #0]
 8009eb0:	b91e      	cbnz	r6, 8009eba <_printf_i+0x196>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	f023 0320 	bic.w	r3, r3, #32
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	2310      	movs	r3, #16
 8009ebc:	e7b0      	b.n	8009e20 <_printf_i+0xfc>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	f043 0320 	orr.w	r3, r3, #32
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	2378      	movs	r3, #120	; 0x78
 8009ec8:	4828      	ldr	r0, [pc, #160]	; (8009f6c <_printf_i+0x248>)
 8009eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ece:	e7e3      	b.n	8009e98 <_printf_i+0x174>
 8009ed0:	0659      	lsls	r1, r3, #25
 8009ed2:	bf48      	it	mi
 8009ed4:	b2b6      	uxthmi	r6, r6
 8009ed6:	e7e6      	b.n	8009ea6 <_printf_i+0x182>
 8009ed8:	4615      	mov	r5, r2
 8009eda:	e7bb      	b.n	8009e54 <_printf_i+0x130>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	6826      	ldr	r6, [r4, #0]
 8009ee0:	6961      	ldr	r1, [r4, #20]
 8009ee2:	1d18      	adds	r0, r3, #4
 8009ee4:	6028      	str	r0, [r5, #0]
 8009ee6:	0635      	lsls	r5, r6, #24
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	d501      	bpl.n	8009ef0 <_printf_i+0x1cc>
 8009eec:	6019      	str	r1, [r3, #0]
 8009eee:	e002      	b.n	8009ef6 <_printf_i+0x1d2>
 8009ef0:	0670      	lsls	r0, r6, #25
 8009ef2:	d5fb      	bpl.n	8009eec <_printf_i+0x1c8>
 8009ef4:	8019      	strh	r1, [r3, #0]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	4615      	mov	r5, r2
 8009efc:	e7ba      	b.n	8009e74 <_printf_i+0x150>
 8009efe:	682b      	ldr	r3, [r5, #0]
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	602a      	str	r2, [r5, #0]
 8009f04:	681d      	ldr	r5, [r3, #0]
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f7f6 f970 	bl	80001f0 <memchr>
 8009f10:	b108      	cbz	r0, 8009f16 <_printf_i+0x1f2>
 8009f12:	1b40      	subs	r0, r0, r5
 8009f14:	6060      	str	r0, [r4, #4]
 8009f16:	6863      	ldr	r3, [r4, #4]
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f20:	e7a8      	b.n	8009e74 <_printf_i+0x150>
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	462a      	mov	r2, r5
 8009f26:	4649      	mov	r1, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	47d0      	blx	sl
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d0ab      	beq.n	8009e88 <_printf_i+0x164>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	079b      	lsls	r3, r3, #30
 8009f34:	d413      	bmi.n	8009f5e <_printf_i+0x23a>
 8009f36:	68e0      	ldr	r0, [r4, #12]
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	4298      	cmp	r0, r3
 8009f3c:	bfb8      	it	lt
 8009f3e:	4618      	movlt	r0, r3
 8009f40:	e7a4      	b.n	8009e8c <_printf_i+0x168>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4632      	mov	r2, r6
 8009f46:	4649      	mov	r1, r9
 8009f48:	4640      	mov	r0, r8
 8009f4a:	47d0      	blx	sl
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d09b      	beq.n	8009e88 <_printf_i+0x164>
 8009f50:	3501      	adds	r5, #1
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	9903      	ldr	r1, [sp, #12]
 8009f56:	1a5b      	subs	r3, r3, r1
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	dcf2      	bgt.n	8009f42 <_printf_i+0x21e>
 8009f5c:	e7eb      	b.n	8009f36 <_printf_i+0x212>
 8009f5e:	2500      	movs	r5, #0
 8009f60:	f104 0619 	add.w	r6, r4, #25
 8009f64:	e7f5      	b.n	8009f52 <_printf_i+0x22e>
 8009f66:	bf00      	nop
 8009f68:	0800a649 	.word	0x0800a649
 8009f6c:	0800a65a 	.word	0x0800a65a

08009f70 <memcpy>:
 8009f70:	440a      	add	r2, r1
 8009f72:	4291      	cmp	r1, r2
 8009f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f78:	d100      	bne.n	8009f7c <memcpy+0xc>
 8009f7a:	4770      	bx	lr
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f86:	4291      	cmp	r1, r2
 8009f88:	d1f9      	bne.n	8009f7e <memcpy+0xe>
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <memmove>:
 8009f8c:	4288      	cmp	r0, r1
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	eb01 0402 	add.w	r4, r1, r2
 8009f94:	d902      	bls.n	8009f9c <memmove+0x10>
 8009f96:	4284      	cmp	r4, r0
 8009f98:	4623      	mov	r3, r4
 8009f9a:	d807      	bhi.n	8009fac <memmove+0x20>
 8009f9c:	1e43      	subs	r3, r0, #1
 8009f9e:	42a1      	cmp	r1, r4
 8009fa0:	d008      	beq.n	8009fb4 <memmove+0x28>
 8009fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009faa:	e7f8      	b.n	8009f9e <memmove+0x12>
 8009fac:	4402      	add	r2, r0
 8009fae:	4601      	mov	r1, r0
 8009fb0:	428a      	cmp	r2, r1
 8009fb2:	d100      	bne.n	8009fb6 <memmove+0x2a>
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fbe:	e7f7      	b.n	8009fb0 <memmove+0x24>

08009fc0 <_free_r>:
 8009fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	d044      	beq.n	800a050 <_free_r+0x90>
 8009fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fca:	9001      	str	r0, [sp, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f1a1 0404 	sub.w	r4, r1, #4
 8009fd2:	bfb8      	it	lt
 8009fd4:	18e4      	addlt	r4, r4, r3
 8009fd6:	f000 f913 	bl	800a200 <__malloc_lock>
 8009fda:	4a1e      	ldr	r2, [pc, #120]	; (800a054 <_free_r+0x94>)
 8009fdc:	9801      	ldr	r0, [sp, #4]
 8009fde:	6813      	ldr	r3, [r2, #0]
 8009fe0:	b933      	cbnz	r3, 8009ff0 <_free_r+0x30>
 8009fe2:	6063      	str	r3, [r4, #4]
 8009fe4:	6014      	str	r4, [r2, #0]
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fec:	f000 b90e 	b.w	800a20c <__malloc_unlock>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d908      	bls.n	800a006 <_free_r+0x46>
 8009ff4:	6825      	ldr	r5, [r4, #0]
 8009ff6:	1961      	adds	r1, r4, r5
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf01      	itttt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	1949      	addeq	r1, r1, r5
 800a002:	6021      	streq	r1, [r4, #0]
 800a004:	e7ed      	b.n	8009fe2 <_free_r+0x22>
 800a006:	461a      	mov	r2, r3
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	b10b      	cbz	r3, 800a010 <_free_r+0x50>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d9fa      	bls.n	800a006 <_free_r+0x46>
 800a010:	6811      	ldr	r1, [r2, #0]
 800a012:	1855      	adds	r5, r2, r1
 800a014:	42a5      	cmp	r5, r4
 800a016:	d10b      	bne.n	800a030 <_free_r+0x70>
 800a018:	6824      	ldr	r4, [r4, #0]
 800a01a:	4421      	add	r1, r4
 800a01c:	1854      	adds	r4, r2, r1
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	d1e0      	bne.n	8009fe6 <_free_r+0x26>
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	6053      	str	r3, [r2, #4]
 800a02a:	4421      	add	r1, r4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	e7da      	b.n	8009fe6 <_free_r+0x26>
 800a030:	d902      	bls.n	800a038 <_free_r+0x78>
 800a032:	230c      	movs	r3, #12
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	e7d6      	b.n	8009fe6 <_free_r+0x26>
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf04      	itt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	6063      	str	r3, [r4, #4]
 800a046:	bf04      	itt	eq
 800a048:	1949      	addeq	r1, r1, r5
 800a04a:	6021      	streq	r1, [r4, #0]
 800a04c:	6054      	str	r4, [r2, #4]
 800a04e:	e7ca      	b.n	8009fe6 <_free_r+0x26>
 800a050:	b003      	add	sp, #12
 800a052:	bd30      	pop	{r4, r5, pc}
 800a054:	20000528 	.word	0x20000528

0800a058 <sbrk_aligned>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4e0e      	ldr	r6, [pc, #56]	; (800a094 <sbrk_aligned+0x3c>)
 800a05c:	460c      	mov	r4, r1
 800a05e:	6831      	ldr	r1, [r6, #0]
 800a060:	4605      	mov	r5, r0
 800a062:	b911      	cbnz	r1, 800a06a <sbrk_aligned+0x12>
 800a064:	f000 f8bc 	bl	800a1e0 <_sbrk_r>
 800a068:	6030      	str	r0, [r6, #0]
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f8b7 	bl	800a1e0 <_sbrk_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d00a      	beq.n	800a08c <sbrk_aligned+0x34>
 800a076:	1cc4      	adds	r4, r0, #3
 800a078:	f024 0403 	bic.w	r4, r4, #3
 800a07c:	42a0      	cmp	r0, r4
 800a07e:	d007      	beq.n	800a090 <sbrk_aligned+0x38>
 800a080:	1a21      	subs	r1, r4, r0
 800a082:	4628      	mov	r0, r5
 800a084:	f000 f8ac 	bl	800a1e0 <_sbrk_r>
 800a088:	3001      	adds	r0, #1
 800a08a:	d101      	bne.n	800a090 <sbrk_aligned+0x38>
 800a08c:	f04f 34ff 	mov.w	r4, #4294967295
 800a090:	4620      	mov	r0, r4
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	2000052c 	.word	0x2000052c

0800a098 <_malloc_r>:
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	1ccd      	adds	r5, r1, #3
 800a09e:	f025 0503 	bic.w	r5, r5, #3
 800a0a2:	3508      	adds	r5, #8
 800a0a4:	2d0c      	cmp	r5, #12
 800a0a6:	bf38      	it	cc
 800a0a8:	250c      	movcc	r5, #12
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	db01      	blt.n	800a0b4 <_malloc_r+0x1c>
 800a0b0:	42a9      	cmp	r1, r5
 800a0b2:	d905      	bls.n	800a0c0 <_malloc_r+0x28>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	2600      	movs	r6, #0
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	4e2e      	ldr	r6, [pc, #184]	; (800a17c <_malloc_r+0xe4>)
 800a0c2:	f000 f89d 	bl	800a200 <__malloc_lock>
 800a0c6:	6833      	ldr	r3, [r6, #0]
 800a0c8:	461c      	mov	r4, r3
 800a0ca:	bb34      	cbnz	r4, 800a11a <_malloc_r+0x82>
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7ff ffc2 	bl	800a058 <sbrk_aligned>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	d14d      	bne.n	800a176 <_malloc_r+0xde>
 800a0da:	6834      	ldr	r4, [r6, #0]
 800a0dc:	4626      	mov	r6, r4
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	d140      	bne.n	800a164 <_malloc_r+0xcc>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	eb04 0803 	add.w	r8, r4, r3
 800a0ec:	f000 f878 	bl	800a1e0 <_sbrk_r>
 800a0f0:	4580      	cmp	r8, r0
 800a0f2:	d13a      	bne.n	800a16a <_malloc_r+0xd2>
 800a0f4:	6821      	ldr	r1, [r4, #0]
 800a0f6:	3503      	adds	r5, #3
 800a0f8:	1a6d      	subs	r5, r5, r1
 800a0fa:	f025 0503 	bic.w	r5, r5, #3
 800a0fe:	3508      	adds	r5, #8
 800a100:	2d0c      	cmp	r5, #12
 800a102:	bf38      	it	cc
 800a104:	250c      	movcc	r5, #12
 800a106:	4629      	mov	r1, r5
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff ffa5 	bl	800a058 <sbrk_aligned>
 800a10e:	3001      	adds	r0, #1
 800a110:	d02b      	beq.n	800a16a <_malloc_r+0xd2>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	442b      	add	r3, r5
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	e00e      	b.n	800a138 <_malloc_r+0xa0>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	1b52      	subs	r2, r2, r5
 800a11e:	d41e      	bmi.n	800a15e <_malloc_r+0xc6>
 800a120:	2a0b      	cmp	r2, #11
 800a122:	d916      	bls.n	800a152 <_malloc_r+0xba>
 800a124:	1961      	adds	r1, r4, r5
 800a126:	42a3      	cmp	r3, r4
 800a128:	6025      	str	r5, [r4, #0]
 800a12a:	bf18      	it	ne
 800a12c:	6059      	strne	r1, [r3, #4]
 800a12e:	6863      	ldr	r3, [r4, #4]
 800a130:	bf08      	it	eq
 800a132:	6031      	streq	r1, [r6, #0]
 800a134:	5162      	str	r2, [r4, r5]
 800a136:	604b      	str	r3, [r1, #4]
 800a138:	4638      	mov	r0, r7
 800a13a:	f104 060b 	add.w	r6, r4, #11
 800a13e:	f000 f865 	bl	800a20c <__malloc_unlock>
 800a142:	f026 0607 	bic.w	r6, r6, #7
 800a146:	1d23      	adds	r3, r4, #4
 800a148:	1af2      	subs	r2, r6, r3
 800a14a:	d0b6      	beq.n	800a0ba <_malloc_r+0x22>
 800a14c:	1b9b      	subs	r3, r3, r6
 800a14e:	50a3      	str	r3, [r4, r2]
 800a150:	e7b3      	b.n	800a0ba <_malloc_r+0x22>
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	42a3      	cmp	r3, r4
 800a156:	bf0c      	ite	eq
 800a158:	6032      	streq	r2, [r6, #0]
 800a15a:	605a      	strne	r2, [r3, #4]
 800a15c:	e7ec      	b.n	800a138 <_malloc_r+0xa0>
 800a15e:	4623      	mov	r3, r4
 800a160:	6864      	ldr	r4, [r4, #4]
 800a162:	e7b2      	b.n	800a0ca <_malloc_r+0x32>
 800a164:	4634      	mov	r4, r6
 800a166:	6876      	ldr	r6, [r6, #4]
 800a168:	e7b9      	b.n	800a0de <_malloc_r+0x46>
 800a16a:	230c      	movs	r3, #12
 800a16c:	603b      	str	r3, [r7, #0]
 800a16e:	4638      	mov	r0, r7
 800a170:	f000 f84c 	bl	800a20c <__malloc_unlock>
 800a174:	e7a1      	b.n	800a0ba <_malloc_r+0x22>
 800a176:	6025      	str	r5, [r4, #0]
 800a178:	e7de      	b.n	800a138 <_malloc_r+0xa0>
 800a17a:	bf00      	nop
 800a17c:	20000528 	.word	0x20000528

0800a180 <_realloc_r>:
 800a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	4680      	mov	r8, r0
 800a186:	4614      	mov	r4, r2
 800a188:	460e      	mov	r6, r1
 800a18a:	b921      	cbnz	r1, 800a196 <_realloc_r+0x16>
 800a18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a190:	4611      	mov	r1, r2
 800a192:	f7ff bf81 	b.w	800a098 <_malloc_r>
 800a196:	b92a      	cbnz	r2, 800a1a4 <_realloc_r+0x24>
 800a198:	f7ff ff12 	bl	8009fc0 <_free_r>
 800a19c:	4625      	mov	r5, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a4:	f000 f838 	bl	800a218 <_malloc_usable_size_r>
 800a1a8:	4284      	cmp	r4, r0
 800a1aa:	4607      	mov	r7, r0
 800a1ac:	d802      	bhi.n	800a1b4 <_realloc_r+0x34>
 800a1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1b2:	d812      	bhi.n	800a1da <_realloc_r+0x5a>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7ff ff6e 	bl	800a098 <_malloc_r>
 800a1bc:	4605      	mov	r5, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0ed      	beq.n	800a19e <_realloc_r+0x1e>
 800a1c2:	42bc      	cmp	r4, r7
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	bf28      	it	cs
 800a1ca:	463a      	movcs	r2, r7
 800a1cc:	f7ff fed0 	bl	8009f70 <memcpy>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	f7ff fef4 	bl	8009fc0 <_free_r>
 800a1d8:	e7e1      	b.n	800a19e <_realloc_r+0x1e>
 800a1da:	4635      	mov	r5, r6
 800a1dc:	e7df      	b.n	800a19e <_realloc_r+0x1e>
	...

0800a1e0 <_sbrk_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d06      	ldr	r5, [pc, #24]	; (800a1fc <_sbrk_r+0x1c>)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	f7f8 fcec 	bl	8002bc8 <_sbrk>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d102      	bne.n	800a1fa <_sbrk_r+0x1a>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	b103      	cbz	r3, 800a1fa <_sbrk_r+0x1a>
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
 800a1fc:	20000530 	.word	0x20000530

0800a200 <__malloc_lock>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__malloc_lock+0x8>)
 800a202:	f000 b811 	b.w	800a228 <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	20000534 	.word	0x20000534

0800a20c <__malloc_unlock>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__malloc_unlock+0x8>)
 800a20e:	f000 b80c 	b.w	800a22a <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	20000534 	.word	0x20000534

0800a218 <_malloc_usable_size_r>:
 800a218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a21c:	1f18      	subs	r0, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbc      	itt	lt
 800a222:	580b      	ldrlt	r3, [r1, r0]
 800a224:	18c0      	addlt	r0, r0, r3
 800a226:	4770      	bx	lr

0800a228 <__retarget_lock_acquire_recursive>:
 800a228:	4770      	bx	lr

0800a22a <__retarget_lock_release_recursive>:
 800a22a:	4770      	bx	lr

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
