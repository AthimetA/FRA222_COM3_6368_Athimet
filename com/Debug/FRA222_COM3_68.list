
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ec  080076ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080076ec  080076ec  000176ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076f4  080076f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080076fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000080  08007778  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08007778  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012921  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b8  00000000  00000000  000329cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171dd  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c2d  00000000  00000000  0004def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a01  00000000  00000000  00061b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  000f4574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007300 	.word	0x08007300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007300 	.word	0x08007300

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 fb72 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f818 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f930 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f904 	bl	80007b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f87a 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005ac:	f000 f8a6 	bl	80006fc <MX_SPI3_Init>
  MX_TIM11_Init();
 80005b0:	f000 f8da 	bl	8000768 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f001 fbd4 	bl	8001d64 <HAL_Delay>
  MCP23017SetInit();
 80005bc:	f001 f858 	bl	8001670 <MCP23017SetInit>
  HAL_TIM_Base_Start_IT(&htim11);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <main+0x38>)
 80005c2:	f004 ff5f 	bl	8005484 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 80005c6:	f000 f9a3 	bl	8000910 <StateMachineManagment>
 80005ca:	e7fc      	b.n	80005c6 <main+0x32>
 80005cc:	20000148 	.word	0x20000148

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fa18 	bl	8006a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a26      	ldr	r2, [pc, #152]	; (8000698 <SystemClock_Config+0xc8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xcc>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fe89 	bl	800436c <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f001 f8f2 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2103      	movs	r1, #3
 8000680:	4618      	mov	r0, r3
 8000682:	f004 f8eb 	bl	800485c <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800068c:	f001 f8dc 	bl	8001848 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f001 feb5 	bl	800244c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f001 f8ae 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	40005400 	.word	0x40005400
 80006f8:	00061a80 	.word	0x00061a80

080006fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI3_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI3_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI3_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI3_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI3_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI3_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI3_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI3_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI3_Init+0x64>)
 8000730:	2230      	movs	r2, #48	; 0x30
 8000732:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI3_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI3_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI3_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI3_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI3_Init+0x64>)
 800074e:	f004 faa5 	bl	8004c9c <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000758:	f001 f876 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000f0 	.word	0x200000f0
 8000764:	40003c00 	.word	0x40003c00

08000768 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM11_Init+0x40>)
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <MX_TIM11_Init+0x44>)
 8000770:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000774:	2263      	movs	r2, #99	; 0x63
 8000776:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_TIM11_Init+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000784:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM11_Init+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000794:	f004 fe26 	bl	80053e4 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800079e:	f001 f853 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000148 	.word	0x20000148
 80007ac:	40014800 	.word	0x40014800

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f005 f872 	bl	80058d0 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f001 f829 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000190 	.word	0x20000190
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xfc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <MX_GPIO_Init+0xfc>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	481d      	ldr	r0, [pc, #116]	; (8000904 <MX_GPIO_Init+0x100>)
 8000890:	f001 fdc2 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <MX_GPIO_Init+0x104>)
 800089c:	f001 fdbc 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_GPIO_Init+0x108>)
 80008b8:	f001 fc2a 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_GPIO_Init+0x100>)
 80008d4:	f001 fc1c 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x104>)
 80008f2:	f001 fc0d 	bl	8002110 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800

08000910 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 8000910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
	switch (MCState)
 8000918:	4bae      	ldr	r3, [pc, #696]	; (8000bd4 <StateMachineManagment+0x2c4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b05      	cmp	r3, #5
 800091e:	f200 8663 	bhi.w	80015e8 <StateMachineManagment+0xcd8>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <StateMachineManagment+0x18>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000941 	.word	0x08000941
 800092c:	080009fb 	.word	0x080009fb
 8000930:	08000c31 	.word	0x08000c31
 8000934:	080011d3 	.word	0x080011d3
 8000938:	08000b97 	.word	0x08000b97
 800093c:	08000b73 	.word	0x08000b73
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 8000940:	49a5      	ldr	r1, [pc, #660]	; (8000bd8 <StateMachineManagment+0x2c8>)
 8000942:	48a6      	ldr	r0, [pc, #664]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000944:	f006 f86e 	bl	8006a24 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000948:	48a4      	ldr	r0, [pc, #656]	; (8000bdc <StateMachineManagment+0x2cc>)
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	49a1      	ldr	r1, [pc, #644]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000958:	48a1      	ldr	r0, [pc, #644]	; (8000be0 <StateMachineManagment+0x2d0>)
 800095a:	f005 f806 	bl	800596a <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0b11001110);
 800095e:	4ba1      	ldr	r3, [pc, #644]	; (8000be4 <StateMachineManagment+0x2d4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4aa1      	ldr	r2, [pc, #644]	; (8000be8 <StateMachineManagment+0x2d8>)
 8000964:	7811      	ldrb	r1, [r2, #0]
 8000966:	22ce      	movs	r2, #206	; 0xce
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fe59 	bl	8001620 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 800096e:	4b9f      	ldr	r3, [pc, #636]	; (8000bec <StateMachineManagment+0x2dc>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8000974:	4b9e      	ldr	r3, [pc, #632]	; (8000bf0 <StateMachineManagment+0x2e0>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 800097a:	4b9e      	ldr	r3, [pc, #632]	; (8000bf4 <StateMachineManagment+0x2e4>)
 800097c:	2200      	movs	r2, #0
 800097e:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8000980:	4b9c      	ldr	r3, [pc, #624]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000982:	2200      	movs	r2, #0
 8000984:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 8000986:	4b9b      	ldr	r3, [pc, #620]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000988:	2200      	movs	r2, #0
 800098a:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 800098c:	4b99      	ldr	r3, [pc, #612]	; (8000bf4 <StateMachineManagment+0x2e4>)
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 8000992:	4b99      	ldr	r3, [pc, #612]	; (8000bf8 <StateMachineManagment+0x2e8>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8000998:	4b98      	ldr	r3, [pc, #608]	; (8000bfc <StateMachineManagment+0x2ec>)
 800099a:	2203      	movs	r2, #3
 800099c:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 800099e:	4b97      	ldr	r3, [pc, #604]	; (8000bfc <StateMachineManagment+0x2ec>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	220a      	movs	r2, #10
 80009a4:	4619      	mov	r1, r3
 80009a6:	4896      	ldr	r0, [pc, #600]	; (8000c00 <StateMachineManagment+0x2f0>)
 80009a8:	f000 feb6 	bl	8001718 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f001 f9d9 	bl	8001d64 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 80009b2:	4b93      	ldr	r3, [pc, #588]	; (8000c00 <StateMachineManagment+0x2f0>)
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	4b8f      	ldr	r3, [pc, #572]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009b8:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 80009ba:	4b91      	ldr	r3, [pc, #580]	; (8000c00 <StateMachineManagment+0x2f0>)
 80009bc:	785a      	ldrb	r2, [r3, #1]
 80009be:	4b8d      	ldr	r3, [pc, #564]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009c0:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 80009c2:	4b8f      	ldr	r3, [pc, #572]	; (8000c00 <StateMachineManagment+0x2f0>)
 80009c4:	789a      	ldrb	r2, [r3, #2]
 80009c6:	4b8b      	ldr	r3, [pc, #556]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009c8:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 80009ca:	4b8d      	ldr	r3, [pc, #564]	; (8000c00 <StateMachineManagment+0x2f0>)
 80009cc:	789a      	ldrb	r2, [r3, #2]
 80009ce:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009d0:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 80009d2:	4b88      	ldr	r3, [pc, #544]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009d4:	78da      	ldrb	r2, [r3, #3]
 80009d6:	4b87      	ldr	r3, [pc, #540]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009d8:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 80009da:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009dc:	791a      	ldrb	r2, [r3, #4]
 80009de:	4b85      	ldr	r3, [pc, #532]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009e0:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 80009e2:	4b84      	ldr	r3, [pc, #528]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009e4:	795a      	ldrb	r2, [r3, #5]
 80009e6:	4b83      	ldr	r3, [pc, #524]	; (8000bf4 <StateMachineManagment+0x2e4>)
 80009e8:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 80009ea:	4b86      	ldr	r3, [pc, #536]	; (8000c04 <StateMachineManagment+0x2f4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80009f0:	4b78      	ldr	r3, [pc, #480]	; (8000bd4 <StateMachineManagment+0x2c4>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
			break;
 80009f6:	f000 bdf7 	b.w	80015e8 <StateMachineManagment+0xcd8>
		case StanBy:
			// Header
			if(flagUART == 0){
 80009fa:	4b82      	ldr	r3, [pc, #520]	; (8000c04 <StateMachineManagment+0x2f4>)
 80009fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d15c      	bne.n	8000abe <StateMachineManagment+0x1ae>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000a04:	4980      	ldr	r1, [pc, #512]	; (8000c08 <StateMachineManagment+0x2f8>)
 8000a06:	4875      	ldr	r0, [pc, #468]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a08:	f006 f80c 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a0c:	4873      	ldr	r0, [pc, #460]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a0e:	f7ff fbe7 	bl	80001e0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	4970      	ldr	r1, [pc, #448]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a1c:	4870      	ldr	r0, [pc, #448]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a1e:	f004 ffa4 	bl	800596a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 8000a22:	497a      	ldr	r1, [pc, #488]	; (8000c0c <StateMachineManagment+0x2fc>)
 8000a24:	486d      	ldr	r0, [pc, #436]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a26:	f005 fffd 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a2a:	486c      	ldr	r0, [pc, #432]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a2c:	f7ff fbd8 	bl	80001e0 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	4968      	ldr	r1, [pc, #416]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a3a:	4869      	ldr	r0, [pc, #420]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a3c:	f004 ff95 	bl	800596a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8000a40:	4973      	ldr	r1, [pc, #460]	; (8000c10 <StateMachineManagment+0x300>)
 8000a42:	4866      	ldr	r0, [pc, #408]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a44:	f005 ffee 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a48:	4864      	ldr	r0, [pc, #400]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a4a:	f7ff fbc9 	bl	80001e0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	4961      	ldr	r1, [pc, #388]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a58:	4861      	ldr	r0, [pc, #388]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a5a:	f004 ff86 	bl	800596a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 2 for Choosing Destination Station\r\n");
 8000a5e:	496d      	ldr	r1, [pc, #436]	; (8000c14 <StateMachineManagment+0x304>)
 8000a60:	485e      	ldr	r0, [pc, #376]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a62:	f005 ffdf 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a66:	485d      	ldr	r0, [pc, #372]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a68:	f7ff fbba 	bl	80001e0 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	4959      	ldr	r1, [pc, #356]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a76:	485a      	ldr	r0, [pc, #360]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a78:	f004 ff77 	bl	800596a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 3 for EEPROM READ\r\n");
 8000a7c:	4966      	ldr	r1, [pc, #408]	; (8000c18 <StateMachineManagment+0x308>)
 8000a7e:	4857      	ldr	r0, [pc, #348]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a80:	f005 ffd0 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a84:	4855      	ldr	r0, [pc, #340]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a86:	f7ff fbab 	bl	80001e0 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	4952      	ldr	r1, [pc, #328]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a94:	4852      	ldr	r0, [pc, #328]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a96:	f004 ff68 	bl	800596a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000a9a:	495b      	ldr	r1, [pc, #364]	; (8000c08 <StateMachineManagment+0x2f8>)
 8000a9c:	484f      	ldr	r0, [pc, #316]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000a9e:	f005 ffc1 	bl	8006a24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000aa2:	484e      	ldr	r0, [pc, #312]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000aa4:	f7ff fb9c 	bl	80001e0 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	494a      	ldr	r1, [pc, #296]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000ab2:	484b      	ldr	r0, [pc, #300]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000ab4:	f004 ff59 	bl	800596a <HAL_UART_Transmit>
				flagUART = 1;
 8000ab8:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4956      	ldr	r1, [pc, #344]	; (8000c1c <StateMachineManagment+0x30c>)
 8000ac2:	4847      	ldr	r0, [pc, #284]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000ac4:	f004 ffe3 	bl	8005a8e <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 8000ac8:	f000 fe4e 	bl	8001768 <UARTRecieveIT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <StateMachineManagment+0x310>)
 8000ad2:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <StateMachineManagment+0x310>)
 8000ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ade:	f000 857e 	beq.w	80015de <StateMachineManagment+0xcce>
			{
				if(inputchar == '1')
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <StateMachineManagment+0x310>)
 8000ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae8:	2b31      	cmp	r3, #49	; 0x31
 8000aea:	d107      	bne.n	8000afc <StateMachineManagment+0x1ec>
				{
					flagUART = 0;
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 8000af8:	f000 bd71 	b.w	80015de <StateMachineManagment+0xcce>
				else if(inputchar == '2')
 8000afc:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <StateMachineManagment+0x310>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	2b32      	cmp	r3, #50	; 0x32
 8000b04:	d107      	bne.n	8000b16 <StateMachineManagment+0x206>
					flagUART = 0;
 8000b06:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	701a      	strb	r2, [r3, #0]
			break;
 8000b12:	f000 bd64 	b.w	80015de <StateMachineManagment+0xcce>
				else if(inputchar == '3')
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <StateMachineManagment+0x310>)
 8000b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1c:	2b33      	cmp	r3, #51	; 0x33
 8000b1e:	d107      	bne.n	8000b30 <StateMachineManagment+0x220>
					flagUART = 0;
 8000b20:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	701a      	strb	r2, [r3, #0]
			break;
 8000b2c:	f000 bd57 	b.w	80015de <StateMachineManagment+0xcce>
				else if(inputchar == '4')
 8000b30:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <StateMachineManagment+0x310>)
 8000b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b36:	2b34      	cmp	r3, #52	; 0x34
 8000b38:	d107      	bne.n	8000b4a <StateMachineManagment+0x23a>
					flagUART = 0;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
					MCState = EEpromWriteState;
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	701a      	strb	r2, [r3, #0]
			break;
 8000b46:	f000 bd4a 	b.w	80015de <StateMachineManagment+0xcce>
					flagUART = 0;
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000b50:	4934      	ldr	r1, [pc, #208]	; (8000c24 <StateMachineManagment+0x314>)
 8000b52:	4822      	ldr	r0, [pc, #136]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b54:	f005 ff66 	bl	8006a24 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b5a:	f7ff fb41 	bl	80001e0 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b68:	481d      	ldr	r0, [pc, #116]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000b6a:	f004 fefe 	bl	800596a <HAL_UART_Transmit>
			break;
 8000b6e:	f000 bd36 	b.w	80015de <StateMachineManagment+0xcce>
		case EEpromReadState:
			eepromReadFlag = 1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <StateMachineManagment+0x2e8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <StateMachineManagment+0x2ec>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b82:	f000 fdc9 	bl	8001718 <EEPROMReadFcn>
			flagUART = 0;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			break;
 8000b92:	f000 bd29 	b.w	80015e8 <StateMachineManagment+0xcd8>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <StateMachineManagment+0x318>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000b9e:	78da      	ldrb	r2, [r3, #3]
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <StateMachineManagment+0x31c>)
 8000ba2:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000ba6:	791a      	ldrb	r2, [r3, #4]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <StateMachineManagment+0x31c>)
 8000baa:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000bae:	795a      	ldrb	r2, [r3, #5]
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <StateMachineManagment+0x31c>)
 8000bb2:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <StateMachineManagment+0x2ec>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	220a      	movs	r2, #10
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <StateMachineManagment+0x31c>)
 8000bbe:	f000 fd83 	bl	80016c8 <EEPROMWriteFcn>
			flagUART = 0;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <StateMachineManagment+0x2c4>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	f000 bd0b 	b.w	80015e8 <StateMachineManagment+0xcd8>
 8000bd2:	bf00      	nop
 8000bd4:	200001ef 	.word	0x200001ef
 8000bd8:	08007318 	.word	0x08007318
 8000bdc:	200001f4 	.word	0x200001f4
 8000be0:	20000190 	.word	0x20000190
 8000be4:	20000004 	.word	0x20000004
 8000be8:	20000005 	.word	0x20000005
 8000bec:	200001f0 	.word	0x200001f0
 8000bf0:	200001f1 	.word	0x200001f1
 8000bf4:	200001e8 	.word	0x200001e8
 8000bf8:	20000239 	.word	0x20000239
 8000bfc:	20000002 	.word	0x20000002
 8000c00:	2000023c 	.word	0x2000023c
 8000c04:	20000234 	.word	0x20000234
 8000c08:	08007330 	.word	0x08007330
 8000c0c:	08007350 	.word	0x08007350
 8000c10:	08007368 	.word	0x08007368
 8000c14:	08007390 	.word	0x08007390
 8000c18:	080073c0 	.word	0x080073c0
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000236 	.word	0x20000236
 8000c24:	080073dc 	.word	0x080073dc
 8000c28:	20000238 	.word	0x20000238
 8000c2c:	20000240 	.word	0x20000240
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 8000c30:	4b91      	ldr	r3, [pc, #580]	; (8000e78 <StateMachineManagment+0x568>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	f000 81f8 	beq.w	800102a <StateMachineManagment+0x71a>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	f300 84d1 	bgt.w	80015e2 <StateMachineManagment+0xcd2>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <StateMachineManagment+0x33e>
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f000 813f 	beq.w	8000ec8 <StateMachineManagment+0x5b8>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 8000c4a:	f000 bcca 	b.w	80015e2 <StateMachineManagment+0xcd2>
					if(flagUART == 0){
 8000c4e:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <StateMachineManagment+0x56c>)
 8000c50:	f993 3000 	ldrsb.w	r3, [r3]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 8094 	bne.w	8000d82 <StateMachineManagment+0x472>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c5a:	4989      	ldr	r1, [pc, #548]	; (8000e80 <StateMachineManagment+0x570>)
 8000c5c:	4889      	ldr	r0, [pc, #548]	; (8000e84 <StateMachineManagment+0x574>)
 8000c5e:	f005 fee1 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c62:	4888      	ldr	r0, [pc, #544]	; (8000e84 <StateMachineManagment+0x574>)
 8000c64:	f7ff fabc 	bl	80001e0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	4984      	ldr	r1, [pc, #528]	; (8000e84 <StateMachineManagment+0x574>)
 8000c72:	4885      	ldr	r0, [pc, #532]	; (8000e88 <StateMachineManagment+0x578>)
 8000c74:	f004 fe79 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8000c78:	4984      	ldr	r1, [pc, #528]	; (8000e8c <StateMachineManagment+0x57c>)
 8000c7a:	4882      	ldr	r0, [pc, #520]	; (8000e84 <StateMachineManagment+0x574>)
 8000c7c:	f005 fed2 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c80:	4880      	ldr	r0, [pc, #512]	; (8000e84 <StateMachineManagment+0x574>)
 8000c82:	f7ff faad 	bl	80001e0 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	497d      	ldr	r1, [pc, #500]	; (8000e84 <StateMachineManagment+0x574>)
 8000c90:	487d      	ldr	r0, [pc, #500]	; (8000e88 <StateMachineManagment+0x578>)
 8000c92:	f004 fe6a 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000c96:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <StateMachineManagment+0x580>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <StateMachineManagment+0x580>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	497c      	ldr	r1, [pc, #496]	; (8000e94 <StateMachineManagment+0x584>)
 8000ca2:	4878      	ldr	r0, [pc, #480]	; (8000e84 <StateMachineManagment+0x574>)
 8000ca4:	f005 febe 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ca8:	4876      	ldr	r0, [pc, #472]	; (8000e84 <StateMachineManagment+0x574>)
 8000caa:	f7ff fa99 	bl	80001e0 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	4973      	ldr	r1, [pc, #460]	; (8000e84 <StateMachineManagment+0x574>)
 8000cb8:	4873      	ldr	r0, [pc, #460]	; (8000e88 <StateMachineManagment+0x578>)
 8000cba:	f004 fe56 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000cbe:	4b74      	ldr	r3, [pc, #464]	; (8000e90 <StateMachineManagment+0x580>)
 8000cc0:	799b      	ldrb	r3, [r3, #6]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <StateMachineManagment+0x580>)
 8000cc6:	795b      	ldrb	r3, [r3, #5]
 8000cc8:	4973      	ldr	r1, [pc, #460]	; (8000e98 <StateMachineManagment+0x588>)
 8000cca:	486e      	ldr	r0, [pc, #440]	; (8000e84 <StateMachineManagment+0x574>)
 8000ccc:	f005 feaa 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cd0:	486c      	ldr	r0, [pc, #432]	; (8000e84 <StateMachineManagment+0x574>)
 8000cd2:	f7ff fa85 	bl	80001e0 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	4969      	ldr	r1, [pc, #420]	; (8000e84 <StateMachineManagment+0x574>)
 8000ce0:	4869      	ldr	r0, [pc, #420]	; (8000e88 <StateMachineManagment+0x578>)
 8000ce2:	f004 fe42 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8000ce6:	496d      	ldr	r1, [pc, #436]	; (8000e9c <StateMachineManagment+0x58c>)
 8000ce8:	4866      	ldr	r0, [pc, #408]	; (8000e84 <StateMachineManagment+0x574>)
 8000cea:	f005 fe9b 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cee:	4865      	ldr	r0, [pc, #404]	; (8000e84 <StateMachineManagment+0x574>)
 8000cf0:	f7ff fa76 	bl	80001e0 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	4961      	ldr	r1, [pc, #388]	; (8000e84 <StateMachineManagment+0x574>)
 8000cfe:	4862      	ldr	r0, [pc, #392]	; (8000e88 <StateMachineManagment+0x578>)
 8000d00:	f004 fe33 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8000d04:	4966      	ldr	r1, [pc, #408]	; (8000ea0 <StateMachineManagment+0x590>)
 8000d06:	485f      	ldr	r0, [pc, #380]	; (8000e84 <StateMachineManagment+0x574>)
 8000d08:	f005 fe8c 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d0c:	485d      	ldr	r0, [pc, #372]	; (8000e84 <StateMachineManagment+0x574>)
 8000d0e:	f7ff fa67 	bl	80001e0 <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	495a      	ldr	r1, [pc, #360]	; (8000e84 <StateMachineManagment+0x574>)
 8000d1c:	485a      	ldr	r0, [pc, #360]	; (8000e88 <StateMachineManagment+0x578>)
 8000d1e:	f004 fe24 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 8000d22:	4960      	ldr	r1, [pc, #384]	; (8000ea4 <StateMachineManagment+0x594>)
 8000d24:	4857      	ldr	r0, [pc, #348]	; (8000e84 <StateMachineManagment+0x574>)
 8000d26:	f005 fe7d 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d2a:	4856      	ldr	r0, [pc, #344]	; (8000e84 <StateMachineManagment+0x574>)
 8000d2c:	f7ff fa58 	bl	80001e0 <strlen>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	4952      	ldr	r1, [pc, #328]	; (8000e84 <StateMachineManagment+0x574>)
 8000d3a:	4853      	ldr	r0, [pc, #332]	; (8000e88 <StateMachineManagment+0x578>)
 8000d3c:	f004 fe15 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8000d40:	4959      	ldr	r1, [pc, #356]	; (8000ea8 <StateMachineManagment+0x598>)
 8000d42:	4850      	ldr	r0, [pc, #320]	; (8000e84 <StateMachineManagment+0x574>)
 8000d44:	f005 fe6e 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d48:	484e      	ldr	r0, [pc, #312]	; (8000e84 <StateMachineManagment+0x574>)
 8000d4a:	f7ff fa49 	bl	80001e0 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	494b      	ldr	r1, [pc, #300]	; (8000e84 <StateMachineManagment+0x574>)
 8000d58:	484b      	ldr	r0, [pc, #300]	; (8000e88 <StateMachineManagment+0x578>)
 8000d5a:	f004 fe06 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000d5e:	4948      	ldr	r1, [pc, #288]	; (8000e80 <StateMachineManagment+0x570>)
 8000d60:	4848      	ldr	r0, [pc, #288]	; (8000e84 <StateMachineManagment+0x574>)
 8000d62:	f005 fe5f 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d66:	4847      	ldr	r0, [pc, #284]	; (8000e84 <StateMachineManagment+0x574>)
 8000d68:	f7ff fa3a 	bl	80001e0 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d74:	4943      	ldr	r1, [pc, #268]	; (8000e84 <StateMachineManagment+0x574>)
 8000d76:	4844      	ldr	r0, [pc, #272]	; (8000e88 <StateMachineManagment+0x578>)
 8000d78:	f004 fdf7 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 8000d7c:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <StateMachineManagment+0x56c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000d82:	2202      	movs	r2, #2
 8000d84:	4949      	ldr	r1, [pc, #292]	; (8000eac <StateMachineManagment+0x59c>)
 8000d86:	4840      	ldr	r0, [pc, #256]	; (8000e88 <StateMachineManagment+0x578>)
 8000d88:	f004 fe81 	bl	8005a8e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000d8c:	f000 fcec 	bl	8001768 <UARTRecieveIT>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000d96:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000d98:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	f000 8210 	beq.w	80011c6 <StateMachineManagment+0x8b6>
						if(inputchar == 'x')
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dac:	2b78      	cmp	r3, #120	; 0x78
 8000dae:	d10e      	bne.n	8000dce <StateMachineManagment+0x4be>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <StateMachineManagment+0x580>)
 8000db2:	78da      	ldrb	r2, [r3, #3]
 8000db4:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <StateMachineManagment+0x580>)
 8000db6:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <StateMachineManagment+0x580>)
 8000dba:	791a      	ldrb	r2, [r3, #4]
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <StateMachineManagment+0x580>)
 8000dbe:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <StateMachineManagment+0x56c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <StateMachineManagment+0x5a4>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
					break;
 8000dcc:	e1fb      	b.n	80011c6 <StateMachineManagment+0x8b6>
						else if(inputchar == '1')
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	2b31      	cmp	r3, #49	; 0x31
 8000dd6:	d106      	bne.n	8000de6 <StateMachineManagment+0x4d6>
							flagUART = 0;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <StateMachineManagment+0x56c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <StateMachineManagment+0x568>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
					break;
 8000de4:	e1ef      	b.n	80011c6 <StateMachineManagment+0x8b6>
						else if(inputchar == '2')
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	2b32      	cmp	r3, #50	; 0x32
 8000dee:	d106      	bne.n	8000dfe <StateMachineManagment+0x4ee>
							flagUART = 0;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <StateMachineManagment+0x56c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <StateMachineManagment+0x568>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
					break;
 8000dfc:	e1e3      	b.n	80011c6 <StateMachineManagment+0x8b6>
						else if(inputchar == 's')
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <StateMachineManagment+0x5a0>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	2b73      	cmp	r3, #115	; 0x73
 8000e06:	d124      	bne.n	8000e52 <StateMachineManagment+0x542>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <StateMachineManagment+0x580>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <StateMachineManagment+0x580>)
 8000e0e:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <StateMachineManagment+0x580>)
 8000e12:	785a      	ldrb	r2, [r3, #1]
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <StateMachineManagment+0x580>)
 8000e16:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <StateMachineManagment+0x5a8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <StateMachineManagment+0x580>)
 8000e20:	78da      	ldrb	r2, [r3, #3]
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <StateMachineManagment+0x5ac>)
 8000e24:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <StateMachineManagment+0x580>)
 8000e28:	791a      	ldrb	r2, [r3, #4]
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <StateMachineManagment+0x5ac>)
 8000e2c:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <StateMachineManagment+0x580>)
 8000e30:	795a      	ldrb	r2, [r3, #5]
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <StateMachineManagment+0x5ac>)
 8000e34:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <StateMachineManagment+0x5b0>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481f      	ldr	r0, [pc, #124]	; (8000ebc <StateMachineManagment+0x5ac>)
 8000e40:	f000 fc42 	bl	80016c8 <EEPROMWriteFcn>
							flagUART = 0;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <StateMachineManagment+0x56c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <StateMachineManagment+0x5a4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
					break;
 8000e50:	e1b9      	b.n	80011c6 <StateMachineManagment+0x8b6>
							flagUART = 0;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <StateMachineManagment+0x56c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000e58:	491a      	ldr	r1, [pc, #104]	; (8000ec4 <StateMachineManagment+0x5b4>)
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <StateMachineManagment+0x574>)
 8000e5c:	f005 fde2 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <StateMachineManagment+0x574>)
 8000e62:	f7ff f9bd 	bl	80001e0 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	4905      	ldr	r1, [pc, #20]	; (8000e84 <StateMachineManagment+0x574>)
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <StateMachineManagment+0x578>)
 8000e72:	f004 fd7a 	bl	800596a <HAL_UART_Transmit>
					break;
 8000e76:	e1a6      	b.n	80011c6 <StateMachineManagment+0x8b6>
 8000e78:	200001f0 	.word	0x200001f0
 8000e7c:	20000234 	.word	0x20000234
 8000e80:	08007330 	.word	0x08007330
 8000e84:	200001f4 	.word	0x200001f4
 8000e88:	20000190 	.word	0x20000190
 8000e8c:	080073f4 	.word	0x080073f4
 8000e90:	200001e8 	.word	0x200001e8
 8000e94:	08007418 	.word	0x08007418
 8000e98:	0800744c 	.word	0x0800744c
 8000e9c:	08007474 	.word	0x08007474
 8000ea0:	08007498 	.word	0x08007498
 8000ea4:	080074bc 	.word	0x080074bc
 8000ea8:	080074d0 	.word	0x080074d0
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000236 	.word	0x20000236
 8000eb4:	200001ef 	.word	0x200001ef
 8000eb8:	20000238 	.word	0x20000238
 8000ebc:	20000240 	.word	0x20000240
 8000ec0:	20000002 	.word	0x20000002
 8000ec4:	080073dc 	.word	0x080073dc
					if(flagUART == 0){
 8000ec8:	4ba6      	ldr	r3, [pc, #664]	; (8001164 <StateMachineManagment+0x854>)
 8000eca:	f993 3000 	ldrsb.w	r3, [r3]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d13e      	bne.n	8000f50 <StateMachineManagment+0x640>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8000ed2:	49a5      	ldr	r1, [pc, #660]	; (8001168 <StateMachineManagment+0x858>)
 8000ed4:	48a5      	ldr	r0, [pc, #660]	; (800116c <StateMachineManagment+0x85c>)
 8000ed6:	f005 fda5 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000eda:	48a4      	ldr	r0, [pc, #656]	; (800116c <StateMachineManagment+0x85c>)
 8000edc:	f7ff f980 	bl	80001e0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	49a0      	ldr	r1, [pc, #640]	; (800116c <StateMachineManagment+0x85c>)
 8000eea:	48a1      	ldr	r0, [pc, #644]	; (8001170 <StateMachineManagment+0x860>)
 8000eec:	f004 fd3d 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8000ef0:	49a0      	ldr	r1, [pc, #640]	; (8001174 <StateMachineManagment+0x864>)
 8000ef2:	489e      	ldr	r0, [pc, #632]	; (800116c <StateMachineManagment+0x85c>)
 8000ef4:	f005 fd96 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ef8:	489c      	ldr	r0, [pc, #624]	; (800116c <StateMachineManagment+0x85c>)
 8000efa:	f7ff f971 	bl	80001e0 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	4999      	ldr	r1, [pc, #612]	; (800116c <StateMachineManagment+0x85c>)
 8000f08:	4899      	ldr	r0, [pc, #612]	; (8001170 <StateMachineManagment+0x860>)
 8000f0a:	f004 fd2e 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8000f0e:	499a      	ldr	r1, [pc, #616]	; (8001178 <StateMachineManagment+0x868>)
 8000f10:	4896      	ldr	r0, [pc, #600]	; (800116c <StateMachineManagment+0x85c>)
 8000f12:	f005 fd87 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f16:	4895      	ldr	r0, [pc, #596]	; (800116c <StateMachineManagment+0x85c>)
 8000f18:	f7ff f962 	bl	80001e0 <strlen>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	4991      	ldr	r1, [pc, #580]	; (800116c <StateMachineManagment+0x85c>)
 8000f26:	4892      	ldr	r0, [pc, #584]	; (8001170 <StateMachineManagment+0x860>)
 8000f28:	f004 fd1f 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8000f2c:	4993      	ldr	r1, [pc, #588]	; (800117c <StateMachineManagment+0x86c>)
 8000f2e:	488f      	ldr	r0, [pc, #572]	; (800116c <StateMachineManagment+0x85c>)
 8000f30:	f005 fd78 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f34:	488d      	ldr	r0, [pc, #564]	; (800116c <StateMachineManagment+0x85c>)
 8000f36:	f7ff f953 	bl	80001e0 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	498a      	ldr	r1, [pc, #552]	; (800116c <StateMachineManagment+0x85c>)
 8000f44:	488a      	ldr	r0, [pc, #552]	; (8001170 <StateMachineManagment+0x860>)
 8000f46:	f004 fd10 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 8000f4a:	4b86      	ldr	r3, [pc, #536]	; (8001164 <StateMachineManagment+0x854>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000f50:	2202      	movs	r2, #2
 8000f52:	498b      	ldr	r1, [pc, #556]	; (8001180 <StateMachineManagment+0x870>)
 8000f54:	4886      	ldr	r0, [pc, #536]	; (8001170 <StateMachineManagment+0x860>)
 8000f56:	f004 fd9a 	bl	8005a8e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000f5a:	f000 fc05 	bl	8001768 <UARTRecieveIT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b88      	ldr	r3, [pc, #544]	; (8001184 <StateMachineManagment+0x874>)
 8000f64:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000f66:	4b87      	ldr	r3, [pc, #540]	; (8001184 <StateMachineManagment+0x874>)
 8000f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	f000 812b 	beq.w	80011ca <StateMachineManagment+0x8ba>
						if(inputchar == 'x')
 8000f74:	4b83      	ldr	r3, [pc, #524]	; (8001184 <StateMachineManagment+0x874>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	2b78      	cmp	r3, #120	; 0x78
 8000f7c:	d106      	bne.n	8000f8c <StateMachineManagment+0x67c>
							flagUART = 0;
 8000f7e:	4b79      	ldr	r3, [pc, #484]	; (8001164 <StateMachineManagment+0x854>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8000f84:	4b80      	ldr	r3, [pc, #512]	; (8001188 <StateMachineManagment+0x878>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
					break;
 8000f8a:	e11e      	b.n	80011ca <StateMachineManagment+0x8ba>
						else if(inputchar == '+')
 8000f8c:	4b7d      	ldr	r3, [pc, #500]	; (8001184 <StateMachineManagment+0x874>)
 8000f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f92:	2b2b      	cmp	r3, #43	; 0x2b
 8000f94:	d118      	bne.n	8000fc8 <StateMachineManagment+0x6b8>
							Robot.WaitingTimeBuffer++;
 8000f96:	4b7d      	ldr	r3, [pc, #500]	; (800118c <StateMachineManagment+0x87c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <StateMachineManagment+0x87c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000fa2:	4b7a      	ldr	r3, [pc, #488]	; (800118c <StateMachineManagment+0x87c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4979      	ldr	r1, [pc, #484]	; (8001190 <StateMachineManagment+0x880>)
 8000faa:	4870      	ldr	r0, [pc, #448]	; (800116c <StateMachineManagment+0x85c>)
 8000fac:	f005 fd3a 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fb0:	486e      	ldr	r0, [pc, #440]	; (800116c <StateMachineManagment+0x85c>)
 8000fb2:	f7ff f915 	bl	80001e0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	496b      	ldr	r1, [pc, #428]	; (800116c <StateMachineManagment+0x85c>)
 8000fc0:	486b      	ldr	r0, [pc, #428]	; (8001170 <StateMachineManagment+0x860>)
 8000fc2:	f004 fcd2 	bl	800596a <HAL_UART_Transmit>
					break;
 8000fc6:	e100      	b.n	80011ca <StateMachineManagment+0x8ba>
						else if(inputchar == '-')
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <StateMachineManagment+0x874>)
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	2b2d      	cmp	r3, #45	; 0x2d
 8000fd0:	d118      	bne.n	8001004 <StateMachineManagment+0x6f4>
							Robot.WaitingTimeBuffer--;
 8000fd2:	4b6e      	ldr	r3, [pc, #440]	; (800118c <StateMachineManagment+0x87c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b6c      	ldr	r3, [pc, #432]	; (800118c <StateMachineManagment+0x87c>)
 8000fdc:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000fde:	4b6b      	ldr	r3, [pc, #428]	; (800118c <StateMachineManagment+0x87c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	496a      	ldr	r1, [pc, #424]	; (8001190 <StateMachineManagment+0x880>)
 8000fe6:	4861      	ldr	r0, [pc, #388]	; (800116c <StateMachineManagment+0x85c>)
 8000fe8:	f005 fd1c 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fec:	485f      	ldr	r0, [pc, #380]	; (800116c <StateMachineManagment+0x85c>)
 8000fee:	f7ff f8f7 	bl	80001e0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	495c      	ldr	r1, [pc, #368]	; (800116c <StateMachineManagment+0x85c>)
 8000ffc:	485c      	ldr	r0, [pc, #368]	; (8001170 <StateMachineManagment+0x860>)
 8000ffe:	f004 fcb4 	bl	800596a <HAL_UART_Transmit>
					break;
 8001002:	e0e2      	b.n	80011ca <StateMachineManagment+0x8ba>
							flagUART = 0;
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <StateMachineManagment+0x854>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800100a:	4962      	ldr	r1, [pc, #392]	; (8001194 <StateMachineManagment+0x884>)
 800100c:	4857      	ldr	r0, [pc, #348]	; (800116c <StateMachineManagment+0x85c>)
 800100e:	f005 fd09 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001012:	4856      	ldr	r0, [pc, #344]	; (800116c <StateMachineManagment+0x85c>)
 8001014:	f7ff f8e4 	bl	80001e0 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	4952      	ldr	r1, [pc, #328]	; (800116c <StateMachineManagment+0x85c>)
 8001022:	4853      	ldr	r0, [pc, #332]	; (8001170 <StateMachineManagment+0x860>)
 8001024:	f004 fca1 	bl	800596a <HAL_UART_Transmit>
					break;
 8001028:	e0cf      	b.n	80011ca <StateMachineManagment+0x8ba>
					if(flagUART == 0){
 800102a:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <StateMachineManagment+0x854>)
 800102c:	f993 3000 	ldrsb.w	r3, [r3]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13e      	bne.n	80010b2 <StateMachineManagment+0x7a2>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8001034:	4958      	ldr	r1, [pc, #352]	; (8001198 <StateMachineManagment+0x888>)
 8001036:	484d      	ldr	r0, [pc, #308]	; (800116c <StateMachineManagment+0x85c>)
 8001038:	f005 fcf4 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800103c:	484b      	ldr	r0, [pc, #300]	; (800116c <StateMachineManagment+0x85c>)
 800103e:	f7ff f8cf 	bl	80001e0 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	4948      	ldr	r1, [pc, #288]	; (800116c <StateMachineManagment+0x85c>)
 800104c:	4848      	ldr	r0, [pc, #288]	; (8001170 <StateMachineManagment+0x860>)
 800104e:	f004 fc8c 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001052:	4948      	ldr	r1, [pc, #288]	; (8001174 <StateMachineManagment+0x864>)
 8001054:	4845      	ldr	r0, [pc, #276]	; (800116c <StateMachineManagment+0x85c>)
 8001056:	f005 fce5 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <StateMachineManagment+0x85c>)
 800105c:	f7ff f8c0 	bl	80001e0 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	4940      	ldr	r1, [pc, #256]	; (800116c <StateMachineManagment+0x85c>)
 800106a:	4841      	ldr	r0, [pc, #260]	; (8001170 <StateMachineManagment+0x860>)
 800106c:	f004 fc7d 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001070:	4941      	ldr	r1, [pc, #260]	; (8001178 <StateMachineManagment+0x868>)
 8001072:	483e      	ldr	r0, [pc, #248]	; (800116c <StateMachineManagment+0x85c>)
 8001074:	f005 fcd6 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001078:	483c      	ldr	r0, [pc, #240]	; (800116c <StateMachineManagment+0x85c>)
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	4939      	ldr	r1, [pc, #228]	; (800116c <StateMachineManagment+0x85c>)
 8001088:	4839      	ldr	r0, [pc, #228]	; (8001170 <StateMachineManagment+0x860>)
 800108a:	f004 fc6e 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 800108e:	493b      	ldr	r1, [pc, #236]	; (800117c <StateMachineManagment+0x86c>)
 8001090:	4836      	ldr	r0, [pc, #216]	; (800116c <StateMachineManagment+0x85c>)
 8001092:	f005 fcc7 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001096:	4835      	ldr	r0, [pc, #212]	; (800116c <StateMachineManagment+0x85c>)
 8001098:	f7ff f8a2 	bl	80001e0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	4931      	ldr	r1, [pc, #196]	; (800116c <StateMachineManagment+0x85c>)
 80010a6:	4832      	ldr	r0, [pc, #200]	; (8001170 <StateMachineManagment+0x860>)
 80010a8:	f004 fc5f 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <StateMachineManagment+0x854>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80010b2:	2202      	movs	r2, #2
 80010b4:	4932      	ldr	r1, [pc, #200]	; (8001180 <StateMachineManagment+0x870>)
 80010b6:	482e      	ldr	r0, [pc, #184]	; (8001170 <StateMachineManagment+0x860>)
 80010b8:	f004 fce9 	bl	8005a8e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 80010bc:	f000 fb54 	bl	8001768 <UARTRecieveIT>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <StateMachineManagment+0x874>)
 80010c6:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <StateMachineManagment+0x874>)
 80010ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d2:	d07c      	beq.n	80011ce <StateMachineManagment+0x8be>
						if(inputchar == 'x')
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <StateMachineManagment+0x874>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b78      	cmp	r3, #120	; 0x78
 80010dc:	d106      	bne.n	80010ec <StateMachineManagment+0x7dc>
							flagUART = 0;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <StateMachineManagment+0x854>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <StateMachineManagment+0x878>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
					break;
 80010ea:	e070      	b.n	80011ce <StateMachineManagment+0x8be>
						else if(inputchar == '+')
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <StateMachineManagment+0x874>)
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	2b2b      	cmp	r3, #43	; 0x2b
 80010f4:	d118      	bne.n	8001128 <StateMachineManagment+0x818>
							Robot.OperationTimeBuffer++;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <StateMachineManagment+0x87c>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <StateMachineManagment+0x87c>)
 8001100:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <StateMachineManagment+0x87c>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	461a      	mov	r2, r3
 8001108:	4924      	ldr	r1, [pc, #144]	; (800119c <StateMachineManagment+0x88c>)
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <StateMachineManagment+0x85c>)
 800110c:	f005 fc8a 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001110:	4816      	ldr	r0, [pc, #88]	; (800116c <StateMachineManagment+0x85c>)
 8001112:	f7ff f865 	bl	80001e0 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	4913      	ldr	r1, [pc, #76]	; (800116c <StateMachineManagment+0x85c>)
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <StateMachineManagment+0x860>)
 8001122:	f004 fc22 	bl	800596a <HAL_UART_Transmit>
					break;
 8001126:	e052      	b.n	80011ce <StateMachineManagment+0x8be>
						else if(inputchar == '-')
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <StateMachineManagment+0x874>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	2b2d      	cmp	r3, #45	; 0x2d
 8001130:	d136      	bne.n	80011a0 <StateMachineManagment+0x890>
							Robot.OperationTimeBuffer--;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <StateMachineManagment+0x87c>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	3b01      	subs	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <StateMachineManagment+0x87c>)
 800113c:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <StateMachineManagment+0x87c>)
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	461a      	mov	r2, r3
 8001144:	4915      	ldr	r1, [pc, #84]	; (800119c <StateMachineManagment+0x88c>)
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <StateMachineManagment+0x85c>)
 8001148:	f005 fc6c 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <StateMachineManagment+0x85c>)
 800114e:	f7ff f847 	bl	80001e0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	4904      	ldr	r1, [pc, #16]	; (800116c <StateMachineManagment+0x85c>)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <StateMachineManagment+0x860>)
 800115e:	f004 fc04 	bl	800596a <HAL_UART_Transmit>
					break;
 8001162:	e034      	b.n	80011ce <StateMachineManagment+0x8be>
 8001164:	20000234 	.word	0x20000234
 8001168:	080074e4 	.word	0x080074e4
 800116c:	200001f4 	.word	0x200001f4
 8001170:	20000190 	.word	0x20000190
 8001174:	08007500 	.word	0x08007500
 8001178:	08007518 	.word	0x08007518
 800117c:	08007530 	.word	0x08007530
 8001180:	20000000 	.word	0x20000000
 8001184:	20000236 	.word	0x20000236
 8001188:	200001f0 	.word	0x200001f0
 800118c:	200001e8 	.word	0x200001e8
 8001190:	08007544 	.word	0x08007544
 8001194:	080073dc 	.word	0x080073dc
 8001198:	08007560 	.word	0x08007560
 800119c:	08007580 	.word	0x08007580
							flagUART = 0;
 80011a0:	4baa      	ldr	r3, [pc, #680]	; (800144c <StateMachineManagment+0xb3c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80011a6:	49aa      	ldr	r1, [pc, #680]	; (8001450 <StateMachineManagment+0xb40>)
 80011a8:	48aa      	ldr	r0, [pc, #680]	; (8001454 <StateMachineManagment+0xb44>)
 80011aa:	f005 fc3b 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011ae:	48a9      	ldr	r0, [pc, #676]	; (8001454 <StateMachineManagment+0xb44>)
 80011b0:	f7ff f816 	bl	80001e0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	49a5      	ldr	r1, [pc, #660]	; (8001454 <StateMachineManagment+0xb44>)
 80011be:	48a6      	ldr	r0, [pc, #664]	; (8001458 <StateMachineManagment+0xb48>)
 80011c0:	f004 fbd3 	bl	800596a <HAL_UART_Transmit>
					break;
 80011c4:	e003      	b.n	80011ce <StateMachineManagment+0x8be>
					break;
 80011c6:	bf00      	nop
 80011c8:	e20b      	b.n	80015e2 <StateMachineManagment+0xcd2>
					break;
 80011ca:	bf00      	nop
 80011cc:	e209      	b.n	80015e2 <StateMachineManagment+0xcd2>
					break;
 80011ce:	bf00      	nop
			break;
 80011d0:	e207      	b.n	80015e2 <StateMachineManagment+0xcd2>
		case StantionChoosing:
			switch (StantionChoosingState)
 80011d2:	4ba2      	ldr	r3, [pc, #648]	; (800145c <StateMachineManagment+0xb4c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	f200 8205 	bhi.w	80015e6 <StateMachineManagment+0xcd6>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <StateMachineManagment+0x8d4>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	08001413 	.word	0x08001413
 80011ec:	0800149d 	.word	0x0800149d
 80011f0:	08001531 	.word	0x08001531
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 80011f4:	4b95      	ldr	r3, [pc, #596]	; (800144c <StateMachineManagment+0xb3c>)
 80011f6:	f993 3000 	ldrsb.w	r3, [r3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d175      	bne.n	80012ea <StateMachineManagment+0x9da>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 80011fe:	4998      	ldr	r1, [pc, #608]	; (8001460 <StateMachineManagment+0xb50>)
 8001200:	4894      	ldr	r0, [pc, #592]	; (8001454 <StateMachineManagment+0xb44>)
 8001202:	f005 fc0f 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001206:	4893      	ldr	r0, [pc, #588]	; (8001454 <StateMachineManagment+0xb44>)
 8001208:	f7fe ffea 	bl	80001e0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	498f      	ldr	r1, [pc, #572]	; (8001454 <StateMachineManagment+0xb44>)
 8001216:	4890      	ldr	r0, [pc, #576]	; (8001458 <StateMachineManagment+0xb48>)
 8001218:	f004 fba7 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 800121c:	4b91      	ldr	r3, [pc, #580]	; (8001464 <StateMachineManagment+0xb54>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b90      	ldr	r3, [pc, #576]	; (8001464 <StateMachineManagment+0xb54>)
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	4990      	ldr	r1, [pc, #576]	; (8001468 <StateMachineManagment+0xb58>)
 8001228:	488a      	ldr	r0, [pc, #552]	; (8001454 <StateMachineManagment+0xb44>)
 800122a:	f005 fbfb 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800122e:	4889      	ldr	r0, [pc, #548]	; (8001454 <StateMachineManagment+0xb44>)
 8001230:	f7fe ffd6 	bl	80001e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	4985      	ldr	r1, [pc, #532]	; (8001454 <StateMachineManagment+0xb44>)
 800123e:	4886      	ldr	r0, [pc, #536]	; (8001458 <StateMachineManagment+0xb48>)
 8001240:	f004 fb93 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001244:	4b87      	ldr	r3, [pc, #540]	; (8001464 <StateMachineManagment+0xb54>)
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	461a      	mov	r2, r3
 800124a:	4b86      	ldr	r3, [pc, #536]	; (8001464 <StateMachineManagment+0xb54>)
 800124c:	795b      	ldrb	r3, [r3, #5]
 800124e:	4987      	ldr	r1, [pc, #540]	; (800146c <StateMachineManagment+0xb5c>)
 8001250:	4880      	ldr	r0, [pc, #512]	; (8001454 <StateMachineManagment+0xb44>)
 8001252:	f005 fbe7 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001256:	487f      	ldr	r0, [pc, #508]	; (8001454 <StateMachineManagment+0xb44>)
 8001258:	f7fe ffc2 	bl	80001e0 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	497b      	ldr	r1, [pc, #492]	; (8001454 <StateMachineManagment+0xb44>)
 8001266:	487c      	ldr	r0, [pc, #496]	; (8001458 <StateMachineManagment+0xb48>)
 8001268:	f004 fb7f 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 Station\r\n");
 800126c:	4980      	ldr	r1, [pc, #512]	; (8001470 <StateMachineManagment+0xb60>)
 800126e:	4879      	ldr	r0, [pc, #484]	; (8001454 <StateMachineManagment+0xb44>)
 8001270:	f005 fbd8 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001274:	4877      	ldr	r0, [pc, #476]	; (8001454 <StateMachineManagment+0xb44>)
 8001276:	f7fe ffb3 	bl	80001e0 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	4974      	ldr	r1, [pc, #464]	; (8001454 <StateMachineManagment+0xb44>)
 8001284:	4874      	ldr	r0, [pc, #464]	; (8001458 <StateMachineManagment+0xb48>)
 8001286:	f004 fb70 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 800128a:	497a      	ldr	r1, [pc, #488]	; (8001474 <StateMachineManagment+0xb64>)
 800128c:	4871      	ldr	r0, [pc, #452]	; (8001454 <StateMachineManagment+0xb44>)
 800128e:	f005 fbc9 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001292:	4870      	ldr	r0, [pc, #448]	; (8001454 <StateMachineManagment+0xb44>)
 8001294:	f7fe ffa4 	bl	80001e0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	496c      	ldr	r1, [pc, #432]	; (8001454 <StateMachineManagment+0xb44>)
 80012a2:	486d      	ldr	r0, [pc, #436]	; (8001458 <StateMachineManagment+0xb48>)
 80012a4:	f004 fb61 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type x to cancel\r\n");
 80012a8:	4973      	ldr	r1, [pc, #460]	; (8001478 <StateMachineManagment+0xb68>)
 80012aa:	486a      	ldr	r0, [pc, #424]	; (8001454 <StateMachineManagment+0xb44>)
 80012ac:	f005 fbba 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012b0:	4868      	ldr	r0, [pc, #416]	; (8001454 <StateMachineManagment+0xb44>)
 80012b2:	f7fe ff95 	bl	80001e0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	4965      	ldr	r1, [pc, #404]	; (8001454 <StateMachineManagment+0xb44>)
 80012c0:	4865      	ldr	r0, [pc, #404]	; (8001458 <StateMachineManagment+0xb48>)
 80012c2:	f004 fb52 	bl	800596a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type g to Start Operating\r\n");
 80012c6:	496d      	ldr	r1, [pc, #436]	; (800147c <StateMachineManagment+0xb6c>)
 80012c8:	4862      	ldr	r0, [pc, #392]	; (8001454 <StateMachineManagment+0xb44>)
 80012ca:	f005 fbab 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012ce:	4861      	ldr	r0, [pc, #388]	; (8001454 <StateMachineManagment+0xb44>)
 80012d0:	f7fe ff86 	bl	80001e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	495d      	ldr	r1, [pc, #372]	; (8001454 <StateMachineManagment+0xb44>)
 80012de:	485e      	ldr	r0, [pc, #376]	; (8001458 <StateMachineManagment+0xb48>)
 80012e0:	f004 fb43 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <StateMachineManagment+0xb3c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80012ea:	2202      	movs	r2, #2
 80012ec:	4964      	ldr	r1, [pc, #400]	; (8001480 <StateMachineManagment+0xb70>)
 80012ee:	485a      	ldr	r0, [pc, #360]	; (8001458 <StateMachineManagment+0xb48>)
 80012f0:	f004 fbcd 	bl	8005a8e <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80012f4:	2202      	movs	r2, #2
 80012f6:	4962      	ldr	r1, [pc, #392]	; (8001480 <StateMachineManagment+0xb70>)
 80012f8:	4857      	ldr	r0, [pc, #348]	; (8001458 <StateMachineManagment+0xb48>)
 80012fa:	f004 fbc8 	bl	8005a8e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 80012fe:	f000 fa33 	bl	8001768 <UARTRecieveIT>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <StateMachineManagment+0xb74>)
 8001308:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 800130a:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <StateMachineManagment+0xb74>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	f000 815d 	beq.w	80015d2 <StateMachineManagment+0xcc2>
					{
						if(inputchar == 'x')
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <StateMachineManagment+0xb74>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	2b78      	cmp	r3, #120	; 0x78
 8001320:	d10a      	bne.n	8001338 <StateMachineManagment+0xa28>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 8001322:	4b50      	ldr	r3, [pc, #320]	; (8001464 <StateMachineManagment+0xb54>)
 8001324:	795a      	ldrb	r2, [r3, #5]
 8001326:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <StateMachineManagment+0xb54>)
 8001328:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <StateMachineManagment+0xb3c>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <StateMachineManagment+0xb78>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 8001336:	e14c      	b.n	80015d2 <StateMachineManagment+0xcc2>
						else if(inputchar == '+')
 8001338:	4b52      	ldr	r3, [pc, #328]	; (8001484 <StateMachineManagment+0xb74>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	2b2b      	cmp	r3, #43	; 0x2b
 8001340:	d11f      	bne.n	8001382 <StateMachineManagment+0xa72>
							Robot.EndStationBuffer++;
 8001342:	4b48      	ldr	r3, [pc, #288]	; (8001464 <StateMachineManagment+0xb54>)
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	3301      	adds	r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <StateMachineManagment+0xb54>)
 800134c:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <StateMachineManagment+0xb54>)
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <StateMachineManagment+0xb54>)
 800135a:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <StateMachineManagment+0xb54>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	461a      	mov	r2, r3
 8001362:	494a      	ldr	r1, [pc, #296]	; (800148c <StateMachineManagment+0xb7c>)
 8001364:	483b      	ldr	r0, [pc, #236]	; (8001454 <StateMachineManagment+0xb44>)
 8001366:	f005 fb5d 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800136a:	483a      	ldr	r0, [pc, #232]	; (8001454 <StateMachineManagment+0xb44>)
 800136c:	f7fe ff38 	bl	80001e0 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	4936      	ldr	r1, [pc, #216]	; (8001454 <StateMachineManagment+0xb44>)
 800137a:	4837      	ldr	r0, [pc, #220]	; (8001458 <StateMachineManagment+0xb48>)
 800137c:	f004 faf5 	bl	800596a <HAL_UART_Transmit>
					break;
 8001380:	e127      	b.n	80015d2 <StateMachineManagment+0xcc2>
						else if(inputchar == '-')
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <StateMachineManagment+0xb74>)
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	2b2d      	cmp	r3, #45	; 0x2d
 800138a:	d11f      	bne.n	80013cc <StateMachineManagment+0xabc>
							Robot.EndStationBuffer--;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <StateMachineManagment+0xb54>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	3b01      	subs	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <StateMachineManagment+0xb54>)
 8001396:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <StateMachineManagment+0xb54>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <StateMachineManagment+0xb54>)
 80013a4:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <StateMachineManagment+0xb54>)
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <StateMachineManagment+0xb7c>)
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <StateMachineManagment+0xb44>)
 80013b0:	f005 fb38 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013b4:	4827      	ldr	r0, [pc, #156]	; (8001454 <StateMachineManagment+0xb44>)
 80013b6:	f7fe ff13 	bl	80001e0 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	4924      	ldr	r1, [pc, #144]	; (8001454 <StateMachineManagment+0xb44>)
 80013c4:	4824      	ldr	r0, [pc, #144]	; (8001458 <StateMachineManagment+0xb48>)
 80013c6:	f004 fad0 	bl	800596a <HAL_UART_Transmit>
					break;
 80013ca:	e102      	b.n	80015d2 <StateMachineManagment+0xcc2>
						else if(inputchar == 'g')
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <StateMachineManagment+0xb74>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	2b67      	cmp	r3, #103	; 0x67
 80013d4:	d10a      	bne.n	80013ec <StateMachineManagment+0xadc>
							Robot.EndStation = Robot.EndStationBuffer;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <StateMachineManagment+0xb54>)
 80013d8:	789a      	ldrb	r2, [r3, #2]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <StateMachineManagment+0xb54>)
 80013dc:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <StateMachineManagment+0xb3c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <StateMachineManagment+0xb4c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
					break;
 80013ea:	e0f2      	b.n	80015d2 <StateMachineManagment+0xcc2>
							flagUART = 0;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <StateMachineManagment+0xb3c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80013f2:	4917      	ldr	r1, [pc, #92]	; (8001450 <StateMachineManagment+0xb40>)
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <StateMachineManagment+0xb44>)
 80013f6:	f005 fb15 	bl	8006a24 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013fa:	4816      	ldr	r0, [pc, #88]	; (8001454 <StateMachineManagment+0xb44>)
 80013fc:	f7fe fef0 	bl	80001e0 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001408:	4912      	ldr	r1, [pc, #72]	; (8001454 <StateMachineManagment+0xb44>)
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <StateMachineManagment+0xb48>)
 800140c:	f004 faad 	bl	800596a <HAL_UART_Transmit>
					break;
 8001410:	e0df      	b.n	80015d2 <StateMachineManagment+0xcc2>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <StateMachineManagment+0xb80>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <StateMachineManagment+0xb54>)
 800141a:	78da      	ldrb	r2, [r3, #3]
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <StateMachineManagment+0xb84>)
 800141e:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <StateMachineManagment+0xb54>)
 8001422:	791a      	ldrb	r2, [r3, #4]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <StateMachineManagment+0xb84>)
 8001426:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <StateMachineManagment+0xb54>)
 800142a:	795a      	ldrb	r2, [r3, #5]
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <StateMachineManagment+0xb84>)
 800142e:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <StateMachineManagment+0xb88>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	220a      	movs	r2, #10
 8001436:	4619      	mov	r1, r3
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <StateMachineManagment+0xb84>)
 800143a:	f000 f945 	bl	80016c8 <EEPROMWriteFcn>
					flagUART = 0;
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <StateMachineManagment+0xb3c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <StateMachineManagment+0xb4c>)
 8001446:	2202      	movs	r2, #2
 8001448:	701a      	strb	r2, [r3, #0]
					break;
 800144a:	e0c7      	b.n	80015dc <StateMachineManagment+0xccc>
 800144c:	20000234 	.word	0x20000234
 8001450:	080073dc 	.word	0x080073dc
 8001454:	200001f4 	.word	0x200001f4
 8001458:	20000190 	.word	0x20000190
 800145c:	200001f1 	.word	0x200001f1
 8001460:	080075a4 	.word	0x080075a4
 8001464:	200001e8 	.word	0x200001e8
 8001468:	08007418 	.word	0x08007418
 800146c:	0800744c 	.word	0x0800744c
 8001470:	080075cc 	.word	0x080075cc
 8001474:	080075e8 	.word	0x080075e8
 8001478:	08007604 	.word	0x08007604
 800147c:	0800761c 	.word	0x0800761c
 8001480:	20000000 	.word	0x20000000
 8001484:	20000236 	.word	0x20000236
 8001488:	200001ef 	.word	0x200001ef
 800148c:	0800763c 	.word	0x0800763c
 8001490:	20000238 	.word	0x20000238
 8001494:	20000240 	.word	0x20000240
 8001498:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <StateMachineManagment+0xce4>)
 800149e:	f993 3000 	ldrsb.w	r3, [r3]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d123      	bne.n	80014ee <StateMachineManagment+0xbde>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 80014a6:	4954      	ldr	r1, [pc, #336]	; (80015f8 <StateMachineManagment+0xce8>)
 80014a8:	4854      	ldr	r0, [pc, #336]	; (80015fc <StateMachineManagment+0xcec>)
 80014aa:	f005 fabb 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014ae:	4853      	ldr	r0, [pc, #332]	; (80015fc <StateMachineManagment+0xcec>)
 80014b0:	f7fe fe96 	bl	80001e0 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	494f      	ldr	r1, [pc, #316]	; (80015fc <StateMachineManagment+0xcec>)
 80014be:	4850      	ldr	r0, [pc, #320]	; (8001600 <StateMachineManagment+0xcf0>)
 80014c0:	f004 fa53 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <StateMachineManagment+0xce4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 80014ca:	f000 f999 	bl	8001800 <micros>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	494c      	ldr	r1, [pc, #304]	; (8001604 <StateMachineManagment+0xcf4>)
 80014d4:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <StateMachineManagment+0xcf8>)
 80014da:	7818      	ldrb	r0, [r3, #0]
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <StateMachineManagment+0xcfc>)
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <StateMachineManagment+0xd00>)
 80014e2:	799b      	ldrb	r3, [r3, #6]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f000 f899 	bl	8001620 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 80014ee:	f000 f987 	bl	8001800 <micros>
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <StateMachineManagment+0xcf4>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	ebb0 0802 	subs.w	r8, r0, r2
 80014fc:	eb61 0903 	sbc.w	r9, r1, r3
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <StateMachineManagment+0xd00>)
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	461a      	mov	r2, r3
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <StateMachineManagment+0xd04>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	17da      	asrs	r2, r3, #31
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001516:	460b      	mov	r3, r1
 8001518:	4543      	cmp	r3, r8
 800151a:	4613      	mov	r3, r2
 800151c:	eb73 0309 	sbcs.w	r3, r3, r9
 8001520:	d259      	bcs.n	80015d6 <StateMachineManagment+0xcc6>
					{
						flagUART = 0;
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <StateMachineManagment+0xce4>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <StateMachineManagment+0xd08>)
 800152a:	2203      	movs	r2, #3
 800152c:	701a      	strb	r2, [r3, #0]
					}

					break;
 800152e:	e052      	b.n	80015d6 <StateMachineManagment+0xcc6>
				case RobotOperatingPart2:
					if(flagUART == 0)
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <StateMachineManagment+0xce4>)
 8001532:	f993 3000 	ldrsb.w	r3, [r3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d123      	bne.n	8001582 <StateMachineManagment+0xc72>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 800153a:	4938      	ldr	r1, [pc, #224]	; (800161c <StateMachineManagment+0xd0c>)
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <StateMachineManagment+0xcec>)
 800153e:	f005 fa71 	bl	8006a24 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001542:	482e      	ldr	r0, [pc, #184]	; (80015fc <StateMachineManagment+0xcec>)
 8001544:	f7fe fe4c 	bl	80001e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001550:	492a      	ldr	r1, [pc, #168]	; (80015fc <StateMachineManagment+0xcec>)
 8001552:	482b      	ldr	r0, [pc, #172]	; (8001600 <StateMachineManagment+0xcf0>)
 8001554:	f004 fa09 	bl	800596a <HAL_UART_Transmit>
						flagUART = 1;
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <StateMachineManagment+0xce4>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 800155e:	f000 f94f 	bl	8001800 <micros>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4927      	ldr	r1, [pc, #156]	; (8001604 <StateMachineManagment+0xcf4>)
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <StateMachineManagment+0xcf8>)
 800156e:	7818      	ldrb	r0, [r3, #0]
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <StateMachineManagment+0xcfc>)
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <StateMachineManagment+0xd00>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	43db      	mvns	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f000 f84f 	bl	8001620 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 8001582:	f000 f93d 	bl	8001800 <micros>
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <StateMachineManagment+0xcf4>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	1a84      	subs	r4, r0, r2
 800158e:	eb61 0503 	sbc.w	r5, r1, r3
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <StateMachineManagment+0xd00>)
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <StateMachineManagment+0xd04>)
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	17da      	asrs	r2, r3, #31
 80015a0:	469a      	mov	sl, r3
 80015a2:	4693      	mov	fp, r2
 80015a4:	45a2      	cmp	sl, r4
 80015a6:	eb7b 0305 	sbcs.w	r3, fp, r5
 80015aa:	d216      	bcs.n	80015da <StateMachineManagment+0xcca>
					{
						Robot.StartStation = Robot.EndStation;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <StateMachineManagment+0xd00>)
 80015ae:	795a      	ldrb	r2, [r3, #5]
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <StateMachineManagment+0xd00>)
 80015b2:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <StateMachineManagment+0xce4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <StateMachineManagment+0xcf8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <StateMachineManagment+0xcfc>)
 80015c0:	7811      	ldrb	r1, [r2, #0]
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f82b 	bl	8001620 <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <StateMachineManagment+0xd08>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
					}

					break;
 80015d0:	e003      	b.n	80015da <StateMachineManagment+0xcca>
					break;
 80015d2:	bf00      	nop
 80015d4:	e007      	b.n	80015e6 <StateMachineManagment+0xcd6>
					break;
 80015d6:	bf00      	nop
 80015d8:	e005      	b.n	80015e6 <StateMachineManagment+0xcd6>
					break;
 80015da:	bf00      	nop
			}
			break;
 80015dc:	e003      	b.n	80015e6 <StateMachineManagment+0xcd6>
			break;
 80015de:	bf00      	nop
 80015e0:	e002      	b.n	80015e8 <StateMachineManagment+0xcd8>
			break;
 80015e2:	bf00      	nop
 80015e4:	e000      	b.n	80015e8 <StateMachineManagment+0xcd8>
			break;
 80015e6:	bf00      	nop
	}
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015f2:	bf00      	nop
 80015f4:	20000234 	.word	0x20000234
 80015f8:	08007658 	.word	0x08007658
 80015fc:	200001f4 	.word	0x200001f4
 8001600:	20000190 	.word	0x20000190
 8001604:	200001e0 	.word	0x200001e0
 8001608:	20000004 	.word	0x20000004
 800160c:	20000005 	.word	0x20000005
 8001610:	200001e8 	.word	0x200001e8
 8001614:	000f4240 	.word	0x000f4240
 8001618:	200001f1 	.word	0x200001f1
 800161c:	0800767c 	.word	0x0800767c

08001620 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	460b      	mov	r3, r1
 800162c:	71bb      	strb	r3, [r7, #6]
 800162e:	4613      	mov	r3, r2
 8001630:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <MCP23017SetOutput+0x44>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <MCP23017SetOutput+0x44>)
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <MCP23017SetOutput+0x44>)
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <MCP23017SetOutput+0x48>)
 800164c:	f000 fee4 	bl	8002418 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 8001650:	2203      	movs	r2, #3
 8001652:	4904      	ldr	r1, [pc, #16]	; (8001664 <MCP23017SetOutput+0x44>)
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MCP23017SetOutput+0x4c>)
 8001656:	f003 fbab 	bl	8004db0 <HAL_SPI_Transmit_IT>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000244 	.word	0x20000244
 8001668:	40020400 	.word	0x40020400
 800166c:	200000f0 	.word	0x200000f0

08001670 <MCP23017SetInit>:

void MCP23017SetInit()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MCP23017SetInit+0x20>)
 800167c:	f000 fecc 	bl	8002418 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 8001680:	2203      	movs	r2, #3
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <MCP23017SetInit+0x24>)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MCP23017SetInit+0x28>)
 8001686:	f003 fb93 	bl	8004db0 <HAL_SPI_Transmit_IT>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020400 	.word	0x40020400
 8001694:	20000008 	.word	0x20000008
 8001698:	200000f0 	.word	0x200000f0

0800169c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_SPI_TxCpltCallback+0x24>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d105      	bne.n	80016b8 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <HAL_SPI_TxCpltCallback+0x28>)
 80016b4:	f000 feb0 	bl	8002418 <HAL_GPIO_WritePin>
	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000f0 	.word	0x200000f0
 80016c4:	40020400 	.word	0x40020400

080016c8 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <EEPROMWriteFcn+0x48>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d012      	beq.n	8001706 <EEPROMWriteFcn+0x3e>
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <EEPROMWriteFcn+0x4c>)
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d10c      	bne.n	8001706 <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 80016ec:	883a      	ldrh	r2, [r7, #0]
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2310      	movs	r3, #16
 80016f8:	21a0      	movs	r1, #160	; 0xa0
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <EEPROMWriteFcn+0x4c>)
 80016fc:	f000 ffea 	bl	80026d4 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <EEPROMWriteFcn+0x48>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
	}
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000238 	.word	0x20000238
 8001714:	2000009c 	.word	0x2000009c

08001718 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <EEPROMReadFcn+0x48>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d012      	beq.n	8001756 <EEPROMReadFcn+0x3e>
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <EEPROMReadFcn+0x4c>)
 8001732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b20      	cmp	r3, #32
 800173a:	d10c      	bne.n	8001756 <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800173c:	883a      	ldrh	r2, [r7, #0]
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2310      	movs	r3, #16
 8001748:	21a0      	movs	r1, #160	; 0xa0
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <EEPROMReadFcn+0x4c>)
 800174c:	f001 f874 	bl	8002838 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <EEPROMReadFcn+0x48>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
	}
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000239 	.word	0x20000239
 8001764:	2000009c 	.word	0x2000009c

08001768 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <UARTRecieveIT+0x54>)
 8001776:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001778:	461a      	mov	r2, r3
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <UARTRecieveIT+0x54>)
 800177c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800177e:	b29b      	uxth	r3, r3
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <UARTRecieveIT+0x58>)
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	4293      	cmp	r3, r2
 8001788:	d010      	beq.n	80017ac <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <UARTRecieveIT+0x58>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <UARTRecieveIT+0x5c>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <UARTRecieveIT+0x58>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <UARTRecieveIT+0x54>)
 800179c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800179e:	fbb3 f1f2 	udiv	r1, r3, r2
 80017a2:	fb01 f202 	mul.w	r2, r1, r2
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <UARTRecieveIT+0x58>)
 80017aa:	6013      	str	r3, [r2, #0]
	}
	return data;
 80017ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000190 	.word	0x20000190
 80017c0:	20000248 	.word	0x20000248
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017c8:	b4b0      	push	{r4, r5, r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d10a      	bne.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e2:	1854      	adds	r4, r2, r1
 80017e4:	f143 0500 	adc.w	r5, r3, #0
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017ea:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bcb0      	pop	{r4, r5, r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000148 	.word	0x20000148
 80017fc:	200001d8 	.word	0x200001d8

08001800 <micros>:

uint64_t micros() {
 8001800:	b4b0      	push	{r4, r5, r7}
 8001802:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <micros+0x2c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	2200      	movs	r2, #0
 800180c:	4618      	mov	r0, r3
 800180e:	4611      	mov	r1, r2
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <micros+0x30>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	1884      	adds	r4, r0, r2
 8001818:	eb41 0503 	adc.w	r5, r1, r3
 800181c:	4622      	mov	r2, r4
 800181e:	462b      	mov	r3, r5
}
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	bcb0      	pop	{r4, r5, r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000148 	.word	0x20000148
 8001830:	200001d8 	.word	0x200001d8

08001834 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001892:	2007      	movs	r0, #7
 8001894:	f000 fb5a 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a21      	ldr	r2, [pc, #132]	; (8001948 <HAL_I2C_MspInit+0xa4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d13c      	bne.n	8001940 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_I2C_MspInit+0xa8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_I2C_MspInit+0xa8>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_I2C_MspInit+0xa8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f4:	2304      	movs	r3, #4
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <HAL_I2C_MspInit+0xac>)
 8001900:	f000 fc06 	bl	8002110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_I2C_MspInit+0xa8>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_I2C_MspInit+0xa8>)
 800190e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_I2C_MspInit+0xa8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	201f      	movs	r0, #31
 8001926:	f000 fb1c 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800192a:	201f      	movs	r0, #31
 800192c:	f000 fb35 	bl	8001f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2020      	movs	r0, #32
 8001936:	f000 fb14 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800193a:	2020      	movs	r0, #32
 800193c:	f000 fb2d 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40005400 	.word	0x40005400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_SPI_MspInit+0x94>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d133      	bne.n	80019de <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_SPI_MspInit+0x98>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <HAL_SPI_MspInit+0x98>)
 8001980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_SPI_MspInit+0x98>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_SPI_MspInit+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_SPI_MspInit+0x98>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_SPI_MspInit+0x98>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019ae:	2338      	movs	r3, #56	; 0x38
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019be:	2306      	movs	r3, #6
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_SPI_MspInit+0x9c>)
 80019ca:	f000 fba1 	bl	8002110 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2033      	movs	r0, #51	; 0x33
 80019d4:	f000 fac5 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80019d8:	2033      	movs	r0, #51	; 0x33
 80019da:	f000 fade 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40003c00 	.word	0x40003c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_TIM_Base_MspInit+0x48>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d115      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_Base_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_TIM_Base_MspInit+0x4c>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_TIM_Base_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201a      	movs	r0, #26
 8001a28:	f000 fa9b 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a2c:	201a      	movs	r0, #26
 8001a2e:	f000 fab4 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40014800 	.word	0x40014800
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_UART_MspInit+0x94>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d133      	bne.n	8001ace <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <HAL_UART_MspInit+0x9c>)
 8001aba:	f000 fb29 	bl	8002110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2026      	movs	r0, #38	; 0x26
 8001ac4:	f000 fa4d 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ac8:	2026      	movs	r0, #38	; 0x26
 8001aca:	f000 fa66 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8f8 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001b3e:	f003 fd03 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000148 	.word	0x20000148

08001b4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <I2C1_EV_IRQHandler+0x10>)
 8001b52:	f000 ff2f 	bl	80029b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000009c 	.word	0x2000009c

08001b60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <I2C1_ER_IRQHandler+0x10>)
 8001b66:	f001 f896 	bl	8002c96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000009c 	.word	0x2000009c

08001b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART2_IRQHandler+0x10>)
 8001b7a:	f003 ffb9 	bl	8005af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000190 	.word	0x20000190

08001b88 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <SPI3_IRQHandler+0x10>)
 8001b8e:	f003 f999 	bl	8004ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000f0 	.word	0x200000f0

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f004 fef8 	bl	80069c0 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	2000024c 	.word	0x2000024c
 8001c04:	20000268 	.word	0x20000268

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f004 feb7 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7fe fc99 	bl	8000594 <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c70:	080076fc 	.word	0x080076fc
  ldr r2, =_sbss
 8001c74:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c78:	20000264 	.word	0x20000264

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f94f 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fdce 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f967 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f92f 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000014 	.word	0x20000014
 8001d20:	20000010 	.word	0x20000010

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000014 	.word	0x20000014
 8001d48:	20000250 	.word	0x20000250

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000250 	.word	0x20000250

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000014 	.word	0x20000014

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff feb6 	bl	8001d4c <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d008      	beq.n	8002000 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e052      	b.n	80020a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0216 	bic.w	r2, r2, #22
 800200e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <HAL_DMA_Abort+0x62>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0208 	bic.w	r2, r2, #8
 800203e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	e013      	b.n	800207a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff fe7b 	bl	8001d4c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d90c      	bls.n	800207a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e015      	b.n	80020a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e4      	bne.n	8002052 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d004      	beq.n	80020cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e00c      	b.n	80020e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2205      	movs	r2, #5
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002100:	b2db      	uxtb	r3, r3
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e159      	b.n	80023e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8148 	bne.w	80023da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a2 	beq.w	80023da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <HAL_GPIO_Init+0x2e8>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a56      	ldr	r2, [pc, #344]	; (80023f8 <HAL_GPIO_Init+0x2e8>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_GPIO_Init+0x2e8>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_GPIO_Init+0x2ec>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a49      	ldr	r2, [pc, #292]	; (8002400 <HAL_GPIO_Init+0x2f0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <HAL_GPIO_Init+0x202>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_GPIO_Init+0x2f4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0x1fe>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a47      	ldr	r2, [pc, #284]	; (8002408 <HAL_GPIO_Init+0x2f8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00d      	beq.n	800230a <HAL_GPIO_Init+0x1fa>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_GPIO_Init+0x2fc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x1f6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a45      	ldr	r2, [pc, #276]	; (8002410 <HAL_GPIO_Init+0x300>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x1f2>
 80022fe:	2304      	movs	r3, #4
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x204>
 8002302:	2307      	movs	r3, #7
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x204>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x204>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x204>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x204>
 8002312:	2300      	movs	r3, #0
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002324:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x2ec>)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_GPIO_Init+0x304>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002356:	4a2f      	ldr	r2, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x304>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_GPIO_Init+0x304>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_GPIO_Init+0x304>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_GPIO_Init+0x304>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <HAL_GPIO_Init+0x304>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	f67f aea2 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fa16 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fbcc 	bl	8004c4c <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	817b      	strh	r3, [r7, #10]
 80026e6:	460b      	mov	r3, r1
 80026e8:	813b      	strh	r3, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	f040 808e 	bne.w	800281c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002700:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_I2C_Mem_Write_IT+0x158>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	4a4a      	ldr	r2, [pc, #296]	; (8002830 <HAL_I2C_Mem_Write_IT+0x15c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0a1a      	lsrs	r2, r3, #8
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009a      	lsls	r2, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3b01      	subs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e064      	b.n	800281e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d0db      	beq.n	800271a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Mem_Write_IT+0x9c>
 800276c:	2302      	movs	r3, #2
 800276e:	e056      	b.n	800281e <HAL_I2C_Mem_Write_IT+0x14a>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2240      	movs	r2, #64	; 0x40
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_I2C_Mem_Write_IT+0x160>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80027d8:	897a      	ldrh	r2, [r7, #10]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80027de:	893a      	ldrh	r2, [r7, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002816:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000000c 	.word	0x2000000c
 8002830:	14f8b589 	.word	0x14f8b589
 8002834:	ffff0000 	.word	0xffff0000

08002838 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	460b      	mov	r3, r1
 800284c:	813b      	strh	r3, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	f040 809a 	bne.w	8002998 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_I2C_Mem_Read_IT+0x170>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	4a50      	ldr	r2, [pc, #320]	; (80029ac <HAL_I2C_Mem_Read_IT+0x174>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0a1a      	lsrs	r2, r3, #8
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3b01      	subs	r3, #1
 8002882:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e070      	b.n	800299a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d0db      	beq.n	800287e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2C_Mem_Read_IT+0x9c>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e062      	b.n	800299a <HAL_I2C_Mem_Read_IT+0x162>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2222      	movs	r2, #34	; 0x22
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2240      	movs	r2, #64	; 0x40
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a3a      	ldr	r2, [r7, #32]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_I2C_Mem_Read_IT+0x178>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800293c:	897a      	ldrh	r2, [r7, #10]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002942:	893a      	ldrh	r2, [r7, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002962:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002992:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	2000000c 	.word	0x2000000c
 80029ac:	14f8b589 	.word	0x14f8b589
 80029b0:	ffff0000 	.word	0xffff0000

080029b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d003      	beq.n	80029ec <HAL_I2C_EV_IRQHandler+0x38>
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	f040 80c1 	bne.w	8002b6e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a0c:	d003      	beq.n	8002a16 <HAL_I2C_EV_IRQHandler+0x62>
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_EV_IRQHandler+0x66>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_EV_IRQHandler+0x68>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f000 8132 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x92>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	0a5b      	lsrs	r3, r3, #9
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 fc7b 	bl	8004334 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fd83 	bl	800354a <I2C_Master_SB>
 8002a44:	e092      	b.n	8002b6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fdf9 	bl	8003656 <I2C_Master_ADD10>
 8002a64:	e082      	b.n	8002b6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	0a5b      	lsrs	r3, r3, #9
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fe13 	bl	80036aa <I2C_Master_ADDR>
 8002a84:	e072      	b.n	8002b6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03b      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa0:	f000 80f3 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	09db      	lsrs	r3, r3, #7
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f9f3 	bl	8002eb4 <I2C_MasterTransmit_TXE>
 8002ace:	e04d      	b.n	8002b6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80d6 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	0a5b      	lsrs	r3, r3, #9
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80cf 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	2b21      	cmp	r3, #33	; 0x21
 8002af0:	d103      	bne.n	8002afa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa7a 	bl	8002fec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af8:	e0c7      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	f040 80c4 	bne.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fae8 	bl	80030d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b08:	e0bf      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b18:	f000 80b7 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x194>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x194>
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fb5d 	bl	8003200 <I2C_MasterReceive_RXNE>
 8002b46:	e011      	b.n	8002b6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809a 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	0a5b      	lsrs	r3, r3, #9
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8093 	beq.w	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fc06 	bl	8003376 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b6a:	e08e      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b6c:	e08d      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e007      	b.n	8002b90 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	0a5b      	lsrs	r3, r3, #9
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 ffc4 	bl	8003b48 <I2C_Slave_ADDR>
 8002bc0:	e066      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0a5b      	lsrs	r3, r3, #9
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fffe 	bl	8003bdc <I2C_Slave_STOPF>
 8002be0:	e056      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b21      	cmp	r3, #33	; 0x21
 8002be6:	d002      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x23a>
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	2b29      	cmp	r3, #41	; 0x29
 8002bec:	d125      	bne.n	8002c3a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x266>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	0a9b      	lsrs	r3, r3, #10
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x266>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 feda 	bl	80039cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c18:	e039      	b.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d033      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2da>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02d      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ff07 	bl	8003a46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c38:	e029      	b.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	0a9b      	lsrs	r3, r3, #10
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 ff12 	bl	8003a88 <I2C_SlaveReceive_RXNE>
 8002c64:	e014      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	0a5b      	lsrs	r3, r3, #9
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 ff40 	bl	8003b04 <I2C_SlaveReceive_BTF>
 8002c84:	e004      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002c86:	bf00      	nop
 8002c88:	e002      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c8a:	bf00      	nop
 8002c8c:	e000      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08a      	sub	sp, #40	; 0x28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ce2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x78>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	0a9b      	lsrs	r3, r3, #10
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03f      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x104>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d039      	beq.n	8002d9a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002d26:	7efb      	ldrb	r3, [r7, #27]
 8002d28:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d40:	7ebb      	ldrb	r3, [r7, #26]
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d112      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xd6>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10f      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xd6>
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b21      	cmp	r3, #33	; 0x21
 8002d50:	d008      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b29      	cmp	r3, #41	; 0x29
 8002d56:	d005      	beq.n	8002d64 <HAL_I2C_ER_IRQHandler+0xce>
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b28      	cmp	r3, #40	; 0x28
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	d103      	bne.n	8002d6c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 f869 	bl	8003e3c <I2C_Slave_AF>
 8002d6a:	e016      	b.n	8002d9a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d74:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d7e:	7efb      	ldrb	r3, [r7, #27]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d002      	beq.n	8002d8a <HAL_I2C_ER_IRQHandler+0xf4>
 8002d84:	7efb      	ldrb	r3, [r7, #27]
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d107      	bne.n	8002d9a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	0adb      	lsrs	r3, r3, #11
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002dc2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f001 f8a0 	bl	8003f1c <I2C_ITError>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d150      	bne.n	8002f7c <I2C_MasterTransmit_TXE+0xc8>
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b21      	cmp	r3, #33	; 0x21
 8002ede:	d14d      	bne.n	8002f7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d01d      	beq.n	8002f22 <I2C_MasterTransmit_TXE+0x6e>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d01a      	beq.n	8002f22 <I2C_MasterTransmit_TXE+0x6e>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef2:	d016      	beq.n	8002f22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2211      	movs	r2, #17
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff62 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f20:	e060      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d107      	bne.n	8002f6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff7d 	bl	8002e64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f6a:	e03b      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff35 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f7a:	e033      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b21      	cmp	r3, #33	; 0x21
 8002f80:	d005      	beq.n	8002f8e <I2C_MasterTransmit_TXE+0xda>
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d12d      	bne.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b22      	cmp	r3, #34	; 0x22
 8002f8c:	d12a      	bne.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fa8:	e01c      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d103      	bne.n	8002fbe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f88e 	bl	80030d8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002fbc:	e012      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fe2:	e7ff      	b.n	8002fe4 <I2C_MasterTransmit_TXE+0x130>
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b21      	cmp	r3, #33	; 0x21
 8003004:	d164      	bne.n	80030d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003034:	e04c      	b.n	80030d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d01d      	beq.n	8003078 <I2C_MasterTransmit_BTF+0x8c>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b20      	cmp	r3, #32
 8003040:	d01a      	beq.n	8003078 <I2C_MasterTransmit_BTF+0x8c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003048:	d016      	beq.n	8003078 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003058:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2211      	movs	r2, #17
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff feb7 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
}
 8003076:	e02b      	b.n	80030d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003086:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d107      	bne.n	80030c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fed2 	bl	8002e64 <HAL_I2C_MemTxCpltCallback>
}
 80030c0:	e006      	b.n	80030d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe8a 	bl	8002de4 <HAL_I2C_MasterTxCpltCallback>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11d      	bne.n	800312c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10b      	bne.n	8003110 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800310e:	e073      	b.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	b29b      	uxth	r3, r3
 8003116:	121b      	asrs	r3, r3, #8
 8003118:	b2da      	uxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	651a      	str	r2, [r3, #80]	; 0x50
}
 800312a:	e065      	b.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10b      	bne.n	800314c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
}
 800314a:	e055      	b.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	2b02      	cmp	r3, #2
 8003152:	d151      	bne.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b22      	cmp	r3, #34	; 0x22
 8003158:	d10d      	bne.n	8003176 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003168:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003174:	e040      	b.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b21      	cmp	r3, #33	; 0x21
 8003184:	d112      	bne.n	80031ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031aa:	e025      	b.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d120      	bne.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b21      	cmp	r3, #33	; 0x21
 80031ba:	d11d      	bne.n	80031f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fe36 	bl	8002e64 <HAL_I2C_MemTxCpltCallback>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b22      	cmp	r3, #34	; 0x22
 8003212:	f040 80ac 	bne.w	800336e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d921      	bls.n	8003268 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b03      	cmp	r3, #3
 8003252:	f040 808c 	bne.w	800336e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003264:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003266:	e082      	b.n	800336e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b02      	cmp	r3, #2
 800326e:	d075      	beq.n	800335c <I2C_MasterReceive_RXNE+0x15c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <I2C_MasterReceive_RXNE+0x7c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d16f      	bne.n	800335c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f001 f827 	bl	80042d0 <I2C_WaitOnSTOPRequestThroughIT>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d142      	bne.n	800330e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d10a      	bne.n	80032f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fdc1 	bl	8002e78 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032f6:	e03a      	b.n	800336e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2212      	movs	r2, #18
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fd76 	bl	8002df8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800330c:	e02f      	b.n	800336e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800331c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fd99 	bl	8002e8c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800335a:	e008      	b.n	800336e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336a:	605a      	str	r2, [r3, #4]
}
 800336c:	e7ff      	b.n	800336e <I2C_MasterReceive_RXNE+0x16e>
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b04      	cmp	r3, #4
 800338c:	d11b      	bne.n	80033c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033c4:	e0bd      	b.n	8003542 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d129      	bne.n	8003424 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00a      	beq.n	80033fc <I2C_MasterReceive_BTF+0x86>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d007      	beq.n	80033fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003422:	e08e      	b.n	8003542 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d176      	bne.n	800351c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <I2C_MasterReceive_BTF+0xc4>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b10      	cmp	r3, #16
 8003438:	d108      	bne.n	800344c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e019      	b.n	8003480 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d002      	beq.n	8003458 <I2C_MasterReceive_BTF+0xe2>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d108      	bne.n	800346a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e00a      	b.n	8003480 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b10      	cmp	r3, #16
 800346e:	d007      	beq.n	8003480 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d10a      	bne.n	8003506 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fcba 	bl	8002e78 <HAL_I2C_MemRxCpltCallback>
}
 8003504:	e01d      	b.n	8003542 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2212      	movs	r2, #18
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fc6f 	bl	8002df8 <HAL_I2C_MasterRxCpltCallback>
}
 800351a:	e012      	b.n	8003542 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d117      	bne.n	800358e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003576:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003578:	e067      	b.n	800364a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]
}
 800358c:	e05d      	b.n	800364a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003596:	d133      	bne.n	8003600 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b21      	cmp	r3, #33	; 0x21
 80035a2:	d109      	bne.n	80035b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	e008      	b.n	80035ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <I2C_Master_SB+0x92>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d032      	beq.n	800364a <I2C_Master_SB+0x100>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02d      	beq.n	800364a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fc:	605a      	str	r2, [r3, #4]
}
 80035fe:	e024      	b.n	800364a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10e      	bne.n	8003626 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	b29b      	uxth	r3, r3
 800360e:	11db      	asrs	r3, r3, #7
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0306 	and.w	r3, r3, #6
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f063 030f 	orn	r3, r3, #15
 800361c:	b2da      	uxtb	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	e011      	b.n	800364a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10d      	bne.n	800364a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	b29b      	uxth	r3, r3
 8003634:	11db      	asrs	r3, r3, #7
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0306 	and.w	r3, r3, #6
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f063 030e 	orn	r3, r3, #14
 8003642:	b2da      	uxtb	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	b2da      	uxtb	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <I2C_Master_ADD10+0x26>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <I2C_Master_ADD10+0x48>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369c:	605a      	str	r2, [r3, #4]
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b091      	sub	sp, #68	; 0x44
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b22      	cmp	r3, #34	; 0x22
 80036d2:	f040 8169 	bne.w	80039a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <I2C_Master_ADDR+0x54>
 80036de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d10b      	bne.n	80036fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	2300      	movs	r3, #0
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	e160      	b.n	80039c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11d      	bne.n	8003742 <I2C_Master_ADDR+0x98>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800370e:	d118      	bne.n	8003742 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	651a      	str	r2, [r3, #80]	; 0x50
 8003740:	e13e      	b.n	80039c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e115      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	f040 808a 	bne.w	8003894 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003786:	d137      	bne.n	80037f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a6:	d113      	bne.n	80037d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	e0e7      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e0d3      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d02e      	beq.n	800385c <I2C_Master_ADDR+0x1b2>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	2b20      	cmp	r3, #32
 8003802:	d02b      	beq.n	800385c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	2b12      	cmp	r3, #18
 8003808:	d102      	bne.n	8003810 <I2C_Master_ADDR+0x166>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	2b01      	cmp	r3, #1
 800380e:	d125      	bne.n	800385c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00e      	beq.n	8003834 <I2C_Master_ADDR+0x18a>
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	2b02      	cmp	r3, #2
 800381a:	d00b      	beq.n	8003834 <I2C_Master_ADDR+0x18a>
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	2b10      	cmp	r3, #16
 8003820:	d008      	beq.n	8003834 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e007      	b.n	8003844 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003842:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	e0a1      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e085      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d14d      	bne.n	800393a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d016      	beq.n	80038d2 <I2C_Master_ADDR+0x228>
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d013      	beq.n	80038d2 <I2C_Master_ADDR+0x228>
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d010      	beq.n	80038d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e007      	b.n	80038e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f0:	d117      	bne.n	8003922 <I2C_Master_ADDR+0x278>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f8:	d00b      	beq.n	8003912 <I2C_Master_ADDR+0x268>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d008      	beq.n	8003912 <I2C_Master_ADDR+0x268>
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	2b08      	cmp	r3, #8
 8003904:	d005      	beq.n	8003912 <I2C_Master_ADDR+0x268>
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2b10      	cmp	r3, #16
 800390a:	d002      	beq.n	8003912 <I2C_Master_ADDR+0x268>
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	2b20      	cmp	r3, #32
 8003910:	d107      	bne.n	8003922 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003920:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	e032      	b.n	80039a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003958:	d117      	bne.n	800398a <I2C_Master_ADDR+0x2e0>
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003960:	d00b      	beq.n	800397a <I2C_Master_ADDR+0x2d0>
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b01      	cmp	r3, #1
 8003966:	d008      	beq.n	800397a <I2C_Master_ADDR+0x2d0>
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	2b08      	cmp	r3, #8
 800396c:	d005      	beq.n	800397a <I2C_Master_ADDR+0x2d0>
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b10      	cmp	r3, #16
 8003972:	d002      	beq.n	800397a <I2C_Master_ADDR+0x2d0>
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	2b20      	cmp	r3, #32
 8003978:	d107      	bne.n	800398a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003988:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80039a6:	e00b      	b.n	80039c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	e7ff      	b.n	80039c0 <I2C_Master_ADDR+0x316>
 80039c0:	bf00      	nop
 80039c2:	3744      	adds	r7, #68	; 0x44
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02b      	beq.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b29      	cmp	r3, #41	; 0x29
 8003a18:	d111      	bne.n	8003a3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2221      	movs	r2, #33	; 0x21
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2228      	movs	r2, #40	; 0x28
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff f9e7 	bl	8002e0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d02c      	beq.n	8003afc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d114      	bne.n	8003afc <I2C_SlaveReceive_RXNE+0x74>
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad6:	d111      	bne.n	8003afc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2222      	movs	r2, #34	; 0x22
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2228      	movs	r2, #40	; 0x28
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff f992 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b62:	2b28      	cmp	r3, #40	; 0x28
 8003b64:	d127      	bne.n	8003bb6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	81bb      	strh	r3, [r7, #12]
 8003b98:	e002      	b.n	8003ba0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ba8:	89ba      	ldrh	r2, [r7, #12]
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff f940 	bl	8002e34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bb4:	e00e      	b.n	8003bd4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c38:	d172      	bne.n	8003d20 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b22      	cmp	r3, #34	; 0x22
 8003c3e:	d002      	beq.n	8003c46 <I2C_Slave_STOPF+0x6a>
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b2a      	cmp	r3, #42	; 0x2a
 8003c44:	d135      	bne.n	8003cb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0204 	orr.w	r2, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fa37 	bl	80020f2 <HAL_DMA_GetState>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d049      	beq.n	8003d1e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <I2C_Slave_STOPF+0x258>)
 8003c90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fa09 	bl	80020ae <HAL_DMA_Abort_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03d      	beq.n	8003d1e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cac:	4610      	mov	r0, r2
 8003cae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cb0:	e035      	b.n	8003d1e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fa01 	bl	80020f2 <HAL_DMA_GetState>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d014      	beq.n	8003d20 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <I2C_Slave_STOPF+0x258>)
 8003cfc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f9d3 	bl	80020ae <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4798      	blx	r3
 8003d1c:	e000      	b.n	8003d20 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d1e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03e      	beq.n	8003da8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d112      	bne.n	8003d5e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d112      	bne.n	8003d92 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8b3 	bl	8003f1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003db6:	e039      	b.n	8003e2c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d109      	bne.n	8003dd2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2228      	movs	r2, #40	; 0x28
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff f827 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b28      	cmp	r3, #40	; 0x28
 8003ddc:	d111      	bne.n	8003e02 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <I2C_Slave_STOPF+0x25c>)
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff f828 	bl	8002e50 <HAL_I2C_ListenCpltCallback>
}
 8003e00:	e014      	b.n	8003e2c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	2b22      	cmp	r3, #34	; 0x22
 8003e08:	d002      	beq.n	8003e10 <I2C_Slave_STOPF+0x234>
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b22      	cmp	r3, #34	; 0x22
 8003e0e:	d10d      	bne.n	8003e2c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe fffa 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08004181 	.word	0x08004181
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d002      	beq.n	8003e5e <I2C_Slave_AF+0x22>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d129      	bne.n	8003eb2 <I2C_Slave_AF+0x76>
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b28      	cmp	r3, #40	; 0x28
 8003e62:	d126      	bne.n	8003eb2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2c      	ldr	r2, [pc, #176]	; (8003f18 <I2C_Slave_AF+0xdc>)
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e78:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e82:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe ffd0 	bl	8002e50 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003eb0:	e02e      	b.n	8003f10 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b21      	cmp	r3, #33	; 0x21
 8003eb6:	d126      	bne.n	8003f06 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <I2C_Slave_AF+0xdc>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2221      	movs	r2, #33	; 0x21
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe ff84 	bl	8002e0c <HAL_I2C_SlaveTxCpltCallback>
}
 8003f04:	e004      	b.n	8003f10 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f0e:	615a      	str	r2, [r3, #20]
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f34:	7bbb      	ldrb	r3, [r7, #14]
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d002      	beq.n	8003f40 <I2C_ITError+0x24>
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d10a      	bne.n	8003f56 <I2C_ITError+0x3a>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b22      	cmp	r3, #34	; 0x22
 8003f44:	d107      	bne.n	8003f56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f5c:	2b28      	cmp	r3, #40	; 0x28
 8003f5e:	d107      	bne.n	8003f70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2228      	movs	r2, #40	; 0x28
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f6e:	e015      	b.n	8003f9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d00a      	beq.n	8003f96 <I2C_ITError+0x7a>
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b60      	cmp	r3, #96	; 0x60
 8003f84:	d007      	beq.n	8003f96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003faa:	d162      	bne.n	8004072 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d020      	beq.n	800400c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	4a6a      	ldr	r2, [pc, #424]	; (8004178 <I2C_ITError+0x25c>)
 8003fd0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe f869 	bl	80020ae <HAL_DMA_Abort_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8089 	beq.w	80040f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004006:	4610      	mov	r0, r2
 8004008:	4798      	blx	r3
 800400a:	e074      	b.n	80040f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	4a59      	ldr	r2, [pc, #356]	; (8004178 <I2C_ITError+0x25c>)
 8004012:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f848 	bl	80020ae <HAL_DMA_Abort_IT>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d068      	beq.n	80040f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d10b      	bne.n	800404a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
 8004070:	e041      	b.n	80040f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b60      	cmp	r3, #96	; 0x60
 800407c:	d125      	bne.n	80040ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d10b      	bne.n	80040b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe feec 	bl	8002ea0 <HAL_I2C_AbortCpltCallback>
 80040c8:	e015      	b.n	80040f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d10b      	bne.n	80040f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fe fecb 	bl	8002e8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10e      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d113      	bne.n	8004170 <I2C_ITError+0x254>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b28      	cmp	r3, #40	; 0x28
 800414c:	d110      	bne.n	8004170 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <I2C_ITError+0x260>)
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fe fe70 	bl	8002e50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08004181 	.word	0x08004181
 800417c:	ffff0000 	.word	0xffff0000

08004180 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800419a:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <I2C_DMAAbort+0x148>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <I2C_DMAAbort+0x14c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0a1a      	lsrs	r2, r3, #8
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00da      	lsls	r2, r3, #3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80041c6:	e00a      	b.n	80041de <I2C_DMAAbort+0x5e>
    }
    count--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d0ea      	beq.n	80041b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	2200      	movs	r2, #0
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	2200      	movs	r2, #0
 80041fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	2200      	movs	r2, #0
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	2200      	movs	r2, #0
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d10e      	bne.n	800426e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	f7fe fe1a 	bl	8002ea0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800426c:	e027      	b.n	80042be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004274:	2b28      	cmp	r3, #40	; 0x28
 8004276:	d117      	bne.n	80042a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004296:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2228      	movs	r2, #40	; 0x28
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042a6:	e007      	b.n	80042b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80042b8:	6978      	ldr	r0, [r7, #20]
 80042ba:	f7fe fde7 	bl	8002e8c <HAL_I2C_ErrorCallback>
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2000000c 	.word	0x2000000c
 80042cc:	14f8b589 	.word	0x14f8b589

080042d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	0a1a      	lsrs	r2, r3, #8
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e008      	b.n	8004320 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d0e9      	beq.n	80042f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	2000000c 	.word	0x2000000c
 8004330:	14f8b589 	.word	0x14f8b589

08004334 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004344:	d103      	bne.n	800434e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800434c:	e007      	b.n	800435e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004356:	d102      	bne.n	800435e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2208      	movs	r2, #8
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e267      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d075      	beq.n	8004476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	4b88      	ldr	r3, [pc, #544]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4b85      	ldr	r3, [pc, #532]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d112      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b82      	ldr	r3, [pc, #520]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	4b7e      	ldr	r3, [pc, #504]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05b      	beq.n	8004474 <HAL_RCC_OscConfig+0x108>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d157      	bne.n	8004474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e242      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCC_OscConfig+0x74>
 80043d2:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a75      	ldr	r2, [pc, #468]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x98>
 80043ea:	4b70      	ldr	r3, [pc, #448]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6f      	ldr	r2, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b6d      	ldr	r3, [pc, #436]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6c      	ldr	r2, [pc, #432]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 8004404:	4b69      	ldr	r3, [pc, #420]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 800440a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a65      	ldr	r2, [pc, #404]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd fc92 	bl	8001d4c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd fc8e 	bl	8001d4c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e207      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0xc0>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fd fc7e 	bl	8001d4c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd fc7a 	bl	8001d4c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1f3      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	4b51      	ldr	r3, [pc, #324]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0xe8>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004496:	2b08      	cmp	r3, #8
 8004498:	d11c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449a:	4b44      	ldr	r3, [pc, #272]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d116      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1c7      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4937      	ldr	r1, [pc, #220]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	e03a      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044dc:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <HAL_RCC_OscConfig+0x244>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fd fc33 	bl	8001d4c <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ea:	f7fd fc2f 	bl	8001d4c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1a8      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	4b28      	ldr	r3, [pc, #160]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4925      	ldr	r1, [pc, #148]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x244>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fc12 	bl	8001d4c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452c:	f7fd fc0e 	bl	8001d4c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e187      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d036      	beq.n	80045c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_RCC_OscConfig+0x248>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fd fbf2 	bl	8001d4c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fd fbee 	bl	8001d4c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e167      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x240>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x200>
 800458a:	e01b      	b.n	80045c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCC_OscConfig+0x248>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fd fbdb 	bl	8001d4c <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	e00e      	b.n	80045b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459a:	f7fd fbd7 	bl	8001d4c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d907      	bls.n	80045b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e150      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	42470000 	.word	0x42470000
 80045b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b8:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80045ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ea      	bne.n	800459a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8097 	beq.w	8004700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d6:	4b81      	ldr	r3, [pc, #516]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	4b7d      	ldr	r3, [pc, #500]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a7c      	ldr	r2, [pc, #496]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004602:	4b77      	ldr	r3, [pc, #476]	; (80047e0 <HAL_RCC_OscConfig+0x474>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d118      	bne.n	8004640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460e:	4b74      	ldr	r3, [pc, #464]	; (80047e0 <HAL_RCC_OscConfig+0x474>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a73      	ldr	r2, [pc, #460]	; (80047e0 <HAL_RCC_OscConfig+0x474>)
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461a:	f7fd fb97 	bl	8001d4c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004622:	f7fd fb93 	bl	8001d4c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e10c      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_OscConfig+0x474>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d106      	bne.n	8004656 <HAL_RCC_OscConfig+0x2ea>
 8004648:	4b64      	ldr	r3, [pc, #400]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a63      	ldr	r2, [pc, #396]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	e01c      	b.n	8004690 <HAL_RCC_OscConfig+0x324>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0x30c>
 800465e:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a5b      	ldr	r2, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0x324>
 8004678:	4b58      	ldr	r3, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a57      	ldr	r2, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	4b55      	ldr	r3, [pc, #340]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a54      	ldr	r2, [pc, #336]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd fb58 	bl	8001d4c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fb54 	bl	8001d4c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e0cb      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	4b49      	ldr	r3, [pc, #292]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ee      	beq.n	80046a0 <HAL_RCC_OscConfig+0x334>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c4:	f7fd fb42 	bl	8001d4c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd fb3e 	bl	8001d4c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0b5      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e2:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ee      	bne.n	80046cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	4a38      	ldr	r2, [pc, #224]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a1 	beq.w	800484c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470a:	4b34      	ldr	r3, [pc, #208]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b08      	cmp	r3, #8
 8004714:	d05c      	beq.n	80047d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d141      	bne.n	80047a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <HAL_RCC_OscConfig+0x478>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd fb12 	bl	8001d4c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd fb0e 	bl	8001d4c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e087      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	3b01      	subs	r3, #1
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	491b      	ldr	r1, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004774:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x478>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd fae7 	bl	8001d4c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004782:	f7fd fae3 	bl	8001d4c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e05c      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x416>
 80047a0:	e054      	b.n	800484c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x478>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fd fad0 	bl	8001d4c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd facc 	bl	8001d4c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e045      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x470>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x444>
 80047ce:	e03d      	b.n	800484c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e038      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40007000 	.word	0x40007000
 80047e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e8:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <HAL_RCC_OscConfig+0x4ec>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d028      	beq.n	8004848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d121      	bne.n	8004848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d11a      	bne.n	8004848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004820:	4293      	cmp	r3, r2
 8004822:	d111      	bne.n	8004848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d107      	bne.n	8004848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800

0800485c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cc      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d90c      	bls.n	8004898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b8      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d044      	beq.n	800497c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d119      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d003      	beq.n	800491a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004916:	2b03      	cmp	r3, #3
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e06f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e067      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4934      	ldr	r1, [pc, #208]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800494c:	f7fd f9fe 	bl	8001d4c <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fd f9fa 	bl	8001d4c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e04f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d20c      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e032      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049e2:	f000 f821 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd f95e 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023c00 	.word	0x40023c00
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	080076a0 	.word	0x080076a0
 8004a20:	2000000c 	.word	0x2000000c
 8004a24:	20000010 	.word	0x20000010

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2c:	b094      	sub	sp, #80	; 0x50
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	647b      	str	r3, [r7, #68]	; 0x44
 8004a34:	2300      	movs	r3, #0
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a38:	2300      	movs	r3, #0
 8004a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a40:	4b79      	ldr	r3, [pc, #484]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d00d      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x40>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	f200 80e1 	bhi.w	8004c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x34>
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5a:	e0db      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b73      	ldr	r3, [pc, #460]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a60:	e0db      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a62:	4b73      	ldr	r3, [pc, #460]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a66:	e0d8      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a68:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a72:	4b6d      	ldr	r3, [pc, #436]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d063      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2200      	movs	r2, #0
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	f04f 0000 	mov.w	r0, #0
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	0159      	lsls	r1, r3, #5
 8004aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aac:	0150      	lsls	r0, r2, #5
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	1a51      	subs	r1, r2, r1
 8004ab6:	6139      	str	r1, [r7, #16]
 8004ab8:	4629      	mov	r1, r5
 8004aba:	eb63 0301 	sbc.w	r3, r3, r1
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004acc:	4659      	mov	r1, fp
 8004ace:	018b      	lsls	r3, r1, #6
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	018a      	lsls	r2, r1, #6
 8004ada:	4651      	mov	r1, sl
 8004adc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	462b      	mov	r3, r5
 8004b08:	eb49 0303 	adc.w	r3, r9, r3
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	024b      	lsls	r3, r1, #9
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b24:	4621      	mov	r1, r4
 8004b26:	024a      	lsls	r2, r1, #9
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2e:	2200      	movs	r2, #0
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b38:	f7fb fbaa 	bl	8000290 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	e058      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b46:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	4611      	mov	r1, r2
 8004b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	0159      	lsls	r1, r3, #5
 8004b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b72:	0150      	lsls	r0, r2, #5
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4641      	mov	r1, r8
 8004b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b7e:	4649      	mov	r1, r9
 8004b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b98:	ebb2 040a 	subs.w	r4, r2, sl
 8004b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	00eb      	lsls	r3, r5, #3
 8004baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bae:	00e2      	lsls	r2, r4, #3
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	4643      	mov	r3, r8
 8004bb6:	18e3      	adds	r3, r4, r3
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	464b      	mov	r3, r9
 8004bbc:	eb45 0303 	adc.w	r3, r5, r3
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bce:	4629      	mov	r1, r5
 8004bd0:	028b      	lsls	r3, r1, #10
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd8:	4621      	mov	r1, r4
 8004bda:	028a      	lsls	r2, r1, #10
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be2:	2200      	movs	r2, #0
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	61fa      	str	r2, [r7, #28]
 8004be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bec:	f7fb fb50 	bl	8000290 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	3301      	adds	r3, #1
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3750      	adds	r7, #80	; 0x50
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	007a1200 	.word	0x007a1200

08004c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	2000000c 	.word	0x2000000c

08004c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c50:	f7ff fff0 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0a9b      	lsrs	r3, r3, #10
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	080076b0 	.word	0x080076b0

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c78:	f7ff ffdc 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0b5b      	lsrs	r3, r3, #13
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	080076b0 	.word	0x080076b0

08004c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e07b      	b.n	8004da6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbe:	d009      	beq.n	8004cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
 8004cc6:	e005      	b.n	8004cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fe30 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	ea42 0103 	orr.w	r1, r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0104 	and.w	r1, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f003 0210 	and.w	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_SPI_Transmit_IT+0x20>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e06f      	b.n	8004eb0 <HAL_SPI_Transmit_IT+0x100>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Transmit_IT+0x34>
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de8:	e05d      	b.n	8004ea6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
 8004df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dfa:	e054      	b.n	8004ea6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_SPI_Transmit_IT+0x10c>)
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
 8004e42:	e002      	b.n	8004e4a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_SPI_Transmit_IT+0x110>)
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d10f      	bne.n	8004e74 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004e82:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d008      	beq.n	8004ea4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004ea4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	08005147 	.word	0x08005147
 8004ec0:	08005101 	.word	0x08005101

08004ec4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
    return;
 8004f06:	e0d7      	b.n	80050b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_SPI_IRQHandler+0x66>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	09db      	lsrs	r3, r3, #7
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
    return;
 8004f28:	e0c6      	b.n	80050b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_SPI_IRQHandler+0x8c>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80b4 	beq.w	80050b8 <HAL_SPI_IRQHandler+0x1f4>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80ad 	beq.w	80050b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	099b      	lsrs	r3, r3, #6
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d011      	beq.n	8004f9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	e00b      	b.n	8004fb2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	693b      	ldr	r3, [r7, #16]
        return;
 8004fb0:	e082      	b.n	80050b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff8:	f043 0208 	orr.w	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005000:	2300      	movs	r3, #0
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	2b00      	cmp	r3, #0
 8005014:	d04f      	beq.n	80050b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005024:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <HAL_SPI_IRQHandler+0x17e>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d034      	beq.n	80050ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0203 	bic.w	r2, r2, #3
 8005050:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_SPI_IRQHandler+0x1fc>)
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd f821 	bl	80020ae <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <HAL_SPI_IRQHandler+0x1fc>)
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd f80b 	bl	80020ae <HAL_DMA_Abort_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80050aa:	e003      	b.n	80050b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f809 	bl	80050c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050b2:	e000      	b.n	80050b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80050b4:	bf00      	nop
    return;
 80050b6:	bf00      	nop
  }
}
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	080050d9 	.word	0x080050d9

080050c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ffe6 	bl	80050c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f8f1 	bl	8005320 <SPI_CloseTx_ISR>
  }
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f8cf 	bl	8005320 <SPI_CloseTx_ISR>
  }
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800519c:	f7fc fdd6 	bl	8001d4c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051ac:	f7fc fdce 	bl	8001d4c <HAL_GetTick>
 80051b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051b2:	4b39      	ldr	r3, [pc, #228]	; (8005298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	015b      	lsls	r3, r3, #5
 80051b8:	0d1b      	lsrs	r3, r3, #20
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c2:	e054      	b.n	800526e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d050      	beq.n	800526e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051cc:	f7fc fdbe 	bl	8001d4c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d902      	bls.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13d      	bne.n	800525e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d111      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	d004      	beq.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520e:	d107      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d10f      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e017      	b.n	800528e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3b01      	subs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d19b      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000000c 	.word	0x2000000c

0800529c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <SPI_EndRxTxTransaction+0x7c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1b      	ldr	r2, [pc, #108]	; (800531c <SPI_EndRxTxTransaction+0x80>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0d5b      	lsrs	r3, r3, #21
 80052b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d112      	bne.n	80052ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff5a 	bl	800518c <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e00f      	b.n	800530e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d0f2      	beq.n	80052ee <SPI_EndRxTxTransaction+0x52>
 8005308:	e000      	b.n	800530c <SPI_EndRxTxTransaction+0x70>
        break;
 800530a:	bf00      	nop
  }

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000000c 	.word	0x2000000c
 800531c:	165e9f81 	.word	0x165e9f81

08005320 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005328:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <SPI_CloseTx_ISR+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <SPI_CloseTx_ISR+0xc0>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0a5b      	lsrs	r3, r3, #9
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533c:	f7fc fd06 	bl	8001d4c <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f043 0220 	orr.w	r2, r3, #32
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005354:	e009      	b.n	800536a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3b01      	subs	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0eb      	beq.n	8005342 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005378:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	2164      	movs	r1, #100	; 0x64
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ff8c 	bl	800529c <SPI_EndRxTxTransaction>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fe7d 	bl	80050c4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80053ca:	e002      	b.n	80053d2 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fc f965 	bl	800169c <HAL_SPI_TxCpltCallback>
}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	057619f1 	.word	0x057619f1

080053e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e041      	b.n	800547a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc faf2 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 f9c0 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e044      	b.n	8005526 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_TIM_Base_Start_IT+0xb0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x6c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c6:	d013      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x6c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_TIM_Base_Start_IT+0xb4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x6c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a19      	ldr	r2, [pc, #100]	; (800553c <HAL_TIM_Base_Start_IT+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x6c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <HAL_TIM_Base_Start_IT+0xbc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a16      	ldr	r2, [pc, #88]	; (8005544 <HAL_TIM_Base_Start_IT+0xc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d010      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005512:	e007      	b.n	8005524 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0202 	mvn.w	r2, #2
 8005574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f8ee 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8e0 	bl	8005758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8f1 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0204 	mvn.w	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8c4 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f8b6 	bl	8005758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8c7 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b08      	cmp	r3, #8
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0208 	mvn.w	r2, #8
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2204      	movs	r2, #4
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f89a 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f88c 	bl	8005758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f89d 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0210 	mvn.w	r2, #16
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2208      	movs	r2, #8
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f870 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f862 	bl	8005758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f873 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d10e      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0201 	mvn.w	r2, #1
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f87e 	bl	80017c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8e2 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f838 	bl	8005794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0220 	mvn.w	r2, #32
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8ac 	bl	80058a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a34      	ldr	r2, [pc, #208]	; (800588c <TIM_Base_SetConfig+0xe4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00f      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d00b      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a31      	ldr	r2, [pc, #196]	; (8005890 <TIM_Base_SetConfig+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a30      	ldr	r2, [pc, #192]	; (8005894 <TIM_Base_SetConfig+0xec>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <TIM_Base_SetConfig+0xf0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d108      	bne.n	80057f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <TIM_Base_SetConfig+0xe4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <TIM_Base_SetConfig+0xe8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a21      	ldr	r2, [pc, #132]	; (8005894 <TIM_Base_SetConfig+0xec>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <TIM_Base_SetConfig+0xf0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <TIM_Base_SetConfig+0xf4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <TIM_Base_SetConfig+0xf8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <TIM_Base_SetConfig+0xfc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <TIM_Base_SetConfig+0xe4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	615a      	str	r2, [r3, #20]
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800

080058a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e03f      	b.n	8005962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc f8a4 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fddf 	bl	80064d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b08a      	sub	sp, #40	; 0x28
 800596e:	af02      	add	r7, sp, #8
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b20      	cmp	r3, #32
 8005988:	d17c      	bne.n	8005a84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_UART_Transmit+0x2c>
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e075      	b.n	8005a86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Transmit+0x3e>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e06e      	b.n	8005a86 <HAL_UART_Transmit+0x11c>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2221      	movs	r2, #33	; 0x21
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059be:	f7fc f9c5 	bl	8001d4c <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d8:	d108      	bne.n	80059ec <HAL_UART_Transmit+0x82>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e003      	b.n	80059f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059fc:	e02a      	b.n	8005a54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fb1f 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e036      	b.n	8005a86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	3302      	adds	r3, #2
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e007      	b.n	8005a46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1cf      	bne.n	80059fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2140      	movs	r1, #64	; 0x40
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 faef 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e006      	b.n	8005a86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e000      	b.n	8005a86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a84:	2302      	movs	r3, #2
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d11d      	bne.n	8005ae4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_UART_Receive_IT+0x26>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e016      	b.n	8005ae6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Receive_IT+0x38>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e00f      	b.n	8005ae6 <HAL_UART_Receive_IT+0x58>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fb24 	bl	8006128 <UART_Start_Receive_IT>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	e000      	b.n	8005ae6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b0ba      	sub	sp, #232	; 0xe8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <HAL_UART_IRQHandler+0x66>
 8005b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fc07 	bl	8006362 <UART_Receive_IT>
      return;
 8005b54:	e256      	b.n	8006004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80de 	beq.w	8005d1c <HAL_UART_IRQHandler+0x22c>
 8005b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80d1 	beq.w	8005d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <HAL_UART_IRQHandler+0xae>
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0201 	orr.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_UART_IRQHandler+0xd2>
 8005baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0202 	orr.w	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <HAL_UART_IRQHandler+0xf6>
 8005bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d011      	beq.n	8005c16 <HAL_UART_IRQHandler+0x126>
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 81ed 	beq.w	8005ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_UART_IRQHandler+0x14e>
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fb92 	bl	8006362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b40      	cmp	r3, #64	; 0x40
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2301      	moveq	r3, #1
 8005c4e:	2300      	movne	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <HAL_UART_IRQHandler+0x17a>
 8005c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04f      	beq.n	8005d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa9a 	bl	80061a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d141      	bne.n	8005d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1d9      	bne.n	8005c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	4a7d      	ldr	r2, [pc, #500]	; (8005ecc <HAL_UART_IRQHandler+0x3dc>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc f9e5 	bl	80020ae <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	e00e      	b.n	8005d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f990 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00a      	b.n	8005d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f98c 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e006      	b.n	8005d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f988 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d16:	e170      	b.n	8005ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	bf00      	nop
    return;
 8005d1a:	e16e      	b.n	8005ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f040 814a 	bne.w	8005fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8143 	beq.w	8005fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 813c 	beq.w	8005fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	f040 80b4 	bne.w	8005ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8140 	beq.w	8005ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d86:	429a      	cmp	r2, r3
 8005d88:	f080 8139 	bcs.w	8005ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	f000 8088 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1d9      	bne.n	8005da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e1      	bne.n	8005dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e3      	bne.n	8005e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e82:	f023 0310 	bic.w	r3, r3, #16
 8005e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e3      	bne.n	8005e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fc f88e 	bl	8001fce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8b6 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ec8:	e099      	b.n	8005ffe <HAL_UART_IRQHandler+0x50e>
 8005eca:	bf00      	nop
 8005ecc:	0800626b 	.word	0x0800626b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 808b 	beq.w	8006002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8086 	beq.w	8006002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e3      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3314      	adds	r3, #20
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3314      	adds	r3, #20
 8005f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f52:	633a      	str	r2, [r7, #48]	; 0x30
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e3      	bne.n	8005f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f98:	61fa      	str	r2, [r7, #28]
 8005f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e3      	bne.n	8005f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f83e 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fb8:	e023      	b.n	8006002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_UART_IRQHandler+0x4ea>
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f95d 	bl	8006292 <UART_Transmit_IT>
    return;
 8005fd8:	e014      	b.n	8006004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00e      	beq.n	8006004 <HAL_UART_IRQHandler+0x514>
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f99d 	bl	8006332 <UART_EndTransmit_IT>
    return;
 8005ff8:	e004      	b.n	8006004 <HAL_UART_IRQHandler+0x514>
    return;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_UART_IRQHandler+0x514>
      return;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_UART_IRQHandler+0x514>
      return;
 8006002:	bf00      	nop
  }
}
 8006004:	37e8      	adds	r7, #232	; 0xe8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b090      	sub	sp, #64	; 0x40
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	e050      	b.n	8006100 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d04c      	beq.n	8006100 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x30>
 800606c:	f7fb fe6e 	bl	8001d4c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006078:	429a      	cmp	r2, r3
 800607a:	d241      	bcs.n	8006100 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800609c:	637a      	str	r2, [r7, #52]	; 0x34
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e5      	bne.n	800607c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d0:	623a      	str	r2, [r7, #32]
 80060d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e00f      	b.n	8006120 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	429a      	cmp	r2, r3
 800611c:	d09f      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3740      	adds	r7, #64	; 0x40
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2222      	movs	r2, #34	; 0x22
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006174:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0220 	orr.w	r2, r2, #32
 8006194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b095      	sub	sp, #84	; 0x54
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061cc:	643a      	str	r2, [r7, #64]	; 0x40
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e5      	bne.n	80061ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3314      	adds	r3, #20
 80061e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3314      	adds	r3, #20
 80061fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	2b01      	cmp	r3, #1
 800621a:	d119      	bne.n	8006250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60bb      	str	r3, [r7, #8]
   return(result);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	647b      	str	r3, [r7, #68]	; 0x44
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623c:	61ba      	str	r2, [r7, #24]
 800623e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800625e:	bf00      	nop
 8006260:	3754      	adds	r7, #84	; 0x54
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fecb 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b21      	cmp	r3, #33	; 0x21
 80062a4:	d13e      	bne.n	8006324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d114      	bne.n	80062da <UART_Transmit_IT+0x48>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d110      	bne.n	80062da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	1c9a      	adds	r2, r3, #2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]
 80062d8:	e008      	b.n	80062ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6211      	str	r1, [r2, #32]
 80062e4:	781a      	ldrb	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4619      	mov	r1, r3
 80062fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800630e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fe5a 	bl	800600c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b08c      	sub	sp, #48	; 0x30
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b22      	cmp	r3, #34	; 0x22
 8006374:	f040 80ab 	bne.w	80064ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d117      	bne.n	80063b2 <UART_Receive_IT+0x50>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d113      	bne.n	80063b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	1c9a      	adds	r2, r3, #2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
 80063b0:	e026      	b.n	8006400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c4:	d007      	beq.n	80063d6 <UART_Receive_IT+0x74>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <UART_Receive_IT+0x82>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e008      	b.n	80063f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29b      	uxth	r3, r3
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4619      	mov	r1, r3
 800640e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006410:	2b00      	cmp	r3, #0
 8006412:	d15a      	bne.n	80064ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0220 	bic.w	r2, r2, #32
 8006422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	2b01      	cmp	r3, #1
 8006452:	d135      	bne.n	80064c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	613b      	str	r3, [r7, #16]
   return(result);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f023 0310 	bic.w	r3, r3, #16
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	623a      	str	r2, [r7, #32]
 800647c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	61bb      	str	r3, [r7, #24]
   return(result);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b10      	cmp	r3, #16
 800649a:	d10a      	bne.n	80064b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fdbb 	bl	8006034 <HAL_UARTEx_RxEventCallback>
 80064be:	e002      	b.n	80064c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fb f9b7 	bl	8001834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e002      	b.n	80064d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3730      	adds	r7, #48	; 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064dc:	b0c0      	sub	sp, #256	; 0x100
 80064de:	af00      	add	r7, sp, #0
 80064e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	ea40 0301 	orr.w	r3, r0, r1
 8006500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	431a      	orrs	r2, r3
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	431a      	orrs	r2, r3
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006530:	f021 010c 	bic.w	r1, r1, #12
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800653e:	430b      	orrs	r3, r1
 8006540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006552:	6999      	ldr	r1, [r3, #24]
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	ea40 0301 	orr.w	r3, r0, r1
 800655e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b8f      	ldr	r3, [pc, #572]	; (80067a4 <UART_SetConfig+0x2cc>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d005      	beq.n	8006578 <UART_SetConfig+0xa0>
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b8d      	ldr	r3, [pc, #564]	; (80067a8 <UART_SetConfig+0x2d0>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d104      	bne.n	8006582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006578:	f7fe fb7c 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 800657c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006580:	e003      	b.n	800658a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006582:	f7fe fb63 	bl	8004c4c <HAL_RCC_GetPCLK1Freq>
 8006586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006594:	f040 810c 	bne.w	80067b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065b2:	415b      	adcs	r3, r3
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ba:	4621      	mov	r1, r4
 80065bc:	eb12 0801 	adds.w	r8, r2, r1
 80065c0:	4629      	mov	r1, r5
 80065c2:	eb43 0901 	adc.w	r9, r3, r1
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065da:	4690      	mov	r8, r2
 80065dc:	4699      	mov	r9, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	eb18 0303 	adds.w	r3, r8, r3
 80065e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e8:	462b      	mov	r3, r5
 80065ea:	eb49 0303 	adc.w	r3, r9, r3
 80065ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006606:	460b      	mov	r3, r1
 8006608:	18db      	adds	r3, r3, r3
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
 800660c:	4613      	mov	r3, r2
 800660e:	eb42 0303 	adc.w	r3, r2, r3
 8006612:	657b      	str	r3, [r7, #84]	; 0x54
 8006614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800661c:	f7f9 fe38 	bl	8000290 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4b61      	ldr	r3, [pc, #388]	; (80067ac <UART_SetConfig+0x2d4>)
 8006626:	fba3 2302 	umull	r2, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	011c      	lsls	r4, r3, #4
 800662e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800663c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	1891      	adds	r1, r2, r2
 8006646:	64b9      	str	r1, [r7, #72]	; 0x48
 8006648:	415b      	adcs	r3, r3
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800664c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006650:	4641      	mov	r1, r8
 8006652:	eb12 0a01 	adds.w	sl, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0b01 	adc.w	fp, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800666c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006670:	4692      	mov	sl, r2
 8006672:	469b      	mov	fp, r3
 8006674:	4643      	mov	r3, r8
 8006676:	eb1a 0303 	adds.w	r3, sl, r3
 800667a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667e:	464b      	mov	r3, r9
 8006680:	eb4b 0303 	adc.w	r3, fp, r3
 8006684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800669c:	460b      	mov	r3, r1
 800669e:	18db      	adds	r3, r3, r3
 80066a0:	643b      	str	r3, [r7, #64]	; 0x40
 80066a2:	4613      	mov	r3, r2
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
 80066aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066b2:	f7f9 fded 	bl	8000290 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <UART_SetConfig+0x2d4>)
 80066be:	fba3 2301 	umull	r2, r3, r3, r1
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2264      	movs	r2, #100	; 0x64
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	1acb      	subs	r3, r1, r3
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066d2:	4b36      	ldr	r3, [pc, #216]	; (80067ac <UART_SetConfig+0x2d4>)
 80066d4:	fba3 2302 	umull	r2, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066e0:	441c      	add	r4, r3
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80066fc:	415b      	adcs	r3, r3
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006704:	4641      	mov	r1, r8
 8006706:	1851      	adds	r1, r2, r1
 8006708:	6339      	str	r1, [r7, #48]	; 0x30
 800670a:	4649      	mov	r1, r9
 800670c:	414b      	adcs	r3, r1
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800671c:	4659      	mov	r1, fp
 800671e:	00cb      	lsls	r3, r1, #3
 8006720:	4651      	mov	r1, sl
 8006722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006726:	4651      	mov	r1, sl
 8006728:	00ca      	lsls	r2, r1, #3
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	4603      	mov	r3, r0
 8006730:	4642      	mov	r2, r8
 8006732:	189b      	adds	r3, r3, r2
 8006734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006738:	464b      	mov	r3, r9
 800673a:	460a      	mov	r2, r1
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006758:	460b      	mov	r3, r1
 800675a:	18db      	adds	r3, r3, r3
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
 800675e:	4613      	mov	r3, r2
 8006760:	eb42 0303 	adc.w	r3, r2, r3
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800676a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800676e:	f7f9 fd8f 	bl	8000290 <__aeabi_uldivmod>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <UART_SetConfig+0x2d4>)
 8006778:	fba3 1302 	umull	r1, r3, r3, r2
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	2164      	movs	r1, #100	; 0x64
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	3332      	adds	r3, #50	; 0x32
 800678a:	4a08      	ldr	r2, [pc, #32]	; (80067ac <UART_SetConfig+0x2d4>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f003 0207 	and.w	r2, r3, #7
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4422      	add	r2, r4
 800679e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067a0:	e105      	b.n	80069ae <UART_SetConfig+0x4d6>
 80067a2:	bf00      	nop
 80067a4:	40011000 	.word	0x40011000
 80067a8:	40011400 	.word	0x40011400
 80067ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067c2:	4642      	mov	r2, r8
 80067c4:	464b      	mov	r3, r9
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	6239      	str	r1, [r7, #32]
 80067ca:	415b      	adcs	r3, r3
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067d2:	4641      	mov	r1, r8
 80067d4:	1854      	adds	r4, r2, r1
 80067d6:	4649      	mov	r1, r9
 80067d8:	eb43 0501 	adc.w	r5, r3, r1
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	00eb      	lsls	r3, r5, #3
 80067e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ea:	00e2      	lsls	r2, r4, #3
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	4643      	mov	r3, r8
 80067f2:	18e3      	adds	r3, r4, r3
 80067f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067f8:	464b      	mov	r3, r9
 80067fa:	eb45 0303 	adc.w	r3, r5, r3
 80067fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800680e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800681e:	4629      	mov	r1, r5
 8006820:	008b      	lsls	r3, r1, #2
 8006822:	4621      	mov	r1, r4
 8006824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006828:	4621      	mov	r1, r4
 800682a:	008a      	lsls	r2, r1, #2
 800682c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006830:	f7f9 fd2e 	bl	8000290 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4b60      	ldr	r3, [pc, #384]	; (80069bc <UART_SetConfig+0x4e4>)
 800683a:	fba3 2302 	umull	r2, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	011c      	lsls	r4, r3, #4
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800684c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	1891      	adds	r1, r2, r2
 800685a:	61b9      	str	r1, [r7, #24]
 800685c:	415b      	adcs	r3, r3
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006864:	4641      	mov	r1, r8
 8006866:	1851      	adds	r1, r2, r1
 8006868:	6139      	str	r1, [r7, #16]
 800686a:	4649      	mov	r1, r9
 800686c:	414b      	adcs	r3, r1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800687c:	4659      	mov	r1, fp
 800687e:	00cb      	lsls	r3, r1, #3
 8006880:	4651      	mov	r1, sl
 8006882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006886:	4651      	mov	r1, sl
 8006888:	00ca      	lsls	r2, r1, #3
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	4603      	mov	r3, r0
 8006890:	4642      	mov	r2, r8
 8006892:	189b      	adds	r3, r3, r2
 8006894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006898:	464b      	mov	r3, r9
 800689a:	460a      	mov	r2, r1
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068bc:	4649      	mov	r1, r9
 80068be:	008b      	lsls	r3, r1, #2
 80068c0:	4641      	mov	r1, r8
 80068c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c6:	4641      	mov	r1, r8
 80068c8:	008a      	lsls	r2, r1, #2
 80068ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ce:	f7f9 fcdf 	bl	8000290 <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <UART_SetConfig+0x4e4>)
 80068d8:	fba3 1302 	umull	r1, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2164      	movs	r1, #100	; 0x64
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	3332      	adds	r3, #50	; 0x32
 80068ea:	4a34      	ldr	r2, [pc, #208]	; (80069bc <UART_SetConfig+0x4e4>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f6:	441c      	add	r4, r3
 80068f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fc:	2200      	movs	r2, #0
 80068fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006900:	677a      	str	r2, [r7, #116]	; 0x74
 8006902:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006906:	4642      	mov	r2, r8
 8006908:	464b      	mov	r3, r9
 800690a:	1891      	adds	r1, r2, r2
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	415b      	adcs	r3, r3
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006916:	4641      	mov	r1, r8
 8006918:	1851      	adds	r1, r2, r1
 800691a:	6039      	str	r1, [r7, #0]
 800691c:	4649      	mov	r1, r9
 800691e:	414b      	adcs	r3, r1
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800692e:	4659      	mov	r1, fp
 8006930:	00cb      	lsls	r3, r1, #3
 8006932:	4651      	mov	r1, sl
 8006934:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006938:	4651      	mov	r1, sl
 800693a:	00ca      	lsls	r2, r1, #3
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	4603      	mov	r3, r0
 8006942:	4642      	mov	r2, r8
 8006944:	189b      	adds	r3, r3, r2
 8006946:	66bb      	str	r3, [r7, #104]	; 0x68
 8006948:	464b      	mov	r3, r9
 800694a:	460a      	mov	r2, r1
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	663b      	str	r3, [r7, #96]	; 0x60
 800695c:	667a      	str	r2, [r7, #100]	; 0x64
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800696a:	4649      	mov	r1, r9
 800696c:	008b      	lsls	r3, r1, #2
 800696e:	4641      	mov	r1, r8
 8006970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006974:	4641      	mov	r1, r8
 8006976:	008a      	lsls	r2, r1, #2
 8006978:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800697c:	f7f9 fc88 	bl	8000290 <__aeabi_uldivmod>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <UART_SetConfig+0x4e4>)
 8006986:	fba3 1302 	umull	r1, r3, r3, r2
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2164      	movs	r1, #100	; 0x64
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	3332      	adds	r3, #50	; 0x32
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <UART_SetConfig+0x4e4>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4422      	add	r2, r4
 80069ac:	609a      	str	r2, [r3, #8]
}
 80069ae:	bf00      	nop
 80069b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069b4:	46bd      	mov	sp, r7
 80069b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ba:	bf00      	nop
 80069bc:	51eb851f 	.word	0x51eb851f

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000018 	.word	0x20000018

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4d0d      	ldr	r5, [pc, #52]	; (8006a04 <__libc_init_array+0x38>)
 80069d0:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	2600      	movs	r6, #0
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	4d0b      	ldr	r5, [pc, #44]	; (8006a0c <__libc_init_array+0x40>)
 80069de:	4c0c      	ldr	r4, [pc, #48]	; (8006a10 <__libc_init_array+0x44>)
 80069e0:	f000 fc8e 	bl	8007300 <_init>
 80069e4:	1b64      	subs	r4, r4, r5
 80069e6:	10a4      	asrs	r4, r4, #2
 80069e8:	2600      	movs	r6, #0
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	080076f4 	.word	0x080076f4
 8006a08:	080076f4 	.word	0x080076f4
 8006a0c:	080076f4 	.word	0x080076f4
 8006a10:	080076f8 	.word	0x080076f8

08006a14 <memset>:
 8006a14:	4402      	add	r2, r0
 8006a16:	4603      	mov	r3, r0
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <memset+0xa>
 8006a1c:	4770      	bx	lr
 8006a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a22:	e7f9      	b.n	8006a18 <memset+0x4>

08006a24 <siprintf>:
 8006a24:	b40e      	push	{r1, r2, r3}
 8006a26:	b500      	push	{lr}
 8006a28:	b09c      	sub	sp, #112	; 0x70
 8006a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	9006      	str	r0, [sp, #24]
 8006a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a34:	4809      	ldr	r0, [pc, #36]	; (8006a5c <siprintf+0x38>)
 8006a36:	9107      	str	r1, [sp, #28]
 8006a38:	9104      	str	r1, [sp, #16]
 8006a3a:	4909      	ldr	r1, [pc, #36]	; (8006a60 <siprintf+0x3c>)
 8006a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	a902      	add	r1, sp, #8
 8006a48:	f000 f868 	bl	8006b1c <_svfiprintf_r>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	b01c      	add	sp, #112	; 0x70
 8006a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a58:	b003      	add	sp, #12
 8006a5a:	4770      	bx	lr
 8006a5c:	20000018 	.word	0x20000018
 8006a60:	ffff0208 	.word	0xffff0208

08006a64 <__ssputs_r>:
 8006a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	688e      	ldr	r6, [r1, #8]
 8006a6a:	429e      	cmp	r6, r3
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	4690      	mov	r8, r2
 8006a72:	461f      	mov	r7, r3
 8006a74:	d838      	bhi.n	8006ae8 <__ssputs_r+0x84>
 8006a76:	898a      	ldrh	r2, [r1, #12]
 8006a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a7c:	d032      	beq.n	8006ae4 <__ssputs_r+0x80>
 8006a7e:	6825      	ldr	r5, [r4, #0]
 8006a80:	6909      	ldr	r1, [r1, #16]
 8006a82:	eba5 0901 	sub.w	r9, r5, r1
 8006a86:	6965      	ldr	r5, [r4, #20]
 8006a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a90:	3301      	adds	r3, #1
 8006a92:	444b      	add	r3, r9
 8006a94:	106d      	asrs	r5, r5, #1
 8006a96:	429d      	cmp	r5, r3
 8006a98:	bf38      	it	cc
 8006a9a:	461d      	movcc	r5, r3
 8006a9c:	0553      	lsls	r3, r2, #21
 8006a9e:	d531      	bpl.n	8006b04 <__ssputs_r+0xa0>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f000 fb63 	bl	800716c <_malloc_r>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	b950      	cbnz	r0, 8006ac0 <__ssputs_r+0x5c>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	f8ca 3000 	str.w	r3, [sl]
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	6921      	ldr	r1, [r4, #16]
 8006ac2:	464a      	mov	r2, r9
 8006ac4:	f000 fabe 	bl	8007044 <memcpy>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	6126      	str	r6, [r4, #16]
 8006ad6:	6165      	str	r5, [r4, #20]
 8006ad8:	444e      	add	r6, r9
 8006ada:	eba5 0509 	sub.w	r5, r5, r9
 8006ade:	6026      	str	r6, [r4, #0]
 8006ae0:	60a5      	str	r5, [r4, #8]
 8006ae2:	463e      	mov	r6, r7
 8006ae4:	42be      	cmp	r6, r7
 8006ae6:	d900      	bls.n	8006aea <__ssputs_r+0x86>
 8006ae8:	463e      	mov	r6, r7
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	4632      	mov	r2, r6
 8006aee:	4641      	mov	r1, r8
 8006af0:	f000 fab6 	bl	8007060 <memmove>
 8006af4:	68a3      	ldr	r3, [r4, #8]
 8006af6:	1b9b      	subs	r3, r3, r6
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	4433      	add	r3, r6
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7db      	b.n	8006abc <__ssputs_r+0x58>
 8006b04:	462a      	mov	r2, r5
 8006b06:	f000 fba5 	bl	8007254 <_realloc_r>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d1e1      	bne.n	8006ad4 <__ssputs_r+0x70>
 8006b10:	6921      	ldr	r1, [r4, #16]
 8006b12:	4650      	mov	r0, sl
 8006b14:	f000 fabe 	bl	8007094 <_free_r>
 8006b18:	e7c7      	b.n	8006aaa <__ssputs_r+0x46>
	...

08006b1c <_svfiprintf_r>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	4698      	mov	r8, r3
 8006b22:	898b      	ldrh	r3, [r1, #12]
 8006b24:	061b      	lsls	r3, r3, #24
 8006b26:	b09d      	sub	sp, #116	; 0x74
 8006b28:	4607      	mov	r7, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	d50e      	bpl.n	8006b4e <_svfiprintf_r+0x32>
 8006b30:	690b      	ldr	r3, [r1, #16]
 8006b32:	b963      	cbnz	r3, 8006b4e <_svfiprintf_r+0x32>
 8006b34:	2140      	movs	r1, #64	; 0x40
 8006b36:	f000 fb19 	bl	800716c <_malloc_r>
 8006b3a:	6028      	str	r0, [r5, #0]
 8006b3c:	6128      	str	r0, [r5, #16]
 8006b3e:	b920      	cbnz	r0, 8006b4a <_svfiprintf_r+0x2e>
 8006b40:	230c      	movs	r3, #12
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	e0d1      	b.n	8006cee <_svfiprintf_r+0x1d2>
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	616b      	str	r3, [r5, #20]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9309      	str	r3, [sp, #36]	; 0x24
 8006b52:	2320      	movs	r3, #32
 8006b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5c:	2330      	movs	r3, #48	; 0x30
 8006b5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d08 <_svfiprintf_r+0x1ec>
 8006b62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b66:	f04f 0901 	mov.w	r9, #1
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	469a      	mov	sl, r3
 8006b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b72:	b10a      	cbz	r2, 8006b78 <_svfiprintf_r+0x5c>
 8006b74:	2a25      	cmp	r2, #37	; 0x25
 8006b76:	d1f9      	bne.n	8006b6c <_svfiprintf_r+0x50>
 8006b78:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7c:	d00b      	beq.n	8006b96 <_svfiprintf_r+0x7a>
 8006b7e:	465b      	mov	r3, fp
 8006b80:	4622      	mov	r2, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff ff6d 	bl	8006a64 <__ssputs_r>
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f000 80aa 	beq.w	8006ce4 <_svfiprintf_r+0x1c8>
 8006b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b92:	445a      	add	r2, fp
 8006b94:	9209      	str	r2, [sp, #36]	; 0x24
 8006b96:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80a2 	beq.w	8006ce4 <_svfiprintf_r+0x1c8>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006baa:	f10a 0a01 	add.w	sl, sl, #1
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	9307      	str	r3, [sp, #28]
 8006bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8006bb8:	4654      	mov	r4, sl
 8006bba:	2205      	movs	r2, #5
 8006bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc0:	4851      	ldr	r0, [pc, #324]	; (8006d08 <_svfiprintf_r+0x1ec>)
 8006bc2:	f7f9 fb15 	bl	80001f0 <memchr>
 8006bc6:	9a04      	ldr	r2, [sp, #16]
 8006bc8:	b9d8      	cbnz	r0, 8006c02 <_svfiprintf_r+0xe6>
 8006bca:	06d0      	lsls	r0, r2, #27
 8006bcc:	bf44      	itt	mi
 8006bce:	2320      	movmi	r3, #32
 8006bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd4:	0711      	lsls	r1, r2, #28
 8006bd6:	bf44      	itt	mi
 8006bd8:	232b      	movmi	r3, #43	; 0x2b
 8006bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bde:	f89a 3000 	ldrb.w	r3, [sl]
 8006be2:	2b2a      	cmp	r3, #42	; 0x2a
 8006be4:	d015      	beq.n	8006c12 <_svfiprintf_r+0xf6>
 8006be6:	9a07      	ldr	r2, [sp, #28]
 8006be8:	4654      	mov	r4, sl
 8006bea:	2000      	movs	r0, #0
 8006bec:	f04f 0c0a 	mov.w	ip, #10
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf6:	3b30      	subs	r3, #48	; 0x30
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d94e      	bls.n	8006c9a <_svfiprintf_r+0x17e>
 8006bfc:	b1b0      	cbz	r0, 8006c2c <_svfiprintf_r+0x110>
 8006bfe:	9207      	str	r2, [sp, #28]
 8006c00:	e014      	b.n	8006c2c <_svfiprintf_r+0x110>
 8006c02:	eba0 0308 	sub.w	r3, r0, r8
 8006c06:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	46a2      	mov	sl, r4
 8006c10:	e7d2      	b.n	8006bb8 <_svfiprintf_r+0x9c>
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	1d19      	adds	r1, r3, #4
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	9103      	str	r1, [sp, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	bfbb      	ittet	lt
 8006c1e:	425b      	neglt	r3, r3
 8006c20:	f042 0202 	orrlt.w	r2, r2, #2
 8006c24:	9307      	strge	r3, [sp, #28]
 8006c26:	9307      	strlt	r3, [sp, #28]
 8006c28:	bfb8      	it	lt
 8006c2a:	9204      	strlt	r2, [sp, #16]
 8006c2c:	7823      	ldrb	r3, [r4, #0]
 8006c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c30:	d10c      	bne.n	8006c4c <_svfiprintf_r+0x130>
 8006c32:	7863      	ldrb	r3, [r4, #1]
 8006c34:	2b2a      	cmp	r3, #42	; 0x2a
 8006c36:	d135      	bne.n	8006ca4 <_svfiprintf_r+0x188>
 8006c38:	9b03      	ldr	r3, [sp, #12]
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	9203      	str	r2, [sp, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfb8      	it	lt
 8006c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c48:	3402      	adds	r4, #2
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d18 <_svfiprintf_r+0x1fc>
 8006c50:	7821      	ldrb	r1, [r4, #0]
 8006c52:	2203      	movs	r2, #3
 8006c54:	4650      	mov	r0, sl
 8006c56:	f7f9 facb 	bl	80001f0 <memchr>
 8006c5a:	b140      	cbz	r0, 8006c6e <_svfiprintf_r+0x152>
 8006c5c:	2340      	movs	r3, #64	; 0x40
 8006c5e:	eba0 000a 	sub.w	r0, r0, sl
 8006c62:	fa03 f000 	lsl.w	r0, r3, r0
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	4303      	orrs	r3, r0
 8006c6a:	3401      	adds	r4, #1
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c72:	4826      	ldr	r0, [pc, #152]	; (8006d0c <_svfiprintf_r+0x1f0>)
 8006c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c78:	2206      	movs	r2, #6
 8006c7a:	f7f9 fab9 	bl	80001f0 <memchr>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d038      	beq.n	8006cf4 <_svfiprintf_r+0x1d8>
 8006c82:	4b23      	ldr	r3, [pc, #140]	; (8006d10 <_svfiprintf_r+0x1f4>)
 8006c84:	bb1b      	cbnz	r3, 8006cce <_svfiprintf_r+0x1b2>
 8006c86:	9b03      	ldr	r3, [sp, #12]
 8006c88:	3307      	adds	r3, #7
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	3308      	adds	r3, #8
 8006c90:	9303      	str	r3, [sp, #12]
 8006c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c94:	4433      	add	r3, r6
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
 8006c98:	e767      	b.n	8006b6a <_svfiprintf_r+0x4e>
 8006c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	e7a5      	b.n	8006bf0 <_svfiprintf_r+0xd4>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	3401      	adds	r4, #1
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	4619      	mov	r1, r3
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb6:	3a30      	subs	r2, #48	; 0x30
 8006cb8:	2a09      	cmp	r2, #9
 8006cba:	d903      	bls.n	8006cc4 <_svfiprintf_r+0x1a8>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0c5      	beq.n	8006c4c <_svfiprintf_r+0x130>
 8006cc0:	9105      	str	r1, [sp, #20]
 8006cc2:	e7c3      	b.n	8006c4c <_svfiprintf_r+0x130>
 8006cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc8:	4604      	mov	r4, r0
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e7f0      	b.n	8006cb0 <_svfiprintf_r+0x194>
 8006cce:	ab03      	add	r3, sp, #12
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	462a      	mov	r2, r5
 8006cd4:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <_svfiprintf_r+0x1f8>)
 8006cd6:	a904      	add	r1, sp, #16
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f3af 8000 	nop.w
 8006cde:	1c42      	adds	r2, r0, #1
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	d1d6      	bne.n	8006c92 <_svfiprintf_r+0x176>
 8006ce4:	89ab      	ldrh	r3, [r5, #12]
 8006ce6:	065b      	lsls	r3, r3, #25
 8006ce8:	f53f af2c 	bmi.w	8006b44 <_svfiprintf_r+0x28>
 8006cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cee:	b01d      	add	sp, #116	; 0x74
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	ab03      	add	r3, sp, #12
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <_svfiprintf_r+0x1f8>)
 8006cfc:	a904      	add	r1, sp, #16
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f000 f87a 	bl	8006df8 <_printf_i>
 8006d04:	e7eb      	b.n	8006cde <_svfiprintf_r+0x1c2>
 8006d06:	bf00      	nop
 8006d08:	080076b8 	.word	0x080076b8
 8006d0c:	080076c2 	.word	0x080076c2
 8006d10:	00000000 	.word	0x00000000
 8006d14:	08006a65 	.word	0x08006a65
 8006d18:	080076be 	.word	0x080076be

08006d1c <_printf_common>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	4616      	mov	r6, r2
 8006d22:	4699      	mov	r9, r3
 8006d24:	688a      	ldr	r2, [r1, #8]
 8006d26:	690b      	ldr	r3, [r1, #16]
 8006d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfb8      	it	lt
 8006d30:	4613      	movlt	r3, r2
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_printf_common+0x26>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	6833      	ldrmi	r3, [r6, #0]
 8006d4a:	3302      	addmi	r3, #2
 8006d4c:	6033      	strmi	r3, [r6, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d106      	bne.n	8006d64 <_printf_common+0x48>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	6832      	ldr	r2, [r6, #0]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dc26      	bgt.n	8006db2 <_printf_common+0x96>
 8006d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d68:	1e13      	subs	r3, r2, #0
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	bf18      	it	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d42b      	bmi.n	8006dcc <_printf_common+0xb0>
 8006d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d01e      	beq.n	8006dc0 <_printf_common+0xa4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	68e5      	ldr	r5, [r4, #12]
 8006d86:	6832      	ldr	r2, [r6, #0]
 8006d88:	f003 0306 	and.w	r3, r3, #6
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	bf08      	it	eq
 8006d90:	1aad      	subeq	r5, r5, r2
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	bf0c      	ite	eq
 8006d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d9c:	2500      	movne	r5, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bfc4      	itt	gt
 8006da2:	1a9b      	subgt	r3, r3, r2
 8006da4:	18ed      	addgt	r5, r5, r3
 8006da6:	2600      	movs	r6, #0
 8006da8:	341a      	adds	r4, #26
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d11a      	bne.n	8006de4 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e008      	b.n	8006dc4 <_printf_common+0xa8>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	4649      	mov	r1, r9
 8006db8:	4638      	mov	r0, r7
 8006dba:	47c0      	blx	r8
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_printf_common+0xac>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7c6      	b.n	8006d5a <_printf_common+0x3e>
 8006dcc:	18e1      	adds	r1, r4, r3
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	2030      	movs	r0, #48	; 0x30
 8006dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd6:	4422      	add	r2, r4
 8006dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006de0:	3302      	adds	r3, #2
 8006de2:	e7c7      	b.n	8006d74 <_printf_common+0x58>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4622      	mov	r2, r4
 8006de8:	4649      	mov	r1, r9
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa4>
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7d9      	b.n	8006daa <_printf_common+0x8e>
	...

08006df8 <_printf_i>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	7e0f      	ldrb	r7, [r1, #24]
 8006dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e00:	2f78      	cmp	r7, #120	; 0x78
 8006e02:	4691      	mov	r9, r2
 8006e04:	4680      	mov	r8, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e0e:	d807      	bhi.n	8006e20 <_printf_i+0x28>
 8006e10:	2f62      	cmp	r7, #98	; 0x62
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x32>
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	f000 80d8 	beq.w	8006fca <_printf_i+0x1d2>
 8006e1a:	2f58      	cmp	r7, #88	; 0x58
 8006e1c:	f000 80a3 	beq.w	8006f66 <_printf_i+0x16e>
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e28:	e03a      	b.n	8006ea0 <_printf_i+0xa8>
 8006e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e2e:	2b15      	cmp	r3, #21
 8006e30:	d8f6      	bhi.n	8006e20 <_printf_i+0x28>
 8006e32:	a101      	add	r1, pc, #4	; (adr r1, 8006e38 <_printf_i+0x40>)
 8006e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006e21 	.word	0x08006e21
 8006e44:	08006e21 	.word	0x08006e21
 8006e48:	08006e21 	.word	0x08006e21
 8006e4c:	08006e21 	.word	0x08006e21
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e21 	.word	0x08006e21
 8006e58:	08006e21 	.word	0x08006e21
 8006e5c:	08006e21 	.word	0x08006e21
 8006e60:	08006e21 	.word	0x08006e21
 8006e64:	08006fb1 	.word	0x08006fb1
 8006e68:	08006ed5 	.word	0x08006ed5
 8006e6c:	08006f93 	.word	0x08006f93
 8006e70:	08006e21 	.word	0x08006e21
 8006e74:	08006e21 	.word	0x08006e21
 8006e78:	08006fd3 	.word	0x08006fd3
 8006e7c:	08006e21 	.word	0x08006e21
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006e21 	.word	0x08006e21
 8006e88:	08006e21 	.word	0x08006e21
 8006e8c:	08006f9b 	.word	0x08006f9b
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	602a      	str	r2, [r5, #0]
 8006e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0a3      	b.n	8006fec <_printf_i+0x1f4>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	6829      	ldr	r1, [r5, #0]
 8006ea8:	0606      	lsls	r6, r0, #24
 8006eaa:	f101 0304 	add.w	r3, r1, #4
 8006eae:	d50a      	bpl.n	8006ec6 <_printf_i+0xce>
 8006eb0:	680e      	ldr	r6, [r1, #0]
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	da03      	bge.n	8006ec0 <_printf_i+0xc8>
 8006eb8:	232d      	movs	r3, #45	; 0x2d
 8006eba:	4276      	negs	r6, r6
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec0:	485e      	ldr	r0, [pc, #376]	; (800703c <_printf_i+0x244>)
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	e019      	b.n	8006efa <_printf_i+0x102>
 8006ec6:	680e      	ldr	r6, [r1, #0]
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ece:	bf18      	it	ne
 8006ed0:	b236      	sxthne	r6, r6
 8006ed2:	e7ef      	b.n	8006eb4 <_printf_i+0xbc>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	6820      	ldr	r0, [r4, #0]
 8006ed8:	1d19      	adds	r1, r3, #4
 8006eda:	6029      	str	r1, [r5, #0]
 8006edc:	0601      	lsls	r1, r0, #24
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0xec>
 8006ee0:	681e      	ldr	r6, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <_printf_i+0xf2>
 8006ee4:	0646      	lsls	r6, r0, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0xe8>
 8006ee8:	881e      	ldrh	r6, [r3, #0]
 8006eea:	4854      	ldr	r0, [pc, #336]	; (800703c <_printf_i+0x244>)
 8006eec:	2f6f      	cmp	r7, #111	; 0x6f
 8006eee:	bf0c      	ite	eq
 8006ef0:	2308      	moveq	r3, #8
 8006ef2:	230a      	movne	r3, #10
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006efa:	6865      	ldr	r5, [r4, #4]
 8006efc:	60a5      	str	r5, [r4, #8]
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	bfa2      	ittt	ge
 8006f02:	6821      	ldrge	r1, [r4, #0]
 8006f04:	f021 0104 	bicge.w	r1, r1, #4
 8006f08:	6021      	strge	r1, [r4, #0]
 8006f0a:	b90e      	cbnz	r6, 8006f10 <_printf_i+0x118>
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	d04d      	beq.n	8006fac <_printf_i+0x1b4>
 8006f10:	4615      	mov	r5, r2
 8006f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f16:	fb03 6711 	mls	r7, r3, r1, r6
 8006f1a:	5dc7      	ldrb	r7, [r0, r7]
 8006f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f20:	4637      	mov	r7, r6
 8006f22:	42bb      	cmp	r3, r7
 8006f24:	460e      	mov	r6, r1
 8006f26:	d9f4      	bls.n	8006f12 <_printf_i+0x11a>
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d10b      	bne.n	8006f44 <_printf_i+0x14c>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	07de      	lsls	r6, r3, #31
 8006f30:	d508      	bpl.n	8006f44 <_printf_i+0x14c>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6861      	ldr	r1, [r4, #4]
 8006f36:	4299      	cmp	r1, r3
 8006f38:	bfde      	ittt	le
 8006f3a:	2330      	movle	r3, #48	; 0x30
 8006f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f44:	1b52      	subs	r2, r2, r5
 8006f46:	6122      	str	r2, [r4, #16]
 8006f48:	f8cd a000 	str.w	sl, [sp]
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	aa03      	add	r2, sp, #12
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fee2 	bl	8006d1c <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d14c      	bne.n	8006ff6 <_printf_i+0x1fe>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	b004      	add	sp, #16
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	4835      	ldr	r0, [pc, #212]	; (800703c <_printf_i+0x244>)
 8006f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f6c:	6829      	ldr	r1, [r5, #0]
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f74:	6029      	str	r1, [r5, #0]
 8006f76:	061d      	lsls	r5, r3, #24
 8006f78:	d514      	bpl.n	8006fa4 <_printf_i+0x1ac>
 8006f7a:	07df      	lsls	r7, r3, #31
 8006f7c:	bf44      	itt	mi
 8006f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f82:	6023      	strmi	r3, [r4, #0]
 8006f84:	b91e      	cbnz	r6, 8006f8e <_printf_i+0x196>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	f023 0320 	bic.w	r3, r3, #32
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	2310      	movs	r3, #16
 8006f90:	e7b0      	b.n	8006ef4 <_printf_i+0xfc>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f043 0320 	orr.w	r3, r3, #32
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	2378      	movs	r3, #120	; 0x78
 8006f9c:	4828      	ldr	r0, [pc, #160]	; (8007040 <_printf_i+0x248>)
 8006f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fa2:	e7e3      	b.n	8006f6c <_printf_i+0x174>
 8006fa4:	0659      	lsls	r1, r3, #25
 8006fa6:	bf48      	it	mi
 8006fa8:	b2b6      	uxthmi	r6, r6
 8006faa:	e7e6      	b.n	8006f7a <_printf_i+0x182>
 8006fac:	4615      	mov	r5, r2
 8006fae:	e7bb      	b.n	8006f28 <_printf_i+0x130>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	6826      	ldr	r6, [r4, #0]
 8006fb4:	6961      	ldr	r1, [r4, #20]
 8006fb6:	1d18      	adds	r0, r3, #4
 8006fb8:	6028      	str	r0, [r5, #0]
 8006fba:	0635      	lsls	r5, r6, #24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	d501      	bpl.n	8006fc4 <_printf_i+0x1cc>
 8006fc0:	6019      	str	r1, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <_printf_i+0x1d2>
 8006fc4:	0670      	lsls	r0, r6, #25
 8006fc6:	d5fb      	bpl.n	8006fc0 <_printf_i+0x1c8>
 8006fc8:	8019      	strh	r1, [r3, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	4615      	mov	r5, r2
 8006fd0:	e7ba      	b.n	8006f48 <_printf_i+0x150>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	1d1a      	adds	r2, r3, #4
 8006fd6:	602a      	str	r2, [r5, #0]
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	6862      	ldr	r2, [r4, #4]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7f9 f906 	bl	80001f0 <memchr>
 8006fe4:	b108      	cbz	r0, 8006fea <_printf_i+0x1f2>
 8006fe6:	1b40      	subs	r0, r0, r5
 8006fe8:	6060      	str	r0, [r4, #4]
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff4:	e7a8      	b.n	8006f48 <_printf_i+0x150>
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	47d0      	blx	sl
 8007000:	3001      	adds	r0, #1
 8007002:	d0ab      	beq.n	8006f5c <_printf_i+0x164>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	079b      	lsls	r3, r3, #30
 8007008:	d413      	bmi.n	8007032 <_printf_i+0x23a>
 800700a:	68e0      	ldr	r0, [r4, #12]
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	4298      	cmp	r0, r3
 8007010:	bfb8      	it	lt
 8007012:	4618      	movlt	r0, r3
 8007014:	e7a4      	b.n	8006f60 <_printf_i+0x168>
 8007016:	2301      	movs	r3, #1
 8007018:	4632      	mov	r2, r6
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	47d0      	blx	sl
 8007020:	3001      	adds	r0, #1
 8007022:	d09b      	beq.n	8006f5c <_printf_i+0x164>
 8007024:	3501      	adds	r5, #1
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	9903      	ldr	r1, [sp, #12]
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	42ab      	cmp	r3, r5
 800702e:	dcf2      	bgt.n	8007016 <_printf_i+0x21e>
 8007030:	e7eb      	b.n	800700a <_printf_i+0x212>
 8007032:	2500      	movs	r5, #0
 8007034:	f104 0619 	add.w	r6, r4, #25
 8007038:	e7f5      	b.n	8007026 <_printf_i+0x22e>
 800703a:	bf00      	nop
 800703c:	080076c9 	.word	0x080076c9
 8007040:	080076da 	.word	0x080076da

08007044 <memcpy>:
 8007044:	440a      	add	r2, r1
 8007046:	4291      	cmp	r1, r2
 8007048:	f100 33ff 	add.w	r3, r0, #4294967295
 800704c:	d100      	bne.n	8007050 <memcpy+0xc>
 800704e:	4770      	bx	lr
 8007050:	b510      	push	{r4, lr}
 8007052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800705a:	4291      	cmp	r1, r2
 800705c:	d1f9      	bne.n	8007052 <memcpy+0xe>
 800705e:	bd10      	pop	{r4, pc}

08007060 <memmove>:
 8007060:	4288      	cmp	r0, r1
 8007062:	b510      	push	{r4, lr}
 8007064:	eb01 0402 	add.w	r4, r1, r2
 8007068:	d902      	bls.n	8007070 <memmove+0x10>
 800706a:	4284      	cmp	r4, r0
 800706c:	4623      	mov	r3, r4
 800706e:	d807      	bhi.n	8007080 <memmove+0x20>
 8007070:	1e43      	subs	r3, r0, #1
 8007072:	42a1      	cmp	r1, r4
 8007074:	d008      	beq.n	8007088 <memmove+0x28>
 8007076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800707a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800707e:	e7f8      	b.n	8007072 <memmove+0x12>
 8007080:	4402      	add	r2, r0
 8007082:	4601      	mov	r1, r0
 8007084:	428a      	cmp	r2, r1
 8007086:	d100      	bne.n	800708a <memmove+0x2a>
 8007088:	bd10      	pop	{r4, pc}
 800708a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800708e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007092:	e7f7      	b.n	8007084 <memmove+0x24>

08007094 <_free_r>:
 8007094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007096:	2900      	cmp	r1, #0
 8007098:	d044      	beq.n	8007124 <_free_r+0x90>
 800709a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800709e:	9001      	str	r0, [sp, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f1a1 0404 	sub.w	r4, r1, #4
 80070a6:	bfb8      	it	lt
 80070a8:	18e4      	addlt	r4, r4, r3
 80070aa:	f000 f913 	bl	80072d4 <__malloc_lock>
 80070ae:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <_free_r+0x94>)
 80070b0:	9801      	ldr	r0, [sp, #4]
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	b933      	cbnz	r3, 80070c4 <_free_r+0x30>
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	6014      	str	r4, [r2, #0]
 80070ba:	b003      	add	sp, #12
 80070bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c0:	f000 b90e 	b.w	80072e0 <__malloc_unlock>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d908      	bls.n	80070da <_free_r+0x46>
 80070c8:	6825      	ldr	r5, [r4, #0]
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	428b      	cmp	r3, r1
 80070ce:	bf01      	itttt	eq
 80070d0:	6819      	ldreq	r1, [r3, #0]
 80070d2:	685b      	ldreq	r3, [r3, #4]
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	e7ed      	b.n	80070b6 <_free_r+0x22>
 80070da:	461a      	mov	r2, r3
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b10b      	cbz	r3, 80070e4 <_free_r+0x50>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d9fa      	bls.n	80070da <_free_r+0x46>
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	1855      	adds	r5, r2, r1
 80070e8:	42a5      	cmp	r5, r4
 80070ea:	d10b      	bne.n	8007104 <_free_r+0x70>
 80070ec:	6824      	ldr	r4, [r4, #0]
 80070ee:	4421      	add	r1, r4
 80070f0:	1854      	adds	r4, r2, r1
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	d1e0      	bne.n	80070ba <_free_r+0x26>
 80070f8:	681c      	ldr	r4, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	6053      	str	r3, [r2, #4]
 80070fe:	4421      	add	r1, r4
 8007100:	6011      	str	r1, [r2, #0]
 8007102:	e7da      	b.n	80070ba <_free_r+0x26>
 8007104:	d902      	bls.n	800710c <_free_r+0x78>
 8007106:	230c      	movs	r3, #12
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	e7d6      	b.n	80070ba <_free_r+0x26>
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	1961      	adds	r1, r4, r5
 8007110:	428b      	cmp	r3, r1
 8007112:	bf04      	itt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	bf04      	itt	eq
 800711c:	1949      	addeq	r1, r1, r5
 800711e:	6021      	streq	r1, [r4, #0]
 8007120:	6054      	str	r4, [r2, #4]
 8007122:	e7ca      	b.n	80070ba <_free_r+0x26>
 8007124:	b003      	add	sp, #12
 8007126:	bd30      	pop	{r4, r5, pc}
 8007128:	20000254 	.word	0x20000254

0800712c <sbrk_aligned>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	4e0e      	ldr	r6, [pc, #56]	; (8007168 <sbrk_aligned+0x3c>)
 8007130:	460c      	mov	r4, r1
 8007132:	6831      	ldr	r1, [r6, #0]
 8007134:	4605      	mov	r5, r0
 8007136:	b911      	cbnz	r1, 800713e <sbrk_aligned+0x12>
 8007138:	f000 f8bc 	bl	80072b4 <_sbrk_r>
 800713c:	6030      	str	r0, [r6, #0]
 800713e:	4621      	mov	r1, r4
 8007140:	4628      	mov	r0, r5
 8007142:	f000 f8b7 	bl	80072b4 <_sbrk_r>
 8007146:	1c43      	adds	r3, r0, #1
 8007148:	d00a      	beq.n	8007160 <sbrk_aligned+0x34>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d007      	beq.n	8007164 <sbrk_aligned+0x38>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4628      	mov	r0, r5
 8007158:	f000 f8ac 	bl	80072b4 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d101      	bne.n	8007164 <sbrk_aligned+0x38>
 8007160:	f04f 34ff 	mov.w	r4, #4294967295
 8007164:	4620      	mov	r0, r4
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	20000258 	.word	0x20000258

0800716c <_malloc_r>:
 800716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007170:	1ccd      	adds	r5, r1, #3
 8007172:	f025 0503 	bic.w	r5, r5, #3
 8007176:	3508      	adds	r5, #8
 8007178:	2d0c      	cmp	r5, #12
 800717a:	bf38      	it	cc
 800717c:	250c      	movcc	r5, #12
 800717e:	2d00      	cmp	r5, #0
 8007180:	4607      	mov	r7, r0
 8007182:	db01      	blt.n	8007188 <_malloc_r+0x1c>
 8007184:	42a9      	cmp	r1, r5
 8007186:	d905      	bls.n	8007194 <_malloc_r+0x28>
 8007188:	230c      	movs	r3, #12
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	2600      	movs	r6, #0
 800718e:	4630      	mov	r0, r6
 8007190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007194:	4e2e      	ldr	r6, [pc, #184]	; (8007250 <_malloc_r+0xe4>)
 8007196:	f000 f89d 	bl	80072d4 <__malloc_lock>
 800719a:	6833      	ldr	r3, [r6, #0]
 800719c:	461c      	mov	r4, r3
 800719e:	bb34      	cbnz	r4, 80071ee <_malloc_r+0x82>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff ffc2 	bl	800712c <sbrk_aligned>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	4604      	mov	r4, r0
 80071ac:	d14d      	bne.n	800724a <_malloc_r+0xde>
 80071ae:	6834      	ldr	r4, [r6, #0]
 80071b0:	4626      	mov	r6, r4
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	d140      	bne.n	8007238 <_malloc_r+0xcc>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	4631      	mov	r1, r6
 80071ba:	4638      	mov	r0, r7
 80071bc:	eb04 0803 	add.w	r8, r4, r3
 80071c0:	f000 f878 	bl	80072b4 <_sbrk_r>
 80071c4:	4580      	cmp	r8, r0
 80071c6:	d13a      	bne.n	800723e <_malloc_r+0xd2>
 80071c8:	6821      	ldr	r1, [r4, #0]
 80071ca:	3503      	adds	r5, #3
 80071cc:	1a6d      	subs	r5, r5, r1
 80071ce:	f025 0503 	bic.w	r5, r5, #3
 80071d2:	3508      	adds	r5, #8
 80071d4:	2d0c      	cmp	r5, #12
 80071d6:	bf38      	it	cc
 80071d8:	250c      	movcc	r5, #12
 80071da:	4629      	mov	r1, r5
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff ffa5 	bl	800712c <sbrk_aligned>
 80071e2:	3001      	adds	r0, #1
 80071e4:	d02b      	beq.n	800723e <_malloc_r+0xd2>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	442b      	add	r3, r5
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	e00e      	b.n	800720c <_malloc_r+0xa0>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	1b52      	subs	r2, r2, r5
 80071f2:	d41e      	bmi.n	8007232 <_malloc_r+0xc6>
 80071f4:	2a0b      	cmp	r2, #11
 80071f6:	d916      	bls.n	8007226 <_malloc_r+0xba>
 80071f8:	1961      	adds	r1, r4, r5
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	6025      	str	r5, [r4, #0]
 80071fe:	bf18      	it	ne
 8007200:	6059      	strne	r1, [r3, #4]
 8007202:	6863      	ldr	r3, [r4, #4]
 8007204:	bf08      	it	eq
 8007206:	6031      	streq	r1, [r6, #0]
 8007208:	5162      	str	r2, [r4, r5]
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	4638      	mov	r0, r7
 800720e:	f104 060b 	add.w	r6, r4, #11
 8007212:	f000 f865 	bl	80072e0 <__malloc_unlock>
 8007216:	f026 0607 	bic.w	r6, r6, #7
 800721a:	1d23      	adds	r3, r4, #4
 800721c:	1af2      	subs	r2, r6, r3
 800721e:	d0b6      	beq.n	800718e <_malloc_r+0x22>
 8007220:	1b9b      	subs	r3, r3, r6
 8007222:	50a3      	str	r3, [r4, r2]
 8007224:	e7b3      	b.n	800718e <_malloc_r+0x22>
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	42a3      	cmp	r3, r4
 800722a:	bf0c      	ite	eq
 800722c:	6032      	streq	r2, [r6, #0]
 800722e:	605a      	strne	r2, [r3, #4]
 8007230:	e7ec      	b.n	800720c <_malloc_r+0xa0>
 8007232:	4623      	mov	r3, r4
 8007234:	6864      	ldr	r4, [r4, #4]
 8007236:	e7b2      	b.n	800719e <_malloc_r+0x32>
 8007238:	4634      	mov	r4, r6
 800723a:	6876      	ldr	r6, [r6, #4]
 800723c:	e7b9      	b.n	80071b2 <_malloc_r+0x46>
 800723e:	230c      	movs	r3, #12
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4638      	mov	r0, r7
 8007244:	f000 f84c 	bl	80072e0 <__malloc_unlock>
 8007248:	e7a1      	b.n	800718e <_malloc_r+0x22>
 800724a:	6025      	str	r5, [r4, #0]
 800724c:	e7de      	b.n	800720c <_malloc_r+0xa0>
 800724e:	bf00      	nop
 8007250:	20000254 	.word	0x20000254

08007254 <_realloc_r>:
 8007254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	4680      	mov	r8, r0
 800725a:	4614      	mov	r4, r2
 800725c:	460e      	mov	r6, r1
 800725e:	b921      	cbnz	r1, 800726a <_realloc_r+0x16>
 8007260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4611      	mov	r1, r2
 8007266:	f7ff bf81 	b.w	800716c <_malloc_r>
 800726a:	b92a      	cbnz	r2, 8007278 <_realloc_r+0x24>
 800726c:	f7ff ff12 	bl	8007094 <_free_r>
 8007270:	4625      	mov	r5, r4
 8007272:	4628      	mov	r0, r5
 8007274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007278:	f000 f838 	bl	80072ec <_malloc_usable_size_r>
 800727c:	4284      	cmp	r4, r0
 800727e:	4607      	mov	r7, r0
 8007280:	d802      	bhi.n	8007288 <_realloc_r+0x34>
 8007282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007286:	d812      	bhi.n	80072ae <_realloc_r+0x5a>
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff ff6e 	bl	800716c <_malloc_r>
 8007290:	4605      	mov	r5, r0
 8007292:	2800      	cmp	r0, #0
 8007294:	d0ed      	beq.n	8007272 <_realloc_r+0x1e>
 8007296:	42bc      	cmp	r4, r7
 8007298:	4622      	mov	r2, r4
 800729a:	4631      	mov	r1, r6
 800729c:	bf28      	it	cs
 800729e:	463a      	movcs	r2, r7
 80072a0:	f7ff fed0 	bl	8007044 <memcpy>
 80072a4:	4631      	mov	r1, r6
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fef4 	bl	8007094 <_free_r>
 80072ac:	e7e1      	b.n	8007272 <_realloc_r+0x1e>
 80072ae:	4635      	mov	r5, r6
 80072b0:	e7df      	b.n	8007272 <_realloc_r+0x1e>
	...

080072b4 <_sbrk_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d06      	ldr	r5, [pc, #24]	; (80072d0 <_sbrk_r+0x1c>)
 80072b8:	2300      	movs	r3, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	f7fa fc6c 	bl	8001b9c <_sbrk>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_sbrk_r+0x1a>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_sbrk_r+0x1a>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	2000025c 	.word	0x2000025c

080072d4 <__malloc_lock>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__malloc_lock+0x8>)
 80072d6:	f000 b811 	b.w	80072fc <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	20000260 	.word	0x20000260

080072e0 <__malloc_unlock>:
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <__malloc_unlock+0x8>)
 80072e2:	f000 b80c 	b.w	80072fe <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	20000260 	.word	0x20000260

080072ec <_malloc_usable_size_r>:
 80072ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f0:	1f18      	subs	r0, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfbc      	itt	lt
 80072f6:	580b      	ldrlt	r3, [r1, r0]
 80072f8:	18c0      	addlt	r0, r0, r3
 80072fa:	4770      	bx	lr

080072fc <__retarget_lock_acquire_recursive>:
 80072fc:	4770      	bx	lr

080072fe <__retarget_lock_release_recursive>:
 80072fe:	4770      	bx	lr

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
