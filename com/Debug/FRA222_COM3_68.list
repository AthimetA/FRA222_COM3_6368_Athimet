
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000007c  08006fd8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08006fd8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc42  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c44  00000000  00000000  0002dcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163d7  00000000  00000000  00031018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea82  00000000  00000000  000473ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a388  00000000  00000000  00055e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e01f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000350c  00000000  00000000  000e024c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ba8 	.word	0x08006ba8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006ba8 	.word	0x08006ba8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 fa3c 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f812 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f906 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f8da 	bl	800075c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f874 	bl	8000694 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005ac:	f000 f8a0 	bl	80006f0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80005b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b4:	f001 faa0 	bl	8001af8 <HAL_Delay>
  MCP23017SetInit();
 80005b8:	f000 ff8c 	bl	80014d4 <MCP23017SetInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 80005bc:	f000 f97e 	bl	80008bc <StateMachineManagment>
 80005c0:	e7fc      	b.n	80005bc <main+0x28>
	...

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fe72 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xc8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xcc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fd59 	bl	8004100 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 fff4 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2103      	movs	r1, #3
 8000674:	4618      	mov	r0, r3
 8000676:	f003 ffbb 	bl	80045f0 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000680:	f000 ffde 	bl	8001640 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f001 fd85 	bl	80021e0 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 ffb0 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000098 	.word	0x20000098
 80006e8:	40005400 	.word	0x40005400
 80006ec:	00061a80 	.word	0x00061a80

080006f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI3_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI3_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI3_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI3_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI3_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI3_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI3_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI3_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI3_Init+0x64>)
 8000724:	2230      	movs	r2, #48	; 0x30
 8000726:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI3_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI3_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI3_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI3_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI3_Init+0x64>)
 8000742:	f004 f975 	bl	8004a30 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 ff78 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000ec 	.word	0x200000ec
 8000758:	40003c00 	.word	0x40003c00

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f004 fcf0 	bl	8005178 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 ff4f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000144 	.word	0x20000144
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a37      	ldr	r2, [pc, #220]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_GPIO_Init+0xfc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <MX_GPIO_Init+0x100>)
 800083c:	f001 fcb6 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x104>)
 8000848:	f001 fcb0 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4815      	ldr	r0, [pc, #84]	; (80008b8 <MX_GPIO_Init+0x108>)
 8000864:	f001 fb1e 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_GPIO_Init+0x100>)
 8000880:	f001 fb10 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_GPIO_Init+0x104>)
 800089e:	f001 fb01 	bl	8001ea4 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020800 	.word	0x40020800

080008bc <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	switch (MCState)
 80008c0:	4bab      	ldr	r3, [pc, #684]	; (8000b70 <StateMachineManagment+0x2b4>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	f200 85da 	bhi.w	800147e <StateMachineManagment+0xbc2>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <StateMachineManagment+0x14>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e9 	.word	0x080008e9
 80008d4:	080009a3 	.word	0x080009a3
 80008d8:	08000c01 	.word	0x08000c01
 80008dc:	080011a3 	.word	0x080011a3
 80008e0:	08000bc5 	.word	0x08000bc5
 80008e4:	08000b4d 	.word	0x08000b4d
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 80008e8:	49a2      	ldr	r1, [pc, #648]	; (8000b74 <StateMachineManagment+0x2b8>)
 80008ea:	48a3      	ldr	r0, [pc, #652]	; (8000b78 <StateMachineManagment+0x2bc>)
 80008ec:	f005 fcee 	bl	80062cc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80008f0:	48a1      	ldr	r0, [pc, #644]	; (8000b78 <StateMachineManagment+0x2bc>)
 80008f2:	f7ff fc75 	bl	80001e0 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	499e      	ldr	r1, [pc, #632]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000900:	489e      	ldr	r0, [pc, #632]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000902:	f004 fc86 	bl	8005212 <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0b11001110);
 8000906:	4b9e      	ldr	r3, [pc, #632]	; (8000b80 <StateMachineManagment+0x2c4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4a9e      	ldr	r2, [pc, #632]	; (8000b84 <StateMachineManagment+0x2c8>)
 800090c:	7811      	ldrb	r1, [r2, #0]
 800090e:	22ce      	movs	r2, #206	; 0xce
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fdb7 	bl	8001484 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 8000916:	4b9c      	ldr	r3, [pc, #624]	; (8000b88 <StateMachineManagment+0x2cc>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 800091c:	4b9b      	ldr	r3, [pc, #620]	; (8000b8c <StateMachineManagment+0x2d0>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 8000922:	4b9b      	ldr	r3, [pc, #620]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
			Robot.OperationTime = 0;
 8000928:	4b99      	ldr	r3, [pc, #612]	; (8000b90 <StateMachineManagment+0x2d4>)
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
			Robot.StartStation = 0;
 800092e:	4b98      	ldr	r3, [pc, #608]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000930:	2200      	movs	r2, #0
 8000932:	70da      	strb	r2, [r3, #3]
			Robot.EndStation = 0;
 8000934:	4b96      	ldr	r3, [pc, #600]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000936:	2200      	movs	r2, #0
 8000938:	719a      	strb	r2, [r3, #6]
			// EEPROM READ
			eepromReadFlag = 1;
 800093a:	4b96      	ldr	r3, [pc, #600]	; (8000b94 <StateMachineManagment+0x2d8>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8000940:	4b95      	ldr	r3, [pc, #596]	; (8000b98 <StateMachineManagment+0x2dc>)
 8000942:	2203      	movs	r2, #3
 8000944:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000946:	4b94      	ldr	r3, [pc, #592]	; (8000b98 <StateMachineManagment+0x2dc>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	220a      	movs	r2, #10
 800094c:	4619      	mov	r1, r3
 800094e:	4893      	ldr	r0, [pc, #588]	; (8000b9c <StateMachineManagment+0x2e0>)
 8000950:	f000 fe14 	bl	800157c <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f001 f8cf 	bl	8001af8 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 800095a:	4b90      	ldr	r3, [pc, #576]	; (8000b9c <StateMachineManagment+0x2e0>)
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	4b8c      	ldr	r3, [pc, #560]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000960:	711a      	strb	r2, [r3, #4]
			Robot.OperationTime = eepromDataReadBack[1];
 8000962:	4b8e      	ldr	r3, [pc, #568]	; (8000b9c <StateMachineManagment+0x2e0>)
 8000964:	785a      	ldrb	r2, [r3, #1]
 8000966:	4b8a      	ldr	r3, [pc, #552]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000968:	715a      	strb	r2, [r3, #5]
			Robot.StartStation = eepromDataReadBack[2];
 800096a:	4b8c      	ldr	r3, [pc, #560]	; (8000b9c <StateMachineManagment+0x2e0>)
 800096c:	789a      	ldrb	r2, [r3, #2]
 800096e:	4b88      	ldr	r3, [pc, #544]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000970:	70da      	strb	r2, [r3, #3]
			Robot.EndStation = eepromDataReadBack[2];
 8000972:	4b8a      	ldr	r3, [pc, #552]	; (8000b9c <StateMachineManagment+0x2e0>)
 8000974:	789a      	ldrb	r2, [r3, #2]
 8000976:	4b86      	ldr	r3, [pc, #536]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000978:	719a      	strb	r2, [r3, #6]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 800097a:	4b85      	ldr	r3, [pc, #532]	; (8000b90 <StateMachineManagment+0x2d4>)
 800097c:	791a      	ldrb	r2, [r3, #4]
 800097e:	4b84      	ldr	r3, [pc, #528]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000980:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 8000982:	4b83      	ldr	r3, [pc, #524]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000984:	795a      	ldrb	r2, [r3, #5]
 8000986:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000988:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 800098a:	4b81      	ldr	r3, [pc, #516]	; (8000b90 <StateMachineManagment+0x2d4>)
 800098c:	799a      	ldrb	r2, [r3, #6]
 800098e:	4b80      	ldr	r3, [pc, #512]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000990:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 8000992:	4b83      	ldr	r3, [pc, #524]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000998:	4b75      	ldr	r3, [pc, #468]	; (8000b70 <StateMachineManagment+0x2b4>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
			break;
 800099e:	f000 bd6e 	b.w	800147e <StateMachineManagment+0xbc2>
		case StanBy:
			// Header
			if(flagUART == 0){
 80009a2:	4b7f      	ldr	r3, [pc, #508]	; (8000ba0 <StateMachineManagment+0x2e4>)
 80009a4:	f993 3000 	ldrsb.w	r3, [r3]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d15c      	bne.n	8000a66 <StateMachineManagment+0x1aa>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80009ac:	497d      	ldr	r1, [pc, #500]	; (8000ba4 <StateMachineManagment+0x2e8>)
 80009ae:	4872      	ldr	r0, [pc, #456]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009b0:	f005 fc8c 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80009b4:	4870      	ldr	r0, [pc, #448]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009b6:	f7ff fc13 	bl	80001e0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	496d      	ldr	r1, [pc, #436]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009c4:	486d      	ldr	r0, [pc, #436]	; (8000b7c <StateMachineManagment+0x2c0>)
 80009c6:	f004 fc24 	bl	8005212 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 80009ca:	4977      	ldr	r1, [pc, #476]	; (8000ba8 <StateMachineManagment+0x2ec>)
 80009cc:	486a      	ldr	r0, [pc, #424]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009ce:	f005 fc7d 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80009d2:	4869      	ldr	r0, [pc, #420]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009d4:	f7ff fc04 	bl	80001e0 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e0:	4965      	ldr	r1, [pc, #404]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009e2:	4866      	ldr	r0, [pc, #408]	; (8000b7c <StateMachineManagment+0x2c0>)
 80009e4:	f004 fc15 	bl	8005212 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 80009e8:	4970      	ldr	r1, [pc, #448]	; (8000bac <StateMachineManagment+0x2f0>)
 80009ea:	4863      	ldr	r0, [pc, #396]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009ec:	f005 fc6e 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80009f0:	4861      	ldr	r0, [pc, #388]	; (8000b78 <StateMachineManagment+0x2bc>)
 80009f2:	f7ff fbf5 	bl	80001e0 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	495e      	ldr	r1, [pc, #376]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a00:	485e      	ldr	r0, [pc, #376]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000a02:	f004 fc06 	bl	8005212 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 2 for Choosing Destination Station\r\n");
 8000a06:	496a      	ldr	r1, [pc, #424]	; (8000bb0 <StateMachineManagment+0x2f4>)
 8000a08:	485b      	ldr	r0, [pc, #364]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a0a:	f005 fc5f 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a0e:	485a      	ldr	r0, [pc, #360]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a10:	f7ff fbe6 	bl	80001e0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	4956      	ldr	r1, [pc, #344]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a1e:	4857      	ldr	r0, [pc, #348]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000a20:	f004 fbf7 	bl	8005212 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 3 for EEPROM READ\r\n");
 8000a24:	4963      	ldr	r1, [pc, #396]	; (8000bb4 <StateMachineManagment+0x2f8>)
 8000a26:	4854      	ldr	r0, [pc, #336]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a28:	f005 fc50 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a2c:	4852      	ldr	r0, [pc, #328]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a2e:	f7ff fbd7 	bl	80001e0 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	494f      	ldr	r1, [pc, #316]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a3c:	484f      	ldr	r0, [pc, #316]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000a3e:	f004 fbe8 	bl	8005212 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000a42:	4958      	ldr	r1, [pc, #352]	; (8000ba4 <StateMachineManagment+0x2e8>)
 8000a44:	484c      	ldr	r0, [pc, #304]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a46:	f005 fc41 	bl	80062cc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a4a:	484b      	ldr	r0, [pc, #300]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a4c:	f7ff fbc8 	bl	80001e0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	4947      	ldr	r1, [pc, #284]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000a5a:	4848      	ldr	r0, [pc, #288]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000a5c:	f004 fbd9 	bl	8005212 <HAL_UART_Transmit>
				flagUART = 1;
 8000a60:	4b4f      	ldr	r3, [pc, #316]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000a66:	2202      	movs	r2, #2
 8000a68:	4953      	ldr	r1, [pc, #332]	; (8000bb8 <StateMachineManagment+0x2fc>)
 8000a6a:	4844      	ldr	r0, [pc, #272]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000a6c:	f004 fc63 	bl	8005336 <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 8000a70:	f000 fdac 	bl	80015cc <UARTRecieveIT>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <StateMachineManagment+0x300>)
 8000a7a:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 8000a7c:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <StateMachineManagment+0x300>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a86:	f000 84f5 	beq.w	8001474 <StateMachineManagment+0xbb8>
			{
				if(inputchar == '1')
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <StateMachineManagment+0x300>)
 8000a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a90:	2b31      	cmp	r3, #49	; 0x31
 8000a92:	d107      	bne.n	8000aa4 <StateMachineManagment+0x1e8>
				{
					flagUART = 0;
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <StateMachineManagment+0x2b4>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 8000aa0:	f000 bce8 	b.w	8001474 <StateMachineManagment+0xbb8>
				else if(inputchar == '2')
 8000aa4:	4b45      	ldr	r3, [pc, #276]	; (8000bbc <StateMachineManagment+0x300>)
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	2b32      	cmp	r3, #50	; 0x32
 8000aac:	d107      	bne.n	8000abe <StateMachineManagment+0x202>
					flagUART = 0;
 8000aae:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <StateMachineManagment+0x2b4>)
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	701a      	strb	r2, [r3, #0]
			break;
 8000aba:	f000 bcdb 	b.w	8001474 <StateMachineManagment+0xbb8>
				else if(inputchar == '3')
 8000abe:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <StateMachineManagment+0x300>)
 8000ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac4:	2b33      	cmp	r3, #51	; 0x33
 8000ac6:	d107      	bne.n	8000ad8 <StateMachineManagment+0x21c>
					flagUART = 0;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <StateMachineManagment+0x2b4>)
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	701a      	strb	r2, [r3, #0]
			break;
 8000ad4:	f000 bcce 	b.w	8001474 <StateMachineManagment+0xbb8>
				else if(inputchar == '4')
 8000ad8:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <StateMachineManagment+0x300>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	2b34      	cmp	r3, #52	; 0x34
 8000ae0:	d107      	bne.n	8000af2 <StateMachineManagment+0x236>
					flagUART = 0;
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
					MCState = EEpromWriteState;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <StateMachineManagment+0x2b4>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	701a      	strb	r2, [r3, #0]
			break;
 8000aee:	f000 bcc1 	b.w	8001474 <StateMachineManagment+0xbb8>
				else if(inputchar == '9')
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <StateMachineManagment+0x300>)
 8000af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af8:	2b39      	cmp	r3, #57	; 0x39
 8000afa:	d10a      	bne.n	8000b12 <StateMachineManagment+0x256>
					MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,Robot.EndStation);
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <StateMachineManagment+0x2c4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <StateMachineManagment+0x2c8>)
 8000b02:	7811      	ldrb	r1, [r2, #0]
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <StateMachineManagment+0x2d4>)
 8000b06:	7992      	ldrb	r2, [r2, #6]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fcbb 	bl	8001484 <MCP23017SetOutput>
			break;
 8000b0e:	f000 bcb1 	b.w	8001474 <StateMachineManagment+0xbb8>
				else if(inputchar == '7')
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <StateMachineManagment+0x300>)
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b18:	2b37      	cmp	r3, #55	; 0x37
 8000b1a:	d103      	bne.n	8000b24 <StateMachineManagment+0x268>
					MCP23017SetInit();
 8000b1c:	f000 fcda 	bl	80014d4 <MCP23017SetInit>
			break;
 8000b20:	f000 bca8 	b.w	8001474 <StateMachineManagment+0xbb8>
					flagUART = 0;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000b2a:	4925      	ldr	r1, [pc, #148]	; (8000bc0 <StateMachineManagment+0x304>)
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000b2e:	f005 fbcd 	bl	80062cc <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000b34:	f7ff fb54 	bl	80001e0 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <StateMachineManagment+0x2bc>)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <StateMachineManagment+0x2c0>)
 8000b44:	f004 fb65 	bl	8005212 <HAL_UART_Transmit>
			break;
 8000b48:	f000 bc94 	b.w	8001474 <StateMachineManagment+0xbb8>
		case EEpromReadState:
			eepromReadFlag = 1;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <StateMachineManagment+0x2d8>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <StateMachineManagment+0x2dc>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	220a      	movs	r2, #10
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <StateMachineManagment+0x2e0>)
 8000b5c:	f000 fd0e 	bl	800157c <EEPROMReadFcn>
			flagUART = 0;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <StateMachineManagment+0x2e4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000b66:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <StateMachineManagment+0x2b4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
			break;
 8000b6c:	f000 bc87 	b.w	800147e <StateMachineManagment+0xbc2>
 8000b70:	2000018f 	.word	0x2000018f
 8000b74:	08006bc0 	.word	0x08006bc0
 8000b78:	20000194 	.word	0x20000194
 8000b7c:	20000144 	.word	0x20000144
 8000b80:	20000004 	.word	0x20000004
 8000b84:	20000005 	.word	0x20000005
 8000b88:	20000190 	.word	0x20000190
 8000b8c:	20000191 	.word	0x20000191
 8000b90:	20000188 	.word	0x20000188
 8000b94:	200001d9 	.word	0x200001d9
 8000b98:	20000002 	.word	0x20000002
 8000b9c:	200001dc 	.word	0x200001dc
 8000ba0:	200001d4 	.word	0x200001d4
 8000ba4:	08006bd8 	.word	0x08006bd8
 8000ba8:	08006bf8 	.word	0x08006bf8
 8000bac:	08006c10 	.word	0x08006c10
 8000bb0:	08006c38 	.word	0x08006c38
 8000bb4:	08006c68 	.word	0x08006c68
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	200001d6 	.word	0x200001d6
 8000bc0:	08006c84 	.word	0x08006c84
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8000bc4:	4ba0      	ldr	r3, [pc, #640]	; (8000e48 <StateMachineManagment+0x58c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 8000bca:	4ba0      	ldr	r3, [pc, #640]	; (8000e4c <StateMachineManagment+0x590>)
 8000bcc:	791a      	ldrb	r2, [r3, #4]
 8000bce:	4ba0      	ldr	r3, [pc, #640]	; (8000e50 <StateMachineManagment+0x594>)
 8000bd0:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8000bd2:	4b9e      	ldr	r3, [pc, #632]	; (8000e4c <StateMachineManagment+0x590>)
 8000bd4:	795a      	ldrb	r2, [r3, #5]
 8000bd6:	4b9e      	ldr	r3, [pc, #632]	; (8000e50 <StateMachineManagment+0x594>)
 8000bd8:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 8000bda:	4b9c      	ldr	r3, [pc, #624]	; (8000e4c <StateMachineManagment+0x590>)
 8000bdc:	799a      	ldrb	r2, [r3, #6]
 8000bde:	4b9c      	ldr	r3, [pc, #624]	; (8000e50 <StateMachineManagment+0x594>)
 8000be0:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000be2:	4b9c      	ldr	r3, [pc, #624]	; (8000e54 <StateMachineManagment+0x598>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	220a      	movs	r2, #10
 8000be8:	4619      	mov	r1, r3
 8000bea:	4899      	ldr	r0, [pc, #612]	; (8000e50 <StateMachineManagment+0x594>)
 8000bec:	f000 fc9e 	bl	800152c <EEPROMWriteFcn>
			flagUART = 0;
 8000bf0:	4b99      	ldr	r3, [pc, #612]	; (8000e58 <StateMachineManagment+0x59c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000bf6:	4b99      	ldr	r3, [pc, #612]	; (8000e5c <StateMachineManagment+0x5a0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
			break;
 8000bfc:	f000 bc3f 	b.w	800147e <StateMachineManagment+0xbc2>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 8000c00:	4b97      	ldr	r3, [pc, #604]	; (8000e60 <StateMachineManagment+0x5a4>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	f000 81f8 	beq.w	8000ffa <StateMachineManagment+0x73e>
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	f300 8434 	bgt.w	8001478 <StateMachineManagment+0xbbc>
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <StateMachineManagment+0x362>
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	f000 813f 	beq.w	8000e98 <StateMachineManagment+0x5dc>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 8000c1a:	f000 bc2d 	b.w	8001478 <StateMachineManagment+0xbbc>
					if(flagUART == 0){
 8000c1e:	4b8e      	ldr	r3, [pc, #568]	; (8000e58 <StateMachineManagment+0x59c>)
 8000c20:	f993 3000 	ldrsb.w	r3, [r3]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f040 8094 	bne.w	8000d52 <StateMachineManagment+0x496>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c2a:	498e      	ldr	r1, [pc, #568]	; (8000e64 <StateMachineManagment+0x5a8>)
 8000c2c:	488e      	ldr	r0, [pc, #568]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c2e:	f005 fb4d 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c32:	488d      	ldr	r0, [pc, #564]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c34:	f7ff fad4 	bl	80001e0 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	4989      	ldr	r1, [pc, #548]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c42:	488a      	ldr	r0, [pc, #552]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000c44:	f004 fae5 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8000c48:	4989      	ldr	r1, [pc, #548]	; (8000e70 <StateMachineManagment+0x5b4>)
 8000c4a:	4887      	ldr	r0, [pc, #540]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c4c:	f005 fb3e 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c50:	4885      	ldr	r0, [pc, #532]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c52:	f7ff fac5 	bl	80001e0 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	4982      	ldr	r1, [pc, #520]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c60:	4882      	ldr	r0, [pc, #520]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000c62:	f004 fad6 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000c66:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <StateMachineManagment+0x590>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b77      	ldr	r3, [pc, #476]	; (8000e4c <StateMachineManagment+0x590>)
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	4980      	ldr	r1, [pc, #512]	; (8000e74 <StateMachineManagment+0x5b8>)
 8000c72:	487d      	ldr	r0, [pc, #500]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c74:	f005 fb2a 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c78:	487b      	ldr	r0, [pc, #492]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c7a:	f7ff fab1 	bl	80001e0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	4978      	ldr	r1, [pc, #480]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c88:	4878      	ldr	r0, [pc, #480]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000c8a:	f004 fac2 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <StateMachineManagment+0x590>)
 8000c90:	78db      	ldrb	r3, [r3, #3]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b6d      	ldr	r3, [pc, #436]	; (8000e4c <StateMachineManagment+0x590>)
 8000c96:	799b      	ldrb	r3, [r3, #6]
 8000c98:	4977      	ldr	r1, [pc, #476]	; (8000e78 <StateMachineManagment+0x5bc>)
 8000c9a:	4873      	ldr	r0, [pc, #460]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000c9c:	f005 fb16 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ca0:	4871      	ldr	r0, [pc, #452]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000ca2:	f7ff fa9d 	bl	80001e0 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	496e      	ldr	r1, [pc, #440]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cb0:	486e      	ldr	r0, [pc, #440]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000cb2:	f004 faae 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8000cb6:	4971      	ldr	r1, [pc, #452]	; (8000e7c <StateMachineManagment+0x5c0>)
 8000cb8:	486b      	ldr	r0, [pc, #428]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cba:	f005 fb07 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cbe:	486a      	ldr	r0, [pc, #424]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cc0:	f7ff fa8e 	bl	80001e0 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ccc:	4966      	ldr	r1, [pc, #408]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cce:	4867      	ldr	r0, [pc, #412]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000cd0:	f004 fa9f 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8000cd4:	496a      	ldr	r1, [pc, #424]	; (8000e80 <StateMachineManagment+0x5c4>)
 8000cd6:	4864      	ldr	r0, [pc, #400]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cd8:	f005 faf8 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cdc:	4862      	ldr	r0, [pc, #392]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cde:	f7ff fa7f 	bl	80001e0 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	495f      	ldr	r1, [pc, #380]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cec:	485f      	ldr	r0, [pc, #380]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000cee:	f004 fa90 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 8000cf2:	4964      	ldr	r1, [pc, #400]	; (8000e84 <StateMachineManagment+0x5c8>)
 8000cf4:	485c      	ldr	r0, [pc, #368]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cf6:	f005 fae9 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cfa:	485b      	ldr	r0, [pc, #364]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000cfc:	f7ff fa70 	bl	80001e0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d08:	4957      	ldr	r1, [pc, #348]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d0a:	4858      	ldr	r0, [pc, #352]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000d0c:	f004 fa81 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8000d10:	495d      	ldr	r1, [pc, #372]	; (8000e88 <StateMachineManagment+0x5cc>)
 8000d12:	4855      	ldr	r0, [pc, #340]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d14:	f005 fada 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d18:	4853      	ldr	r0, [pc, #332]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d1a:	f7ff fa61 	bl	80001e0 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	4950      	ldr	r1, [pc, #320]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d28:	4850      	ldr	r0, [pc, #320]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000d2a:	f004 fa72 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000d2e:	494d      	ldr	r1, [pc, #308]	; (8000e64 <StateMachineManagment+0x5a8>)
 8000d30:	484d      	ldr	r0, [pc, #308]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d32:	f005 facb 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d36:	484c      	ldr	r0, [pc, #304]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d38:	f7ff fa52 	bl	80001e0 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	4948      	ldr	r1, [pc, #288]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000d46:	4849      	ldr	r0, [pc, #292]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000d48:	f004 fa63 	bl	8005212 <HAL_UART_Transmit>
						flagUART = 1;
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <StateMachineManagment+0x59c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000d52:	2202      	movs	r2, #2
 8000d54:	494d      	ldr	r1, [pc, #308]	; (8000e8c <StateMachineManagment+0x5d0>)
 8000d56:	4845      	ldr	r0, [pc, #276]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000d58:	f004 faed 	bl	8005336 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000d5c:	f000 fc36 	bl	80015cc <UARTRecieveIT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000d66:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d72:	f000 8210 	beq.w	8001196 <StateMachineManagment+0x8da>
						if(inputchar == 'x')
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	2b78      	cmp	r3, #120	; 0x78
 8000d7e:	d10e      	bne.n	8000d9e <StateMachineManagment+0x4e2>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8000d80:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <StateMachineManagment+0x590>)
 8000d82:	791a      	ldrb	r2, [r3, #4]
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <StateMachineManagment+0x590>)
 8000d86:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <StateMachineManagment+0x590>)
 8000d8a:	795a      	ldrb	r2, [r3, #5]
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <StateMachineManagment+0x590>)
 8000d8e:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <StateMachineManagment+0x59c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <StateMachineManagment+0x5a0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
					break;
 8000d9c:	e1fb      	b.n	8001196 <StateMachineManagment+0x8da>
						else if(inputchar == '1')
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	2b31      	cmp	r3, #49	; 0x31
 8000da6:	d106      	bne.n	8000db6 <StateMachineManagment+0x4fa>
							flagUART = 0;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <StateMachineManagment+0x59c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <StateMachineManagment+0x5a4>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
					break;
 8000db4:	e1ef      	b.n	8001196 <StateMachineManagment+0x8da>
						else if(inputchar == '2')
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbc:	2b32      	cmp	r3, #50	; 0x32
 8000dbe:	d106      	bne.n	8000dce <StateMachineManagment+0x512>
							flagUART = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <StateMachineManagment+0x59c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <StateMachineManagment+0x5a4>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	701a      	strb	r2, [r3, #0]
					break;
 8000dcc:	e1e3      	b.n	8001196 <StateMachineManagment+0x8da>
						else if(inputchar == 's')
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <StateMachineManagment+0x5d4>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	2b73      	cmp	r3, #115	; 0x73
 8000dd6:	d124      	bne.n	8000e22 <StateMachineManagment+0x566>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <StateMachineManagment+0x590>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <StateMachineManagment+0x590>)
 8000dde:	711a      	strb	r2, [r3, #4]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <StateMachineManagment+0x590>)
 8000de2:	785a      	ldrb	r2, [r3, #1]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <StateMachineManagment+0x590>)
 8000de6:	715a      	strb	r2, [r3, #5]
							eepromWriteFlag = 1;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <StateMachineManagment+0x58c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <StateMachineManagment+0x590>)
 8000df0:	791a      	ldrb	r2, [r3, #4]
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <StateMachineManagment+0x594>)
 8000df4:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <StateMachineManagment+0x590>)
 8000df8:	795a      	ldrb	r2, [r3, #5]
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <StateMachineManagment+0x594>)
 8000dfc:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <StateMachineManagment+0x590>)
 8000e00:	799a      	ldrb	r2, [r3, #6]
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <StateMachineManagment+0x594>)
 8000e04:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <StateMachineManagment+0x598>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <StateMachineManagment+0x594>)
 8000e10:	f000 fb8c 	bl	800152c <EEPROMWriteFcn>
							flagUART = 0;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <StateMachineManagment+0x59c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <StateMachineManagment+0x5a0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
					break;
 8000e20:	e1b9      	b.n	8001196 <StateMachineManagment+0x8da>
							flagUART = 0;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <StateMachineManagment+0x59c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000e28:	491a      	ldr	r1, [pc, #104]	; (8000e94 <StateMachineManagment+0x5d8>)
 8000e2a:	480f      	ldr	r0, [pc, #60]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000e2c:	f005 fa4e 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	490a      	ldr	r1, [pc, #40]	; (8000e68 <StateMachineManagment+0x5ac>)
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <StateMachineManagment+0x5b0>)
 8000e42:	f004 f9e6 	bl	8005212 <HAL_UART_Transmit>
					break;
 8000e46:	e1a6      	b.n	8001196 <StateMachineManagment+0x8da>
 8000e48:	200001d8 	.word	0x200001d8
 8000e4c:	20000188 	.word	0x20000188
 8000e50:	200001e0 	.word	0x200001e0
 8000e54:	20000002 	.word	0x20000002
 8000e58:	200001d4 	.word	0x200001d4
 8000e5c:	2000018f 	.word	0x2000018f
 8000e60:	20000190 	.word	0x20000190
 8000e64:	08006bd8 	.word	0x08006bd8
 8000e68:	20000194 	.word	0x20000194
 8000e6c:	20000144 	.word	0x20000144
 8000e70:	08006c9c 	.word	0x08006c9c
 8000e74:	08006cc0 	.word	0x08006cc0
 8000e78:	08006cf4 	.word	0x08006cf4
 8000e7c:	08006d1c 	.word	0x08006d1c
 8000e80:	08006d40 	.word	0x08006d40
 8000e84:	08006d64 	.word	0x08006d64
 8000e88:	08006d78 	.word	0x08006d78
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	200001d6 	.word	0x200001d6
 8000e94:	08006c84 	.word	0x08006c84
					if(flagUART == 0){
 8000e98:	4ba6      	ldr	r3, [pc, #664]	; (8001134 <StateMachineManagment+0x878>)
 8000e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d13e      	bne.n	8000f20 <StateMachineManagment+0x664>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8000ea2:	49a5      	ldr	r1, [pc, #660]	; (8001138 <StateMachineManagment+0x87c>)
 8000ea4:	48a5      	ldr	r0, [pc, #660]	; (800113c <StateMachineManagment+0x880>)
 8000ea6:	f005 fa11 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000eaa:	48a4      	ldr	r0, [pc, #656]	; (800113c <StateMachineManagment+0x880>)
 8000eac:	f7ff f998 	bl	80001e0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	49a0      	ldr	r1, [pc, #640]	; (800113c <StateMachineManagment+0x880>)
 8000eba:	48a1      	ldr	r0, [pc, #644]	; (8001140 <StateMachineManagment+0x884>)
 8000ebc:	f004 f9a9 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8000ec0:	49a0      	ldr	r1, [pc, #640]	; (8001144 <StateMachineManagment+0x888>)
 8000ec2:	489e      	ldr	r0, [pc, #632]	; (800113c <StateMachineManagment+0x880>)
 8000ec4:	f005 fa02 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ec8:	489c      	ldr	r0, [pc, #624]	; (800113c <StateMachineManagment+0x880>)
 8000eca:	f7ff f989 	bl	80001e0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4999      	ldr	r1, [pc, #612]	; (800113c <StateMachineManagment+0x880>)
 8000ed8:	4899      	ldr	r0, [pc, #612]	; (8001140 <StateMachineManagment+0x884>)
 8000eda:	f004 f99a 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8000ede:	499a      	ldr	r1, [pc, #616]	; (8001148 <StateMachineManagment+0x88c>)
 8000ee0:	4896      	ldr	r0, [pc, #600]	; (800113c <StateMachineManagment+0x880>)
 8000ee2:	f005 f9f3 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ee6:	4895      	ldr	r0, [pc, #596]	; (800113c <StateMachineManagment+0x880>)
 8000ee8:	f7ff f97a 	bl	80001e0 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	4991      	ldr	r1, [pc, #580]	; (800113c <StateMachineManagment+0x880>)
 8000ef6:	4892      	ldr	r0, [pc, #584]	; (8001140 <StateMachineManagment+0x884>)
 8000ef8:	f004 f98b 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8000efc:	4993      	ldr	r1, [pc, #588]	; (800114c <StateMachineManagment+0x890>)
 8000efe:	488f      	ldr	r0, [pc, #572]	; (800113c <StateMachineManagment+0x880>)
 8000f00:	f005 f9e4 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f04:	488d      	ldr	r0, [pc, #564]	; (800113c <StateMachineManagment+0x880>)
 8000f06:	f7ff f96b 	bl	80001e0 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	498a      	ldr	r1, [pc, #552]	; (800113c <StateMachineManagment+0x880>)
 8000f14:	488a      	ldr	r0, [pc, #552]	; (8001140 <StateMachineManagment+0x884>)
 8000f16:	f004 f97c 	bl	8005212 <HAL_UART_Transmit>
						flagUART = 1;
 8000f1a:	4b86      	ldr	r3, [pc, #536]	; (8001134 <StateMachineManagment+0x878>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000f20:	2202      	movs	r2, #2
 8000f22:	498b      	ldr	r1, [pc, #556]	; (8001150 <StateMachineManagment+0x894>)
 8000f24:	4886      	ldr	r0, [pc, #536]	; (8001140 <StateMachineManagment+0x884>)
 8000f26:	f004 fa06 	bl	8005336 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000f2a:	f000 fb4f 	bl	80015cc <UARTRecieveIT>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <StateMachineManagment+0x898>)
 8000f34:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000f36:	4b87      	ldr	r3, [pc, #540]	; (8001154 <StateMachineManagment+0x898>)
 8000f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	f000 812b 	beq.w	800119a <StateMachineManagment+0x8de>
						if(inputchar == 'x')
 8000f44:	4b83      	ldr	r3, [pc, #524]	; (8001154 <StateMachineManagment+0x898>)
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	2b78      	cmp	r3, #120	; 0x78
 8000f4c:	d106      	bne.n	8000f5c <StateMachineManagment+0x6a0>
							flagUART = 0;
 8000f4e:	4b79      	ldr	r3, [pc, #484]	; (8001134 <StateMachineManagment+0x878>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8000f54:	4b80      	ldr	r3, [pc, #512]	; (8001158 <StateMachineManagment+0x89c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
					break;
 8000f5a:	e11e      	b.n	800119a <StateMachineManagment+0x8de>
						else if(inputchar == '+')
 8000f5c:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <StateMachineManagment+0x898>)
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	2b2b      	cmp	r3, #43	; 0x2b
 8000f64:	d118      	bne.n	8000f98 <StateMachineManagment+0x6dc>
							Robot.WaitingTimeBuffer++;
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <StateMachineManagment+0x8a0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b7b      	ldr	r3, [pc, #492]	; (800115c <StateMachineManagment+0x8a0>)
 8000f70:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000f72:	4b7a      	ldr	r3, [pc, #488]	; (800115c <StateMachineManagment+0x8a0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4979      	ldr	r1, [pc, #484]	; (8001160 <StateMachineManagment+0x8a4>)
 8000f7a:	4870      	ldr	r0, [pc, #448]	; (800113c <StateMachineManagment+0x880>)
 8000f7c:	f005 f9a6 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f80:	486e      	ldr	r0, [pc, #440]	; (800113c <StateMachineManagment+0x880>)
 8000f82:	f7ff f92d 	bl	80001e0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	496b      	ldr	r1, [pc, #428]	; (800113c <StateMachineManagment+0x880>)
 8000f90:	486b      	ldr	r0, [pc, #428]	; (8001140 <StateMachineManagment+0x884>)
 8000f92:	f004 f93e 	bl	8005212 <HAL_UART_Transmit>
					break;
 8000f96:	e100      	b.n	800119a <StateMachineManagment+0x8de>
						else if(inputchar == '-')
 8000f98:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <StateMachineManagment+0x898>)
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa0:	d118      	bne.n	8000fd4 <StateMachineManagment+0x718>
							Robot.WaitingTimeBuffer--;
 8000fa2:	4b6e      	ldr	r3, [pc, #440]	; (800115c <StateMachineManagment+0x8a0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b6c      	ldr	r3, [pc, #432]	; (800115c <StateMachineManagment+0x8a0>)
 8000fac:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000fae:	4b6b      	ldr	r3, [pc, #428]	; (800115c <StateMachineManagment+0x8a0>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	496a      	ldr	r1, [pc, #424]	; (8001160 <StateMachineManagment+0x8a4>)
 8000fb6:	4861      	ldr	r0, [pc, #388]	; (800113c <StateMachineManagment+0x880>)
 8000fb8:	f005 f988 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fbc:	485f      	ldr	r0, [pc, #380]	; (800113c <StateMachineManagment+0x880>)
 8000fbe:	f7ff f90f 	bl	80001e0 <strlen>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	495c      	ldr	r1, [pc, #368]	; (800113c <StateMachineManagment+0x880>)
 8000fcc:	485c      	ldr	r0, [pc, #368]	; (8001140 <StateMachineManagment+0x884>)
 8000fce:	f004 f920 	bl	8005212 <HAL_UART_Transmit>
					break;
 8000fd2:	e0e2      	b.n	800119a <StateMachineManagment+0x8de>
							flagUART = 0;
 8000fd4:	4b57      	ldr	r3, [pc, #348]	; (8001134 <StateMachineManagment+0x878>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000fda:	4962      	ldr	r1, [pc, #392]	; (8001164 <StateMachineManagment+0x8a8>)
 8000fdc:	4857      	ldr	r0, [pc, #348]	; (800113c <StateMachineManagment+0x880>)
 8000fde:	f005 f975 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fe2:	4856      	ldr	r0, [pc, #344]	; (800113c <StateMachineManagment+0x880>)
 8000fe4:	f7ff f8fc 	bl	80001e0 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	4952      	ldr	r1, [pc, #328]	; (800113c <StateMachineManagment+0x880>)
 8000ff2:	4853      	ldr	r0, [pc, #332]	; (8001140 <StateMachineManagment+0x884>)
 8000ff4:	f004 f90d 	bl	8005212 <HAL_UART_Transmit>
					break;
 8000ff8:	e0cf      	b.n	800119a <StateMachineManagment+0x8de>
					if(flagUART == 0){
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <StateMachineManagment+0x878>)
 8000ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d13e      	bne.n	8001082 <StateMachineManagment+0x7c6>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8001004:	4958      	ldr	r1, [pc, #352]	; (8001168 <StateMachineManagment+0x8ac>)
 8001006:	484d      	ldr	r0, [pc, #308]	; (800113c <StateMachineManagment+0x880>)
 8001008:	f005 f960 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800100c:	484b      	ldr	r0, [pc, #300]	; (800113c <StateMachineManagment+0x880>)
 800100e:	f7ff f8e7 	bl	80001e0 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	4948      	ldr	r1, [pc, #288]	; (800113c <StateMachineManagment+0x880>)
 800101c:	4848      	ldr	r0, [pc, #288]	; (8001140 <StateMachineManagment+0x884>)
 800101e:	f004 f8f8 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001022:	4948      	ldr	r1, [pc, #288]	; (8001144 <StateMachineManagment+0x888>)
 8001024:	4845      	ldr	r0, [pc, #276]	; (800113c <StateMachineManagment+0x880>)
 8001026:	f005 f951 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800102a:	4844      	ldr	r0, [pc, #272]	; (800113c <StateMachineManagment+0x880>)
 800102c:	f7ff f8d8 	bl	80001e0 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	4940      	ldr	r1, [pc, #256]	; (800113c <StateMachineManagment+0x880>)
 800103a:	4841      	ldr	r0, [pc, #260]	; (8001140 <StateMachineManagment+0x884>)
 800103c:	f004 f8e9 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001040:	4941      	ldr	r1, [pc, #260]	; (8001148 <StateMachineManagment+0x88c>)
 8001042:	483e      	ldr	r0, [pc, #248]	; (800113c <StateMachineManagment+0x880>)
 8001044:	f005 f942 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001048:	483c      	ldr	r0, [pc, #240]	; (800113c <StateMachineManagment+0x880>)
 800104a:	f7ff f8c9 	bl	80001e0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	4939      	ldr	r1, [pc, #228]	; (800113c <StateMachineManagment+0x880>)
 8001058:	4839      	ldr	r0, [pc, #228]	; (8001140 <StateMachineManagment+0x884>)
 800105a:	f004 f8da 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 800105e:	493b      	ldr	r1, [pc, #236]	; (800114c <StateMachineManagment+0x890>)
 8001060:	4836      	ldr	r0, [pc, #216]	; (800113c <StateMachineManagment+0x880>)
 8001062:	f005 f933 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001066:	4835      	ldr	r0, [pc, #212]	; (800113c <StateMachineManagment+0x880>)
 8001068:	f7ff f8ba 	bl	80001e0 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	4931      	ldr	r1, [pc, #196]	; (800113c <StateMachineManagment+0x880>)
 8001076:	4832      	ldr	r0, [pc, #200]	; (8001140 <StateMachineManagment+0x884>)
 8001078:	f004 f8cb 	bl	8005212 <HAL_UART_Transmit>
						flagUART = 1;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <StateMachineManagment+0x878>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001082:	2202      	movs	r2, #2
 8001084:	4932      	ldr	r1, [pc, #200]	; (8001150 <StateMachineManagment+0x894>)
 8001086:	482e      	ldr	r0, [pc, #184]	; (8001140 <StateMachineManagment+0x884>)
 8001088:	f004 f955 	bl	8005336 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 800108c:	f000 fa9e 	bl	80015cc <UARTRecieveIT>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <StateMachineManagment+0x898>)
 8001096:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <StateMachineManagment+0x898>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a2:	d07c      	beq.n	800119e <StateMachineManagment+0x8e2>
						if(inputchar == 'x')
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <StateMachineManagment+0x898>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	2b78      	cmp	r3, #120	; 0x78
 80010ac:	d106      	bne.n	80010bc <StateMachineManagment+0x800>
							flagUART = 0;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <StateMachineManagment+0x878>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <StateMachineManagment+0x89c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
					break;
 80010ba:	e070      	b.n	800119e <StateMachineManagment+0x8e2>
						else if(inputchar == '+')
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <StateMachineManagment+0x898>)
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	2b2b      	cmp	r3, #43	; 0x2b
 80010c4:	d118      	bne.n	80010f8 <StateMachineManagment+0x83c>
							Robot.OperationTimeBuffer++;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <StateMachineManagment+0x8a0>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <StateMachineManagment+0x8a0>)
 80010d0:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <StateMachineManagment+0x8a0>)
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4924      	ldr	r1, [pc, #144]	; (800116c <StateMachineManagment+0x8b0>)
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <StateMachineManagment+0x880>)
 80010dc:	f005 f8f6 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010e0:	4816      	ldr	r0, [pc, #88]	; (800113c <StateMachineManagment+0x880>)
 80010e2:	f7ff f87d 	bl	80001e0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	4913      	ldr	r1, [pc, #76]	; (800113c <StateMachineManagment+0x880>)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <StateMachineManagment+0x884>)
 80010f2:	f004 f88e 	bl	8005212 <HAL_UART_Transmit>
					break;
 80010f6:	e052      	b.n	800119e <StateMachineManagment+0x8e2>
						else if(inputchar == '-')
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <StateMachineManagment+0x898>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	2b2d      	cmp	r3, #45	; 0x2d
 8001100:	d136      	bne.n	8001170 <StateMachineManagment+0x8b4>
							Robot.OperationTimeBuffer--;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <StateMachineManagment+0x8a0>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	3b01      	subs	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <StateMachineManagment+0x8a0>)
 800110c:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <StateMachineManagment+0x8a0>)
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	461a      	mov	r2, r3
 8001114:	4915      	ldr	r1, [pc, #84]	; (800116c <StateMachineManagment+0x8b0>)
 8001116:	4809      	ldr	r0, [pc, #36]	; (800113c <StateMachineManagment+0x880>)
 8001118:	f005 f8d8 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <StateMachineManagment+0x880>)
 800111e:	f7ff f85f 	bl	80001e0 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	4904      	ldr	r1, [pc, #16]	; (800113c <StateMachineManagment+0x880>)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <StateMachineManagment+0x884>)
 800112e:	f004 f870 	bl	8005212 <HAL_UART_Transmit>
					break;
 8001132:	e034      	b.n	800119e <StateMachineManagment+0x8e2>
 8001134:	200001d4 	.word	0x200001d4
 8001138:	08006d8c 	.word	0x08006d8c
 800113c:	20000194 	.word	0x20000194
 8001140:	20000144 	.word	0x20000144
 8001144:	08006da8 	.word	0x08006da8
 8001148:	08006dc0 	.word	0x08006dc0
 800114c:	08006dd8 	.word	0x08006dd8
 8001150:	20000000 	.word	0x20000000
 8001154:	200001d6 	.word	0x200001d6
 8001158:	20000190 	.word	0x20000190
 800115c:	20000188 	.word	0x20000188
 8001160:	08006dec 	.word	0x08006dec
 8001164:	08006c84 	.word	0x08006c84
 8001168:	08006e08 	.word	0x08006e08
 800116c:	08006e28 	.word	0x08006e28
							flagUART = 0;
 8001170:	4bab      	ldr	r3, [pc, #684]	; (8001420 <StateMachineManagment+0xb64>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001176:	49ab      	ldr	r1, [pc, #684]	; (8001424 <StateMachineManagment+0xb68>)
 8001178:	48ab      	ldr	r0, [pc, #684]	; (8001428 <StateMachineManagment+0xb6c>)
 800117a:	f005 f8a7 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800117e:	48aa      	ldr	r0, [pc, #680]	; (8001428 <StateMachineManagment+0xb6c>)
 8001180:	f7ff f82e 	bl	80001e0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	49a6      	ldr	r1, [pc, #664]	; (8001428 <StateMachineManagment+0xb6c>)
 800118e:	48a7      	ldr	r0, [pc, #668]	; (800142c <StateMachineManagment+0xb70>)
 8001190:	f004 f83f 	bl	8005212 <HAL_UART_Transmit>
					break;
 8001194:	e003      	b.n	800119e <StateMachineManagment+0x8e2>
					break;
 8001196:	bf00      	nop
 8001198:	e16e      	b.n	8001478 <StateMachineManagment+0xbbc>
					break;
 800119a:	bf00      	nop
 800119c:	e16c      	b.n	8001478 <StateMachineManagment+0xbbc>
					break;
 800119e:	bf00      	nop
			break;
 80011a0:	e16a      	b.n	8001478 <StateMachineManagment+0xbbc>
		case StantionChoosing:
			switch (StantionChoosingState)
 80011a2:	4ba3      	ldr	r3, [pc, #652]	; (8001430 <StateMachineManagment+0xb74>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	f000 8135 	beq.w	8001416 <StateMachineManagment+0xb5a>
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f300 8165 	bgt.w	800147c <StateMachineManagment+0xbc0>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <StateMachineManagment+0x902>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f000 8110 	beq.w	80013dc <StateMachineManagment+0xb20>
				case RobotOperating:
					// SPI
					StantionChoosingState = UserChooseStation;
					break;
			}
			break;
 80011bc:	e15e      	b.n	800147c <StateMachineManagment+0xbc0>
					if(flagUART == 0)
 80011be:	4b98      	ldr	r3, [pc, #608]	; (8001420 <StateMachineManagment+0xb64>)
 80011c0:	f993 3000 	ldrsb.w	r3, [r3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d175      	bne.n	80012b4 <StateMachineManagment+0x9f8>
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 80011c8:	499a      	ldr	r1, [pc, #616]	; (8001434 <StateMachineManagment+0xb78>)
 80011ca:	4897      	ldr	r0, [pc, #604]	; (8001428 <StateMachineManagment+0xb6c>)
 80011cc:	f005 f87e 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011d0:	4895      	ldr	r0, [pc, #596]	; (8001428 <StateMachineManagment+0xb6c>)
 80011d2:	f7ff f805 	bl	80001e0 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	4992      	ldr	r1, [pc, #584]	; (8001428 <StateMachineManagment+0xb6c>)
 80011e0:	4892      	ldr	r0, [pc, #584]	; (800142c <StateMachineManagment+0xb70>)
 80011e2:	f004 f816 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80011e6:	4b94      	ldr	r3, [pc, #592]	; (8001438 <StateMachineManagment+0xb7c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <StateMachineManagment+0xb7c>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	4992      	ldr	r1, [pc, #584]	; (800143c <StateMachineManagment+0xb80>)
 80011f2:	488d      	ldr	r0, [pc, #564]	; (8001428 <StateMachineManagment+0xb6c>)
 80011f4:	f005 f86a 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011f8:	488b      	ldr	r0, [pc, #556]	; (8001428 <StateMachineManagment+0xb6c>)
 80011fa:	f7fe fff1 	bl	80001e0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	4988      	ldr	r1, [pc, #544]	; (8001428 <StateMachineManagment+0xb6c>)
 8001208:	4888      	ldr	r0, [pc, #544]	; (800142c <StateMachineManagment+0xb70>)
 800120a:	f004 f802 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800120e:	4b8a      	ldr	r3, [pc, #552]	; (8001438 <StateMachineManagment+0xb7c>)
 8001210:	78db      	ldrb	r3, [r3, #3]
 8001212:	461a      	mov	r2, r3
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <StateMachineManagment+0xb7c>)
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	4989      	ldr	r1, [pc, #548]	; (8001440 <StateMachineManagment+0xb84>)
 800121a:	4883      	ldr	r0, [pc, #524]	; (8001428 <StateMachineManagment+0xb6c>)
 800121c:	f005 f856 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001220:	4881      	ldr	r0, [pc, #516]	; (8001428 <StateMachineManagment+0xb6c>)
 8001222:	f7fe ffdd 	bl	80001e0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	497e      	ldr	r1, [pc, #504]	; (8001428 <StateMachineManagment+0xb6c>)
 8001230:	487e      	ldr	r0, [pc, #504]	; (800142c <StateMachineManagment+0xb70>)
 8001232:	f003 ffee 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 Station\r\n");
 8001236:	4983      	ldr	r1, [pc, #524]	; (8001444 <StateMachineManagment+0xb88>)
 8001238:	487b      	ldr	r0, [pc, #492]	; (8001428 <StateMachineManagment+0xb6c>)
 800123a:	f005 f847 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800123e:	487a      	ldr	r0, [pc, #488]	; (8001428 <StateMachineManagment+0xb6c>)
 8001240:	f7fe ffce 	bl	80001e0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	4976      	ldr	r1, [pc, #472]	; (8001428 <StateMachineManagment+0xb6c>)
 800124e:	4877      	ldr	r0, [pc, #476]	; (800142c <StateMachineManagment+0xb70>)
 8001250:	f003 ffdf 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001254:	497c      	ldr	r1, [pc, #496]	; (8001448 <StateMachineManagment+0xb8c>)
 8001256:	4874      	ldr	r0, [pc, #464]	; (8001428 <StateMachineManagment+0xb6c>)
 8001258:	f005 f838 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800125c:	4872      	ldr	r0, [pc, #456]	; (8001428 <StateMachineManagment+0xb6c>)
 800125e:	f7fe ffbf 	bl	80001e0 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	496f      	ldr	r1, [pc, #444]	; (8001428 <StateMachineManagment+0xb6c>)
 800126c:	486f      	ldr	r0, [pc, #444]	; (800142c <StateMachineManagment+0xb70>)
 800126e:	f003 ffd0 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type x to cancel\r\n");
 8001272:	4976      	ldr	r1, [pc, #472]	; (800144c <StateMachineManagment+0xb90>)
 8001274:	486c      	ldr	r0, [pc, #432]	; (8001428 <StateMachineManagment+0xb6c>)
 8001276:	f005 f829 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800127a:	486b      	ldr	r0, [pc, #428]	; (8001428 <StateMachineManagment+0xb6c>)
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	4967      	ldr	r1, [pc, #412]	; (8001428 <StateMachineManagment+0xb6c>)
 800128a:	4868      	ldr	r0, [pc, #416]	; (800142c <StateMachineManagment+0xb70>)
 800128c:	f003 ffc1 	bl	8005212 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type g to Start Operating\r\n");
 8001290:	496f      	ldr	r1, [pc, #444]	; (8001450 <StateMachineManagment+0xb94>)
 8001292:	4865      	ldr	r0, [pc, #404]	; (8001428 <StateMachineManagment+0xb6c>)
 8001294:	f005 f81a 	bl	80062cc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001298:	4863      	ldr	r0, [pc, #396]	; (8001428 <StateMachineManagment+0xb6c>)
 800129a:	f7fe ffa1 	bl	80001e0 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <StateMachineManagment+0xb6c>)
 80012a8:	4860      	ldr	r0, [pc, #384]	; (800142c <StateMachineManagment+0xb70>)
 80012aa:	f003 ffb2 	bl	8005212 <HAL_UART_Transmit>
						flagUART = 1;
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <StateMachineManagment+0xb64>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80012b4:	2202      	movs	r2, #2
 80012b6:	4967      	ldr	r1, [pc, #412]	; (8001454 <StateMachineManagment+0xb98>)
 80012b8:	485c      	ldr	r0, [pc, #368]	; (800142c <StateMachineManagment+0xb70>)
 80012ba:	f004 f83c 	bl	8005336 <HAL_UART_Receive_IT>
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80012be:	2202      	movs	r2, #2
 80012c0:	4964      	ldr	r1, [pc, #400]	; (8001454 <StateMachineManagment+0xb98>)
 80012c2:	485a      	ldr	r0, [pc, #360]	; (800142c <StateMachineManagment+0xb70>)
 80012c4:	f004 f837 	bl	8005336 <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 80012c8:	f000 f980 	bl	80015cc <UARTRecieveIT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b61      	ldr	r3, [pc, #388]	; (8001458 <StateMachineManagment+0xb9c>)
 80012d2:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 80012d4:	4b60      	ldr	r3, [pc, #384]	; (8001458 <StateMachineManagment+0xb9c>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	f000 80c7 	beq.w	8001470 <StateMachineManagment+0xbb4>
						if(inputchar == 'x')
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <StateMachineManagment+0xb9c>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	2b78      	cmp	r3, #120	; 0x78
 80012ea:	d10a      	bne.n	8001302 <StateMachineManagment+0xa46>
							Robot.EndStationBuffer = Robot.EndStation;
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <StateMachineManagment+0xb7c>)
 80012ee:	799a      	ldrb	r2, [r3, #6]
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <StateMachineManagment+0xb7c>)
 80012f2:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <StateMachineManagment+0xb64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 80012fa:	4b58      	ldr	r3, [pc, #352]	; (800145c <StateMachineManagment+0xba0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
					break;
 8001300:	e0b6      	b.n	8001470 <StateMachineManagment+0xbb4>
						else if(inputchar == '+')
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <StateMachineManagment+0xb9c>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	2b2b      	cmp	r3, #43	; 0x2b
 800130a:	d11f      	bne.n	800134c <StateMachineManagment+0xa90>
							Robot.EndStationBuffer++;
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <StateMachineManagment+0xb7c>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <StateMachineManagment+0xb7c>)
 8001316:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001318:	4b47      	ldr	r3, [pc, #284]	; (8001438 <StateMachineManagment+0xb7c>)
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b45      	ldr	r3, [pc, #276]	; (8001438 <StateMachineManagment+0xb7c>)
 8001324:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <StateMachineManagment+0xb7c>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	461a      	mov	r2, r3
 800132c:	494c      	ldr	r1, [pc, #304]	; (8001460 <StateMachineManagment+0xba4>)
 800132e:	483e      	ldr	r0, [pc, #248]	; (8001428 <StateMachineManagment+0xb6c>)
 8001330:	f004 ffcc 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001334:	483c      	ldr	r0, [pc, #240]	; (8001428 <StateMachineManagment+0xb6c>)
 8001336:	f7fe ff53 	bl	80001e0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	4939      	ldr	r1, [pc, #228]	; (8001428 <StateMachineManagment+0xb6c>)
 8001344:	4839      	ldr	r0, [pc, #228]	; (800142c <StateMachineManagment+0xb70>)
 8001346:	f003 ff64 	bl	8005212 <HAL_UART_Transmit>
					break;
 800134a:	e091      	b.n	8001470 <StateMachineManagment+0xbb4>
						else if(inputchar == '-')
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <StateMachineManagment+0xb9c>)
 800134e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001352:	2b2d      	cmp	r3, #45	; 0x2d
 8001354:	d11f      	bne.n	8001396 <StateMachineManagment+0xada>
							Robot.EndStationBuffer--;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <StateMachineManagment+0xb7c>)
 8001358:	789b      	ldrb	r3, [r3, #2]
 800135a:	3b01      	subs	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <StateMachineManagment+0xb7c>)
 8001360:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <StateMachineManagment+0xb7c>)
 8001364:	789b      	ldrb	r3, [r3, #2]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <StateMachineManagment+0xb7c>)
 800136e:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <StateMachineManagment+0xb7c>)
 8001372:	789b      	ldrb	r3, [r3, #2]
 8001374:	461a      	mov	r2, r3
 8001376:	493a      	ldr	r1, [pc, #232]	; (8001460 <StateMachineManagment+0xba4>)
 8001378:	482b      	ldr	r0, [pc, #172]	; (8001428 <StateMachineManagment+0xb6c>)
 800137a:	f004 ffa7 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800137e:	482a      	ldr	r0, [pc, #168]	; (8001428 <StateMachineManagment+0xb6c>)
 8001380:	f7fe ff2e 	bl	80001e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	4926      	ldr	r1, [pc, #152]	; (8001428 <StateMachineManagment+0xb6c>)
 800138e:	4827      	ldr	r0, [pc, #156]	; (800142c <StateMachineManagment+0xb70>)
 8001390:	f003 ff3f 	bl	8005212 <HAL_UART_Transmit>
					break;
 8001394:	e06c      	b.n	8001470 <StateMachineManagment+0xbb4>
						else if(inputchar == 'g')
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <StateMachineManagment+0xb9c>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	2b67      	cmp	r3, #103	; 0x67
 800139e:	d10a      	bne.n	80013b6 <StateMachineManagment+0xafa>
							Robot.EndStation = Robot.EndStationBuffer;
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <StateMachineManagment+0xb7c>)
 80013a2:	789a      	ldrb	r2, [r3, #2]
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <StateMachineManagment+0xb7c>)
 80013a6:	719a      	strb	r2, [r3, #6]
							flagUART = 0;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <StateMachineManagment+0xb64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <StateMachineManagment+0xb74>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
					break;
 80013b4:	e05c      	b.n	8001470 <StateMachineManagment+0xbb4>
							flagUART = 0;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <StateMachineManagment+0xb64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80013bc:	4919      	ldr	r1, [pc, #100]	; (8001424 <StateMachineManagment+0xb68>)
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <StateMachineManagment+0xb6c>)
 80013c0:	f004 ff84 	bl	80062cc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <StateMachineManagment+0xb6c>)
 80013c6:	f7fe ff0b 	bl	80001e0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	4915      	ldr	r1, [pc, #84]	; (8001428 <StateMachineManagment+0xb6c>)
 80013d4:	4815      	ldr	r0, [pc, #84]	; (800142c <StateMachineManagment+0xb70>)
 80013d6:	f003 ff1c 	bl	8005212 <HAL_UART_Transmit>
					break;
 80013da:	e049      	b.n	8001470 <StateMachineManagment+0xbb4>
					eepromWriteFlag = 1;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <StateMachineManagment+0xba8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <StateMachineManagment+0xb7c>)
 80013e4:	791a      	ldrb	r2, [r3, #4]
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <StateMachineManagment+0xbac>)
 80013e8:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <StateMachineManagment+0xb7c>)
 80013ec:	795a      	ldrb	r2, [r3, #5]
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <StateMachineManagment+0xbac>)
 80013f0:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <StateMachineManagment+0xb7c>)
 80013f4:	799a      	ldrb	r2, [r3, #6]
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <StateMachineManagment+0xbac>)
 80013f8:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <StateMachineManagment+0xbb0>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	220a      	movs	r2, #10
 8001400:	4619      	mov	r1, r3
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <StateMachineManagment+0xbac>)
 8001404:	f000 f892 	bl	800152c <EEPROMWriteFcn>
					flagUART = 0;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <StateMachineManagment+0xb64>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperating;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <StateMachineManagment+0xb74>)
 8001410:	2202      	movs	r2, #2
 8001412:	701a      	strb	r2, [r3, #0]
					break;
 8001414:	e02d      	b.n	8001472 <StateMachineManagment+0xbb6>
					StantionChoosingState = UserChooseStation;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <StateMachineManagment+0xb74>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
					break;
 800141c:	e029      	b.n	8001472 <StateMachineManagment+0xbb6>
 800141e:	bf00      	nop
 8001420:	200001d4 	.word	0x200001d4
 8001424:	08006c84 	.word	0x08006c84
 8001428:	20000194 	.word	0x20000194
 800142c:	20000144 	.word	0x20000144
 8001430:	20000191 	.word	0x20000191
 8001434:	08006e4c 	.word	0x08006e4c
 8001438:	20000188 	.word	0x20000188
 800143c:	08006cc0 	.word	0x08006cc0
 8001440:	08006cf4 	.word	0x08006cf4
 8001444:	08006e74 	.word	0x08006e74
 8001448:	08006e90 	.word	0x08006e90
 800144c:	08006eac 	.word	0x08006eac
 8001450:	08006ec4 	.word	0x08006ec4
 8001454:	20000000 	.word	0x20000000
 8001458:	200001d6 	.word	0x200001d6
 800145c:	2000018f 	.word	0x2000018f
 8001460:	08006ee4 	.word	0x08006ee4
 8001464:	200001d8 	.word	0x200001d8
 8001468:	200001e0 	.word	0x200001e0
 800146c:	20000002 	.word	0x20000002
					break;
 8001470:	bf00      	nop
			break;
 8001472:	e003      	b.n	800147c <StateMachineManagment+0xbc0>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <StateMachineManagment+0xbc2>
			break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <StateMachineManagment+0xbc2>
			break;
 800147c:	bf00      	nop
	}
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop

08001484 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	460b      	mov	r3, r1
 8001490:	71bb      	strb	r3, [r7, #6]
 8001492:	4613      	mov	r3, r2
 8001494:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <MCP23017SetOutput+0x44>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <MCP23017SetOutput+0x44>)
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <MCP23017SetOutput+0x44>)
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <MCP23017SetOutput+0x48>)
 80014b0:	f000 fe7c 	bl	80021ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 80014b4:	2203      	movs	r2, #3
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <MCP23017SetOutput+0x44>)
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MCP23017SetOutput+0x4c>)
 80014ba:	f003 fb43 	bl	8004b44 <HAL_SPI_Transmit_IT>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001e4 	.word	0x200001e4
 80014cc:	40020400 	.word	0x40020400
 80014d0:	200000ec 	.word	0x200000ec

080014d4 <MCP23017SetInit>:

void MCP23017SetInit()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB USE SET AS OUTPUT 0b 0000 0000
			0x00, // OLATB Led 0110 0w0 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MCP23017SetInit+0x20>)
 80014e0:	f000 fe64 	bl	80021ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 80014e4:	2203      	movs	r2, #3
 80014e6:	4904      	ldr	r1, [pc, #16]	; (80014f8 <MCP23017SetInit+0x24>)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MCP23017SetInit+0x28>)
 80014ea:	f003 fb2b 	bl	8004b44 <HAL_SPI_Transmit_IT>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40020400 	.word	0x40020400
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200000ec 	.word	0x200000ec

08001500 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_SPI_TxCpltCallback+0x24>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d105      	bne.n	800151c <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <HAL_SPI_TxCpltCallback+0x28>)
 8001518:	f000 fe48 	bl	80021ac <HAL_GPIO_WritePin>
	}
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200000ec 	.word	0x200000ec
 8001528:	40020400 	.word	0x40020400

0800152c <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <EEPROMWriteFcn+0x48>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d012      	beq.n	800156a <EEPROMWriteFcn+0x3e>
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <EEPROMWriteFcn+0x4c>)
 8001546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b20      	cmp	r3, #32
 800154e:	d10c      	bne.n	800156a <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8001550:	883a      	ldrh	r2, [r7, #0]
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2310      	movs	r3, #16
 800155c:	21a0      	movs	r1, #160	; 0xa0
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <EEPROMWriteFcn+0x4c>)
 8001560:	f000 ff82 	bl	8002468 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <EEPROMWriteFcn+0x48>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001d8 	.word	0x200001d8
 8001578:	20000098 	.word	0x20000098

0800157c <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <EEPROMReadFcn+0x48>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d012      	beq.n	80015ba <EEPROMReadFcn+0x3e>
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <EEPROMReadFcn+0x4c>)
 8001596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b20      	cmp	r3, #32
 800159e:	d10c      	bne.n	80015ba <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 80015a0:	883a      	ldrh	r2, [r7, #0]
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2310      	movs	r3, #16
 80015ac:	21a0      	movs	r1, #160	; 0xa0
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <EEPROMReadFcn+0x4c>)
 80015b0:	f001 f80c 	bl	80025cc <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <EEPROMReadFcn+0x48>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
	}
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001d9 	.word	0x200001d9
 80015c8:	20000098 	.word	0x20000098

080015cc <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80015d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <UARTRecieveIT+0x54>)
 80015da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015dc:	461a      	mov	r2, r3
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <UARTRecieveIT+0x54>)
 80015e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <UARTRecieveIT+0x58>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d010      	beq.n	8001610 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <UARTRecieveIT+0x58>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <UARTRecieveIT+0x5c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <UARTRecieveIT+0x58>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <UARTRecieveIT+0x54>)
 8001600:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001602:	fbb3 f1f2 	udiv	r1, r3, r2
 8001606:	fb01 f202 	mul.w	r2, r1, r2
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <UARTRecieveIT+0x58>)
 800160e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000144 	.word	0x20000144
 8001624:	200001e8 	.word	0x200001e8
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168a:	2007      	movs	r0, #7
 800168c:	f000 fb28 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <HAL_I2C_MspInit+0xa4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d13c      	bne.n	8001738 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ec:	2304      	movs	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <HAL_I2C_MspInit+0xac>)
 80016f8:	f000 fbd4 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 8001706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	201f      	movs	r0, #31
 800171e:	f000 faea 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001722:	201f      	movs	r0, #31
 8001724:	f000 fb03 	bl	8001d2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2020      	movs	r0, #32
 800172e:	f000 fae2 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001732:	2020      	movs	r0, #32
 8001734:	f000 fafb 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40005400 	.word	0x40005400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_SPI_MspInit+0x94>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d133      	bne.n	80017d6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 8001778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_SPI_MspInit+0x98>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017a6:	2338      	movs	r3, #56	; 0x38
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b6:	2306      	movs	r3, #6
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_SPI_MspInit+0x9c>)
 80017c2:	f000 fb6f 	bl	8001ea4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2033      	movs	r0, #51	; 0x33
 80017cc:	f000 fa93 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80017d0:	2033      	movs	r0, #51	; 0x33
 80017d2:	f000 faac 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40003c00 	.word	0x40003c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_UART_MspInit+0x94>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d133      	bne.n	8001876 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_UART_MspInit+0x98>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001846:	230c      	movs	r3, #12
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001856:	2307      	movs	r3, #7
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001862:	f000 fb1f 	bl	8001ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 fa43 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001870:	2026      	movs	r0, #38	; 0x26
 8001872:	f000 fa5c 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004400 	.word	0x40004400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f8ee 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <I2C1_EV_IRQHandler+0x10>)
 80018e6:	f000 ff2f 	bl	8002748 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000098 	.word	0x20000098

080018f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <I2C1_ER_IRQHandler+0x10>)
 80018fa:	f001 f896 	bl	8002a2a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000098 	.word	0x20000098

08001908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <USART2_IRQHandler+0x10>)
 800190e:	f003 fd43 	bl	8005398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000144 	.word	0x20000144

0800191c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <SPI3_IRQHandler+0x10>)
 8001922:	f003 f999 	bl	8004c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000ec 	.word	0x200000ec

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f004 fc82 	bl	8006268 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20020000 	.word	0x20020000
 8001990:	00000400 	.word	0x00000400
 8001994:	200001ec 	.word	0x200001ec
 8001998:	20000208 	.word	0x20000208

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019dc:	4c0b      	ldr	r4, [pc, #44]	; (8001a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ea:	f7ff ffd7 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ee:	f004 fc41 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7fe fdcf 	bl	8000594 <main>
  bx  lr    
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a04:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 8001a08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a0c:	20000204 	.word	0x20000204

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_Init+0x40>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_Init+0x40>)
 8001a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_Init+0x40>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 f94f 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f808 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff fe00 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x54>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f967 	bl	8001d4a <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00e      	b.n	8001aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80a      	bhi.n	8001aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 f92f 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <HAL_InitTick+0x5c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000014 	.word	0x20000014
 8001ab4:	20000010 	.word	0x20000010

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000014 	.word	0x20000014
 8001adc:	200001f0 	.word	0x200001f0

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200001f0 	.word	0x200001f0

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000014 	.word	0x20000014

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff3e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff31 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff feb6 	bl	8001ae0 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e052      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0216 	bic.w	r2, r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <HAL_DMA_Abort+0x62>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de4:	e013      	b.n	8001e0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de6:	f7ff fe7b 	bl	8001ae0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d90c      	bls.n	8001e0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e015      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e4      	bne.n	8001de6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e00c      	b.n	8001e7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2205      	movs	r2, #5
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e159      	b.n	8002174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8148 	bne.w	800216e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a2 	beq.w	800216e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_GPIO_Init+0x2e8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x202>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x1fe>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a47      	ldr	r2, [pc, #284]	; (800219c <HAL_GPIO_Init+0x2f8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x1fa>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a46      	ldr	r2, [pc, #280]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x1f6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_GPIO_Init+0x300>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x1f2>
 8002092:	2304      	movs	r3, #4
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 8002096:	2307      	movs	r3, #7
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f aea2 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12b      	b.n	800244a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fa48 	bl	800169c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002244:	f002 fbcc 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a81      	ldr	r2, [pc, #516]	; (8002454 <HAL_I2C_Init+0x274>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d807      	bhi.n	8002264 <HAL_I2C_Init+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a80      	ldr	r2, [pc, #512]	; (8002458 <HAL_I2C_Init+0x278>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e006      	b.n	8002272 <HAL_I2C_Init+0x92>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a7d      	ldr	r2, [pc, #500]	; (800245c <HAL_I2C_Init+0x27c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e7      	b.n	800244a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a78      	ldr	r2, [pc, #480]	; (8002460 <HAL_I2C_Init+0x280>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_I2C_Init+0x274>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d802      	bhi.n	80022b4 <HAL_I2C_Init+0xd4>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e009      	b.n	80022c8 <HAL_I2C_Init+0xe8>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_I2C_Init+0x284>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	495c      	ldr	r1, [pc, #368]	; (8002454 <HAL_I2C_Init+0x274>)
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d819      	bhi.n	800231c <HAL_I2C_Init+0x13c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e59      	subs	r1, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_I2C_Init+0x138>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e59      	subs	r1, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	e051      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002318:	2304      	movs	r3, #4
 800231a:	e04f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_I2C_Init+0x168>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e012      	b.n	800236e <HAL_I2C_Init+0x18e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x196>
 8002372:	2301      	movs	r3, #1
 8002374:	e022      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10e      	bne.n	800239c <HAL_I2C_Init+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e58      	subs	r0, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	6809      	ldr	r1, [r1, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6911      	ldr	r1, [r2, #16]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	000186a0 	.word	0x000186a0
 8002458:	001e847f 	.word	0x001e847f
 800245c:	003d08ff 	.word	0x003d08ff
 8002460:	431bde83 	.word	0x431bde83
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b20      	cmp	r3, #32
 8002490:	f040 808e 	bne.w	80025b0 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_I2C_Mem_Write_IT+0x158>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	4a4a      	ldr	r2, [pc, #296]	; (80025c4 <HAL_I2C_Mem_Write_IT+0x15c>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0a1a      	lsrs	r2, r3, #8
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009a      	lsls	r2, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e064      	b.n	80025b2 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d0db      	beq.n	80024ae <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2C_Mem_Write_IT+0x9c>
 8002500:	2302      	movs	r3, #2
 8002502:	e056      	b.n	80025b2 <HAL_I2C_Mem_Write_IT+0x14a>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d007      	beq.n	800252a <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002538:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_I2C_Mem_Write_IT+0x160>)
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800256c:	897a      	ldrh	r2, [r7, #10]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002572:	893a      	ldrh	r2, [r7, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002592:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80025aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c
 80025c4:	14f8b589 	.word	0x14f8b589
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 809a 	bne.w	800272c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_I2C_Mem_Read_IT+0x170>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_I2C_Mem_Read_IT+0x174>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0a1a      	lsrs	r2, r3, #8
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3b01      	subs	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e070      	b.n	800272e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d0db      	beq.n	8002612 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2C_Mem_Read_IT+0x9c>
 8002664:	2302      	movs	r3, #2
 8002666:	e062      	b.n	800272e <HAL_I2C_Mem_Read_IT+0x162>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d007      	beq.n	800268e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2222      	movs	r2, #34	; 0x22
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_I2C_Mem_Read_IT+0x178>)
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80026d0:	897a      	ldrh	r2, [r7, #10]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80026d6:	893a      	ldrh	r2, [r7, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002726:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	2000000c 	.word	0x2000000c
 8002740:	14f8b589 	.word	0x14f8b589
 8002744:	ffff0000 	.word	0xffff0000

08002748 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002768:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b10      	cmp	r3, #16
 8002776:	d003      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x38>
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	f040 80c1 	bne.w	8002902 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80027a0:	d003      	beq.n	80027aa <HAL_I2C_EV_IRQHandler+0x62>
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_EV_IRQHandler+0x66>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_I2C_EV_IRQHandler+0x68>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f000 8132 	beq.w	8002a1a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x92>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	0a5b      	lsrs	r3, r3, #9
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 fc7b 	bl	80040c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd83 	bl	80032de <I2C_Master_SB>
 80027d8:	e092      	b.n	8002900 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_I2C_EV_IRQHandler+0xb2>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	0a5b      	lsrs	r3, r3, #9
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fdf9 	bl	80033ea <I2C_Master_ADD10>
 80027f8:	e082      	b.n	8002900 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0xd2>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	0a5b      	lsrs	r3, r3, #9
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fe13 	bl	800343e <I2C_Master_ADDR>
 8002818:	e072      	b.n	8002900 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03b      	beq.n	800289e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002834:	f000 80f3 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	09db      	lsrs	r3, r3, #7
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00f      	beq.n	8002864 <HAL_I2C_EV_IRQHandler+0x11c>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_I2C_EV_IRQHandler+0x11c>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9f3 	bl	8002c48 <I2C_MasterTransmit_TXE>
 8002862:	e04d      	b.n	8002900 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80d6 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	0a5b      	lsrs	r3, r3, #9
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80cf 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b21      	cmp	r3, #33	; 0x21
 8002884:	d103      	bne.n	800288e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa7a 	bl	8002d80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288c:	e0c7      	b.n	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	f040 80c4 	bne.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fae8 	bl	8002e6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800289c:	e0bf      	b.n	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ac:	f000 80b7 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00f      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x194>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x194>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fb5d 	bl	8002f94 <I2C_MasterReceive_RXNE>
 80028da:	e011      	b.n	8002900 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 809a 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	0a5b      	lsrs	r3, r3, #9
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8093 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fc06 	bl	800310a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fe:	e08e      	b.n	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002900:	e08d      	b.n	8002a1e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e007      	b.n	8002924 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x20e>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 ffc4 	bl	80038dc <I2C_Slave_ADDR>
 8002954:	e066      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0x22e>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	0a5b      	lsrs	r3, r3, #9
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fffe 	bl	8003970 <I2C_Slave_STOPF>
 8002974:	e056      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002976:	7bbb      	ldrb	r3, [r7, #14]
 8002978:	2b21      	cmp	r3, #33	; 0x21
 800297a:	d002      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0x23a>
 800297c:	7bbb      	ldrb	r3, [r7, #14]
 800297e:	2b29      	cmp	r3, #41	; 0x29
 8002980:	d125      	bne.n	80029ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	09db      	lsrs	r3, r3, #7
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00f      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0x266>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	0a9b      	lsrs	r3, r3, #10
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0x266>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 feda 	bl	8003760 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029ac:	e039      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d033      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2da>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	0a5b      	lsrs	r3, r3, #9
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02d      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 ff07 	bl	80037da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029cc:	e029      	b.n	8002a22 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00f      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0a9b      	lsrs	r3, r3, #10
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 ff12 	bl	800381c <I2C_SlaveReceive_RXNE>
 80029f8:	e014      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 ff40 	bl	8003898 <I2C_SlaveReceive_BTF>
 8002a18:	e004      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <HAL_I2C_ER_IRQHandler+0x4e>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_I2C_ER_IRQHandler+0x78>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f043 0302 	orr.w	r3, r3, #2
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002aa0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	0a9b      	lsrs	r3, r3, #10
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03f      	beq.n	8002b2e <HAL_I2C_ER_IRQHandler+0x104>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d039      	beq.n	8002b2e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002aba:	7efb      	ldrb	r3, [r7, #27]
 8002abc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ad4:	7ebb      	ldrb	r3, [r7, #26]
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d112      	bne.n	8002b00 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b21      	cmp	r3, #33	; 0x21
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b29      	cmp	r3, #41	; 0x29
 8002aea:	d005      	beq.n	8002af8 <HAL_I2C_ER_IRQHandler+0xce>
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b28      	cmp	r3, #40	; 0x28
 8002af0:	d106      	bne.n	8002b00 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b21      	cmp	r3, #33	; 0x21
 8002af6:	d103      	bne.n	8002b00 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 f869 	bl	8003bd0 <I2C_Slave_AF>
 8002afe:	e016      	b.n	8002b2e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b08:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b12:	7efb      	ldrb	r3, [r7, #27]
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d002      	beq.n	8002b1e <HAL_I2C_ER_IRQHandler+0xf4>
 8002b18:	7efb      	ldrb	r3, [r7, #27]
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	0adb      	lsrs	r3, r3, #11
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <HAL_I2C_ER_IRQHandler+0x12e>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002b56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f001 f8a0 	bl	8003cb0 <I2C_ITError>
  }
}
 8002b70:	bf00      	nop
 8002b72:	3728      	adds	r7, #40	; 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d150      	bne.n	8002d10 <I2C_MasterTransmit_TXE+0xc8>
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b21      	cmp	r3, #33	; 0x21
 8002c72:	d14d      	bne.n	8002d10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d01d      	beq.n	8002cb6 <I2C_MasterTransmit_TXE+0x6e>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d01a      	beq.n	8002cb6 <I2C_MasterTransmit_TXE+0x6e>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c86:	d016      	beq.n	8002cb6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2211      	movs	r2, #17
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff62 	bl	8002b78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb4:	e060      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d107      	bne.n	8002d00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff7d 	bl	8002bf8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cfe:	e03b      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff35 	bl	8002b78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d0e:	e033      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b21      	cmp	r3, #33	; 0x21
 8002d14:	d005      	beq.n	8002d22 <I2C_MasterTransmit_TXE+0xda>
 8002d16:	7bbb      	ldrb	r3, [r7, #14]
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d12d      	bne.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b22      	cmp	r3, #34	; 0x22
 8002d20:	d12a      	bne.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d3c:	e01c      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d103      	bne.n	8002d52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f88e 	bl	8002e6c <I2C_MemoryTransmit_TXE_BTF>
}
 8002d50:	e012      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d76:	e7ff      	b.n	8002d78 <I2C_MasterTransmit_TXE+0x130>
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b21      	cmp	r3, #33	; 0x21
 8002d98:	d164      	bne.n	8002e64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002dc8:	e04c      	b.n	8002e64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d01d      	beq.n	8002e0c <I2C_MasterTransmit_BTF+0x8c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d01a      	beq.n	8002e0c <I2C_MasterTransmit_BTF+0x8c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ddc:	d016      	beq.n	8002e0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2211      	movs	r2, #17
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff feb7 	bl	8002b78 <HAL_I2C_MasterTxCpltCallback>
}
 8002e0a:	e02b      	b.n	8002e64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d107      	bne.n	8002e56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fed2 	bl	8002bf8 <HAL_I2C_MemTxCpltCallback>
}
 8002e54:	e006      	b.n	8002e64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fe8a 	bl	8002b78 <HAL_I2C_MasterTxCpltCallback>
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11d      	bne.n	8002ec0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10b      	bne.n	8002ea4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ea2:	e073      	b.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	121b      	asrs	r3, r3, #8
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ebe:	e065      	b.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10b      	bne.n	8002ee0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ede:	e055      	b.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d151      	bne.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b22      	cmp	r3, #34	; 0x22
 8002eec:	d10d      	bne.n	8002f0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f08:	e040      	b.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b21      	cmp	r3, #33	; 0x21
 8002f18:	d112      	bne.n	8002f40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f3e:	e025      	b.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d120      	bne.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d11d      	bne.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fe36 	bl	8002bf8 <HAL_I2C_MemTxCpltCallback>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b22      	cmp	r3, #34	; 0x22
 8002fa6:	f040 80ac 	bne.w	8003102 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d921      	bls.n	8002ffc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	f040 808c 	bne.w	8003102 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002ffa:	e082      	b.n	8003102 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2b02      	cmp	r3, #2
 8003002:	d075      	beq.n	80030f0 <I2C_MasterReceive_RXNE+0x15c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d002      	beq.n	8003010 <I2C_MasterReceive_RXNE+0x7c>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d16f      	bne.n	80030f0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f001 f827 	bl	8004064 <I2C_WaitOnSTOPRequestThroughIT>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d142      	bne.n	80030a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d10a      	bne.n	800308c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fdc1 	bl	8002c0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800308a:	e03a      	b.n	8003102 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2212      	movs	r2, #18
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fd76 	bl	8002b8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030a0:	e02f      	b.n	8003102 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fd99 	bl	8002c20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030ee:	e008      	b.n	8003102 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	605a      	str	r2, [r3, #4]
}
 8003100:	e7ff      	b.n	8003102 <I2C_MasterReceive_RXNE+0x16e>
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b04      	cmp	r3, #4
 8003120:	d11b      	bne.n	800315a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003130:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003158:	e0bd      	b.n	80032d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d129      	bne.n	80031b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003172:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d00a      	beq.n	8003190 <I2C_MasterReceive_BTF+0x86>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d007      	beq.n	8003190 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031b6:	e08e      	b.n	80032d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d176      	bne.n	80032b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d002      	beq.n	80031ce <I2C_MasterReceive_BTF+0xc4>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d108      	bne.n	80031e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e019      	b.n	8003214 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <I2C_MasterReceive_BTF+0xe2>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d108      	bne.n	80031fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e00a      	b.n	8003214 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b10      	cmp	r3, #16
 8003202:	d007      	beq.n	8003214 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800326e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d10a      	bne.n	800329a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fcba 	bl	8002c0c <HAL_I2C_MemRxCpltCallback>
}
 8003298:	e01d      	b.n	80032d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2212      	movs	r2, #18
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fc6f 	bl	8002b8c <HAL_I2C_MasterRxCpltCallback>
}
 80032ae:	e012      	b.n	80032d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d117      	bne.n	8003322 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800330a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800330c:	e067      	b.n	80033de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
}
 8003320:	e05d      	b.n	80033de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332a:	d133      	bne.n	8003394 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b21      	cmp	r3, #33	; 0x21
 8003336:	d109      	bne.n	800334c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e008      	b.n	800335e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <I2C_Master_SB+0x92>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d032      	beq.n	80033de <I2C_Master_SB+0x100>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d02d      	beq.n	80033de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003390:	605a      	str	r2, [r3, #4]
}
 8003392:	e024      	b.n	80033de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	11db      	asrs	r3, r3, #7
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 0306 	and.w	r3, r3, #6
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f063 030f 	orn	r3, r3, #15
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	611a      	str	r2, [r3, #16]
}
 80033b8:	e011      	b.n	80033de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	11db      	asrs	r3, r3, #7
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0306 	and.w	r3, r3, #6
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f063 030e 	orn	r3, r3, #14
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <I2C_Master_ADD10+0x26>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <I2C_Master_ADD10+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003430:	605a      	str	r2, [r3, #4]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800343e:	b480      	push	{r7}
 8003440:	b091      	sub	sp, #68	; 0x44
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b22      	cmp	r3, #34	; 0x22
 8003466:	f040 8169 	bne.w	800373c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <I2C_Master_ADDR+0x54>
 8003472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10b      	bne.n	8003492 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	e160      	b.n	8003754 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11d      	bne.n	80034d6 <I2C_Master_ADDR+0x98>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034a2:	d118      	bne.n	80034d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	651a      	str	r2, [r3, #80]	; 0x50
 80034d4:	e13e      	b.n	8003754 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e115      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	f040 808a 	bne.w	8003628 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800351a:	d137      	bne.n	800358c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353a:	d113      	bne.n	8003564 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	e0e7      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e0d3      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	2b08      	cmp	r3, #8
 8003590:	d02e      	beq.n	80035f0 <I2C_Master_ADDR+0x1b2>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b20      	cmp	r3, #32
 8003596:	d02b      	beq.n	80035f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	2b12      	cmp	r3, #18
 800359c:	d102      	bne.n	80035a4 <I2C_Master_ADDR+0x166>
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d125      	bne.n	80035f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00e      	beq.n	80035c8 <I2C_Master_ADDR+0x18a>
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d00b      	beq.n	80035c8 <I2C_Master_ADDR+0x18a>
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d008      	beq.n	80035c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e007      	b.n	80035d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	e0a1      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e085      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d14d      	bne.n	80036ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	2b04      	cmp	r3, #4
 8003636:	d016      	beq.n	8003666 <I2C_Master_ADDR+0x228>
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	2b02      	cmp	r3, #2
 800363c:	d013      	beq.n	8003666 <I2C_Master_ADDR+0x228>
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b10      	cmp	r3, #16
 8003642:	d010      	beq.n	8003666 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e007      	b.n	8003676 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003684:	d117      	bne.n	80036b6 <I2C_Master_ADDR+0x278>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800368c:	d00b      	beq.n	80036a6 <I2C_Master_ADDR+0x268>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b01      	cmp	r3, #1
 8003692:	d008      	beq.n	80036a6 <I2C_Master_ADDR+0x268>
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b08      	cmp	r3, #8
 8003698:	d005      	beq.n	80036a6 <I2C_Master_ADDR+0x268>
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2b10      	cmp	r3, #16
 800369e:	d002      	beq.n	80036a6 <I2C_Master_ADDR+0x268>
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d107      	bne.n	80036b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	e032      	b.n	8003734 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ec:	d117      	bne.n	800371e <I2C_Master_ADDR+0x2e0>
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f4:	d00b      	beq.n	800370e <I2C_Master_ADDR+0x2d0>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d008      	beq.n	800370e <I2C_Master_ADDR+0x2d0>
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d005      	beq.n	800370e <I2C_Master_ADDR+0x2d0>
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b10      	cmp	r3, #16
 8003706:	d002      	beq.n	800370e <I2C_Master_ADDR+0x2d0>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b20      	cmp	r3, #32
 800370c:	d107      	bne.n	800371e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800371c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800373a:	e00b      	b.n	8003754 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	e7ff      	b.n	8003754 <I2C_Master_ADDR+0x316>
 8003754:	bf00      	nop
 8003756:	3744      	adds	r7, #68	; 0x44
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02b      	beq.n	80037d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d114      	bne.n	80037d2 <I2C_SlaveTransmit_TXE+0x72>
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b29      	cmp	r3, #41	; 0x29
 80037ac:	d111      	bne.n	80037d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2228      	movs	r2, #40	; 0x28
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff f9e7 	bl	8002ba0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02c      	beq.n	8003890 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d114      	bne.n	8003890 <I2C_SlaveReceive_RXNE+0x74>
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b2a      	cmp	r3, #42	; 0x2a
 800386a:	d111      	bne.n	8003890 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2222      	movs	r2, #34	; 0x22
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff f992 	bl	8002bb4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038f6:	2b28      	cmp	r3, #40	; 0x28
 80038f8:	d127      	bne.n	800394a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	09db      	lsrs	r3, r3, #7
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	81bb      	strh	r3, [r7, #12]
 800392c:	e002      	b.n	8003934 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800393c:	89ba      	ldrh	r2, [r7, #12]
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f940 	bl	8002bc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003948:	e00e      	b.n	8003968 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800398e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039cc:	d172      	bne.n	8003ab4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b22      	cmp	r3, #34	; 0x22
 80039d2:	d002      	beq.n	80039da <I2C_Slave_STOPF+0x6a>
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b2a      	cmp	r3, #42	; 0x2a
 80039d8:	d135      	bne.n	8003a46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fa37 	bl	8001e86 <HAL_DMA_GetState>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d049      	beq.n	8003ab2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4a69      	ldr	r2, [pc, #420]	; (8003bc8 <I2C_Slave_STOPF+0x258>)
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fa09 	bl	8001e42 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03d      	beq.n	8003ab2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a44:	e035      	b.n	8003ab2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fa01 	bl	8001e86 <HAL_DMA_GetState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d014      	beq.n	8003ab4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	4a4e      	ldr	r2, [pc, #312]	; (8003bc8 <I2C_Slave_STOPF+0x258>)
 8003a90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f9d3 	bl	8001e42 <HAL_DMA_Abort_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aac:	4610      	mov	r0, r2
 8003aae:	4798      	blx	r3
 8003ab0:	e000      	b.n	8003ab4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03e      	beq.n	8003b3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d112      	bne.n	8003af2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d112      	bne.n	8003b26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8b3 	bl	8003cb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b4a:	e039      	b.n	8003bc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b50:	d109      	bne.n	8003b66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2228      	movs	r2, #40	; 0x28
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff f827 	bl	8002bb4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b28      	cmp	r3, #40	; 0x28
 8003b70:	d111      	bne.n	8003b96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <I2C_Slave_STOPF+0x25c>)
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff f828 	bl	8002be4 <HAL_I2C_ListenCpltCallback>
}
 8003b94:	e014      	b.n	8003bc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	2b22      	cmp	r3, #34	; 0x22
 8003b9c:	d002      	beq.n	8003ba4 <I2C_Slave_STOPF+0x234>
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b22      	cmp	r3, #34	; 0x22
 8003ba2:	d10d      	bne.n	8003bc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe fffa 	bl	8002bb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	08003f15 	.word	0x08003f15
 8003bcc:	ffff0000 	.word	0xffff0000

08003bd0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d002      	beq.n	8003bf2 <I2C_Slave_AF+0x22>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d129      	bne.n	8003c46 <I2C_Slave_AF+0x76>
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b28      	cmp	r3, #40	; 0x28
 8003bf6:	d126      	bne.n	8003c46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <I2C_Slave_AF+0xdc>)
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe ffd0 	bl	8002be4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c44:	e02e      	b.n	8003ca4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b21      	cmp	r3, #33	; 0x21
 8003c4a:	d126      	bne.n	8003c9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <I2C_Slave_AF+0xdc>)
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe ff84 	bl	8002ba0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c98:	e004      	b.n	8003ca4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca2:	615a      	str	r2, [r3, #20]
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	ffff0000 	.word	0xffff0000

08003cb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d002      	beq.n	8003cd4 <I2C_ITError+0x24>
 8003cce:	7bbb      	ldrb	r3, [r7, #14]
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d10a      	bne.n	8003cea <I2C_ITError+0x3a>
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	d107      	bne.n	8003cea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf0:	2b28      	cmp	r3, #40	; 0x28
 8003cf2:	d107      	bne.n	8003d04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2228      	movs	r2, #40	; 0x28
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d02:	e015      	b.n	8003d30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d12:	d00a      	beq.n	8003d2a <I2C_ITError+0x7a>
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b60      	cmp	r3, #96	; 0x60
 8003d18:	d007      	beq.n	8003d2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3e:	d162      	bne.n	8003e06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d020      	beq.n	8003da0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	4a6a      	ldr	r2, [pc, #424]	; (8003f0c <I2C_ITError+0x25c>)
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f869 	bl	8001e42 <HAL_DMA_Abort_IT>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8089 	beq.w	8003e8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4798      	blx	r3
 8003d9e:	e074      	b.n	8003e8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	4a59      	ldr	r2, [pc, #356]	; (8003f0c <I2C_ITError+0x25c>)
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f848 	bl	8001e42 <HAL_DMA_Abort_IT>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d068      	beq.n	8003e8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d10b      	bne.n	8003dde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
 8003e04:	e041      	b.n	8003e8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b60      	cmp	r3, #96	; 0x60
 8003e10:	d125      	bne.n	8003e5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d10b      	bne.n	8003e46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe feec 	bl	8002c34 <HAL_I2C_AbortCpltCallback>
 8003e5c:	e015      	b.n	8003e8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d10b      	bne.n	8003e84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fe fecb 	bl	8002c20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d113      	bne.n	8003f04 <I2C_ITError+0x254>
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b28      	cmp	r3, #40	; 0x28
 8003ee0:	d110      	bne.n	8003f04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <I2C_ITError+0x260>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fe70 	bl	8002be4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08003f15 	.word	0x08003f15
 8003f10:	ffff0000 	.word	0xffff0000

08003f14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f2e:	4b4b      	ldr	r3, [pc, #300]	; (800405c <I2C_DMAAbort+0x148>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	08db      	lsrs	r3, r3, #3
 8003f34:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <I2C_DMAAbort+0x14c>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0a1a      	lsrs	r2, r3, #8
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00da      	lsls	r2, r3, #3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f5a:	e00a      	b.n	8003f72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d0ea      	beq.n	8003f48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	2200      	movs	r2, #0
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	2200      	movs	r2, #0
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d10e      	bne.n	8004002 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7fe fe1a 	bl	8002c34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004000:	e027      	b.n	8004052 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004008:	2b28      	cmp	r3, #40	; 0x28
 800400a:	d117      	bne.n	800403c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2228      	movs	r2, #40	; 0x28
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800403a:	e007      	b.n	800404c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800404c:	6978      	ldr	r0, [r7, #20]
 800404e:	f7fe fde7 	bl	8002c20 <HAL_I2C_ErrorCallback>
}
 8004052:	bf00      	nop
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000000c 	.word	0x2000000c
 8004060:	14f8b589 	.word	0x14f8b589

08004064 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0a1a      	lsrs	r2, r3, #8
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e008      	b.n	80040b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d0e9      	beq.n	8004086 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000000c 	.word	0x2000000c
 80040c4:	14f8b589 	.word	0x14f8b589

080040c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80040d8:	d103      	bne.n	80040e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80040e0:	e007      	b.n	80040f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040ea:	d102      	bne.n	80040f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2208      	movs	r2, #8
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e267      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d075      	beq.n	800420a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411e:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00c      	beq.n	8004144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b85      	ldr	r3, [pc, #532]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004132:	2b08      	cmp	r3, #8
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	4b82      	ldr	r3, [pc, #520]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004142:	d10b      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	4b7e      	ldr	r3, [pc, #504]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05b      	beq.n	8004208 <HAL_RCC_OscConfig+0x108>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d157      	bne.n	8004208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e242      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x74>
 8004166:	4b76      	ldr	r3, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x98>
 800417e:	4b70      	ldr	r3, [pc, #448]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6f      	ldr	r2, [pc, #444]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b6d      	ldr	r3, [pc, #436]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6c      	ldr	r2, [pc, #432]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004198:	4b69      	ldr	r3, [pc, #420]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a68      	ldr	r2, [pc, #416]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b66      	ldr	r3, [pc, #408]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd fc92 	bl	8001ae0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd fc8e 	bl	8001ae0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e207      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xc0>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fd fc7e 	bl	8001ae0 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd fc7a 	bl	8001ae0 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1f3      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0xe8>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d063      	beq.n	80042de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422e:	4b44      	ldr	r3, [pc, #272]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1c7      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4937      	ldr	r1, [pc, #220]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	e03a      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b34      	ldr	r3, [pc, #208]	; (8004344 <HAL_RCC_OscConfig+0x244>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fd fc33 	bl	8001ae0 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427e:	f7fd fc2f 	bl	8001ae0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1a8      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4925      	ldr	r1, [pc, #148]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	e015      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_RCC_OscConfig+0x244>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fc12 	bl	8001ae0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c0:	f7fd fc0e 	bl	8001ae0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e187      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d036      	beq.n	8004358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_RCC_OscConfig+0x248>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd fbf2 	bl	8001ae0 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004300:	f7fd fbee 	bl	8001ae0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e167      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_OscConfig+0x240>)
 8004314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x200>
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_OscConfig+0x248>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fd fbdb 	bl	8001ae0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	e00e      	b.n	800434c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432e:	f7fd fbd7 	bl	8001ae0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d907      	bls.n	800434c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e150      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	42470000 	.word	0x42470000
 8004348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ea      	bne.n	800432e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8097 	beq.w	8004494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	4b7d      	ldr	r3, [pc, #500]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a7c      	ldr	r2, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b7a      	ldr	r3, [pc, #488]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	4b77      	ldr	r3, [pc, #476]	; (8004574 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a2:	4b74      	ldr	r3, [pc, #464]	; (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	; (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fb97 	bl	8001ae0 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd fb93 	bl	8001ae0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e10c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b6a      	ldr	r3, [pc, #424]	; (8004574 <HAL_RCC_OscConfig+0x474>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x2ea>
 80043dc:	4b64      	ldr	r3, [pc, #400]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a63      	ldr	r2, [pc, #396]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x30c>
 80043f2:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a5e      	ldr	r2, [pc, #376]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0304 	orr.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a5b      	ldr	r2, [pc, #364]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 800440c:	4b58      	ldr	r3, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a57      	ldr	r2, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
 8004418:	4b55      	ldr	r3, [pc, #340]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a54      	ldr	r2, [pc, #336]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800441e:	f023 0304 	bic.w	r3, r3, #4
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fb58 	bl	8001ae0 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fb54 	bl	8001ae0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0cb      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	4b49      	ldr	r3, [pc, #292]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ee      	beq.n	8004434 <HAL_RCC_OscConfig+0x334>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fd fb42 	bl	8001ae0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fd fb3e 	bl	8001ae0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0b5      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ee      	bne.n	8004460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4a38      	ldr	r2, [pc, #224]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a1 	beq.w	80045e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800449e:	4b34      	ldr	r3, [pc, #208]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d05c      	beq.n	8004564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d141      	bne.n	8004536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b31      	ldr	r3, [pc, #196]	; (8004578 <HAL_RCC_OscConfig+0x478>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fb12 	bl	8001ae0 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fd fb0e 	bl	8001ae0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e087      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	3b01      	subs	r3, #1
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	491b      	ldr	r1, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_RCC_OscConfig+0x478>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fd fae7 	bl	8001ae0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd fae3 	bl	8001ae0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e05c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x416>
 8004534:	e054      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fd fad0 	bl	8001ae0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd facc 	bl	8001ae0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e045      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x444>
 8004562:	e03d      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e038      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4ec>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d028      	beq.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d121      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d11a      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d111      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	3b01      	subs	r3, #1
 80045c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cc      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d90c      	bls.n	800462c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b8      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a58      	ldr	r2, [pc, #352]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800464e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	494d      	ldr	r1, [pc, #308]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d044      	beq.n	8004710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d119      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e07f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b3f      	ldr	r3, [pc, #252]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e06f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e067      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4934      	ldr	r1, [pc, #208]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e0:	f7fd f9fe 	bl	8001ae0 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e8:	f7fd f9fa 	bl	8001ae0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 020c 	and.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d1eb      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004710:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d20c      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4916      	ldr	r1, [pc, #88]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f821 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490a      	ldr	r1, [pc, #40]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd f95e 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00
 80047ac:	40023800 	.word	0x40023800
 80047b0:	08006f00 	.word	0x08006f00
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	20000010 	.word	0x20000010

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b094      	sub	sp, #80	; 0x50
 80047c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	647b      	str	r3, [r7, #68]	; 0x44
 80047c8:	2300      	movs	r3, #0
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047cc:	2300      	movs	r3, #0
 80047ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d4:	4b79      	ldr	r3, [pc, #484]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d00d      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x40>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	f200 80e1 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ee:	e0db      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b73      	ldr	r3, [pc, #460]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047f4:	e0db      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f6:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047fa:	e0d8      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fc:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004804:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d063      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b6a      	ldr	r3, [pc, #424]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	2200      	movs	r2, #0
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38
 800481c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4621      	mov	r1, r4
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	6139      	str	r1, [r7, #16]
 800484c:	4629      	mov	r1, r5
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	ebb2 0801 	subs.w	r8, r2, r1
 8004874:	4659      	mov	r1, fp
 8004876:	eb63 0901 	sbc.w	r9, r3, r1
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488e:	4690      	mov	r8, r2
 8004890:	4699      	mov	r9, r3
 8004892:	4623      	mov	r3, r4
 8004894:	eb18 0303 	adds.w	r3, r8, r3
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	462b      	mov	r3, r5
 800489c:	eb49 0303 	adc.w	r3, r9, r3
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ae:	4629      	mov	r1, r5
 80048b0:	024b      	lsls	r3, r1, #9
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b8:	4621      	mov	r1, r4
 80048ba:	024a      	lsls	r2, r1, #9
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c2:	2200      	movs	r2, #0
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048cc:	f7fb fce0 	bl	8000290 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	e058      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	4611      	mov	r1, r2
 80048e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	2300      	movs	r3, #0
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	f04f 0000 	mov.w	r0, #0
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	0159      	lsls	r1, r3, #5
 8004902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004906:	0150      	lsls	r0, r2, #5
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4641      	mov	r1, r8
 800490e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004912:	4649      	mov	r1, r9
 8004914:	eb63 0b01 	sbc.w	fp, r3, r1
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800492c:	ebb2 040a 	subs.w	r4, r2, sl
 8004930:	eb63 050b 	sbc.w	r5, r3, fp
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	00eb      	lsls	r3, r5, #3
 800493e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004942:	00e2      	lsls	r2, r4, #3
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
 8004948:	4643      	mov	r3, r8
 800494a:	18e3      	adds	r3, r4, r3
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	464b      	mov	r3, r9
 8004950:	eb45 0303 	adc.w	r3, r5, r3
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004962:	4629      	mov	r1, r5
 8004964:	028b      	lsls	r3, r1, #10
 8004966:	4621      	mov	r1, r4
 8004968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496c:	4621      	mov	r1, r4
 800496e:	028a      	lsls	r2, r1, #10
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004976:	2200      	movs	r2, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	f7fb fc86 	bl	8000290 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800499c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800499e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3750      	adds	r7, #80	; 0x50
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08006f10 	.word	0x08006f10

08004a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a0c:	f7ff ffdc 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0b5b      	lsrs	r3, r3, #13
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08006f10 	.word	0x08006f10

08004a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07b      	b.n	8004b3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fe62 	bl	800174c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0104 	and.w	r1, r3, #4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f003 0210 	and.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_SPI_Transmit_IT+0x20>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e06f      	b.n	8004c44 <HAL_SPI_Transmit_IT+0x100>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit_IT+0x34>
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b7c:	e05d      	b.n	8004c3a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b8e:	e054      	b.n	8004c3a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_SPI_Transmit_IT+0x10c>)
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8004bd6:	e002      	b.n	8004bde <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_SPI_Transmit_IT+0x110>)
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be6:	d10f      	bne.n	8004c08 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004c16:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d008      	beq.n	8004c38 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e000      	b.n	8004c3a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004c38:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	08004edb 	.word	0x08004edb
 8004c54:	08004e95 	.word	0x08004e95

08004c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	099b      	lsrs	r3, r3, #6
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
    return;
 8004c9a:	e0d7      	b.n	8004e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_SPI_IRQHandler+0x66>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	09db      	lsrs	r3, r3, #7
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
    return;
 8004cbc:	e0c6      	b.n	8004e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_SPI_IRQHandler+0x8c>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80b4 	beq.w	8004e4c <HAL_SPI_IRQHandler+0x1f4>
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80ad 	beq.w	8004e4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d011      	beq.n	8004d2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	e00b      	b.n	8004d46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
        return;
 8004d44:	e082      	b.n	8004e4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f043 0208 	orr.w	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04f      	beq.n	8004e4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_SPI_IRQHandler+0x17e>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d034      	beq.n	8004e40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0203 	bic.w	r2, r2, #3
 8004de4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_SPI_IRQHandler+0x1fc>)
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd f821 	bl	8001e42 <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <HAL_SPI_IRQHandler+0x1fc>)
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd f80b 	bl	8001e42 <HAL_DMA_Abort_IT>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e3e:	e003      	b.n	8004e48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f809 	bl	8004e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e46:	e000      	b.n	8004e4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e48:	bf00      	nop
    return;
 8004e4a:	bf00      	nop
  }
}
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08004e6d 	.word	0x08004e6d

08004e58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ffe6 	bl	8004e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f8f1 	bl	80050b4 <SPI_CloseTx_ISR>
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	881a      	ldrh	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	1c9a      	adds	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8cf 	bl	80050b4 <SPI_CloseTx_ISR>
  }
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f30:	f7fc fdd6 	bl	8001ae0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f40:	f7fc fdce 	bl	8001ae0 <HAL_GetTick>
 8004f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	015b      	lsls	r3, r3, #5
 8004f4c:	0d1b      	lsrs	r3, r3, #20
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f56:	e054      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d050      	beq.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f60:	f7fc fdbe 	bl	8001ae0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d13d      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8e:	d111      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d004      	beq.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d107      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d10f      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e017      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d19b      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000000c 	.word	0x2000000c

08005030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <SPI_EndRxTxTransaction+0x7c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <SPI_EndRxTxTransaction+0x80>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0d5b      	lsrs	r3, r3, #21
 8005048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d112      	bne.n	8005082 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff5a 	bl	8004f20 <SPI_WaitFlagStateUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e00f      	b.n	80050a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	3b01      	subs	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d0f2      	beq.n	8005082 <SPI_EndRxTxTransaction+0x52>
 800509c:	e000      	b.n	80050a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800509e:	bf00      	nop
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	165e9f81 	.word	0x165e9f81

080050b4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <SPI_CloseTx_ISR+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <SPI_CloseTx_ISR+0xc0>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	0a5b      	lsrs	r3, r3, #9
 80050c8:	2264      	movs	r2, #100	; 0x64
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d0:	f7fc fd06 	bl	8001ae0 <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050e8:	e009      	b.n	80050fe <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0eb      	beq.n	80050d6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800510c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	2164      	movs	r1, #100	; 0x64
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff ff8c 	bl	8005030 <SPI_EndRxTxTransaction>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fe7d 	bl	8004e58 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800515e:	e002      	b.n	8005166 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fc f9cd 	bl	8001500 <HAL_SPI_TxCpltCallback>
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000000c 	.word	0x2000000c
 8005174:	057619f1 	.word	0x057619f1

08005178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e03f      	b.n	800520a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fc fb24 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	; 0x24
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fddf 	bl	8005d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b08a      	sub	sp, #40	; 0x28
 8005216:	af02      	add	r7, sp, #8
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b20      	cmp	r3, #32
 8005230:	d17c      	bne.n	800532c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_UART_Transmit+0x2c>
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e075      	b.n	800532e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_UART_Transmit+0x3e>
 800524c:	2302      	movs	r3, #2
 800524e:	e06e      	b.n	800532e <HAL_UART_Transmit+0x11c>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2221      	movs	r2, #33	; 0x21
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005266:	f7fc fc3b 	bl	8001ae0 <HAL_GetTick>
 800526a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d108      	bne.n	8005294 <HAL_UART_Transmit+0x82>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e003      	b.n	800529c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052a4:	e02a      	b.n	80052fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb1f 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e036      	b.n	800532e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3302      	adds	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e007      	b.n	80052ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1cf      	bne.n	80052a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 faef 	bl	80058f4 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	4613      	mov	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	d11d      	bne.n	800538c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Receive_IT+0x26>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e016      	b.n	800538e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_UART_Receive_IT+0x38>
 800536a:	2302      	movs	r3, #2
 800536c:	e00f      	b.n	800538e <HAL_UART_Receive_IT+0x58>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	461a      	mov	r2, r3
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fb24 	bl	80059d0 <UART_Start_Receive_IT>
 8005388:	4603      	mov	r3, r0
 800538a:	e000      	b.n	800538e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b0ba      	sub	sp, #232	; 0xe8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053be:	2300      	movs	r3, #0
 80053c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_UART_IRQHandler+0x66>
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fc07 	bl	8005c0a <UART_Receive_IT>
      return;
 80053fc:	e256      	b.n	80058ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80de 	beq.w	80055c4 <HAL_UART_IRQHandler+0x22c>
 8005408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80d1 	beq.w	80055c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_UART_IRQHandler+0xae>
 800542e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0201 	orr.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_UART_IRQHandler+0xd2>
 8005452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0202 	orr.w	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_UART_IRQHandler+0xf6>
 8005476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0204 	orr.w	r2, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d011      	beq.n	80054be <HAL_UART_IRQHandler+0x126>
 800549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0208 	orr.w	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 81ed 	beq.w	80058a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_UART_IRQHandler+0x14e>
 80054d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb92 	bl	8005c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <HAL_UART_IRQHandler+0x17a>
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04f      	beq.n	80055b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa9a 	bl	8005a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d141      	bne.n	80055aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800553c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3314      	adds	r3, #20
 800554e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800555e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800556a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d9      	bne.n	8005526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	2b00      	cmp	r3, #0
 8005578:	d013      	beq.n	80055a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	4a7d      	ldr	r2, [pc, #500]	; (8005774 <HAL_UART_IRQHandler+0x3dc>)
 8005580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc fc5b 	bl	8001e42 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e00e      	b.n	80055c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f990 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00a      	b.n	80055c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f98c 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e006      	b.n	80055c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f988 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055be:	e170      	b.n	80058a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	bf00      	nop
    return;
 80055c2:	e16e      	b.n	80058a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f040 814a 	bne.w	8005862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8143 	beq.w	8005862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 813c 	beq.w	8005862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	f040 80b4 	bne.w	8005778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800561c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8140 	beq.w	80058a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800562a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800562e:	429a      	cmp	r2, r3
 8005630:	f080 8139 	bcs.w	80058a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800563a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	f000 8088 	beq.w	800575a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800568e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1d9      	bne.n	800564a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e1      	bne.n	8005696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e3      	bne.n	80056d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800573c:	65ba      	str	r2, [r7, #88]	; 0x58
 800573e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e3      	bne.n	8005718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	4618      	mov	r0, r3
 8005756:	f7fc fb04 	bl	8001d62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005762:	b29b      	uxth	r3, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8b6 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005770:	e099      	b.n	80058a6 <HAL_UART_IRQHandler+0x50e>
 8005772:	bf00      	nop
 8005774:	08005b13 	.word	0x08005b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005780:	b29b      	uxth	r3, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 808b 	beq.w	80058aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8086 	beq.w	80058aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057c2:	647a      	str	r2, [r7, #68]	; 0x44
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e3      	bne.n	800579e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	623b      	str	r3, [r7, #32]
   return(result);
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057fa:	633a      	str	r2, [r7, #48]	; 0x30
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60fb      	str	r3, [r7, #12]
   return(result);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005840:	61fa      	str	r2, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	617b      	str	r3, [r7, #20]
   return(result);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e3      	bne.n	800581c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f83e 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005860:	e023      	b.n	80058aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_UART_IRQHandler+0x4ea>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f95d 	bl	8005b3a <UART_Transmit_IT>
    return;
 8005880:	e014      	b.n	80058ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00e      	beq.n	80058ac <HAL_UART_IRQHandler+0x514>
 800588e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f99d 	bl	8005bda <UART_EndTransmit_IT>
    return;
 80058a0:	e004      	b.n	80058ac <HAL_UART_IRQHandler+0x514>
    return;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <HAL_UART_IRQHandler+0x514>
      return;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <HAL_UART_IRQHandler+0x514>
      return;
 80058aa:	bf00      	nop
  }
}
 80058ac:	37e8      	adds	r7, #232	; 0xe8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop

080058b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b090      	sub	sp, #64	; 0x40
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	e050      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d04c      	beq.n	80059a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <UART_WaitOnFlagUntilTimeout+0x30>
 8005914:	f7fc f8e4 	bl	8001ae0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005920:	429a      	cmp	r2, r3
 8005922:	d241      	bcs.n	80059a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005944:	637a      	str	r2, [r7, #52]	; 0x34
 8005946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	613b      	str	r3, [r7, #16]
   return(result);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005978:	623a      	str	r2, [r7, #32]
 800597a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	61bb      	str	r3, [r7, #24]
   return(result);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e00f      	b.n	80059c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d09f      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3740      	adds	r7, #64	; 0x40
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2222      	movs	r2, #34	; 0x22
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0220 	orr.w	r2, r2, #32
 8005a3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b095      	sub	sp, #84	; 0x54
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a74:	643a      	str	r2, [r7, #64]	; 0x40
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3314      	adds	r3, #20
 8005a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d119      	bne.n	8005af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae4:	61ba      	str	r2, [r7, #24]
 8005ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	613b      	str	r3, [r7, #16]
   return(result);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b06:	bf00      	nop
 8005b08:	3754      	adds	r7, #84	; 0x54
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fecb 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b21      	cmp	r3, #33	; 0x21
 8005b4c:	d13e      	bne.n	8005bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b56:	d114      	bne.n	8005b82 <UART_Transmit_IT+0x48>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d110      	bne.n	8005b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]
 8005b80:	e008      	b.n	8005b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6211      	str	r1, [r2, #32]
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10f      	bne.n	8005bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe5a 	bl	80058b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b08c      	sub	sp, #48	; 0x30
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b22      	cmp	r3, #34	; 0x22
 8005c1c:	f040 80ab 	bne.w	8005d76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c28:	d117      	bne.n	8005c5a <UART_Receive_IT+0x50>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d113      	bne.n	8005c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	629a      	str	r2, [r3, #40]	; 0x28
 8005c58:	e026      	b.n	8005ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6c:	d007      	beq.n	8005c7e <UART_Receive_IT+0x74>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <UART_Receive_IT+0x82>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e008      	b.n	8005c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d15a      	bne.n	8005d72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0220 	bic.w	r2, r2, #32
 8005cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d135      	bne.n	8005d68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	623a      	str	r2, [r7, #32]
 8005d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	69f9      	ldr	r1, [r7, #28]
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d10a      	bne.n	8005d5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fdbb 	bl	80058dc <HAL_UARTEx_RxEventCallback>
 8005d66:	e002      	b.n	8005d6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fb fc5f 	bl	800162c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e002      	b.n	8005d78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3730      	adds	r7, #48	; 0x30
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b0c0      	sub	sp, #256	; 0x100
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	68d9      	ldr	r1, [r3, #12]
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	ea40 0301 	orr.w	r3, r0, r1
 8005da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005de6:	430b      	orrs	r3, r1
 8005de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	ea40 0301 	orr.w	r3, r0, r1
 8005e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b8f      	ldr	r3, [pc, #572]	; (800604c <UART_SetConfig+0x2cc>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d005      	beq.n	8005e20 <UART_SetConfig+0xa0>
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	; (8006050 <UART_SetConfig+0x2d0>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d104      	bne.n	8005e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7fe fdf2 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 8005e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e28:	e003      	b.n	8005e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2a:	f7fe fdd9 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8005e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	f040 810c 	bne.w	8006058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	1891      	adds	r1, r2, r2
 8005e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e62:	4621      	mov	r1, r4
 8005e64:	eb12 0801 	adds.w	r8, r2, r1
 8005e68:	4629      	mov	r1, r5
 8005e6a:	eb43 0901 	adc.w	r9, r3, r1
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e82:	4690      	mov	r8, r2
 8005e84:	4699      	mov	r9, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	eb18 0303 	adds.w	r3, r8, r3
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e90:	462b      	mov	r3, r5
 8005e92:	eb49 0303 	adc.w	r3, r9, r3
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	eb42 0303 	adc.w	r3, r2, r3
 8005eba:	657b      	str	r3, [r7, #84]	; 0x54
 8005ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ec4:	f7fa f9e4 	bl	8000290 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b61      	ldr	r3, [pc, #388]	; (8006054 <UART_SetConfig+0x2d4>)
 8005ece:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	011c      	lsls	r4, r3, #4
 8005ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	1891      	adds	r1, r2, r2
 8005eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ef0:	415b      	adcs	r3, r3
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ef8:	4641      	mov	r1, r8
 8005efa:	eb12 0a01 	adds.w	sl, r2, r1
 8005efe:	4649      	mov	r1, r9
 8005f00:	eb43 0b01 	adc.w	fp, r3, r1
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f18:	4692      	mov	sl, r2
 8005f1a:	469b      	mov	fp, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f26:	464b      	mov	r3, r9
 8005f28:	eb4b 0303 	adc.w	r3, fp, r3
 8005f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f44:	460b      	mov	r3, r1
 8005f46:	18db      	adds	r3, r3, r3
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f5a:	f7fa f999 	bl	8000290 <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	4b3b      	ldr	r3, [pc, #236]	; (8006054 <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2301 	umull	r2, r3, r3, r1
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2264      	movs	r2, #100	; 0x64
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	1acb      	subs	r3, r1, r3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <UART_SetConfig+0x2d4>)
 8005f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f88:	441c      	add	r4, r3
 8005f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fac:	4641      	mov	r1, r8
 8005fae:	1851      	adds	r1, r2, r1
 8005fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	414b      	adcs	r3, r1
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	00cb      	lsls	r3, r1, #3
 8005fc8:	4651      	mov	r1, sl
 8005fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fce:	4651      	mov	r1, sl
 8005fd0:	00ca      	lsls	r2, r1, #3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006016:	f7fa f93b 	bl	8000290 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <UART_SetConfig+0x2d4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	; 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3332      	adds	r3, #50	; 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	; (8006054 <UART_SetConfig+0x2d4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 0207 	and.w	r2, r3, #7
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006048:	e105      	b.n	8006256 <UART_SetConfig+0x4d6>
 800604a:	bf00      	nop
 800604c:	40011000 	.word	0x40011000
 8006050:	40011400 	.word	0x40011400
 8006054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	1891      	adds	r1, r2, r2
 8006070:	6239      	str	r1, [r7, #32]
 8006072:	415b      	adcs	r3, r3
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800607a:	4641      	mov	r1, r8
 800607c:	1854      	adds	r4, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb43 0501 	adc.w	r5, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	00eb      	lsls	r3, r5, #3
 800608e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006092:	00e2      	lsls	r2, r4, #3
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	4643      	mov	r3, r8
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a0:	464b      	mov	r3, r9
 80060a2:	eb45 0303 	adc.w	r3, r5, r3
 80060a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060c6:	4629      	mov	r1, r5
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d0:	4621      	mov	r1, r4
 80060d2:	008a      	lsls	r2, r1, #2
 80060d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060d8:	f7fa f8da 	bl	8000290 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4b60      	ldr	r3, [pc, #384]	; (8006264 <UART_SetConfig+0x4e4>)
 80060e2:	fba3 2302 	umull	r2, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	011c      	lsls	r4, r3, #4
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	1891      	adds	r1, r2, r2
 8006102:	61b9      	str	r1, [r7, #24]
 8006104:	415b      	adcs	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800610c:	4641      	mov	r1, r8
 800610e:	1851      	adds	r1, r2, r1
 8006110:	6139      	str	r1, [r7, #16]
 8006112:	4649      	mov	r1, r9
 8006114:	414b      	adcs	r3, r1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006124:	4659      	mov	r1, fp
 8006126:	00cb      	lsls	r3, r1, #3
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800612e:	4651      	mov	r1, sl
 8006130:	00ca      	lsls	r2, r1, #3
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	4603      	mov	r3, r0
 8006138:	4642      	mov	r2, r8
 800613a:	189b      	adds	r3, r3, r2
 800613c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006140:	464b      	mov	r3, r9
 8006142:	460a      	mov	r2, r1
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	67bb      	str	r3, [r7, #120]	; 0x78
 8006156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006164:	4649      	mov	r1, r9
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	4641      	mov	r1, r8
 800616a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616e:	4641      	mov	r1, r8
 8006170:	008a      	lsls	r2, r1, #2
 8006172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006176:	f7fa f88b 	bl	8000290 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4b39      	ldr	r3, [pc, #228]	; (8006264 <UART_SetConfig+0x4e4>)
 8006180:	fba3 1302 	umull	r1, r3, r3, r2
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	2164      	movs	r1, #100	; 0x64
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	3332      	adds	r3, #50	; 0x32
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <UART_SetConfig+0x4e4>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800619e:	441c      	add	r4, r3
 80061a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a4:	2200      	movs	r2, #0
 80061a6:	673b      	str	r3, [r7, #112]	; 0x70
 80061a8:	677a      	str	r2, [r7, #116]	; 0x74
 80061aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061ae:	4642      	mov	r2, r8
 80061b0:	464b      	mov	r3, r9
 80061b2:	1891      	adds	r1, r2, r2
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	415b      	adcs	r3, r3
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061be:	4641      	mov	r1, r8
 80061c0:	1851      	adds	r1, r2, r1
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	4649      	mov	r1, r9
 80061c6:	414b      	adcs	r3, r1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061d6:	4659      	mov	r1, fp
 80061d8:	00cb      	lsls	r3, r1, #3
 80061da:	4651      	mov	r1, sl
 80061dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e0:	4651      	mov	r1, sl
 80061e2:	00ca      	lsls	r2, r1, #3
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	4603      	mov	r3, r0
 80061ea:	4642      	mov	r2, r8
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f0:	464b      	mov	r3, r9
 80061f2:	460a      	mov	r2, r1
 80061f4:	eb42 0303 	adc.w	r3, r2, r3
 80061f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
 8006204:	667a      	str	r2, [r7, #100]	; 0x64
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006212:	4649      	mov	r1, r9
 8006214:	008b      	lsls	r3, r1, #2
 8006216:	4641      	mov	r1, r8
 8006218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621c:	4641      	mov	r1, r8
 800621e:	008a      	lsls	r2, r1, #2
 8006220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006224:	f7fa f834 	bl	8000290 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <UART_SetConfig+0x4e4>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2164      	movs	r1, #100	; 0x64
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a08      	ldr	r2, [pc, #32]	; (8006264 <UART_SetConfig+0x4e4>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4422      	add	r2, r4
 8006254:	609a      	str	r2, [r3, #8]
}
 8006256:	bf00      	nop
 8006258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006262:	bf00      	nop
 8006264:	51eb851f 	.word	0x51eb851f

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	; (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000018 	.word	0x20000018

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	; (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	; (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	; (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	; (80062b8 <__libc_init_array+0x44>)
 8006288:	f000 fc8e 	bl	8006ba8 <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08006f54 	.word	0x08006f54
 80062b0:	08006f54 	.word	0x08006f54
 80062b4:	08006f54 	.word	0x08006f54
 80062b8:	08006f58 	.word	0x08006f58

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <siprintf>:
 80062cc:	b40e      	push	{r1, r2, r3}
 80062ce:	b500      	push	{lr}
 80062d0:	b09c      	sub	sp, #112	; 0x70
 80062d2:	ab1d      	add	r3, sp, #116	; 0x74
 80062d4:	9002      	str	r0, [sp, #8]
 80062d6:	9006      	str	r0, [sp, #24]
 80062d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062dc:	4809      	ldr	r0, [pc, #36]	; (8006304 <siprintf+0x38>)
 80062de:	9107      	str	r1, [sp, #28]
 80062e0:	9104      	str	r1, [sp, #16]
 80062e2:	4909      	ldr	r1, [pc, #36]	; (8006308 <siprintf+0x3c>)
 80062e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	a902      	add	r1, sp, #8
 80062f0:	f000 f868 	bl	80063c4 <_svfiprintf_r>
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	b01c      	add	sp, #112	; 0x70
 80062fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006300:	b003      	add	sp, #12
 8006302:	4770      	bx	lr
 8006304:	20000018 	.word	0x20000018
 8006308:	ffff0208 	.word	0xffff0208

0800630c <__ssputs_r>:
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	688e      	ldr	r6, [r1, #8]
 8006312:	429e      	cmp	r6, r3
 8006314:	4682      	mov	sl, r0
 8006316:	460c      	mov	r4, r1
 8006318:	4690      	mov	r8, r2
 800631a:	461f      	mov	r7, r3
 800631c:	d838      	bhi.n	8006390 <__ssputs_r+0x84>
 800631e:	898a      	ldrh	r2, [r1, #12]
 8006320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006324:	d032      	beq.n	800638c <__ssputs_r+0x80>
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	6909      	ldr	r1, [r1, #16]
 800632a:	eba5 0901 	sub.w	r9, r5, r1
 800632e:	6965      	ldr	r5, [r4, #20]
 8006330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006338:	3301      	adds	r3, #1
 800633a:	444b      	add	r3, r9
 800633c:	106d      	asrs	r5, r5, #1
 800633e:	429d      	cmp	r5, r3
 8006340:	bf38      	it	cc
 8006342:	461d      	movcc	r5, r3
 8006344:	0553      	lsls	r3, r2, #21
 8006346:	d531      	bpl.n	80063ac <__ssputs_r+0xa0>
 8006348:	4629      	mov	r1, r5
 800634a:	f000 fb63 	bl	8006a14 <_malloc_r>
 800634e:	4606      	mov	r6, r0
 8006350:	b950      	cbnz	r0, 8006368 <__ssputs_r+0x5c>
 8006352:	230c      	movs	r3, #12
 8006354:	f8ca 3000 	str.w	r3, [sl]
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	6921      	ldr	r1, [r4, #16]
 800636a:	464a      	mov	r2, r9
 800636c:	f000 fabe 	bl	80068ec <memcpy>
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	6126      	str	r6, [r4, #16]
 800637e:	6165      	str	r5, [r4, #20]
 8006380:	444e      	add	r6, r9
 8006382:	eba5 0509 	sub.w	r5, r5, r9
 8006386:	6026      	str	r6, [r4, #0]
 8006388:	60a5      	str	r5, [r4, #8]
 800638a:	463e      	mov	r6, r7
 800638c:	42be      	cmp	r6, r7
 800638e:	d900      	bls.n	8006392 <__ssputs_r+0x86>
 8006390:	463e      	mov	r6, r7
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	4632      	mov	r2, r6
 8006396:	4641      	mov	r1, r8
 8006398:	f000 fab6 	bl	8006908 <memmove>
 800639c:	68a3      	ldr	r3, [r4, #8]
 800639e:	1b9b      	subs	r3, r3, r6
 80063a0:	60a3      	str	r3, [r4, #8]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	4433      	add	r3, r6
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	2000      	movs	r0, #0
 80063aa:	e7db      	b.n	8006364 <__ssputs_r+0x58>
 80063ac:	462a      	mov	r2, r5
 80063ae:	f000 fba5 	bl	8006afc <_realloc_r>
 80063b2:	4606      	mov	r6, r0
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1e1      	bne.n	800637c <__ssputs_r+0x70>
 80063b8:	6921      	ldr	r1, [r4, #16]
 80063ba:	4650      	mov	r0, sl
 80063bc:	f000 fabe 	bl	800693c <_free_r>
 80063c0:	e7c7      	b.n	8006352 <__ssputs_r+0x46>
	...

080063c4 <_svfiprintf_r>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	4698      	mov	r8, r3
 80063ca:	898b      	ldrh	r3, [r1, #12]
 80063cc:	061b      	lsls	r3, r3, #24
 80063ce:	b09d      	sub	sp, #116	; 0x74
 80063d0:	4607      	mov	r7, r0
 80063d2:	460d      	mov	r5, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	d50e      	bpl.n	80063f6 <_svfiprintf_r+0x32>
 80063d8:	690b      	ldr	r3, [r1, #16]
 80063da:	b963      	cbnz	r3, 80063f6 <_svfiprintf_r+0x32>
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	f000 fb19 	bl	8006a14 <_malloc_r>
 80063e2:	6028      	str	r0, [r5, #0]
 80063e4:	6128      	str	r0, [r5, #16]
 80063e6:	b920      	cbnz	r0, 80063f2 <_svfiprintf_r+0x2e>
 80063e8:	230c      	movs	r3, #12
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e0d1      	b.n	8006596 <_svfiprintf_r+0x1d2>
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	616b      	str	r3, [r5, #20]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9309      	str	r3, [sp, #36]	; 0x24
 80063fa:	2320      	movs	r3, #32
 80063fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006400:	f8cd 800c 	str.w	r8, [sp, #12]
 8006404:	2330      	movs	r3, #48	; 0x30
 8006406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065b0 <_svfiprintf_r+0x1ec>
 800640a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800640e:	f04f 0901 	mov.w	r9, #1
 8006412:	4623      	mov	r3, r4
 8006414:	469a      	mov	sl, r3
 8006416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641a:	b10a      	cbz	r2, 8006420 <_svfiprintf_r+0x5c>
 800641c:	2a25      	cmp	r2, #37	; 0x25
 800641e:	d1f9      	bne.n	8006414 <_svfiprintf_r+0x50>
 8006420:	ebba 0b04 	subs.w	fp, sl, r4
 8006424:	d00b      	beq.n	800643e <_svfiprintf_r+0x7a>
 8006426:	465b      	mov	r3, fp
 8006428:	4622      	mov	r2, r4
 800642a:	4629      	mov	r1, r5
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ff6d 	bl	800630c <__ssputs_r>
 8006432:	3001      	adds	r0, #1
 8006434:	f000 80aa 	beq.w	800658c <_svfiprintf_r+0x1c8>
 8006438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800643a:	445a      	add	r2, fp
 800643c:	9209      	str	r2, [sp, #36]	; 0x24
 800643e:	f89a 3000 	ldrb.w	r3, [sl]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80a2 	beq.w	800658c <_svfiprintf_r+0x1c8>
 8006448:	2300      	movs	r3, #0
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006452:	f10a 0a01 	add.w	sl, sl, #1
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800645e:	931a      	str	r3, [sp, #104]	; 0x68
 8006460:	4654      	mov	r4, sl
 8006462:	2205      	movs	r2, #5
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	4851      	ldr	r0, [pc, #324]	; (80065b0 <_svfiprintf_r+0x1ec>)
 800646a:	f7f9 fec1 	bl	80001f0 <memchr>
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	b9d8      	cbnz	r0, 80064aa <_svfiprintf_r+0xe6>
 8006472:	06d0      	lsls	r0, r2, #27
 8006474:	bf44      	itt	mi
 8006476:	2320      	movmi	r3, #32
 8006478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800647c:	0711      	lsls	r1, r2, #28
 800647e:	bf44      	itt	mi
 8006480:	232b      	movmi	r3, #43	; 0x2b
 8006482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006486:	f89a 3000 	ldrb.w	r3, [sl]
 800648a:	2b2a      	cmp	r3, #42	; 0x2a
 800648c:	d015      	beq.n	80064ba <_svfiprintf_r+0xf6>
 800648e:	9a07      	ldr	r2, [sp, #28]
 8006490:	4654      	mov	r4, sl
 8006492:	2000      	movs	r0, #0
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4621      	mov	r1, r4
 800649a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649e:	3b30      	subs	r3, #48	; 0x30
 80064a0:	2b09      	cmp	r3, #9
 80064a2:	d94e      	bls.n	8006542 <_svfiprintf_r+0x17e>
 80064a4:	b1b0      	cbz	r0, 80064d4 <_svfiprintf_r+0x110>
 80064a6:	9207      	str	r2, [sp, #28]
 80064a8:	e014      	b.n	80064d4 <_svfiprintf_r+0x110>
 80064aa:	eba0 0308 	sub.w	r3, r0, r8
 80064ae:	fa09 f303 	lsl.w	r3, r9, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	46a2      	mov	sl, r4
 80064b8:	e7d2      	b.n	8006460 <_svfiprintf_r+0x9c>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	1d19      	adds	r1, r3, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	9103      	str	r1, [sp, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfbb      	ittet	lt
 80064c6:	425b      	neglt	r3, r3
 80064c8:	f042 0202 	orrlt.w	r2, r2, #2
 80064cc:	9307      	strge	r3, [sp, #28]
 80064ce:	9307      	strlt	r3, [sp, #28]
 80064d0:	bfb8      	it	lt
 80064d2:	9204      	strlt	r2, [sp, #16]
 80064d4:	7823      	ldrb	r3, [r4, #0]
 80064d6:	2b2e      	cmp	r3, #46	; 0x2e
 80064d8:	d10c      	bne.n	80064f4 <_svfiprintf_r+0x130>
 80064da:	7863      	ldrb	r3, [r4, #1]
 80064dc:	2b2a      	cmp	r3, #42	; 0x2a
 80064de:	d135      	bne.n	800654c <_svfiprintf_r+0x188>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	9203      	str	r2, [sp, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bfb8      	it	lt
 80064ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80064f0:	3402      	adds	r4, #2
 80064f2:	9305      	str	r3, [sp, #20]
 80064f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065c0 <_svfiprintf_r+0x1fc>
 80064f8:	7821      	ldrb	r1, [r4, #0]
 80064fa:	2203      	movs	r2, #3
 80064fc:	4650      	mov	r0, sl
 80064fe:	f7f9 fe77 	bl	80001f0 <memchr>
 8006502:	b140      	cbz	r0, 8006516 <_svfiprintf_r+0x152>
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	eba0 000a 	sub.w	r0, r0, sl
 800650a:	fa03 f000 	lsl.w	r0, r3, r0
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	4303      	orrs	r3, r0
 8006512:	3401      	adds	r4, #1
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651a:	4826      	ldr	r0, [pc, #152]	; (80065b4 <_svfiprintf_r+0x1f0>)
 800651c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006520:	2206      	movs	r2, #6
 8006522:	f7f9 fe65 	bl	80001f0 <memchr>
 8006526:	2800      	cmp	r0, #0
 8006528:	d038      	beq.n	800659c <_svfiprintf_r+0x1d8>
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <_svfiprintf_r+0x1f4>)
 800652c:	bb1b      	cbnz	r3, 8006576 <_svfiprintf_r+0x1b2>
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	3307      	adds	r3, #7
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	3308      	adds	r3, #8
 8006538:	9303      	str	r3, [sp, #12]
 800653a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653c:	4433      	add	r3, r6
 800653e:	9309      	str	r3, [sp, #36]	; 0x24
 8006540:	e767      	b.n	8006412 <_svfiprintf_r+0x4e>
 8006542:	fb0c 3202 	mla	r2, ip, r2, r3
 8006546:	460c      	mov	r4, r1
 8006548:	2001      	movs	r0, #1
 800654a:	e7a5      	b.n	8006498 <_svfiprintf_r+0xd4>
 800654c:	2300      	movs	r3, #0
 800654e:	3401      	adds	r4, #1
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	4619      	mov	r1, r3
 8006554:	f04f 0c0a 	mov.w	ip, #10
 8006558:	4620      	mov	r0, r4
 800655a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800655e:	3a30      	subs	r2, #48	; 0x30
 8006560:	2a09      	cmp	r2, #9
 8006562:	d903      	bls.n	800656c <_svfiprintf_r+0x1a8>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0c5      	beq.n	80064f4 <_svfiprintf_r+0x130>
 8006568:	9105      	str	r1, [sp, #20]
 800656a:	e7c3      	b.n	80064f4 <_svfiprintf_r+0x130>
 800656c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006570:	4604      	mov	r4, r0
 8006572:	2301      	movs	r3, #1
 8006574:	e7f0      	b.n	8006558 <_svfiprintf_r+0x194>
 8006576:	ab03      	add	r3, sp, #12
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	462a      	mov	r2, r5
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <_svfiprintf_r+0x1f8>)
 800657e:	a904      	add	r1, sp, #16
 8006580:	4638      	mov	r0, r7
 8006582:	f3af 8000 	nop.w
 8006586:	1c42      	adds	r2, r0, #1
 8006588:	4606      	mov	r6, r0
 800658a:	d1d6      	bne.n	800653a <_svfiprintf_r+0x176>
 800658c:	89ab      	ldrh	r3, [r5, #12]
 800658e:	065b      	lsls	r3, r3, #25
 8006590:	f53f af2c 	bmi.w	80063ec <_svfiprintf_r+0x28>
 8006594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006596:	b01d      	add	sp, #116	; 0x74
 8006598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659c:	ab03      	add	r3, sp, #12
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <_svfiprintf_r+0x1f8>)
 80065a4:	a904      	add	r1, sp, #16
 80065a6:	4638      	mov	r0, r7
 80065a8:	f000 f87a 	bl	80066a0 <_printf_i>
 80065ac:	e7eb      	b.n	8006586 <_svfiprintf_r+0x1c2>
 80065ae:	bf00      	nop
 80065b0:	08006f18 	.word	0x08006f18
 80065b4:	08006f22 	.word	0x08006f22
 80065b8:	00000000 	.word	0x00000000
 80065bc:	0800630d 	.word	0x0800630d
 80065c0:	08006f1e 	.word	0x08006f1e

080065c4 <_printf_common>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4616      	mov	r6, r2
 80065ca:	4699      	mov	r9, r3
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	690b      	ldr	r3, [r1, #16]
 80065d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	bfb8      	it	lt
 80065d8:	4613      	movlt	r3, r2
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065e0:	4607      	mov	r7, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b10a      	cbz	r2, 80065ea <_printf_common+0x26>
 80065e6:	3301      	adds	r3, #1
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0699      	lsls	r1, r3, #26
 80065ee:	bf42      	ittt	mi
 80065f0:	6833      	ldrmi	r3, [r6, #0]
 80065f2:	3302      	addmi	r3, #2
 80065f4:	6033      	strmi	r3, [r6, #0]
 80065f6:	6825      	ldr	r5, [r4, #0]
 80065f8:	f015 0506 	ands.w	r5, r5, #6
 80065fc:	d106      	bne.n	800660c <_printf_common+0x48>
 80065fe:	f104 0a19 	add.w	sl, r4, #25
 8006602:	68e3      	ldr	r3, [r4, #12]
 8006604:	6832      	ldr	r2, [r6, #0]
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	42ab      	cmp	r3, r5
 800660a:	dc26      	bgt.n	800665a <_printf_common+0x96>
 800660c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006610:	1e13      	subs	r3, r2, #0
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	bf18      	it	ne
 8006616:	2301      	movne	r3, #1
 8006618:	0692      	lsls	r2, r2, #26
 800661a:	d42b      	bmi.n	8006674 <_printf_common+0xb0>
 800661c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006620:	4649      	mov	r1, r9
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d01e      	beq.n	8006668 <_printf_common+0xa4>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	68e5      	ldr	r5, [r4, #12]
 800662e:	6832      	ldr	r2, [r6, #0]
 8006630:	f003 0306 	and.w	r3, r3, #6
 8006634:	2b04      	cmp	r3, #4
 8006636:	bf08      	it	eq
 8006638:	1aad      	subeq	r5, r5, r2
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	6922      	ldr	r2, [r4, #16]
 800663e:	bf0c      	ite	eq
 8006640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006644:	2500      	movne	r5, #0
 8006646:	4293      	cmp	r3, r2
 8006648:	bfc4      	itt	gt
 800664a:	1a9b      	subgt	r3, r3, r2
 800664c:	18ed      	addgt	r5, r5, r3
 800664e:	2600      	movs	r6, #0
 8006650:	341a      	adds	r4, #26
 8006652:	42b5      	cmp	r5, r6
 8006654:	d11a      	bne.n	800668c <_printf_common+0xc8>
 8006656:	2000      	movs	r0, #0
 8006658:	e008      	b.n	800666c <_printf_common+0xa8>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4649      	mov	r1, r9
 8006660:	4638      	mov	r0, r7
 8006662:	47c0      	blx	r8
 8006664:	3001      	adds	r0, #1
 8006666:	d103      	bne.n	8006670 <_printf_common+0xac>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	3501      	adds	r5, #1
 8006672:	e7c6      	b.n	8006602 <_printf_common+0x3e>
 8006674:	18e1      	adds	r1, r4, r3
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	2030      	movs	r0, #48	; 0x30
 800667a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800667e:	4422      	add	r2, r4
 8006680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006688:	3302      	adds	r3, #2
 800668a:	e7c7      	b.n	800661c <_printf_common+0x58>
 800668c:	2301      	movs	r3, #1
 800668e:	4622      	mov	r2, r4
 8006690:	4649      	mov	r1, r9
 8006692:	4638      	mov	r0, r7
 8006694:	47c0      	blx	r8
 8006696:	3001      	adds	r0, #1
 8006698:	d0e6      	beq.n	8006668 <_printf_common+0xa4>
 800669a:	3601      	adds	r6, #1
 800669c:	e7d9      	b.n	8006652 <_printf_common+0x8e>
	...

080066a0 <_printf_i>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	7e0f      	ldrb	r7, [r1, #24]
 80066a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066a8:	2f78      	cmp	r7, #120	; 0x78
 80066aa:	4691      	mov	r9, r2
 80066ac:	4680      	mov	r8, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	469a      	mov	sl, r3
 80066b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066b6:	d807      	bhi.n	80066c8 <_printf_i+0x28>
 80066b8:	2f62      	cmp	r7, #98	; 0x62
 80066ba:	d80a      	bhi.n	80066d2 <_printf_i+0x32>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	f000 80d8 	beq.w	8006872 <_printf_i+0x1d2>
 80066c2:	2f58      	cmp	r7, #88	; 0x58
 80066c4:	f000 80a3 	beq.w	800680e <_printf_i+0x16e>
 80066c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066d0:	e03a      	b.n	8006748 <_printf_i+0xa8>
 80066d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066d6:	2b15      	cmp	r3, #21
 80066d8:	d8f6      	bhi.n	80066c8 <_printf_i+0x28>
 80066da:	a101      	add	r1, pc, #4	; (adr r1, 80066e0 <_printf_i+0x40>)
 80066dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e0:	08006739 	.word	0x08006739
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	080066c9 	.word	0x080066c9
 80066ec:	080066c9 	.word	0x080066c9
 80066f0:	080066c9 	.word	0x080066c9
 80066f4:	080066c9 	.word	0x080066c9
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	080066c9 	.word	0x080066c9
 8006700:	080066c9 	.word	0x080066c9
 8006704:	080066c9 	.word	0x080066c9
 8006708:	080066c9 	.word	0x080066c9
 800670c:	08006859 	.word	0x08006859
 8006710:	0800677d 	.word	0x0800677d
 8006714:	0800683b 	.word	0x0800683b
 8006718:	080066c9 	.word	0x080066c9
 800671c:	080066c9 	.word	0x080066c9
 8006720:	0800687b 	.word	0x0800687b
 8006724:	080066c9 	.word	0x080066c9
 8006728:	0800677d 	.word	0x0800677d
 800672c:	080066c9 	.word	0x080066c9
 8006730:	080066c9 	.word	0x080066c9
 8006734:	08006843 	.word	0x08006843
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	602a      	str	r2, [r5, #0]
 8006740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006748:	2301      	movs	r3, #1
 800674a:	e0a3      	b.n	8006894 <_printf_i+0x1f4>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	6829      	ldr	r1, [r5, #0]
 8006750:	0606      	lsls	r6, r0, #24
 8006752:	f101 0304 	add.w	r3, r1, #4
 8006756:	d50a      	bpl.n	800676e <_printf_i+0xce>
 8006758:	680e      	ldr	r6, [r1, #0]
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	2e00      	cmp	r6, #0
 800675e:	da03      	bge.n	8006768 <_printf_i+0xc8>
 8006760:	232d      	movs	r3, #45	; 0x2d
 8006762:	4276      	negs	r6, r6
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006768:	485e      	ldr	r0, [pc, #376]	; (80068e4 <_printf_i+0x244>)
 800676a:	230a      	movs	r3, #10
 800676c:	e019      	b.n	80067a2 <_printf_i+0x102>
 800676e:	680e      	ldr	r6, [r1, #0]
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006776:	bf18      	it	ne
 8006778:	b236      	sxthne	r6, r6
 800677a:	e7ef      	b.n	800675c <_printf_i+0xbc>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	1d19      	adds	r1, r3, #4
 8006782:	6029      	str	r1, [r5, #0]
 8006784:	0601      	lsls	r1, r0, #24
 8006786:	d501      	bpl.n	800678c <_printf_i+0xec>
 8006788:	681e      	ldr	r6, [r3, #0]
 800678a:	e002      	b.n	8006792 <_printf_i+0xf2>
 800678c:	0646      	lsls	r6, r0, #25
 800678e:	d5fb      	bpl.n	8006788 <_printf_i+0xe8>
 8006790:	881e      	ldrh	r6, [r3, #0]
 8006792:	4854      	ldr	r0, [pc, #336]	; (80068e4 <_printf_i+0x244>)
 8006794:	2f6f      	cmp	r7, #111	; 0x6f
 8006796:	bf0c      	ite	eq
 8006798:	2308      	moveq	r3, #8
 800679a:	230a      	movne	r3, #10
 800679c:	2100      	movs	r1, #0
 800679e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067a2:	6865      	ldr	r5, [r4, #4]
 80067a4:	60a5      	str	r5, [r4, #8]
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	bfa2      	ittt	ge
 80067aa:	6821      	ldrge	r1, [r4, #0]
 80067ac:	f021 0104 	bicge.w	r1, r1, #4
 80067b0:	6021      	strge	r1, [r4, #0]
 80067b2:	b90e      	cbnz	r6, 80067b8 <_printf_i+0x118>
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	d04d      	beq.n	8006854 <_printf_i+0x1b4>
 80067b8:	4615      	mov	r5, r2
 80067ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80067be:	fb03 6711 	mls	r7, r3, r1, r6
 80067c2:	5dc7      	ldrb	r7, [r0, r7]
 80067c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067c8:	4637      	mov	r7, r6
 80067ca:	42bb      	cmp	r3, r7
 80067cc:	460e      	mov	r6, r1
 80067ce:	d9f4      	bls.n	80067ba <_printf_i+0x11a>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d10b      	bne.n	80067ec <_printf_i+0x14c>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	07de      	lsls	r6, r3, #31
 80067d8:	d508      	bpl.n	80067ec <_printf_i+0x14c>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	6861      	ldr	r1, [r4, #4]
 80067de:	4299      	cmp	r1, r3
 80067e0:	bfde      	ittt	le
 80067e2:	2330      	movle	r3, #48	; 0x30
 80067e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067ec:	1b52      	subs	r2, r2, r5
 80067ee:	6122      	str	r2, [r4, #16]
 80067f0:	f8cd a000 	str.w	sl, [sp]
 80067f4:	464b      	mov	r3, r9
 80067f6:	aa03      	add	r2, sp, #12
 80067f8:	4621      	mov	r1, r4
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff fee2 	bl	80065c4 <_printf_common>
 8006800:	3001      	adds	r0, #1
 8006802:	d14c      	bne.n	800689e <_printf_i+0x1fe>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	b004      	add	sp, #16
 800680a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680e:	4835      	ldr	r0, [pc, #212]	; (80068e4 <_printf_i+0x244>)
 8006810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006814:	6829      	ldr	r1, [r5, #0]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f851 6b04 	ldr.w	r6, [r1], #4
 800681c:	6029      	str	r1, [r5, #0]
 800681e:	061d      	lsls	r5, r3, #24
 8006820:	d514      	bpl.n	800684c <_printf_i+0x1ac>
 8006822:	07df      	lsls	r7, r3, #31
 8006824:	bf44      	itt	mi
 8006826:	f043 0320 	orrmi.w	r3, r3, #32
 800682a:	6023      	strmi	r3, [r4, #0]
 800682c:	b91e      	cbnz	r6, 8006836 <_printf_i+0x196>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f023 0320 	bic.w	r3, r3, #32
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	2310      	movs	r3, #16
 8006838:	e7b0      	b.n	800679c <_printf_i+0xfc>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	f043 0320 	orr.w	r3, r3, #32
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	2378      	movs	r3, #120	; 0x78
 8006844:	4828      	ldr	r0, [pc, #160]	; (80068e8 <_printf_i+0x248>)
 8006846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800684a:	e7e3      	b.n	8006814 <_printf_i+0x174>
 800684c:	0659      	lsls	r1, r3, #25
 800684e:	bf48      	it	mi
 8006850:	b2b6      	uxthmi	r6, r6
 8006852:	e7e6      	b.n	8006822 <_printf_i+0x182>
 8006854:	4615      	mov	r5, r2
 8006856:	e7bb      	b.n	80067d0 <_printf_i+0x130>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	6826      	ldr	r6, [r4, #0]
 800685c:	6961      	ldr	r1, [r4, #20]
 800685e:	1d18      	adds	r0, r3, #4
 8006860:	6028      	str	r0, [r5, #0]
 8006862:	0635      	lsls	r5, r6, #24
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	d501      	bpl.n	800686c <_printf_i+0x1cc>
 8006868:	6019      	str	r1, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0x1d2>
 800686c:	0670      	lsls	r0, r6, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0x1c8>
 8006870:	8019      	strh	r1, [r3, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	4615      	mov	r5, r2
 8006878:	e7ba      	b.n	80067f0 <_printf_i+0x150>
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	602a      	str	r2, [r5, #0]
 8006880:	681d      	ldr	r5, [r3, #0]
 8006882:	6862      	ldr	r2, [r4, #4]
 8006884:	2100      	movs	r1, #0
 8006886:	4628      	mov	r0, r5
 8006888:	f7f9 fcb2 	bl	80001f0 <memchr>
 800688c:	b108      	cbz	r0, 8006892 <_printf_i+0x1f2>
 800688e:	1b40      	subs	r0, r0, r5
 8006890:	6060      	str	r0, [r4, #4]
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	2300      	movs	r3, #0
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689c:	e7a8      	b.n	80067f0 <_printf_i+0x150>
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4649      	mov	r1, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	47d0      	blx	sl
 80068a8:	3001      	adds	r0, #1
 80068aa:	d0ab      	beq.n	8006804 <_printf_i+0x164>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	079b      	lsls	r3, r3, #30
 80068b0:	d413      	bmi.n	80068da <_printf_i+0x23a>
 80068b2:	68e0      	ldr	r0, [r4, #12]
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bfb8      	it	lt
 80068ba:	4618      	movlt	r0, r3
 80068bc:	e7a4      	b.n	8006808 <_printf_i+0x168>
 80068be:	2301      	movs	r3, #1
 80068c0:	4632      	mov	r2, r6
 80068c2:	4649      	mov	r1, r9
 80068c4:	4640      	mov	r0, r8
 80068c6:	47d0      	blx	sl
 80068c8:	3001      	adds	r0, #1
 80068ca:	d09b      	beq.n	8006804 <_printf_i+0x164>
 80068cc:	3501      	adds	r5, #1
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	9903      	ldr	r1, [sp, #12]
 80068d2:	1a5b      	subs	r3, r3, r1
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dcf2      	bgt.n	80068be <_printf_i+0x21e>
 80068d8:	e7eb      	b.n	80068b2 <_printf_i+0x212>
 80068da:	2500      	movs	r5, #0
 80068dc:	f104 0619 	add.w	r6, r4, #25
 80068e0:	e7f5      	b.n	80068ce <_printf_i+0x22e>
 80068e2:	bf00      	nop
 80068e4:	08006f29 	.word	0x08006f29
 80068e8:	08006f3a 	.word	0x08006f3a

080068ec <memcpy>:
 80068ec:	440a      	add	r2, r1
 80068ee:	4291      	cmp	r1, r2
 80068f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f4:	d100      	bne.n	80068f8 <memcpy+0xc>
 80068f6:	4770      	bx	lr
 80068f8:	b510      	push	{r4, lr}
 80068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006902:	4291      	cmp	r1, r2
 8006904:	d1f9      	bne.n	80068fa <memcpy+0xe>
 8006906:	bd10      	pop	{r4, pc}

08006908 <memmove>:
 8006908:	4288      	cmp	r0, r1
 800690a:	b510      	push	{r4, lr}
 800690c:	eb01 0402 	add.w	r4, r1, r2
 8006910:	d902      	bls.n	8006918 <memmove+0x10>
 8006912:	4284      	cmp	r4, r0
 8006914:	4623      	mov	r3, r4
 8006916:	d807      	bhi.n	8006928 <memmove+0x20>
 8006918:	1e43      	subs	r3, r0, #1
 800691a:	42a1      	cmp	r1, r4
 800691c:	d008      	beq.n	8006930 <memmove+0x28>
 800691e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006926:	e7f8      	b.n	800691a <memmove+0x12>
 8006928:	4402      	add	r2, r0
 800692a:	4601      	mov	r1, r0
 800692c:	428a      	cmp	r2, r1
 800692e:	d100      	bne.n	8006932 <memmove+0x2a>
 8006930:	bd10      	pop	{r4, pc}
 8006932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800693a:	e7f7      	b.n	800692c <memmove+0x24>

0800693c <_free_r>:
 800693c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800693e:	2900      	cmp	r1, #0
 8006940:	d044      	beq.n	80069cc <_free_r+0x90>
 8006942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006946:	9001      	str	r0, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f1a1 0404 	sub.w	r4, r1, #4
 800694e:	bfb8      	it	lt
 8006950:	18e4      	addlt	r4, r4, r3
 8006952:	f000 f913 	bl	8006b7c <__malloc_lock>
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <_free_r+0x94>)
 8006958:	9801      	ldr	r0, [sp, #4]
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	b933      	cbnz	r3, 800696c <_free_r+0x30>
 800695e:	6063      	str	r3, [r4, #4]
 8006960:	6014      	str	r4, [r2, #0]
 8006962:	b003      	add	sp, #12
 8006964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006968:	f000 b90e 	b.w	8006b88 <__malloc_unlock>
 800696c:	42a3      	cmp	r3, r4
 800696e:	d908      	bls.n	8006982 <_free_r+0x46>
 8006970:	6825      	ldr	r5, [r4, #0]
 8006972:	1961      	adds	r1, r4, r5
 8006974:	428b      	cmp	r3, r1
 8006976:	bf01      	itttt	eq
 8006978:	6819      	ldreq	r1, [r3, #0]
 800697a:	685b      	ldreq	r3, [r3, #4]
 800697c:	1949      	addeq	r1, r1, r5
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	e7ed      	b.n	800695e <_free_r+0x22>
 8006982:	461a      	mov	r2, r3
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b10b      	cbz	r3, 800698c <_free_r+0x50>
 8006988:	42a3      	cmp	r3, r4
 800698a:	d9fa      	bls.n	8006982 <_free_r+0x46>
 800698c:	6811      	ldr	r1, [r2, #0]
 800698e:	1855      	adds	r5, r2, r1
 8006990:	42a5      	cmp	r5, r4
 8006992:	d10b      	bne.n	80069ac <_free_r+0x70>
 8006994:	6824      	ldr	r4, [r4, #0]
 8006996:	4421      	add	r1, r4
 8006998:	1854      	adds	r4, r2, r1
 800699a:	42a3      	cmp	r3, r4
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	d1e0      	bne.n	8006962 <_free_r+0x26>
 80069a0:	681c      	ldr	r4, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	6053      	str	r3, [r2, #4]
 80069a6:	4421      	add	r1, r4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	e7da      	b.n	8006962 <_free_r+0x26>
 80069ac:	d902      	bls.n	80069b4 <_free_r+0x78>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	e7d6      	b.n	8006962 <_free_r+0x26>
 80069b4:	6825      	ldr	r5, [r4, #0]
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	428b      	cmp	r3, r1
 80069ba:	bf04      	itt	eq
 80069bc:	6819      	ldreq	r1, [r3, #0]
 80069be:	685b      	ldreq	r3, [r3, #4]
 80069c0:	6063      	str	r3, [r4, #4]
 80069c2:	bf04      	itt	eq
 80069c4:	1949      	addeq	r1, r1, r5
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	6054      	str	r4, [r2, #4]
 80069ca:	e7ca      	b.n	8006962 <_free_r+0x26>
 80069cc:	b003      	add	sp, #12
 80069ce:	bd30      	pop	{r4, r5, pc}
 80069d0:	200001f4 	.word	0x200001f4

080069d4 <sbrk_aligned>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4e0e      	ldr	r6, [pc, #56]	; (8006a10 <sbrk_aligned+0x3c>)
 80069d8:	460c      	mov	r4, r1
 80069da:	6831      	ldr	r1, [r6, #0]
 80069dc:	4605      	mov	r5, r0
 80069de:	b911      	cbnz	r1, 80069e6 <sbrk_aligned+0x12>
 80069e0:	f000 f8bc 	bl	8006b5c <_sbrk_r>
 80069e4:	6030      	str	r0, [r6, #0]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f8b7 	bl	8006b5c <_sbrk_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d00a      	beq.n	8006a08 <sbrk_aligned+0x34>
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d007      	beq.n	8006a0c <sbrk_aligned+0x38>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f8ac 	bl	8006b5c <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d101      	bne.n	8006a0c <sbrk_aligned+0x38>
 8006a08:	f04f 34ff 	mov.w	r4, #4294967295
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	200001f8 	.word	0x200001f8

08006a14 <_malloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	1ccd      	adds	r5, r1, #3
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	4607      	mov	r7, r0
 8006a2a:	db01      	blt.n	8006a30 <_malloc_r+0x1c>
 8006a2c:	42a9      	cmp	r1, r5
 8006a2e:	d905      	bls.n	8006a3c <_malloc_r+0x28>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	2600      	movs	r6, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	4e2e      	ldr	r6, [pc, #184]	; (8006af8 <_malloc_r+0xe4>)
 8006a3e:	f000 f89d 	bl	8006b7c <__malloc_lock>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	461c      	mov	r4, r3
 8006a46:	bb34      	cbnz	r4, 8006a96 <_malloc_r+0x82>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ffc2 	bl	80069d4 <sbrk_aligned>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	4604      	mov	r4, r0
 8006a54:	d14d      	bne.n	8006af2 <_malloc_r+0xde>
 8006a56:	6834      	ldr	r4, [r6, #0]
 8006a58:	4626      	mov	r6, r4
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d140      	bne.n	8006ae0 <_malloc_r+0xcc>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4631      	mov	r1, r6
 8006a62:	4638      	mov	r0, r7
 8006a64:	eb04 0803 	add.w	r8, r4, r3
 8006a68:	f000 f878 	bl	8006b5c <_sbrk_r>
 8006a6c:	4580      	cmp	r8, r0
 8006a6e:	d13a      	bne.n	8006ae6 <_malloc_r+0xd2>
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	3503      	adds	r5, #3
 8006a74:	1a6d      	subs	r5, r5, r1
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ffa5 	bl	80069d4 <sbrk_aligned>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d02b      	beq.n	8006ae6 <_malloc_r+0xd2>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	442b      	add	r3, r5
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	e00e      	b.n	8006ab4 <_malloc_r+0xa0>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	1b52      	subs	r2, r2, r5
 8006a9a:	d41e      	bmi.n	8006ada <_malloc_r+0xc6>
 8006a9c:	2a0b      	cmp	r2, #11
 8006a9e:	d916      	bls.n	8006ace <_malloc_r+0xba>
 8006aa0:	1961      	adds	r1, r4, r5
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6025      	str	r5, [r4, #0]
 8006aa6:	bf18      	it	ne
 8006aa8:	6059      	strne	r1, [r3, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	bf08      	it	eq
 8006aae:	6031      	streq	r1, [r6, #0]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f865 	bl	8006b88 <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0b6      	beq.n	8006a36 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7b3      	b.n	8006a36 <_malloc_r+0x22>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	bf0c      	ite	eq
 8006ad4:	6032      	streq	r2, [r6, #0]
 8006ad6:	605a      	strne	r2, [r3, #4]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xa0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7b2      	b.n	8006a46 <_malloc_r+0x32>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b9      	b.n	8006a5a <_malloc_r+0x46>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4638      	mov	r0, r7
 8006aec:	f000 f84c 	bl	8006b88 <__malloc_unlock>
 8006af0:	e7a1      	b.n	8006a36 <_malloc_r+0x22>
 8006af2:	6025      	str	r5, [r4, #0]
 8006af4:	e7de      	b.n	8006ab4 <_malloc_r+0xa0>
 8006af6:	bf00      	nop
 8006af8:	200001f4 	.word	0x200001f4

08006afc <_realloc_r>:
 8006afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b00:	4680      	mov	r8, r0
 8006b02:	4614      	mov	r4, r2
 8006b04:	460e      	mov	r6, r1
 8006b06:	b921      	cbnz	r1, 8006b12 <_realloc_r+0x16>
 8006b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	f7ff bf81 	b.w	8006a14 <_malloc_r>
 8006b12:	b92a      	cbnz	r2, 8006b20 <_realloc_r+0x24>
 8006b14:	f7ff ff12 	bl	800693c <_free_r>
 8006b18:	4625      	mov	r5, r4
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b20:	f000 f838 	bl	8006b94 <_malloc_usable_size_r>
 8006b24:	4284      	cmp	r4, r0
 8006b26:	4607      	mov	r7, r0
 8006b28:	d802      	bhi.n	8006b30 <_realloc_r+0x34>
 8006b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b2e:	d812      	bhi.n	8006b56 <_realloc_r+0x5a>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4640      	mov	r0, r8
 8006b34:	f7ff ff6e 	bl	8006a14 <_malloc_r>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d0ed      	beq.n	8006b1a <_realloc_r+0x1e>
 8006b3e:	42bc      	cmp	r4, r7
 8006b40:	4622      	mov	r2, r4
 8006b42:	4631      	mov	r1, r6
 8006b44:	bf28      	it	cs
 8006b46:	463a      	movcs	r2, r7
 8006b48:	f7ff fed0 	bl	80068ec <memcpy>
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f7ff fef4 	bl	800693c <_free_r>
 8006b54:	e7e1      	b.n	8006b1a <_realloc_r+0x1e>
 8006b56:	4635      	mov	r5, r6
 8006b58:	e7df      	b.n	8006b1a <_realloc_r+0x1e>
	...

08006b5c <_sbrk_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d06      	ldr	r5, [pc, #24]	; (8006b78 <_sbrk_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fa fee2 	bl	8001930 <_sbrk>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_sbrk_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_sbrk_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200001fc 	.word	0x200001fc

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	; (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f000 b811 	b.w	8006ba4 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20000200 	.word	0x20000200

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f000 b80c 	b.w	8006ba6 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20000200 	.word	0x20000200

08006b94 <_malloc_usable_size_r>:
 8006b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b98:	1f18      	subs	r0, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbc      	itt	lt
 8006b9e:	580b      	ldrlt	r3, [r1, r0]
 8006ba0:	18c0      	addlt	r0, r0, r3
 8006ba2:	4770      	bx	lr

08006ba4 <__retarget_lock_acquire_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <__retarget_lock_release_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <_init>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr

08006bb4 <_fini>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr
