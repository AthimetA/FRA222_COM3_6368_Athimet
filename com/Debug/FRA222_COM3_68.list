
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000080  0800a638  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800a638  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001522d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002649  00000000  00000000  000352d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00038c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001882e  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016498  00000000  00000000  00052676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea5f  00000000  00000000  00068b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010756d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  001075c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a16c 	.word	0x0800a16c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800a16c 	.word	0x0800a16c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 ff3a 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f83a 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 fa9a 	bl	80012b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d80:	f000 fa38 	bl	80011f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d84:	f000 f8f0 	bl	8000f68 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000d88:	f000 f91c 	bl	8000fc4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000d8c:	f000 f9c0 	bl	8001110 <MX_TIM3_Init>
  MX_DMA_Init();
 8000d90:	f000 fa5a 	bl	8001248 <MX_DMA_Init>
  MX_TIM11_Init();
 8000d94:	f000 fa0a 	bl	80011ac <MX_TIM11_Init>
  MX_ADC1_Init();
 8000d98:	f000 f892 	bl	8000ec0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f948 	bl	8001030 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000da0:	2064      	movs	r0, #100	; 0x64
 8000da2:	f001 ff95 	bl	8002cd0 <HAL_Delay>
  MCP23017SetInit();
 8000da6:	f001 fa93 	bl	80022d0 <MCP23017SetInit>
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0x68>)
 8000dac:	f006 fc06 	bl	80075bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <main+0x6c>)
 8000db2:	f006 fc03 	bl	80075bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <main+0x70>)
 8000db8:	f006 fba6 	bl	8007508 <HAL_TIM_Base_Start>
	// Start Input Cap
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &DMAdatabuffer, CAPTURENUM);
 8000dbc:	230d      	movs	r3, #13
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <main+0x74>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <main+0x70>)
 8000dc4:	f006 fcb6 	bl	8007734 <HAL_TIM_IC_Start_DMA>
	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <main+0x78>)
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <main+0x7c>)
 8000dce:	f002 f8f7 	bl	8002fc0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 8000dd2:	f000 faf5 	bl	80013c0 <StateMachineManagment>
 8000dd6:	e7fc      	b.n	8000dd2 <main+0x62>
 8000dd8:	20000238 	.word	0x20000238
 8000ddc:	20000280 	.word	0x20000280
 8000de0:	200001f0 	.word	0x200001f0
 8000de4:	200004b0 	.word	0x200004b0
 8000de8:	200003e0 	.word	0x200003e0
 8000dec:	2000009c 	.word	0x2000009c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2230      	movs	r2, #48	; 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 fd3e 	bl	8009880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e54:	2310      	movs	r3, #16
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e60:	2308      	movs	r3, #8
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 fabb 	bl	80063f0 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e80:	f001 fb86 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fd1d 	bl	80068e0 <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eac:	f001 fb70 	bl	8002590 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	; 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_ADC1_Init+0xa0>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f26:	f001 fef7 	bl	8002d18 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f30:	f001 fb2e 	bl	8002590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_ADC1_Init+0xa4>)
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000f46:	f002 f949 	bl	80031dc <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f50:	f001 fb1e 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	40012000 	.word	0x40012000
 8000f64:	10000012 	.word	0x10000012

08000f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <MX_I2C1_Init+0x54>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x58>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa6:	f003 fa93 	bl	80044d0 <HAL_I2C_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb0:	f001 faee 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000144 	.word	0x20000144
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	00061a80 	.word	0x00061a80

08000fc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI3_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI3_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ff8:	2230      	movs	r2, #48	; 0x30
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI3_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI3_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI3_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI3_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI3_Init+0x64>)
 8001016:	f005 fe83 	bl	8006d20 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001020:	f001 fab6 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000198 	.word	0x20000198
 800102c:	40003c00 	.word	0x40003c00

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM2_Init+0xdc>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <MX_TIM2_Init+0xdc>)
 8001064:	f242 720f 	movw	r2, #9999	; 0x270f
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <MX_TIM2_Init+0xdc>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_TIM2_Init+0xdc>)
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_TIM2_Init+0xdc>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_TIM2_Init+0xdc>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_TIM2_Init+0xdc>)
 8001086:	f006 f9ef 	bl	8007468 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001090:	f001 fa7e 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4619      	mov	r1, r3
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <MX_TIM2_Init+0xdc>)
 80010a2:	f006 fe87 	bl	8007db4 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010ac:	f001 fa70 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <MX_TIM2_Init+0xdc>)
 80010b2:	f006 fae5 	bl	8007680 <HAL_TIM_IC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010bc:	f001 fa68 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480f      	ldr	r0, [pc, #60]	; (800110c <MX_TIM2_Init+0xdc>)
 80010d0:	f007 fab2 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80010da:	f001 fa59 	bl	8002590 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010de:	2302      	movs	r3, #2
 80010e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e2:	2301      	movs	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM2_Init+0xdc>)
 80010f6:	f006 fdc1 	bl	8007c7c <HAL_TIM_IC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001100:	f001 fa46 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f0 	.word	0x200001f0

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM3_Init+0x94>)
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_TIM3_Init+0x98>)
 8001130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001134:	f242 720f 	movw	r2, #9999	; 0x270f
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM3_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001142:	f242 720f 	movw	r2, #9999	; 0x270f
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM3_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001156:	f006 f987 	bl	8007468 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001160:	f001 fa16 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001172:	f006 fe1f 	bl	8007db4 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800117c:	f001 fa08 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001180:	2320      	movs	r3, #32
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM3_Init+0x94>)
 800118e:	f007 fa53 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001198:	f001 f9fa 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000238 	.word	0x20000238
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_TIM11_Init+0x40>)
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <MX_TIM11_Init+0x44>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_TIM11_Init+0x40>)
 80011b8:	2263      	movs	r2, #99	; 0x63
 80011ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_TIM11_Init+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_TIM11_Init+0x40>)
 80011c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_TIM11_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_TIM11_Init+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM11_Init+0x40>)
 80011d8:	f006 f946 	bl	8007468 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80011e2:	f001 f9d5 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000280 	.word	0x20000280
 80011f0:	40014800 	.word	0x40014800

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f007 fa86 	bl	800873c <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f001 f9ab 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000328 	.word	0x20000328
 8001244:	40004400 	.word	0x40004400

08001248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_DMA_Init+0x68>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_DMA_Init+0x68>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_DMA_Init+0x68>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_DMA_Init+0x68>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <MX_DMA_Init+0x68>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_DMA_Init+0x68>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2010      	movs	r0, #16
 800128c:	f002 fb3b 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001290:	2010      	movs	r0, #16
 8001292:	f002 fb54 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2038      	movs	r0, #56	; 0x38
 800129c:	f002 fb33 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a0:	2038      	movs	r0, #56	; 0x38
 80012a2:	f002 fb4c 	bl	800393e <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_GPIO_Init+0xfc>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001340:	f003 f8ac 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_GPIO_Init+0x104>)
 800134c:	f003 f8a6 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_GPIO_Init+0x108>)
 8001368:	f002 ff14 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001384:	f002 ff06 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_GPIO_Init+0x104>)
 80013a2:	f002 fef7 	bl	8004194 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800

080013c0 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af02      	add	r7, sp, #8
	switch (MCState)
 80013c8:	4ba4      	ldr	r3, [pc, #656]	; (800165c <StateMachineManagment+0x29c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	f200 873b 	bhi.w	8002248 <StateMachineManagment+0xe88>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <StateMachineManagment+0x18>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	080014ab 	.word	0x080014ab
 80013e0:	080017d9 	.word	0x080017d9
 80013e4:	08001dd3 	.word	0x08001dd3
 80013e8:	0800179d 	.word	0x0800179d
 80013ec:	080016b9 	.word	0x080016b9
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 80013f0:	499b      	ldr	r1, [pc, #620]	; (8001660 <StateMachineManagment+0x2a0>)
 80013f2:	489c      	ldr	r0, [pc, #624]	; (8001664 <StateMachineManagment+0x2a4>)
 80013f4:	f008 fa4c 	bl	8009890 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013f8:	489a      	ldr	r0, [pc, #616]	; (8001664 <StateMachineManagment+0x2a4>)
 80013fa:	f7fe fef1 	bl	80001e0 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29a      	uxth	r2, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	4997      	ldr	r1, [pc, #604]	; (8001664 <StateMachineManagment+0x2a4>)
 8001408:	4897      	ldr	r0, [pc, #604]	; (8001668 <StateMachineManagment+0x2a8>)
 800140a:	f007 f9e4 	bl	80087d6 <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800140e:	4b97      	ldr	r3, [pc, #604]	; (800166c <StateMachineManagment+0x2ac>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4a97      	ldr	r2, [pc, #604]	; (8001670 <StateMachineManagment+0x2b0>)
 8001414:	7811      	ldrb	r1, [r2, #0]
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	4618      	mov	r0, r3
 800141a:	f000 ff31 	bl	8002280 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 800141e:	4b95      	ldr	r3, [pc, #596]	; (8001674 <StateMachineManagment+0x2b4>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8001424:	4b94      	ldr	r3, [pc, #592]	; (8001678 <StateMachineManagment+0x2b8>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 800142a:	4b94      	ldr	r3, [pc, #592]	; (800167c <StateMachineManagment+0x2bc>)
 800142c:	2200      	movs	r2, #0
 800142e:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <StateMachineManagment+0x2bc>)
 8001432:	2200      	movs	r2, #0
 8001434:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 8001436:	4b91      	ldr	r3, [pc, #580]	; (800167c <StateMachineManagment+0x2bc>)
 8001438:	2200      	movs	r2, #0
 800143a:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 800143c:	4b8f      	ldr	r3, [pc, #572]	; (800167c <StateMachineManagment+0x2bc>)
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 8001442:	4b8f      	ldr	r3, [pc, #572]	; (8001680 <StateMachineManagment+0x2c0>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8001448:	4b8e      	ldr	r3, [pc, #568]	; (8001684 <StateMachineManagment+0x2c4>)
 800144a:	2203      	movs	r2, #3
 800144c:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 800144e:	4b8d      	ldr	r3, [pc, #564]	; (8001684 <StateMachineManagment+0x2c4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	220a      	movs	r2, #10
 8001454:	4619      	mov	r1, r3
 8001456:	488c      	ldr	r0, [pc, #560]	; (8001688 <StateMachineManagment+0x2c8>)
 8001458:	f000 ff8e 	bl	8002378 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 800145c:	2064      	movs	r0, #100	; 0x64
 800145e:	f001 fc37 	bl	8002cd0 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <StateMachineManagment+0x2c8>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <StateMachineManagment+0x2bc>)
 8001468:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 800146a:	4b87      	ldr	r3, [pc, #540]	; (8001688 <StateMachineManagment+0x2c8>)
 800146c:	785a      	ldrb	r2, [r3, #1]
 800146e:	4b83      	ldr	r3, [pc, #524]	; (800167c <StateMachineManagment+0x2bc>)
 8001470:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <StateMachineManagment+0x2c8>)
 8001474:	789a      	ldrb	r2, [r3, #2]
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <StateMachineManagment+0x2bc>)
 8001478:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 800147a:	4b83      	ldr	r3, [pc, #524]	; (8001688 <StateMachineManagment+0x2c8>)
 800147c:	789a      	ldrb	r2, [r3, #2]
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <StateMachineManagment+0x2bc>)
 8001480:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001482:	4b7e      	ldr	r3, [pc, #504]	; (800167c <StateMachineManagment+0x2bc>)
 8001484:	78da      	ldrb	r2, [r3, #3]
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <StateMachineManagment+0x2bc>)
 8001488:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 800148a:	4b7c      	ldr	r3, [pc, #496]	; (800167c <StateMachineManagment+0x2bc>)
 800148c:	791a      	ldrb	r2, [r3, #4]
 800148e:	4b7b      	ldr	r3, [pc, #492]	; (800167c <StateMachineManagment+0x2bc>)
 8001490:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <StateMachineManagment+0x2bc>)
 8001494:	795a      	ldrb	r2, [r3, #5]
 8001496:	4b79      	ldr	r3, [pc, #484]	; (800167c <StateMachineManagment+0x2bc>)
 8001498:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <StateMachineManagment+0x2cc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80014a0:	4b6e      	ldr	r3, [pc, #440]	; (800165c <StateMachineManagment+0x29c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
			break;
 80014a6:	f000 becf 	b.w	8002248 <StateMachineManagment+0xe88>
		case StanBy:
			// Header
			if(flagUART == 0){
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <StateMachineManagment+0x2cc>)
 80014ac:	f993 3000 	ldrsb.w	r3, [r3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 8085 	bne.w	80015c0 <StateMachineManagment+0x200>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80014b6:	4976      	ldr	r1, [pc, #472]	; (8001690 <StateMachineManagment+0x2d0>)
 80014b8:	486a      	ldr	r0, [pc, #424]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ba:	f008 f9e9 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014be:	4869      	ldr	r0, [pc, #420]	; (8001664 <StateMachineManagment+0x2a4>)
 80014c0:	f7fe fe8e 	bl	80001e0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014cc:	4965      	ldr	r1, [pc, #404]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ce:	4866      	ldr	r0, [pc, #408]	; (8001668 <StateMachineManagment+0x2a8>)
 80014d0:	f007 f981 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 80014d4:	496f      	ldr	r1, [pc, #444]	; (8001694 <StateMachineManagment+0x2d4>)
 80014d6:	4863      	ldr	r0, [pc, #396]	; (8001664 <StateMachineManagment+0x2a4>)
 80014d8:	f008 f9da 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014dc:	4861      	ldr	r0, [pc, #388]	; (8001664 <StateMachineManagment+0x2a4>)
 80014de:	f7fe fe7f 	bl	80001e0 <strlen>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	495e      	ldr	r1, [pc, #376]	; (8001664 <StateMachineManagment+0x2a4>)
 80014ec:	485e      	ldr	r0, [pc, #376]	; (8001668 <StateMachineManagment+0x2a8>)
 80014ee:	f007 f972 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <StateMachineManagment+0x2bc>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b60      	ldr	r3, [pc, #384]	; (800167c <StateMachineManagment+0x2bc>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	4966      	ldr	r1, [pc, #408]	; (8001698 <StateMachineManagment+0x2d8>)
 80014fe:	4859      	ldr	r0, [pc, #356]	; (8001664 <StateMachineManagment+0x2a4>)
 8001500:	f008 f9c6 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001504:	4857      	ldr	r0, [pc, #348]	; (8001664 <StateMachineManagment+0x2a4>)
 8001506:	f7fe fe6b 	bl	80001e0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	4954      	ldr	r1, [pc, #336]	; (8001664 <StateMachineManagment+0x2a4>)
 8001514:	4854      	ldr	r0, [pc, #336]	; (8001668 <StateMachineManagment+0x2a8>)
 8001516:	f007 f95e 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <StateMachineManagment+0x2bc>)
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	461a      	mov	r2, r3
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <StateMachineManagment+0x2bc>)
 8001522:	795b      	ldrb	r3, [r3, #5]
 8001524:	495d      	ldr	r1, [pc, #372]	; (800169c <StateMachineManagment+0x2dc>)
 8001526:	484f      	ldr	r0, [pc, #316]	; (8001664 <StateMachineManagment+0x2a4>)
 8001528:	f008 f9b2 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800152c:	484d      	ldr	r0, [pc, #308]	; (8001664 <StateMachineManagment+0x2a4>)
 800152e:	f7fe fe57 	bl	80001e0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	494a      	ldr	r1, [pc, #296]	; (8001664 <StateMachineManagment+0x2a4>)
 800153c:	484a      	ldr	r0, [pc, #296]	; (8001668 <StateMachineManagment+0x2a8>)
 800153e:	f007 f94a 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8001542:	4957      	ldr	r1, [pc, #348]	; (80016a0 <StateMachineManagment+0x2e0>)
 8001544:	4847      	ldr	r0, [pc, #284]	; (8001664 <StateMachineManagment+0x2a4>)
 8001546:	f008 f9a3 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800154a:	4846      	ldr	r0, [pc, #280]	; (8001664 <StateMachineManagment+0x2a4>)
 800154c:	f7fe fe48 	bl	80001e0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	4942      	ldr	r1, [pc, #264]	; (8001664 <StateMachineManagment+0x2a4>)
 800155a:	4843      	ldr	r0, [pc, #268]	; (8001668 <StateMachineManagment+0x2a8>)
 800155c:	f007 f93b 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 2 for Choosing Destination Station\r\n");
 8001560:	4950      	ldr	r1, [pc, #320]	; (80016a4 <StateMachineManagment+0x2e4>)
 8001562:	4840      	ldr	r0, [pc, #256]	; (8001664 <StateMachineManagment+0x2a4>)
 8001564:	f008 f994 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001568:	483e      	ldr	r0, [pc, #248]	; (8001664 <StateMachineManagment+0x2a4>)
 800156a:	f7fe fe39 	bl	80001e0 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	493b      	ldr	r1, [pc, #236]	; (8001664 <StateMachineManagment+0x2a4>)
 8001578:	483b      	ldr	r0, [pc, #236]	; (8001668 <StateMachineManagment+0x2a8>)
 800157a:	f007 f92c 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 3 for EEPROM READ\r\n");
 800157e:	494a      	ldr	r1, [pc, #296]	; (80016a8 <StateMachineManagment+0x2e8>)
 8001580:	4838      	ldr	r0, [pc, #224]	; (8001664 <StateMachineManagment+0x2a4>)
 8001582:	f008 f985 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001586:	4837      	ldr	r0, [pc, #220]	; (8001664 <StateMachineManagment+0x2a4>)
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	4933      	ldr	r1, [pc, #204]	; (8001664 <StateMachineManagment+0x2a4>)
 8001596:	4834      	ldr	r0, [pc, #208]	; (8001668 <StateMachineManagment+0x2a8>)
 8001598:	f007 f91d 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800159c:	493c      	ldr	r1, [pc, #240]	; (8001690 <StateMachineManagment+0x2d0>)
 800159e:	4831      	ldr	r0, [pc, #196]	; (8001664 <StateMachineManagment+0x2a4>)
 80015a0:	f008 f976 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <StateMachineManagment+0x2a4>)
 80015a6:	f7fe fe1b 	bl	80001e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	492c      	ldr	r1, [pc, #176]	; (8001664 <StateMachineManagment+0x2a4>)
 80015b4:	482c      	ldr	r0, [pc, #176]	; (8001668 <StateMachineManagment+0x2a8>)
 80015b6:	f007 f90e 	bl	80087d6 <HAL_UART_Transmit>
				flagUART = 1;
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <StateMachineManagment+0x2cc>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80015c0:	2202      	movs	r2, #2
 80015c2:	493a      	ldr	r1, [pc, #232]	; (80016ac <StateMachineManagment+0x2ec>)
 80015c4:	4828      	ldr	r0, [pc, #160]	; (8001668 <StateMachineManagment+0x2a8>)
 80015c6:	f007 f998 	bl	80088fa <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 80015ca:	f000 fefd 	bl	80023c8 <UARTRecieveIT>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015d4:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	f000 862d 	beq.w	800223e <StateMachineManagment+0xe7e>
			{
				if(inputchar == '1')
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <StateMachineManagment+0x2f0>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	2b31      	cmp	r3, #49	; 0x31
 80015ec:	d107      	bne.n	80015fe <StateMachineManagment+0x23e>
				{
					flagUART = 0;
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <StateMachineManagment+0x2cc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <StateMachineManagment+0x29c>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 80015fa:	f000 be20 	b.w	800223e <StateMachineManagment+0xe7e>
				else if(inputchar == '2')
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <StateMachineManagment+0x2f0>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	2b32      	cmp	r3, #50	; 0x32
 8001606:	d107      	bne.n	8001618 <StateMachineManagment+0x258>
					flagUART = 0;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <StateMachineManagment+0x2cc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <StateMachineManagment+0x29c>)
 8001610:	2203      	movs	r2, #3
 8001612:	701a      	strb	r2, [r3, #0]
			break;
 8001614:	f000 be13 	b.w	800223e <StateMachineManagment+0xe7e>
				else if(inputchar == '3')
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <StateMachineManagment+0x2f0>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	2b33      	cmp	r3, #51	; 0x33
 8001620:	d107      	bne.n	8001632 <StateMachineManagment+0x272>
					flagUART = 0;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <StateMachineManagment+0x2cc>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <StateMachineManagment+0x29c>)
 800162a:	2205      	movs	r2, #5
 800162c:	701a      	strb	r2, [r3, #0]
			break;
 800162e:	f000 be06 	b.w	800223e <StateMachineManagment+0xe7e>
					flagUART = 0;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <StateMachineManagment+0x2cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001638:	491e      	ldr	r1, [pc, #120]	; (80016b4 <StateMachineManagment+0x2f4>)
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <StateMachineManagment+0x2a4>)
 800163c:	f008 f928 	bl	8009890 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <StateMachineManagment+0x2a4>)
 8001642:	f7fe fdcd 	bl	80001e0 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	4905      	ldr	r1, [pc, #20]	; (8001664 <StateMachineManagment+0x2a4>)
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <StateMachineManagment+0x2a8>)
 8001652:	f007 f8c0 	bl	80087d6 <HAL_UART_Transmit>
			break;
 8001656:	f000 bdf2 	b.w	800223e <StateMachineManagment+0xe7e>
 800165a:	bf00      	nop
 800165c:	20000387 	.word	0x20000387
 8001660:	0800a184 	.word	0x0800a184
 8001664:	2000038c 	.word	0x2000038c
 8001668:	20000328 	.word	0x20000328
 800166c:	20000004 	.word	0x20000004
 8001670:	20000005 	.word	0x20000005
 8001674:	20000388 	.word	0x20000388
 8001678:	20000389 	.word	0x20000389
 800167c:	20000380 	.word	0x20000380
 8001680:	200003d1 	.word	0x200003d1
 8001684:	20000002 	.word	0x20000002
 8001688:	200003d4 	.word	0x200003d4
 800168c:	200003cc 	.word	0x200003cc
 8001690:	0800a19c 	.word	0x0800a19c
 8001694:	0800a1bc 	.word	0x0800a1bc
 8001698:	0800a1d4 	.word	0x0800a1d4
 800169c:	0800a208 	.word	0x0800a208
 80016a0:	0800a230 	.word	0x0800a230
 80016a4:	0800a258 	.word	0x0800a258
 80016a8:	0800a284 	.word	0x0800a284
 80016ac:	20000000 	.word	0x20000000
 80016b0:	200003ce 	.word	0x200003ce
 80016b4:	0800a2a0 	.word	0x0800a2a0
		case EEpromReadState:
			// Header
			if(flagUART == 0){
 80016b8:	4baf      	ldr	r3, [pc, #700]	; (8001978 <StateMachineManagment+0x5b8>)
 80016ba:	f993 3000 	ldrsb.w	r3, [r3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12f      	bne.n	8001722 <StateMachineManagment+0x362>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80016c2:	49ae      	ldr	r1, [pc, #696]	; (800197c <StateMachineManagment+0x5bc>)
 80016c4:	48ae      	ldr	r0, [pc, #696]	; (8001980 <StateMachineManagment+0x5c0>)
 80016c6:	f008 f8e3 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016ca:	48ad      	ldr	r0, [pc, #692]	; (8001980 <StateMachineManagment+0x5c0>)
 80016cc:	f7fe fd88 	bl	80001e0 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d8:	49a9      	ldr	r1, [pc, #676]	; (8001980 <StateMachineManagment+0x5c0>)
 80016da:	48aa      	ldr	r0, [pc, #680]	; (8001984 <StateMachineManagment+0x5c4>)
 80016dc:	f007 f87b 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nEEPROM is Operating\r\n");
 80016e0:	49a9      	ldr	r1, [pc, #676]	; (8001988 <StateMachineManagment+0x5c8>)
 80016e2:	48a7      	ldr	r0, [pc, #668]	; (8001980 <StateMachineManagment+0x5c0>)
 80016e4:	f008 f8d4 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016e8:	48a5      	ldr	r0, [pc, #660]	; (8001980 <StateMachineManagment+0x5c0>)
 80016ea:	f7fe fd79 	bl	80001e0 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	49a2      	ldr	r1, [pc, #648]	; (8001980 <StateMachineManagment+0x5c0>)
 80016f8:	48a2      	ldr	r0, [pc, #648]	; (8001984 <StateMachineManagment+0x5c4>)
 80016fa:	f007 f86c 	bl	80087d6 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80016fe:	499f      	ldr	r1, [pc, #636]	; (800197c <StateMachineManagment+0x5bc>)
 8001700:	489f      	ldr	r0, [pc, #636]	; (8001980 <StateMachineManagment+0x5c0>)
 8001702:	f008 f8c5 	bl	8009890 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001706:	489e      	ldr	r0, [pc, #632]	; (8001980 <StateMachineManagment+0x5c0>)
 8001708:	f7fe fd6a 	bl	80001e0 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001714:	499a      	ldr	r1, [pc, #616]	; (8001980 <StateMachineManagment+0x5c0>)
 8001716:	489b      	ldr	r0, [pc, #620]	; (8001984 <StateMachineManagment+0x5c4>)
 8001718:	f007 f85d 	bl	80087d6 <HAL_UART_Transmit>
				flagUART = 1;
 800171c:	4b96      	ldr	r3, [pc, #600]	; (8001978 <StateMachineManagment+0x5b8>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
			}
			eepromReadFlag = 1;
 8001722:	4b9a      	ldr	r3, [pc, #616]	; (800198c <StateMachineManagment+0x5cc>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8001728:	4b99      	ldr	r3, [pc, #612]	; (8001990 <StateMachineManagment+0x5d0>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	220a      	movs	r2, #10
 800172e:	4619      	mov	r1, r3
 8001730:	4898      	ldr	r0, [pc, #608]	; (8001994 <StateMachineManagment+0x5d4>)
 8001732:	f000 fe21 	bl	8002378 <EEPROMReadFcn>
			HAL_Delay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f001 faca 	bl	8002cd0 <HAL_Delay>
			sprintf(TxDataBuffer, "\r\nWaitingTime:[%d] OperationTime[%d] EndStation[%d]", eepromDataReadBack[0], eepromDataReadBack[1],eepromDataReadBack[2]);
 800173c:	4b95      	ldr	r3, [pc, #596]	; (8001994 <StateMachineManagment+0x5d4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b94      	ldr	r3, [pc, #592]	; (8001994 <StateMachineManagment+0x5d4>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	4619      	mov	r1, r3
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <StateMachineManagment+0x5d4>)
 800174a:	789b      	ldrb	r3, [r3, #2]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	460b      	mov	r3, r1
 8001750:	4991      	ldr	r1, [pc, #580]	; (8001998 <StateMachineManagment+0x5d8>)
 8001752:	488b      	ldr	r0, [pc, #556]	; (8001980 <StateMachineManagment+0x5c0>)
 8001754:	f008 f89c 	bl	8009890 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001758:	4889      	ldr	r0, [pc, #548]	; (8001980 <StateMachineManagment+0x5c0>)
 800175a:	f7fe fd41 	bl	80001e0 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	4986      	ldr	r1, [pc, #536]	; (8001980 <StateMachineManagment+0x5c0>)
 8001768:	4886      	ldr	r0, [pc, #536]	; (8001984 <StateMachineManagment+0x5c4>)
 800176a:	f007 f834 	bl	80087d6 <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800176e:	4983      	ldr	r1, [pc, #524]	; (800197c <StateMachineManagment+0x5bc>)
 8001770:	4883      	ldr	r0, [pc, #524]	; (8001980 <StateMachineManagment+0x5c0>)
 8001772:	f008 f88d 	bl	8009890 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001776:	4882      	ldr	r0, [pc, #520]	; (8001980 <StateMachineManagment+0x5c0>)
 8001778:	f7fe fd32 	bl	80001e0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	497e      	ldr	r1, [pc, #504]	; (8001980 <StateMachineManagment+0x5c0>)
 8001786:	487f      	ldr	r0, [pc, #508]	; (8001984 <StateMachineManagment+0x5c4>)
 8001788:	f007 f825 	bl	80087d6 <HAL_UART_Transmit>
			flagUART = 0;
 800178c:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <StateMachineManagment+0x5b8>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8001792:	4b82      	ldr	r3, [pc, #520]	; (800199c <StateMachineManagment+0x5dc>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
			break;
 8001798:	f000 bd56 	b.w	8002248 <StateMachineManagment+0xe88>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 800179c:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <StateMachineManagment+0x5e0>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017a4:	78da      	ldrb	r2, [r3, #3]
 80017a6:	4b80      	ldr	r3, [pc, #512]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017a8:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 80017aa:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017ac:	791a      	ldrb	r2, [r3, #4]
 80017ae:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017b0:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <StateMachineManagment+0x5e4>)
 80017b4:	795a      	ldrb	r2, [r3, #5]
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017b8:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 80017ba:	4b75      	ldr	r3, [pc, #468]	; (8001990 <StateMachineManagment+0x5d0>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	220a      	movs	r2, #10
 80017c0:	4619      	mov	r1, r3
 80017c2:	4879      	ldr	r0, [pc, #484]	; (80019a8 <StateMachineManagment+0x5e8>)
 80017c4:	f000 fdb0 	bl	8002328 <EEPROMWriteFcn>
			flagUART = 0;
 80017c8:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <StateMachineManagment+0x5b8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <StateMachineManagment+0x5dc>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
			break;
 80017d4:	f000 bd38 	b.w	8002248 <StateMachineManagment+0xe88>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 80017d8:	4b74      	ldr	r3, [pc, #464]	; (80019ac <StateMachineManagment+0x5ec>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f000 8233 	beq.w	8001c48 <StateMachineManagment+0x888>
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	f300 852d 	bgt.w	8002242 <StateMachineManagment+0xe82>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <StateMachineManagment+0x436>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f000 8146 	beq.w	8001a7e <StateMachineManagment+0x6be>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 80017f2:	f000 bd26 	b.w	8002242 <StateMachineManagment+0xe82>
					if(flagUART == 0){
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <StateMachineManagment+0x5b8>)
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 8094 	bne.w	800192a <StateMachineManagment+0x56a>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001802:	495e      	ldr	r1, [pc, #376]	; (800197c <StateMachineManagment+0x5bc>)
 8001804:	485e      	ldr	r0, [pc, #376]	; (8001980 <StateMachineManagment+0x5c0>)
 8001806:	f008 f843 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <StateMachineManagment+0x5c0>)
 800180c:	f7fe fce8 	bl	80001e0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	4959      	ldr	r1, [pc, #356]	; (8001980 <StateMachineManagment+0x5c0>)
 800181a:	485a      	ldr	r0, [pc, #360]	; (8001984 <StateMachineManagment+0x5c4>)
 800181c:	f006 ffdb 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8001820:	4963      	ldr	r1, [pc, #396]	; (80019b0 <StateMachineManagment+0x5f0>)
 8001822:	4857      	ldr	r0, [pc, #348]	; (8001980 <StateMachineManagment+0x5c0>)
 8001824:	f008 f834 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001828:	4855      	ldr	r0, [pc, #340]	; (8001980 <StateMachineManagment+0x5c0>)
 800182a:	f7fe fcd9 	bl	80001e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	4952      	ldr	r1, [pc, #328]	; (8001980 <StateMachineManagment+0x5c0>)
 8001838:	4852      	ldr	r0, [pc, #328]	; (8001984 <StateMachineManagment+0x5c4>)
 800183a:	f006 ffcc 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	495a      	ldr	r1, [pc, #360]	; (80019b4 <StateMachineManagment+0x5f4>)
 800184a:	484d      	ldr	r0, [pc, #308]	; (8001980 <StateMachineManagment+0x5c0>)
 800184c:	f008 f820 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001850:	484b      	ldr	r0, [pc, #300]	; (8001980 <StateMachineManagment+0x5c0>)
 8001852:	f7fe fcc5 	bl	80001e0 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	4948      	ldr	r1, [pc, #288]	; (8001980 <StateMachineManagment+0x5c0>)
 8001860:	4848      	ldr	r0, [pc, #288]	; (8001984 <StateMachineManagment+0x5c4>)
 8001862:	f006 ffb8 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001868:	799b      	ldrb	r3, [r3, #6]
 800186a:	461a      	mov	r2, r3
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <StateMachineManagment+0x5e4>)
 800186e:	795b      	ldrb	r3, [r3, #5]
 8001870:	4951      	ldr	r1, [pc, #324]	; (80019b8 <StateMachineManagment+0x5f8>)
 8001872:	4843      	ldr	r0, [pc, #268]	; (8001980 <StateMachineManagment+0x5c0>)
 8001874:	f008 f80c 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001878:	4841      	ldr	r0, [pc, #260]	; (8001980 <StateMachineManagment+0x5c0>)
 800187a:	f7fe fcb1 	bl	80001e0 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <StateMachineManagment+0x5c0>)
 8001888:	483e      	ldr	r0, [pc, #248]	; (8001984 <StateMachineManagment+0x5c4>)
 800188a:	f006 ffa4 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 800188e:	494b      	ldr	r1, [pc, #300]	; (80019bc <StateMachineManagment+0x5fc>)
 8001890:	483b      	ldr	r0, [pc, #236]	; (8001980 <StateMachineManagment+0x5c0>)
 8001892:	f007 fffd 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001896:	483a      	ldr	r0, [pc, #232]	; (8001980 <StateMachineManagment+0x5c0>)
 8001898:	f7fe fca2 	bl	80001e0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a4:	4936      	ldr	r1, [pc, #216]	; (8001980 <StateMachineManagment+0x5c0>)
 80018a6:	4837      	ldr	r0, [pc, #220]	; (8001984 <StateMachineManagment+0x5c4>)
 80018a8:	f006 ff95 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 80018ac:	4944      	ldr	r1, [pc, #272]	; (80019c0 <StateMachineManagment+0x600>)
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <StateMachineManagment+0x5c0>)
 80018b0:	f007 ffee 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018b4:	4832      	ldr	r0, [pc, #200]	; (8001980 <StateMachineManagment+0x5c0>)
 80018b6:	f7fe fc93 	bl	80001e0 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	492f      	ldr	r1, [pc, #188]	; (8001980 <StateMachineManagment+0x5c0>)
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <StateMachineManagment+0x5c4>)
 80018c6:	f006 ff86 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 80018ca:	493e      	ldr	r1, [pc, #248]	; (80019c4 <StateMachineManagment+0x604>)
 80018cc:	482c      	ldr	r0, [pc, #176]	; (8001980 <StateMachineManagment+0x5c0>)
 80018ce:	f007 ffdf 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018d2:	482b      	ldr	r0, [pc, #172]	; (8001980 <StateMachineManagment+0x5c0>)
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	4927      	ldr	r1, [pc, #156]	; (8001980 <StateMachineManagment+0x5c0>)
 80018e2:	4828      	ldr	r0, [pc, #160]	; (8001984 <StateMachineManagment+0x5c4>)
 80018e4:	f006 ff77 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <StateMachineManagment+0x608>)
 80018ea:	4825      	ldr	r0, [pc, #148]	; (8001980 <StateMachineManagment+0x5c0>)
 80018ec:	f007 ffd0 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <StateMachineManagment+0x5c0>)
 80018f2:	f7fe fc75 	bl	80001e0 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	4920      	ldr	r1, [pc, #128]	; (8001980 <StateMachineManagment+0x5c0>)
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <StateMachineManagment+0x5c4>)
 8001902:	f006 ff68 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001906:	491d      	ldr	r1, [pc, #116]	; (800197c <StateMachineManagment+0x5bc>)
 8001908:	481d      	ldr	r0, [pc, #116]	; (8001980 <StateMachineManagment+0x5c0>)
 800190a:	f007 ffc1 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800190e:	481c      	ldr	r0, [pc, #112]	; (8001980 <StateMachineManagment+0x5c0>)
 8001910:	f7fe fc66 	bl	80001e0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	4918      	ldr	r1, [pc, #96]	; (8001980 <StateMachineManagment+0x5c0>)
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <StateMachineManagment+0x5c4>)
 8001920:	f006 ff59 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <StateMachineManagment+0x5b8>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 800192a:	2202      	movs	r2, #2
 800192c:	4927      	ldr	r1, [pc, #156]	; (80019cc <StateMachineManagment+0x60c>)
 800192e:	4815      	ldr	r0, [pc, #84]	; (8001984 <StateMachineManagment+0x5c4>)
 8001930:	f006 ffe3 	bl	80088fa <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001934:	f000 fd48 	bl	80023c8 <UARTRecieveIT>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <StateMachineManagment+0x610>)
 800193e:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <StateMachineManagment+0x610>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	f000 823c 	beq.w	8001dc6 <StateMachineManagment+0xa06>
						if(inputchar == 'x')
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <StateMachineManagment+0x610>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	2b78      	cmp	r3, #120	; 0x78
 8001956:	d13d      	bne.n	80019d4 <StateMachineManagment+0x614>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <StateMachineManagment+0x5e4>)
 800195a:	78da      	ldrb	r2, [r3, #3]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <StateMachineManagment+0x5e4>)
 800195e:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001962:	791a      	ldrb	r2, [r3, #4]
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <StateMachineManagment+0x5e4>)
 8001966:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <StateMachineManagment+0x5b8>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <StateMachineManagment+0x5dc>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
					break;
 8001974:	e227      	b.n	8001dc6 <StateMachineManagment+0xa06>
 8001976:	bf00      	nop
 8001978:	200003cc 	.word	0x200003cc
 800197c:	0800a19c 	.word	0x0800a19c
 8001980:	2000038c 	.word	0x2000038c
 8001984:	20000328 	.word	0x20000328
 8001988:	0800a2b8 	.word	0x0800a2b8
 800198c:	200003d1 	.word	0x200003d1
 8001990:	20000002 	.word	0x20000002
 8001994:	200003d4 	.word	0x200003d4
 8001998:	0800a2d0 	.word	0x0800a2d0
 800199c:	20000387 	.word	0x20000387
 80019a0:	200003d0 	.word	0x200003d0
 80019a4:	20000380 	.word	0x20000380
 80019a8:	200003d8 	.word	0x200003d8
 80019ac:	20000388 	.word	0x20000388
 80019b0:	0800a304 	.word	0x0800a304
 80019b4:	0800a1d4 	.word	0x0800a1d4
 80019b8:	0800a208 	.word	0x0800a208
 80019bc:	0800a328 	.word	0x0800a328
 80019c0:	0800a34c 	.word	0x0800a34c
 80019c4:	0800a370 	.word	0x0800a370
 80019c8:	0800a384 	.word	0x0800a384
 80019cc:	20000000 	.word	0x20000000
 80019d0:	200003ce 	.word	0x200003ce
						else if(inputchar == '1')
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <StateMachineManagment+0x840>)
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	2b31      	cmp	r3, #49	; 0x31
 80019dc:	d106      	bne.n	80019ec <StateMachineManagment+0x62c>
							flagUART = 0;
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <StateMachineManagment+0x844>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 80019e4:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <StateMachineManagment+0x848>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
					break;
 80019ea:	e1ec      	b.n	8001dc6 <StateMachineManagment+0xa06>
						else if(inputchar == '2')
 80019ec:	4b84      	ldr	r3, [pc, #528]	; (8001c00 <StateMachineManagment+0x840>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	2b32      	cmp	r3, #50	; 0x32
 80019f4:	d106      	bne.n	8001a04 <StateMachineManagment+0x644>
							flagUART = 0;
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <StateMachineManagment+0x844>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 80019fc:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <StateMachineManagment+0x848>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
					break;
 8001a02:	e1e0      	b.n	8001dc6 <StateMachineManagment+0xa06>
						else if(inputchar == 's')
 8001a04:	4b7e      	ldr	r3, [pc, #504]	; (8001c00 <StateMachineManagment+0x840>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	2b73      	cmp	r3, #115	; 0x73
 8001a0c:	d124      	bne.n	8001a58 <StateMachineManagment+0x698>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a14:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a18:	785a      	ldrb	r2, [r3, #1]
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a1c:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <StateMachineManagment+0x850>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a26:	78da      	ldrb	r2, [r3, #3]
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <StateMachineManagment+0x854>)
 8001a2a:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <StateMachineManagment+0x854>)
 8001a32:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <StateMachineManagment+0x84c>)
 8001a36:	795a      	ldrb	r2, [r3, #5]
 8001a38:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <StateMachineManagment+0x854>)
 8001a3a:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <StateMachineManagment+0x858>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	220a      	movs	r2, #10
 8001a42:	4619      	mov	r1, r3
 8001a44:	4873      	ldr	r0, [pc, #460]	; (8001c14 <StateMachineManagment+0x854>)
 8001a46:	f000 fc6f 	bl	8002328 <EEPROMWriteFcn>
							flagUART = 0;
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <StateMachineManagment+0x844>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001a50:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <StateMachineManagment+0x85c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
					break;
 8001a56:	e1b6      	b.n	8001dc6 <StateMachineManagment+0xa06>
							flagUART = 0;
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <StateMachineManagment+0x844>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001a5e:	4970      	ldr	r1, [pc, #448]	; (8001c20 <StateMachineManagment+0x860>)
 8001a60:	4870      	ldr	r0, [pc, #448]	; (8001c24 <StateMachineManagment+0x864>)
 8001a62:	f007 ff15 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a66:	486f      	ldr	r0, [pc, #444]	; (8001c24 <StateMachineManagment+0x864>)
 8001a68:	f7fe fbba 	bl	80001e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	496b      	ldr	r1, [pc, #428]	; (8001c24 <StateMachineManagment+0x864>)
 8001a76:	486c      	ldr	r0, [pc, #432]	; (8001c28 <StateMachineManagment+0x868>)
 8001a78:	f006 fead 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001a7c:	e1a3      	b.n	8001dc6 <StateMachineManagment+0xa06>
					if(flagUART == 0){
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <StateMachineManagment+0x844>)
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d14d      	bne.n	8001b24 <StateMachineManagment+0x764>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8001a88:	4968      	ldr	r1, [pc, #416]	; (8001c2c <StateMachineManagment+0x86c>)
 8001a8a:	4866      	ldr	r0, [pc, #408]	; (8001c24 <StateMachineManagment+0x864>)
 8001a8c:	f007 ff00 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001a90:	4864      	ldr	r0, [pc, #400]	; (8001c24 <StateMachineManagment+0x864>)
 8001a92:	f7fe fba5 	bl	80001e0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	4961      	ldr	r1, [pc, #388]	; (8001c24 <StateMachineManagment+0x864>)
 8001aa0:	4861      	ldr	r0, [pc, #388]	; (8001c28 <StateMachineManagment+0x868>)
 8001aa2:	f006 fe98 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001aa6:	4962      	ldr	r1, [pc, #392]	; (8001c30 <StateMachineManagment+0x870>)
 8001aa8:	485e      	ldr	r0, [pc, #376]	; (8001c24 <StateMachineManagment+0x864>)
 8001aaa:	f007 fef1 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001aae:	485d      	ldr	r0, [pc, #372]	; (8001c24 <StateMachineManagment+0x864>)
 8001ab0:	f7fe fb96 	bl	80001e0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	4959      	ldr	r1, [pc, #356]	; (8001c24 <StateMachineManagment+0x864>)
 8001abe:	485a      	ldr	r0, [pc, #360]	; (8001c28 <StateMachineManagment+0x868>)
 8001ac0:	f006 fe89 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001ac4:	495b      	ldr	r1, [pc, #364]	; (8001c34 <StateMachineManagment+0x874>)
 8001ac6:	4857      	ldr	r0, [pc, #348]	; (8001c24 <StateMachineManagment+0x864>)
 8001ac8:	f007 fee2 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001acc:	4855      	ldr	r0, [pc, #340]	; (8001c24 <StateMachineManagment+0x864>)
 8001ace:	f7fe fb87 	bl	80001e0 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	4952      	ldr	r1, [pc, #328]	; (8001c24 <StateMachineManagment+0x864>)
 8001adc:	4852      	ldr	r0, [pc, #328]	; (8001c28 <StateMachineManagment+0x868>)
 8001ade:	f006 fe7a 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001ae2:	4955      	ldr	r1, [pc, #340]	; (8001c38 <StateMachineManagment+0x878>)
 8001ae4:	484f      	ldr	r0, [pc, #316]	; (8001c24 <StateMachineManagment+0x864>)
 8001ae6:	f007 fed3 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001aea:	484e      	ldr	r0, [pc, #312]	; (8001c24 <StateMachineManagment+0x864>)
 8001aec:	f7fe fb78 	bl	80001e0 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af8:	494a      	ldr	r1, [pc, #296]	; (8001c24 <StateMachineManagment+0x864>)
 8001afa:	484b      	ldr	r0, [pc, #300]	; (8001c28 <StateMachineManagment+0x868>)
 8001afc:	f006 fe6b 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001b00:	494e      	ldr	r1, [pc, #312]	; (8001c3c <StateMachineManagment+0x87c>)
 8001b02:	4848      	ldr	r0, [pc, #288]	; (8001c24 <StateMachineManagment+0x864>)
 8001b04:	f007 fec4 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b08:	4846      	ldr	r0, [pc, #280]	; (8001c24 <StateMachineManagment+0x864>)
 8001b0a:	f7fe fb69 	bl	80001e0 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	4943      	ldr	r1, [pc, #268]	; (8001c24 <StateMachineManagment+0x864>)
 8001b18:	4843      	ldr	r0, [pc, #268]	; (8001c28 <StateMachineManagment+0x868>)
 8001b1a:	f006 fe5c 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <StateMachineManagment+0x844>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001b24:	2202      	movs	r2, #2
 8001b26:	4946      	ldr	r1, [pc, #280]	; (8001c40 <StateMachineManagment+0x880>)
 8001b28:	483f      	ldr	r0, [pc, #252]	; (8001c28 <StateMachineManagment+0x868>)
 8001b2a:	f006 fee6 	bl	80088fa <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001b2e:	f000 fc4b 	bl	80023c8 <UARTRecieveIT>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <StateMachineManagment+0x840>)
 8001b38:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <StateMachineManagment+0x840>)
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	f000 8141 	beq.w	8001dca <StateMachineManagment+0xa0a>
						if(inputchar == 'x')
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <StateMachineManagment+0x840>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	2b78      	cmp	r3, #120	; 0x78
 8001b50:	d106      	bne.n	8001b60 <StateMachineManagment+0x7a0>
							flagUART = 0;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <StateMachineManagment+0x844>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <StateMachineManagment+0x848>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
					break;
 8001b5e:	e134      	b.n	8001dca <StateMachineManagment+0xa0a>
						else if(inputchar == '+')
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <StateMachineManagment+0x840>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b2b      	cmp	r3, #43	; 0x2b
 8001b68:	d118      	bne.n	8001b9c <StateMachineManagment+0x7dc>
							Robot.WaitingTimeBuffer++;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b74:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <StateMachineManagment+0x84c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4931      	ldr	r1, [pc, #196]	; (8001c44 <StateMachineManagment+0x884>)
 8001b7e:	4829      	ldr	r0, [pc, #164]	; (8001c24 <StateMachineManagment+0x864>)
 8001b80:	f007 fe86 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001b84:	4827      	ldr	r0, [pc, #156]	; (8001c24 <StateMachineManagment+0x864>)
 8001b86:	f7fe fb2b 	bl	80001e0 <strlen>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	4924      	ldr	r1, [pc, #144]	; (8001c24 <StateMachineManagment+0x864>)
 8001b94:	4824      	ldr	r0, [pc, #144]	; (8001c28 <StateMachineManagment+0x868>)
 8001b96:	f006 fe1e 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001b9a:	e116      	b.n	8001dca <StateMachineManagment+0xa0a>
						else if(inputchar == '-')
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <StateMachineManagment+0x840>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8001ba4:	d118      	bne.n	8001bd8 <StateMachineManagment+0x818>
							Robot.WaitingTimeBuffer--;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <StateMachineManagment+0x84c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <StateMachineManagment+0x84c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <StateMachineManagment+0x84c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4922      	ldr	r1, [pc, #136]	; (8001c44 <StateMachineManagment+0x884>)
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <StateMachineManagment+0x864>)
 8001bbc:	f007 fe68 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <StateMachineManagment+0x864>)
 8001bc2:	f7fe fb0d 	bl	80001e0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	4915      	ldr	r1, [pc, #84]	; (8001c24 <StateMachineManagment+0x864>)
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <StateMachineManagment+0x868>)
 8001bd2:	f006 fe00 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001bd6:	e0f8      	b.n	8001dca <StateMachineManagment+0xa0a>
							flagUART = 0;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <StateMachineManagment+0x844>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001bde:	4910      	ldr	r1, [pc, #64]	; (8001c20 <StateMachineManagment+0x860>)
 8001be0:	4810      	ldr	r0, [pc, #64]	; (8001c24 <StateMachineManagment+0x864>)
 8001be2:	f007 fe55 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001be6:	480f      	ldr	r0, [pc, #60]	; (8001c24 <StateMachineManagment+0x864>)
 8001be8:	f7fe fafa 	bl	80001e0 <strlen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	490b      	ldr	r1, [pc, #44]	; (8001c24 <StateMachineManagment+0x864>)
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <StateMachineManagment+0x868>)
 8001bf8:	f006 fded 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001bfc:	e0e5      	b.n	8001dca <StateMachineManagment+0xa0a>
 8001bfe:	bf00      	nop
 8001c00:	200003ce 	.word	0x200003ce
 8001c04:	200003cc 	.word	0x200003cc
 8001c08:	20000388 	.word	0x20000388
 8001c0c:	20000380 	.word	0x20000380
 8001c10:	200003d0 	.word	0x200003d0
 8001c14:	200003d8 	.word	0x200003d8
 8001c18:	20000002 	.word	0x20000002
 8001c1c:	20000387 	.word	0x20000387
 8001c20:	0800a2a0 	.word	0x0800a2a0
 8001c24:	2000038c 	.word	0x2000038c
 8001c28:	20000328 	.word	0x20000328
 8001c2c:	0800a398 	.word	0x0800a398
 8001c30:	0800a3b4 	.word	0x0800a3b4
 8001c34:	0800a3cc 	.word	0x0800a3cc
 8001c38:	0800a3e4 	.word	0x0800a3e4
 8001c3c:	0800a3f8 	.word	0x0800a3f8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	0800a414 	.word	0x0800a414
					if(flagUART == 0){
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <StateMachineManagment+0xa34>)
 8001c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d14d      	bne.n	8001cee <StateMachineManagment+0x92e>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8001c52:	4969      	ldr	r1, [pc, #420]	; (8001df8 <StateMachineManagment+0xa38>)
 8001c54:	4869      	ldr	r0, [pc, #420]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c56:	f007 fe1b 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c5a:	4868      	ldr	r0, [pc, #416]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c5c:	f7fe fac0 	bl	80001e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	4964      	ldr	r1, [pc, #400]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c6a:	4865      	ldr	r0, [pc, #404]	; (8001e00 <StateMachineManagment+0xa40>)
 8001c6c:	f006 fdb3 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8001c70:	4964      	ldr	r1, [pc, #400]	; (8001e04 <StateMachineManagment+0xa44>)
 8001c72:	4862      	ldr	r0, [pc, #392]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c74:	f007 fe0c 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c78:	4860      	ldr	r0, [pc, #384]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c7a:	f7fe fab1 	bl	80001e0 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	495d      	ldr	r1, [pc, #372]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c88:	485d      	ldr	r0, [pc, #372]	; (8001e00 <StateMachineManagment+0xa40>)
 8001c8a:	f006 fda4 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001c8e:	495e      	ldr	r1, [pc, #376]	; (8001e08 <StateMachineManagment+0xa48>)
 8001c90:	485a      	ldr	r0, [pc, #360]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c92:	f007 fdfd 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001c96:	4859      	ldr	r0, [pc, #356]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001c98:	f7fe faa2 	bl	80001e0 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	4955      	ldr	r1, [pc, #340]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001ca6:	4856      	ldr	r0, [pc, #344]	; (8001e00 <StateMachineManagment+0xa40>)
 8001ca8:	f006 fd95 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001cac:	4957      	ldr	r1, [pc, #348]	; (8001e0c <StateMachineManagment+0xa4c>)
 8001cae:	4853      	ldr	r0, [pc, #332]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cb0:	f007 fdee 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cb4:	4851      	ldr	r0, [pc, #324]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cb6:	f7fe fa93 	bl	80001e0 <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	494e      	ldr	r1, [pc, #312]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cc4:	484e      	ldr	r0, [pc, #312]	; (8001e00 <StateMachineManagment+0xa40>)
 8001cc6:	f006 fd86 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001cca:	4951      	ldr	r1, [pc, #324]	; (8001e10 <StateMachineManagment+0xa50>)
 8001ccc:	484b      	ldr	r0, [pc, #300]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cce:	f007 fddf 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001cd2:	484a      	ldr	r0, [pc, #296]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001cd4:	f7fe fa84 	bl	80001e0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce0:	4946      	ldr	r1, [pc, #280]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001ce2:	4847      	ldr	r0, [pc, #284]	; (8001e00 <StateMachineManagment+0xa40>)
 8001ce4:	f006 fd77 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <StateMachineManagment+0xa34>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4948      	ldr	r1, [pc, #288]	; (8001e14 <StateMachineManagment+0xa54>)
 8001cf2:	4843      	ldr	r0, [pc, #268]	; (8001e00 <StateMachineManagment+0xa40>)
 8001cf4:	f006 fe01 	bl	80088fa <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001cf8:	f000 fb66 	bl	80023c8 <UARTRecieveIT>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d02:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d05e      	beq.n	8001dce <StateMachineManagment+0xa0e>
						if(inputchar == 'x')
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	2b78      	cmp	r3, #120	; 0x78
 8001d18:	d106      	bne.n	8001d28 <StateMachineManagment+0x968>
							flagUART = 0;
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <StateMachineManagment+0xa34>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <StateMachineManagment+0xa5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
					break;
 8001d26:	e052      	b.n	8001dce <StateMachineManagment+0xa0e>
						else if(inputchar == '+')
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2e:	2b2b      	cmp	r3, #43	; 0x2b
 8001d30:	d118      	bne.n	8001d64 <StateMachineManagment+0x9a4>
							Robot.OperationTimeBuffer++;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d3c:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4937      	ldr	r1, [pc, #220]	; (8001e24 <StateMachineManagment+0xa64>)
 8001d46:	482d      	ldr	r0, [pc, #180]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d48:	f007 fda2 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d4c:	482b      	ldr	r0, [pc, #172]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d4e:	f7fe fa47 	bl	80001e0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	4928      	ldr	r1, [pc, #160]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d5c:	4828      	ldr	r0, [pc, #160]	; (8001e00 <StateMachineManagment+0xa40>)
 8001d5e:	f006 fd3a 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001d62:	e034      	b.n	8001dce <StateMachineManagment+0xa0e>
						else if(inputchar == '-')
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <StateMachineManagment+0xa58>)
 8001d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6a:	2b2d      	cmp	r3, #45	; 0x2d
 8001d6c:	d118      	bne.n	8001da0 <StateMachineManagment+0x9e0>
							Robot.OperationTimeBuffer--;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d78:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <StateMachineManagment+0xa60>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4928      	ldr	r1, [pc, #160]	; (8001e24 <StateMachineManagment+0xa64>)
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d84:	f007 fd84 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001d88:	481c      	ldr	r0, [pc, #112]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d8a:	f7fe fa29 	bl	80001e0 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	4919      	ldr	r1, [pc, #100]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001d98:	4819      	ldr	r0, [pc, #100]	; (8001e00 <StateMachineManagment+0xa40>)
 8001d9a:	f006 fd1c 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001d9e:	e016      	b.n	8001dce <StateMachineManagment+0xa0e>
							flagUART = 0;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <StateMachineManagment+0xa34>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8001da6:	4920      	ldr	r1, [pc, #128]	; (8001e28 <StateMachineManagment+0xa68>)
 8001da8:	4814      	ldr	r0, [pc, #80]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001daa:	f007 fd71 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001dae:	4813      	ldr	r0, [pc, #76]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001db0:	f7fe fa16 	bl	80001e0 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <StateMachineManagment+0xa3c>)
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <StateMachineManagment+0xa40>)
 8001dc0:	f006 fd09 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001dc4:	e003      	b.n	8001dce <StateMachineManagment+0xa0e>
					break;
 8001dc6:	bf00      	nop
 8001dc8:	e23b      	b.n	8002242 <StateMachineManagment+0xe82>
					break;
 8001dca:	bf00      	nop
 8001dcc:	e239      	b.n	8002242 <StateMachineManagment+0xe82>
					break;
 8001dce:	bf00      	nop
			break;
 8001dd0:	e237      	b.n	8002242 <StateMachineManagment+0xe82>
		case StantionChoosing:
			switch (StantionChoosingState)
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <StateMachineManagment+0xa6c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	f200 8235 	bhi.w	8002246 <StateMachineManagment+0xe86>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <StateMachineManagment+0xa24>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001e31 	.word	0x08001e31
 8001de8:	0800206f 	.word	0x0800206f
 8001dec:	080020fd 	.word	0x080020fd
 8001df0:	08002191 	.word	0x08002191
 8001df4:	200003cc 	.word	0x200003cc
 8001df8:	0800a430 	.word	0x0800a430
 8001dfc:	2000038c 	.word	0x2000038c
 8001e00:	20000328 	.word	0x20000328
 8001e04:	0800a3b4 	.word	0x0800a3b4
 8001e08:	0800a3cc 	.word	0x0800a3cc
 8001e0c:	0800a3e4 	.word	0x0800a3e4
 8001e10:	0800a3f8 	.word	0x0800a3f8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200003ce 	.word	0x200003ce
 8001e1c:	20000388 	.word	0x20000388
 8001e20:	20000380 	.word	0x20000380
 8001e24:	0800a450 	.word	0x0800a450
 8001e28:	0800a2a0 	.word	0x0800a2a0
 8001e2c:	20000389 	.word	0x20000389
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <StateMachineManagment+0xce8>)
 8001e32:	f993 3000 	ldrsb.w	r3, [r3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8085 	bne.w	8001f46 <StateMachineManagment+0xb86>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 8001e3c:	499b      	ldr	r1, [pc, #620]	; (80020ac <StateMachineManagment+0xcec>)
 8001e3e:	489c      	ldr	r0, [pc, #624]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e40:	f007 fd26 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e44:	489a      	ldr	r0, [pc, #616]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e46:	f7fe f9cb 	bl	80001e0 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	4997      	ldr	r1, [pc, #604]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e54:	4897      	ldr	r0, [pc, #604]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001e56:	f006 fcbe 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8001e5a:	4b97      	ldr	r3, [pc, #604]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b95      	ldr	r3, [pc, #596]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	4995      	ldr	r1, [pc, #596]	; (80020bc <StateMachineManagment+0xcfc>)
 8001e66:	4892      	ldr	r0, [pc, #584]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e68:	f007 fd12 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e6c:	4890      	ldr	r0, [pc, #576]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e6e:	f7fe f9b7 	bl	80001e0 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	498d      	ldr	r1, [pc, #564]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e7c:	488d      	ldr	r0, [pc, #564]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001e7e:	f006 fcaa 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	498c      	ldr	r1, [pc, #560]	; (80020c0 <StateMachineManagment+0xd00>)
 8001e8e:	4888      	ldr	r0, [pc, #544]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e90:	f007 fcfe 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001e94:	4886      	ldr	r0, [pc, #536]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001e96:	f7fe f9a3 	bl	80001e0 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	4983      	ldr	r1, [pc, #524]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ea4:	4883      	ldr	r0, [pc, #524]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ea6:	f006 fc96 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type + for +1 Station\r\n");
 8001eaa:	4986      	ldr	r1, [pc, #536]	; (80020c4 <StateMachineManagment+0xd04>)
 8001eac:	4880      	ldr	r0, [pc, #512]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eae:	f007 fcef 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001eb2:	487f      	ldr	r0, [pc, #508]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eb4:	f7fe f994 	bl	80001e0 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec0:	497b      	ldr	r1, [pc, #492]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ec2:	487c      	ldr	r0, [pc, #496]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ec4:	f006 fc87 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001ec8:	497f      	ldr	r1, [pc, #508]	; (80020c8 <StateMachineManagment+0xd08>)
 8001eca:	4879      	ldr	r0, [pc, #484]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ecc:	f007 fce0 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001ed0:	4877      	ldr	r0, [pc, #476]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ed2:	f7fe f985 	bl	80001e0 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	4974      	ldr	r1, [pc, #464]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ee0:	4874      	ldr	r0, [pc, #464]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001ee2:	f006 fc78 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8001ee6:	4979      	ldr	r1, [pc, #484]	; (80020cc <StateMachineManagment+0xd0c>)
 8001ee8:	4871      	ldr	r0, [pc, #452]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001eea:	f007 fcd1 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001eee:	4870      	ldr	r0, [pc, #448]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001ef0:	f7fe f976 	bl	80001e0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efc:	496c      	ldr	r1, [pc, #432]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001efe:	486d      	ldr	r0, [pc, #436]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f00:	f006 fc69 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type g to Start Operating\r\n");
 8001f04:	4972      	ldr	r1, [pc, #456]	; (80020d0 <StateMachineManagment+0xd10>)
 8001f06:	486a      	ldr	r0, [pc, #424]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f08:	f007 fcc2 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f0c:	4868      	ldr	r0, [pc, #416]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f0e:	f7fe f967 	bl	80001e0 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	4965      	ldr	r1, [pc, #404]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f1c:	4865      	ldr	r0, [pc, #404]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f1e:	f006 fc5a 	bl	80087d6 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001f22:	496c      	ldr	r1, [pc, #432]	; (80020d4 <StateMachineManagment+0xd14>)
 8001f24:	4862      	ldr	r0, [pc, #392]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f26:	f007 fcb3 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001f2a:	4861      	ldr	r0, [pc, #388]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f2c:	f7fe f958 	bl	80001e0 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f38:	495d      	ldr	r1, [pc, #372]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001f3a:	485e      	ldr	r0, [pc, #376]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f3c:	f006 fc4b 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <StateMachineManagment+0xce8>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001f46:	2202      	movs	r2, #2
 8001f48:	4963      	ldr	r1, [pc, #396]	; (80020d8 <StateMachineManagment+0xd18>)
 8001f4a:	485a      	ldr	r0, [pc, #360]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f4c:	f006 fcd5 	bl	80088fa <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001f50:	2202      	movs	r2, #2
 8001f52:	4961      	ldr	r1, [pc, #388]	; (80020d8 <StateMachineManagment+0xd18>)
 8001f54:	4857      	ldr	r0, [pc, #348]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001f56:	f006 fcd0 	bl	80088fa <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001f5a:	f000 fa35 	bl	80023c8 <UARTRecieveIT>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f64:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	f000 815f 	beq.w	8002232 <StateMachineManagment+0xe72>
					{
						if(inputchar == 'x')
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7a:	2b78      	cmp	r3, #120	; 0x78
 8001f7c:	d10a      	bne.n	8001f94 <StateMachineManagment+0xbd4>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001f80:	795a      	ldrb	r2, [r3, #5]
 8001f82:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001f84:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <StateMachineManagment+0xce8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <StateMachineManagment+0xd20>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 8001f92:	e14e      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == '+')
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <StateMachineManagment+0xd1c>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8001f9c:	d11f      	bne.n	8001fde <StateMachineManagment+0xc1e>
							Robot.EndStationBuffer++;
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fa0:	789b      	ldrb	r3, [r3, #2]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fa8:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fac:	789b      	ldrb	r3, [r3, #2]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fb6:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4949      	ldr	r1, [pc, #292]	; (80020e4 <StateMachineManagment+0xd24>)
 8001fc0:	483b      	ldr	r0, [pc, #236]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fc2:	f007 fc65 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fc8:	f7fe f90a 	bl	80001e0 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd4:	4936      	ldr	r1, [pc, #216]	; (80020b0 <StateMachineManagment+0xcf0>)
 8001fd6:	4837      	ldr	r0, [pc, #220]	; (80020b4 <StateMachineManagment+0xcf4>)
 8001fd8:	f006 fbfd 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8001fdc:	e129      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == '-')
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <StateMachineManagment+0xd1c>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8001fe6:	d11f      	bne.n	8002028 <StateMachineManagment+0xc68>
							Robot.EndStationBuffer--;
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001fea:	789b      	ldrb	r3, [r3, #2]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001ff2:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <StateMachineManagment+0xcf8>)
 8001ff6:	789b      	ldrb	r3, [r3, #2]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002000:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002004:	789b      	ldrb	r3, [r3, #2]
 8002006:	461a      	mov	r2, r3
 8002008:	4936      	ldr	r1, [pc, #216]	; (80020e4 <StateMachineManagment+0xd24>)
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <StateMachineManagment+0xcf0>)
 800200c:	f007 fc40 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002010:	4827      	ldr	r0, [pc, #156]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002012:	f7fe f8e5 	bl	80001e0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	4924      	ldr	r1, [pc, #144]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002020:	4824      	ldr	r0, [pc, #144]	; (80020b4 <StateMachineManagment+0xcf4>)
 8002022:	f006 fbd8 	bl	80087d6 <HAL_UART_Transmit>
					break;
 8002026:	e104      	b.n	8002232 <StateMachineManagment+0xe72>
						else if(inputchar == 'g')
 8002028:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <StateMachineManagment+0xd1c>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	2b67      	cmp	r3, #103	; 0x67
 8002030:	d10a      	bne.n	8002048 <StateMachineManagment+0xc88>
							Robot.EndStation = Robot.EndStationBuffer;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002034:	789a      	ldrb	r2, [r3, #2]
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002038:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <StateMachineManagment+0xce8>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <StateMachineManagment+0xd28>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
					break;
 8002046:	e0f4      	b.n	8002232 <StateMachineManagment+0xe72>
							flagUART = 0;
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <StateMachineManagment+0xce8>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <StateMachineManagment+0xd2c>)
 8002050:	4817      	ldr	r0, [pc, #92]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002052:	f007 fc1d 	bl	8009890 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002058:	f7fe f8c2 	bl	80001e0 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <StateMachineManagment+0xcf0>)
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <StateMachineManagment+0xcf4>)
 8002068:	f006 fbb5 	bl	80087d6 <HAL_UART_Transmit>
					break;
 800206c:	e0e1      	b.n	8002232 <StateMachineManagment+0xe72>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <StateMachineManagment+0xd30>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002076:	78da      	ldrb	r2, [r3, #3]
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <StateMachineManagment+0xd34>)
 800207a:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <StateMachineManagment+0xcf8>)
 800207e:	791a      	ldrb	r2, [r3, #4]
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <StateMachineManagment+0xd34>)
 8002082:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <StateMachineManagment+0xcf8>)
 8002086:	795a      	ldrb	r2, [r3, #5]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <StateMachineManagment+0xd34>)
 800208a:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <StateMachineManagment+0xd38>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	220a      	movs	r2, #10
 8002092:	4619      	mov	r1, r3
 8002094:	4817      	ldr	r0, [pc, #92]	; (80020f4 <StateMachineManagment+0xd34>)
 8002096:	f000 f947 	bl	8002328 <EEPROMWriteFcn>
					flagUART = 0;
 800209a:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <StateMachineManagment+0xce8>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <StateMachineManagment+0xd28>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
					break;
 80020a6:	e0c9      	b.n	800223c <StateMachineManagment+0xe7c>
 80020a8:	200003cc 	.word	0x200003cc
 80020ac:	0800a474 	.word	0x0800a474
 80020b0:	2000038c 	.word	0x2000038c
 80020b4:	20000328 	.word	0x20000328
 80020b8:	20000380 	.word	0x20000380
 80020bc:	0800a1d4 	.word	0x0800a1d4
 80020c0:	0800a208 	.word	0x0800a208
 80020c4:	0800a49c 	.word	0x0800a49c
 80020c8:	0800a4b8 	.word	0x0800a4b8
 80020cc:	0800a384 	.word	0x0800a384
 80020d0:	0800a4d4 	.word	0x0800a4d4
 80020d4:	0800a19c 	.word	0x0800a19c
 80020d8:	20000000 	.word	0x20000000
 80020dc:	200003ce 	.word	0x200003ce
 80020e0:	20000387 	.word	0x20000387
 80020e4:	0800a4f4 	.word	0x0800a4f4
 80020e8:	20000389 	.word	0x20000389
 80020ec:	0800a2a0 	.word	0x0800a2a0
 80020f0:	200003d0 	.word	0x200003d0
 80020f4:	200003d8 	.word	0x200003d8
 80020f8:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <StateMachineManagment+0xe94>)
 80020fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d123      	bne.n	800214e <StateMachineManagment+0xd8e>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 8002106:	4954      	ldr	r1, [pc, #336]	; (8002258 <StateMachineManagment+0xe98>)
 8002108:	4854      	ldr	r0, [pc, #336]	; (800225c <StateMachineManagment+0xe9c>)
 800210a:	f007 fbc1 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800210e:	4853      	ldr	r0, [pc, #332]	; (800225c <StateMachineManagment+0xe9c>)
 8002110:	f7fe f866 	bl	80001e0 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211c:	494f      	ldr	r1, [pc, #316]	; (800225c <StateMachineManagment+0xe9c>)
 800211e:	4850      	ldr	r0, [pc, #320]	; (8002260 <StateMachineManagment+0xea0>)
 8002120:	f006 fb59 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <StateMachineManagment+0xe94>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 800212a:	f000 f9c3 	bl	80024b4 <micros>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	494c      	ldr	r1, [pc, #304]	; (8002264 <StateMachineManagment+0xea4>)
 8002134:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <StateMachineManagment+0xea8>)
 800213a:	7818      	ldrb	r0, [r3, #0]
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <StateMachineManagment+0xeac>)
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <StateMachineManagment+0xeb0>)
 8002142:	799b      	ldrb	r3, [r3, #6]
 8002144:	43db      	mvns	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	f000 f899 	bl	8002280 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 800214e:	f000 f9b1 	bl	80024b4 <micros>
 8002152:	4b44      	ldr	r3, [pc, #272]	; (8002264 <StateMachineManagment+0xea4>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	ebb0 0802 	subs.w	r8, r0, r2
 800215c:	eb61 0903 	sbc.w	r9, r1, r3
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <StateMachineManagment+0xeb0>)
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	461a      	mov	r2, r3
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <StateMachineManagment+0xeb4>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	17da      	asrs	r2, r3, #31
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002176:	460b      	mov	r3, r1
 8002178:	4543      	cmp	r3, r8
 800217a:	4613      	mov	r3, r2
 800217c:	eb73 0309 	sbcs.w	r3, r3, r9
 8002180:	d259      	bcs.n	8002236 <StateMachineManagment+0xe76>
					{
						flagUART = 0;
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <StateMachineManagment+0xe94>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <StateMachineManagment+0xeb8>)
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
					}

					break;
 800218e:	e052      	b.n	8002236 <StateMachineManagment+0xe76>
				case RobotOperatingPart2:
					if(flagUART == 0)
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <StateMachineManagment+0xe94>)
 8002192:	f993 3000 	ldrsb.w	r3, [r3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d123      	bne.n	80021e2 <StateMachineManagment+0xe22>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 800219a:	4938      	ldr	r1, [pc, #224]	; (800227c <StateMachineManagment+0xebc>)
 800219c:	482f      	ldr	r0, [pc, #188]	; (800225c <StateMachineManagment+0xe9c>)
 800219e:	f007 fb77 	bl	8009890 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80021a2:	482e      	ldr	r0, [pc, #184]	; (800225c <StateMachineManagment+0xe9c>)
 80021a4:	f7fe f81c 	bl	80001e0 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b0:	492a      	ldr	r1, [pc, #168]	; (800225c <StateMachineManagment+0xe9c>)
 80021b2:	482b      	ldr	r0, [pc, #172]	; (8002260 <StateMachineManagment+0xea0>)
 80021b4:	f006 fb0f 	bl	80087d6 <HAL_UART_Transmit>
						flagUART = 1;
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <StateMachineManagment+0xe94>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 80021be:	f000 f979 	bl	80024b4 <micros>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4927      	ldr	r1, [pc, #156]	; (8002264 <StateMachineManagment+0xea4>)
 80021c8:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <StateMachineManagment+0xea8>)
 80021ce:	7818      	ldrb	r0, [r3, #0]
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <StateMachineManagment+0xeac>)
 80021d2:	7819      	ldrb	r1, [r3, #0]
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <StateMachineManagment+0xeb0>)
 80021d6:	795b      	ldrb	r3, [r3, #5]
 80021d8:	43db      	mvns	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	f000 f84f 	bl	8002280 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 80021e2:	f000 f967 	bl	80024b4 <micros>
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <StateMachineManagment+0xea4>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	1a84      	subs	r4, r0, r2
 80021ee:	eb61 0503 	sbc.w	r5, r1, r3
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <StateMachineManagment+0xeb0>)
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <StateMachineManagment+0xeb4>)
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	17da      	asrs	r2, r3, #31
 8002200:	469a      	mov	sl, r3
 8002202:	4693      	mov	fp, r2
 8002204:	45a2      	cmp	sl, r4
 8002206:	eb7b 0305 	sbcs.w	r3, fp, r5
 800220a:	d216      	bcs.n	800223a <StateMachineManagment+0xe7a>
					{
						Robot.StartStation = Robot.EndStation;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <StateMachineManagment+0xeb0>)
 800220e:	795a      	ldrb	r2, [r3, #5]
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <StateMachineManagment+0xeb0>)
 8002212:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <StateMachineManagment+0xe94>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <StateMachineManagment+0xea8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <StateMachineManagment+0xeac>)
 8002220:	7811      	ldrb	r1, [r2, #0]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f82b 	bl	8002280 <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <StateMachineManagment+0xeb8>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
					}

					break;
 8002230:	e003      	b.n	800223a <StateMachineManagment+0xe7a>
					break;
 8002232:	bf00      	nop
 8002234:	e007      	b.n	8002246 <StateMachineManagment+0xe86>
					break;
 8002236:	bf00      	nop
 8002238:	e005      	b.n	8002246 <StateMachineManagment+0xe86>
					break;
 800223a:	bf00      	nop
			}
			break;
 800223c:	e003      	b.n	8002246 <StateMachineManagment+0xe86>
			break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <StateMachineManagment+0xe88>
			break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <StateMachineManagment+0xe88>
			break;
 8002246:	bf00      	nop
	}
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002252:	bf00      	nop
 8002254:	200003cc 	.word	0x200003cc
 8002258:	0800a510 	.word	0x0800a510
 800225c:	2000038c 	.word	0x2000038c
 8002260:	20000328 	.word	0x20000328
 8002264:	20000378 	.word	0x20000378
 8002268:	20000004 	.word	0x20000004
 800226c:	20000005 	.word	0x20000005
 8002270:	20000380 	.word	0x20000380
 8002274:	000f4240 	.word	0x000f4240
 8002278:	20000389 	.word	0x20000389
 800227c:	0800a534 	.word	0x0800a534

08002280 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	460b      	mov	r3, r1
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <MCP23017SetOutput+0x44>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <MCP23017SetOutput+0x44>)
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <MCP23017SetOutput+0x44>)
 80022a0:	797b      	ldrb	r3, [r7, #5]
 80022a2:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MCP23017SetOutput+0x48>)
 80022ac:	f002 f8f6 	bl	800449c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 80022b0:	2203      	movs	r2, #3
 80022b2:	4904      	ldr	r1, [pc, #16]	; (80022c4 <MCP23017SetOutput+0x44>)
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <MCP23017SetOutput+0x4c>)
 80022b6:	f004 fdbd 	bl	8006e34 <HAL_SPI_Transmit_IT>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200003dc 	.word	0x200003dc
 80022c8:	40020400 	.word	0x40020400
 80022cc:	20000198 	.word	0x20000198

080022d0 <MCP23017SetInit>:

void MCP23017SetInit()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MCP23017SetInit+0x20>)
 80022dc:	f002 f8de 	bl	800449c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 80022e0:	2203      	movs	r2, #3
 80022e2:	4904      	ldr	r1, [pc, #16]	; (80022f4 <MCP23017SetInit+0x24>)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MCP23017SetInit+0x28>)
 80022e6:	f004 fda5 	bl	8006e34 <HAL_SPI_Transmit_IT>
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020400 	.word	0x40020400
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000198 	.word	0x20000198

080022fc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_SPI_TxCpltCallback+0x24>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d105      	bne.n	8002318 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <HAL_SPI_TxCpltCallback+0x28>)
 8002314:	f002 f8c2 	bl	800449c <HAL_GPIO_WritePin>
	}
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000198 	.word	0x20000198
 8002324:	40020400 	.word	0x40020400

08002328 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <EEPROMWriteFcn+0x48>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <EEPROMWriteFcn+0x3e>
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <EEPROMWriteFcn+0x4c>)
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	d10c      	bne.n	8002366 <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800234c:	883a      	ldrh	r2, [r7, #0]
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2310      	movs	r3, #16
 8002358:	21a0      	movs	r1, #160	; 0xa0
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <EEPROMWriteFcn+0x4c>)
 800235c:	f002 f9fc 	bl	8004758 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <EEPROMWriteFcn+0x48>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
	}
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200003d0 	.word	0x200003d0
 8002374:	20000144 	.word	0x20000144

08002378 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <EEPROMReadFcn+0x48>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <EEPROMReadFcn+0x3e>
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <EEPROMReadFcn+0x4c>)
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	d10c      	bne.n	80023b6 <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800239c:	883a      	ldrh	r2, [r7, #0]
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2310      	movs	r3, #16
 80023a8:	21a0      	movs	r1, #160	; 0xa0
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <EEPROMReadFcn+0x4c>)
 80023ac:	f002 fa86 	bl	80048bc <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <EEPROMReadFcn+0x48>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
	}
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003d1 	.word	0x200003d1
 80023c4:	20000144 	.word	0x20000144

080023c8 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80023ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d2:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <UARTRecieveIT+0x54>)
 80023d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d8:	461a      	mov	r2, r3
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <UARTRecieveIT+0x54>)
 80023dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <UARTRecieveIT+0x58>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d010      	beq.n	800240c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <UARTRecieveIT+0x58>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <UARTRecieveIT+0x5c>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <UARTRecieveIT+0x58>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <UARTRecieveIT+0x54>)
 80023fc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80023fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002402:	fb01 f202 	mul.w	r2, r1, r2
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	4a05      	ldr	r2, [pc, #20]	; (8002420 <UARTRecieveIT+0x58>)
 800240a:	6013      	str	r3, [r2, #0]
	}
	return data;
 800240c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20000328 	.word	0x20000328
 8002420:	200004e4 	.word	0x200004e4
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002428:	b4b0      	push	{r4, r5, r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10b      	bne.n	8002450 <HAL_TIM_PeriodElapsedCallback+0x28>
		_micro += 65535;
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002442:	1854      	adds	r4, r2, r1
 8002444:	f143 0500 	adc.w	r5, r3, #0
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800244a:	e9c3 4500 	strd	r4, r5, [r3]
	else if (htim == &htim3) {
		Temp100Sec[TempPos] = ADCin;
		TempPos++;
		TempPos %=100;
	}
}
 800244e:	e01e      	b.n	800248e <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim == &htim3) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d11a      	bne.n	800248e <HAL_TIM_PeriodElapsedCallback+0x66>
		Temp100Sec[TempPos] = ADCin;
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002464:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		TempPos++;
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002472:	701a      	strb	r2, [r3, #0]
		TempPos %=100;
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800247a:	fba2 1203 	umull	r1, r2, r2, r3
 800247e:	0952      	lsrs	r2, r2, #5
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	fb01 f202 	mul.w	r2, r1, r2
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bcb0      	pop	{r4, r5, r7}
 8002496:	4770      	bx	lr
 8002498:	20000280 	.word	0x20000280
 800249c:	20000370 	.word	0x20000370
 80024a0:	20000238 	.word	0x20000238
 80024a4:	200004ac 	.word	0x200004ac
 80024a8:	200003e0 	.word	0x200003e0
 80024ac:	200003e4 	.word	0x200003e4
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <micros>:

uint64_t micros() {
 80024b4:	b4b0      	push	{r4, r5, r7}
 80024b6:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <micros+0x2c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2200      	movs	r2, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	4611      	mov	r1, r2
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <micros+0x30>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	1884      	adds	r4, r0, r2
 80024cc:	eb41 0503 	adc.w	r5, r1, r3
 80024d0:	4622      	mov	r2, r4
 80024d2:	462b      	mov	r3, r5
}
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	bcb0      	pop	{r4, r5, r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000280 	.word	0x20000280
 80024e4:	20000370 	.word	0x20000370

080024e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	//（ Unit is °C）= {(V SENSE — V 25 ) / Avg_Slope} + 25
	Currenttemp = ((ADCin* (3.3 / 4096)- 0.76)/ 0.0025) + 25;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_ADC_ConvCpltCallback+0x88>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f81d 	bl	8000534 <__aeabi_i2d>
 80024fa:	a317      	add	r3, pc, #92	; (adr r3, 8002558 <HAL_ADC_ConvCpltCallback+0x70>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f882 	bl	8000608 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	a314      	add	r3, pc, #80	; (adr r3, 8002560 <HAL_ADC_ConvCpltCallback+0x78>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fd fec1 	bl	8000298 <__aeabi_dsub>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	a312      	add	r3, pc, #72	; (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0x80>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f99a 	bl	800085c <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002536:	f7fd feb1 	bl	800029c <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fa73 	bl	8000a2c <__aeabi_d2uiz>
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_ADC_ConvCpltCallback+0x90>)
 800254c:	801a      	strh	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	66666666 	.word	0x66666666
 800255c:	3f4a6666 	.word	0x3f4a6666
 8002560:	851eb852 	.word	0x851eb852
 8002564:	3fe851eb 	.word	0x3fe851eb
 8002568:	47ae147b 	.word	0x47ae147b
 800256c:	3f647ae1 	.word	0x3f647ae1
 8002570:	200003e0 	.word	0x200003e0
 8002574:	40390000 	.word	0x40390000
 8002578:	200004ae 	.word	0x200004ae

0800257c <HAL_UART_RxCpltCallback>:
	//CPS
	AvgCPS = (60/Meantime)/1000;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>
	...

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_MspInit+0x4c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_MspInit+0x4c>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025da:	2007      	movs	r0, #7
 80025dc:	f001 f988 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a26      	ldr	r2, [pc, #152]	; (8002694 <HAL_ADC_MspInit+0xa8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d145      	bne.n	800268a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_ADC_MspInit+0xac>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_ADC_MspInit+0xac>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_ADC_MspInit+0xac>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_ADC_MspInit+0xb0>)
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <HAL_ADC_MspInit+0xb4>)
 800261e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_ADC_MspInit+0xb0>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_ADC_MspInit+0xb0>)
 800263c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_ADC_MspInit+0xb0>)
 800264c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002650:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_ADC_MspInit+0xb0>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800265e:	480f      	ldr	r0, [pc, #60]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002660:	f001 f988 	bl	8003974 <HAL_DMA_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800266a:	f7ff ff91 	bl	8002590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
 8002674:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_ADC_MspInit+0xb0>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2012      	movs	r0, #18
 8002680:	f001 f941 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002684:	2012      	movs	r0, #18
 8002686:	f001 f95a 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40012000 	.word	0x40012000
 8002698:	40023800 	.word	0x40023800
 800269c:	200000e4 	.word	0x200000e4
 80026a0:	40026410 	.word	0x40026410

080026a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <HAL_I2C_MspInit+0xa4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d13c      	bne.n	8002740 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_I2C_MspInit+0xa8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_I2C_MspInit+0xa8>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_I2C_MspInit+0xa8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f4:	2304      	movs	r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <HAL_I2C_MspInit+0xac>)
 8002700:	f001 fd48 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_I2C_MspInit+0xa8>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_I2C_MspInit+0xa8>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_I2C_MspInit+0xa8>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	201f      	movs	r0, #31
 8002726:	f001 f8ee 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800272a:	201f      	movs	r0, #31
 800272c:	f001 f907 	bl	800393e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2020      	movs	r0, #32
 8002736:	f001 f8e6 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800273a:	2020      	movs	r0, #32
 800273c:	f001 f8ff 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40005400 	.word	0x40005400
 800274c:	40023800 	.word	0x40023800
 8002750:	40020400 	.word	0x40020400

08002754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_SPI_MspInit+0x94>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d133      	bne.n	80027de <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_SPI_MspInit+0x98>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_SPI_MspInit+0x98>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_SPI_MspInit+0x98>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027ae:	2338      	movs	r3, #56	; 0x38
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027be:	2306      	movs	r3, #6
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_SPI_MspInit+0x9c>)
 80027ca:	f001 fce3 	bl	8004194 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2033      	movs	r0, #51	; 0x33
 80027d4:	f001 f897 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80027d8:	2033      	movs	r0, #51	; 0x33
 80027da:	f001 f8b0 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40003c00 	.word	0x40003c00
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020400 	.word	0x40020400

080027f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d15d      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b48      	ldr	r3, [pc, #288]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a43      	ldr	r2, [pc, #268]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800284e:	2301      	movs	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800285e:	2301      	movs	r3, #1
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <HAL_TIM_Base_MspInit+0x158>)
 800286a:	f001 fc93 	bl	8004194 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 8002870:	4a38      	ldr	r2, [pc, #224]	; (8002954 <HAL_TIM_Base_MspInit+0x160>)
 8002872:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 8002876:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800287a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 800288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 8002892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002896:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 800289a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80028b4:	4826      	ldr	r0, [pc, #152]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028b6:	f001 f85d 	bl	8003974 <HAL_DMA_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80028c0:	f7ff fe66 	bl	8002590 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_TIM_Base_MspInit+0x15c>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80028d0:	e036      	b.n	8002940 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a20      	ldr	r2, [pc, #128]	; (8002958 <HAL_TIM_Base_MspInit+0x164>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d116      	bne.n	800290a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	201d      	movs	r0, #29
 80028fe:	f001 f802 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002902:	201d      	movs	r0, #29
 8002904:	f001 f81b 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8002908:	e01a      	b.n	8002940 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM11)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_TIM_Base_MspInit+0x168>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d115      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 800291e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002922:	6453      	str	r3, [r2, #68]	; 0x44
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_TIM_Base_MspInit+0x154>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	201a      	movs	r0, #26
 8002936:	f000 ffe6 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800293a:	201a      	movs	r0, #26
 800293c:	f000 ffff 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8002940:	bf00      	nop
 8002942:	3730      	adds	r7, #48	; 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	200002c8 	.word	0x200002c8
 8002954:	40026088 	.word	0x40026088
 8002958:	40000400 	.word	0x40000400
 800295c:	40014800 	.word	0x40014800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_UART_MspInit+0x94>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d133      	bne.n	80029ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_UART_MspInit+0x98>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_UART_MspInit+0x98>)
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_UART_MspInit+0x98>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_UART_MspInit+0x98>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_UART_MspInit+0x98>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_UART_MspInit+0x98>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029ba:	230c      	movs	r3, #12
 80029bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ca:	2307      	movs	r3, #7
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4809      	ldr	r0, [pc, #36]	; (80029fc <HAL_UART_MspInit+0x9c>)
 80029d6:	f001 fbdd 	bl	8004194 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2026      	movs	r0, #38	; 0x26
 80029e0:	f000 ff91 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029e4:	2026      	movs	r0, #38	; 0x26
 80029e6:	f000 ffaa 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	; 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40004400 	.word	0x40004400
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000

08002a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <NMI_Handler+0x4>

08002a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <HardFault_Handler+0x4>

08002a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <MemManage_Handler+0x4>

08002a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <BusFault_Handler+0x4>

08002a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <UsageFault_Handler+0x4>

08002a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a4c:	f000 f920 	bl	8002c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <DMA1_Stream5_IRQHandler+0x10>)
 8002a5a:	f001 f923 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200002c8 	.word	0x200002c8

08002a68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <ADC_IRQHandler+0x10>)
 8002a6e:	f000 f996 	bl	8002d9e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000009c 	.word	0x2000009c

08002a7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a82:	f004 fff3 	bl	8007a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000280 	.word	0x20000280

08002a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <TIM3_IRQHandler+0x10>)
 8002a96:	f004 ffe9 	bl	8007a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000238 	.word	0x20000238

08002aa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <I2C1_EV_IRQHandler+0x10>)
 8002aaa:	f001 ffc5 	bl	8004a38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000144 	.word	0x20000144

08002ab8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <I2C1_ER_IRQHandler+0x10>)
 8002abe:	f002 f92c 	bl	8004d1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000144 	.word	0x20000144

08002acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <USART2_IRQHandler+0x10>)
 8002ad2:	f005 ff43 	bl	800895c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000328 	.word	0x20000328

08002ae0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <SPI3_IRQHandler+0x10>)
 8002ae6:	f004 fa2f 	bl	8006f48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000198 	.word	0x20000198

08002af4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <DMA2_Stream0_IRQHandler+0x10>)
 8002afa:	f001 f8d3 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200000e4 	.word	0x200000e4

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f006 fe78 	bl	800982c <__errno>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	220c      	movs	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20020000 	.word	0x20020000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	200004e8 	.word	0x200004e8
 8002b70:	20000500 	.word	0x20000500

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <SystemInit+0x20>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <SystemInit+0x20>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b9e:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	; (8002be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc2:	f7ff ffd7 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f006 fe37 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7fe f8d1 	bl	8000d70 <main>
  bx  lr    
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002bdc:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 8002be0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002be4:	20000500 	.word	0x20000500

08002be8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <DMA1_Stream0_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_Init+0x40>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_Init+0x40>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_Init+0x40>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 fe6b 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f000 f808 	bl	8002c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7ff fcbc 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_InitTick+0x54>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_InitTick+0x58>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe83 	bl	800395a <HAL_SYSTICK_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00e      	b.n	8002c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d80a      	bhi.n	8002c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c64:	2200      	movs	r2, #0
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f000 fe4b 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c70:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <HAL_InitTick+0x5c>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	20000014 	.word	0x20000014
 8002c8c:	20000010 	.word	0x20000010

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000014 	.word	0x20000014
 8002cb4:	200004ec 	.word	0x200004ec

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	200004ec 	.word	0x200004ec

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff ffee 	bl	8002cb8 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_Delay+0x44>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000014 	.word	0x20000014

08002d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e033      	b.n	8002d96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fc58 	bl	80025ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d5e:	f023 0302 	bic.w	r3, r3, #2
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb68 	bl	8003440 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
 8002d86:	e001      	b.n	8002d8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d049      	beq.n	8002e68 <HAL_ADC_IRQHandler+0xca>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d046      	beq.n	8002e68 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d127      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fb45 	bl	80024e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0212 	mvn.w	r2, #18
 8002e66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d057      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x190>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d054      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d139      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d12b      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d124      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fc0c 	bl	800373c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 020c 	mvn.w	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d014      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10d      	bne.n	8002f74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f925 	bl	80031b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f06f 0201 	mvn.w	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x218>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0220 	mvn.w	r2, #32
 8002fa4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f90e 	bl	80031c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0220 	mvn.w	r2, #32
 8002fb4:	601a      	str	r2, [r3, #0]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Start_DMA+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ce      	b.n	800317c <HAL_ADC_Start_DMA+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d018      	beq.n	8003026 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <HAL_ADC_Start_DMA+0x1c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5f      	ldr	r2, [pc, #380]	; (8003188 <HAL_ADC_Start_DMA+0x1c8>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9a      	lsrs	r2, r3, #18
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003018:	e002      	b.n	8003020 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3b01      	subs	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d107      	bne.n	8003046 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	f040 8086 	bne.w	8003162 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d106      	bne.n	80030a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f023 0206 	bic.w	r2, r3, #6
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
 80030a2:	e002      	b.n	80030aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_ADC_Start_DMA+0x1cc>)
 80030b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	4a35      	ldr	r2, [pc, #212]	; (8003190 <HAL_ADC_Start_DMA+0x1d0>)
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_ADC_Start_DMA+0x1d4>)
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	4a33      	ldr	r2, [pc, #204]	; (8003198 <HAL_ADC_Start_DMA+0x1d8>)
 80030cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	334c      	adds	r3, #76	; 0x4c
 8003102:	4619      	mov	r1, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f000 fce2 	bl	8003ad0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10f      	bne.n	8003138 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d129      	bne.n	800317a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	e020      	b.n	800317a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_ADC_Start_DMA+0x1dc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11b      	bne.n	800317a <HAL_ADC_Start_DMA+0x1ba>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d114      	bne.n	800317a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	e00b      	b.n	800317a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000000c 	.word	0x2000000c
 8003188:	431bde83 	.word	0x431bde83
 800318c:	40012300 	.word	0x40012300
 8003190:	08003639 	.word	0x08003639
 8003194:	080036f3 	.word	0x080036f3
 8003198:	0800370f 	.word	0x0800370f
 800319c:	40012000 	.word	0x40012000

080031a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x1c>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e113      	b.n	8003420 <HAL_ADC_ConfigChannel+0x244>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b09      	cmp	r3, #9
 8003206:	d925      	bls.n	8003254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	3b1e      	subs	r3, #30
 800321e:	2207      	movs	r2, #7
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	4618      	mov	r0, r3
 8003240:	4603      	mov	r3, r0
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4403      	add	r3, r0
 8003246:	3b1e      	subs	r3, #30
 8003248:	409a      	lsls	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e022      	b.n	800329a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	2207      	movs	r2, #7
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	400a      	ands	r2, r1
 8003276:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6919      	ldr	r1, [r3, #16]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	4618      	mov	r0, r3
 800328a:	4603      	mov	r3, r0
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4403      	add	r3, r0
 8003290:	409a      	lsls	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d824      	bhi.n	80032ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	3b05      	subs	r3, #5
 80032b4:	221f      	movs	r2, #31
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	400a      	ands	r2, r1
 80032c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4618      	mov	r0, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	3b05      	subs	r3, #5
 80032de:	fa00 f203 	lsl.w	r2, r0, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	e04c      	b.n	8003386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d824      	bhi.n	800333e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	3b23      	subs	r3, #35	; 0x23
 8003306:	221f      	movs	r2, #31
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43da      	mvns	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	400a      	ands	r2, r1
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3b23      	subs	r3, #35	; 0x23
 8003330:	fa00 f203 	lsl.w	r2, r0, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
 800333c:	e023      	b.n	8003386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3b41      	subs	r3, #65	; 0x41
 8003350:	221f      	movs	r2, #31
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	400a      	ands	r2, r1
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b41      	subs	r3, #65	; 0x41
 800337a:	fa00 f203 	lsl.w	r2, r0, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_ADC_ConfigChannel+0x250>)
 8003388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_ADC_ConfigChannel+0x254>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10f      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1d8>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b12      	cmp	r3, #18
 800339a:	d10b      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_ADC_ConfigChannel+0x254>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d12b      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x23a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_ADC_ConfigChannel+0x258>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x1f4>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b11      	cmp	r3, #17
 80033ce:	d122      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_ADC_ConfigChannel+0x258>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d111      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_ADC_ConfigChannel+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_ADC_ConfigChannel+0x260>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	0c9a      	lsrs	r2, r3, #18
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003408:	e002      	b.n	8003410 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3b01      	subs	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40012300 	.word	0x40012300
 8003430:	40012000 	.word	0x40012000
 8003434:	10000012 	.word	0x10000012
 8003438:	2000000c 	.word	0x2000000c
 800343c:	431bde83 	.word	0x431bde83

08003440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003448:	4b79      	ldr	r3, [pc, #484]	; (8003630 <ADC_Init+0x1f0>)
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	4a58      	ldr	r2, [pc, #352]	; (8003634 <ADC_Init+0x1f4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	e00f      	b.n	800353e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800352c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800353c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0202 	bic.w	r2, r2, #2
 800354c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7e1b      	ldrb	r3, [r3, #24]
 8003558:	005a      	lsls	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800358a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	3b01      	subs	r3, #1
 8003598:	035a      	lsls	r2, r3, #13
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e007      	b.n	80035b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	051a      	lsls	r2, r3, #20
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f6:	025a      	lsls	r2, r3, #9
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	029a      	lsls	r2, r3, #10
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40012300 	.word	0x40012300
 8003634:	0f000001 	.word	0x0f000001

08003638 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13c      	bne.n	80036cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d12b      	bne.n	80036c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003670:	2b00      	cmp	r3, #0
 8003672:	d127      	bne.n	80036c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0220 	bic.w	r2, r2, #32
 800369e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7fe ff0f 	bl	80024e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ca:	e00e      	b.n	80036ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fd75 	bl	80031c8 <HAL_ADC_ErrorCallback>
}
 80036de:	e004      	b.n	80036ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fd4d 	bl	80031a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff fd4a 	bl	80031c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	; (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff29 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff3e 	bl	8003798 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff8e 	bl	8003844 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5d 	bl	80037f0 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff31 	bl	80037b4 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa2 	bl	80038ac <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff f99a 	bl	8002cb8 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e099      	b.n	8003ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b0:	e00f      	b.n	80039d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b2:	f7ff f981 	bl	8002cb8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d908      	bls.n	80039d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e078      	b.n	8003ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e8      	bne.n	80039b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_DMA_Init+0x158>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d107      	bne.n	8003a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4313      	orrs	r3, r2
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0307 	bic.w	r3, r3, #7
 8003a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d117      	bne.n	8003a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb0f 	bl	800409c <DMA_CheckFifoParam>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a92:	2301      	movs	r3, #1
 8003a94:	e016      	b.n	8003ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fac6 	bl	8004030 <DMA_CalcBaseAndBitshift>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	223f      	movs	r2, #63	; 0x3f
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	f010803f 	.word	0xf010803f

08003ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_DMA_Start_IT+0x26>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e040      	b.n	8003b78 <HAL_DMA_Start_IT+0xa8>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d12f      	bne.n	8003b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa58 	bl	8003fd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0216 	orr.w	r2, r2, #22
 8003b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0208 	orr.w	r2, r2, #8
 8003b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e005      	b.n	8003b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
 8003b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b8e:	f7ff f893 	bl	8002cb8 <HAL_GetTick>
 8003b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e052      	b.n	8003c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0216 	bic.w	r2, r2, #22
 8003bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <HAL_DMA_Abort+0x62>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0208 	bic.w	r2, r2, #8
 8003bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c02:	e013      	b.n	8003c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c04:	f7ff f858 	bl	8002cb8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d90c      	bls.n	8003c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e015      	b.n	8003c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e4      	bne.n	8003c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	223f      	movs	r2, #63	; 0x3f
 8003c40:	409a      	lsls	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d004      	beq.n	8003c7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00c      	b.n	8003c98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2205      	movs	r2, #5
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cb0:	4b8e      	ldr	r3, [pc, #568]	; (8003eec <HAL_DMA_IRQHandler+0x248>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	; (8003ef0 <HAL_DMA_IRQHandler+0x24c>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	2208      	movs	r2, #8
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01a      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0204 	bic.w	r2, r2, #4
 8003cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	2201      	movs	r2, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	2201      	movs	r2, #1
 8003d34:	409a      	lsls	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f043 0202 	orr.w	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2204      	movs	r2, #4
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2210      	movs	r2, #16
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d043      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03c      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2210      	movs	r2, #16
 8003da0:	409a      	lsls	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d024      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
 8003dd2:	e01f      	b.n	8003e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e016      	b.n	8003e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0208 	bic.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	2220      	movs	r2, #32
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 808f 	beq.w	8003f44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8087 	beq.w	8003f44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d136      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0216 	bic.w	r2, r2, #22
 8003e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x1da>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0208 	bic.w	r2, r2, #8
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	223f      	movs	r2, #63	; 0x3f
 8003e94:	409a      	lsls	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d07e      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
        }
        return;
 8003eba:	e079      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01d      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
 8003ee8:	e02c      	b.n	8003f44 <HAL_DMA_IRQHandler+0x2a0>
 8003eea:	bf00      	nop
 8003eec:	2000000c 	.word	0x2000000c
 8003ef0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e01e      	b.n	8003f44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0210 	bic.w	r2, r2, #16
 8003f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d032      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d307      	bcc.n	8003f8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f2      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x2cc>
 8003f8a:	e000      	b.n	8003f8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
 8003fae:	e000      	b.n	8003fb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fb0:	bf00      	nop
    }
  }
}
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc6:	b2db      	uxtb	r3, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d108      	bne.n	8004014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004012:	e007      	b.n	8004024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	3b10      	subs	r3, #16
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <DMA_CalcBaseAndBitshift+0x64>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <DMA_CalcBaseAndBitshift+0x68>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d909      	bls.n	8004072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
 8004070:	e007      	b.n	8004082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	aaaaaaab 	.word	0xaaaaaaab
 8004098:	0800a570 	.word	0x0800a570

0800409c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11f      	bne.n	80040f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d856      	bhi.n	800416a <DMA_CheckFifoParam+0xce>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <DMA_CheckFifoParam+0x28>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e7 	.word	0x080040e7
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	0800416b 	.word	0x0800416b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d046      	beq.n	800416e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e043      	b.n	800416e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ee:	d140      	bne.n	8004172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e03d      	b.n	8004172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fe:	d121      	bne.n	8004144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d837      	bhi.n	8004176 <DMA_CheckFifoParam+0xda>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x70>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004123 	.word	0x08004123
 8004114:	0800411d 	.word	0x0800411d
 8004118:	08004135 	.word	0x08004135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e030      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d025      	beq.n	800417a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e022      	b.n	800417a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413c:	d11f      	bne.n	800417e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004142:	e01c      	b.n	800417e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d903      	bls.n	8004152 <DMA_CheckFifoParam+0xb6>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d003      	beq.n	8004158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004150:	e018      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e015      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e00b      	b.n	8004182 <DMA_CheckFifoParam+0xe6>
      break;
 800416a:	bf00      	nop
 800416c:	e00a      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e008      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e006      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;   
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
    }
  } 
  
  return status; 
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e159      	b.n	8004464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041b0:	2201      	movs	r2, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	f040 8148 	bne.w	800445e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d005      	beq.n	80041e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d130      	bne.n	8004248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800421c:	2201      	movs	r2, #1
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 0201 	and.w	r2, r3, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b03      	cmp	r3, #3
 8004252:	d017      	beq.n	8004284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d123      	bne.n	80042d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3208      	adds	r2, #8
 8004298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a2 	beq.w	800445e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_GPIO_Init+0x2e8>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	4a56      	ldr	r2, [pc, #344]	; (800447c <HAL_GPIO_Init+0x2e8>)
 8004324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004328:	6453      	str	r3, [r2, #68]	; 0x44
 800432a:	4b54      	ldr	r3, [pc, #336]	; (800447c <HAL_GPIO_Init+0x2e8>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004336:	4a52      	ldr	r2, [pc, #328]	; (8004480 <HAL_GPIO_Init+0x2ec>)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3302      	adds	r3, #2
 800433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a49      	ldr	r2, [pc, #292]	; (8004484 <HAL_GPIO_Init+0x2f0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d019      	beq.n	8004396 <HAL_GPIO_Init+0x202>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a48      	ldr	r2, [pc, #288]	; (8004488 <HAL_GPIO_Init+0x2f4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_GPIO_Init+0x1fe>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a47      	ldr	r2, [pc, #284]	; (800448c <HAL_GPIO_Init+0x2f8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00d      	beq.n	800438e <HAL_GPIO_Init+0x1fa>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a46      	ldr	r2, [pc, #280]	; (8004490 <HAL_GPIO_Init+0x2fc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <HAL_GPIO_Init+0x1f6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a45      	ldr	r2, [pc, #276]	; (8004494 <HAL_GPIO_Init+0x300>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_GPIO_Init+0x1f2>
 8004382:	2304      	movs	r3, #4
 8004384:	e008      	b.n	8004398 <HAL_GPIO_Init+0x204>
 8004386:	2307      	movs	r3, #7
 8004388:	e006      	b.n	8004398 <HAL_GPIO_Init+0x204>
 800438a:	2303      	movs	r3, #3
 800438c:	e004      	b.n	8004398 <HAL_GPIO_Init+0x204>
 800438e:	2302      	movs	r3, #2
 8004390:	e002      	b.n	8004398 <HAL_GPIO_Init+0x204>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_GPIO_Init+0x204>
 8004396:	2300      	movs	r3, #0
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	f002 0203 	and.w	r2, r2, #3
 800439e:	0092      	lsls	r2, r2, #2
 80043a0:	4093      	lsls	r3, r2
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043a8:	4935      	ldr	r1, [pc, #212]	; (8004480 <HAL_GPIO_Init+0x2ec>)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_GPIO_Init+0x304>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <HAL_GPIO_Init+0x304>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_GPIO_Init+0x304>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <HAL_GPIO_Init+0x304>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_GPIO_Init+0x304>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_GPIO_Init+0x304>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_GPIO_Init+0x304>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <HAL_GPIO_Init+0x304>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	f67f aea2 	bls.w	80041b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	40013800 	.word	0x40013800
 8004484:	40020000 	.word	0x40020000
 8004488:	40020400 	.word	0x40020400
 800448c:	40020800 	.word	0x40020800
 8004490:	40020c00 	.word	0x40020c00
 8004494:	40021000 	.word	0x40021000
 8004498:	40013c00 	.word	0x40013c00

0800449c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
 80044a8:	4613      	mov	r3, r2
 80044aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044ac:	787b      	ldrb	r3, [r7, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b8:	e003      	b.n	80044c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ba:	887b      	ldrh	r3, [r7, #2]
 80044bc:	041a      	lsls	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e12b      	b.n	800473a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe f8d4 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004534:	f002 fbcc 	bl	8006cd0 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a81      	ldr	r2, [pc, #516]	; (8004744 <HAL_I2C_Init+0x274>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d807      	bhi.n	8004554 <HAL_I2C_Init+0x84>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_I2C_Init+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	bf94      	ite	ls
 800454c:	2301      	movls	r3, #1
 800454e:	2300      	movhi	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e006      	b.n	8004562 <HAL_I2C_Init+0x92>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a7d      	ldr	r2, [pc, #500]	; (800474c <HAL_I2C_Init+0x27c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0e7      	b.n	800473a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a78      	ldr	r2, [pc, #480]	; (8004750 <HAL_I2C_Init+0x280>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a6a      	ldr	r2, [pc, #424]	; (8004744 <HAL_I2C_Init+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <HAL_I2C_Init+0xd4>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	e009      	b.n	80045b8 <HAL_I2C_Init+0xe8>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	4a69      	ldr	r2, [pc, #420]	; (8004754 <HAL_I2C_Init+0x284>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	495c      	ldr	r1, [pc, #368]	; (8004744 <HAL_I2C_Init+0x274>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d819      	bhi.n	800460c <HAL_I2C_Init+0x13c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e59      	subs	r1, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045ec:	400b      	ands	r3, r1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_I2C_Init+0x138>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	e051      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004608:	2304      	movs	r3, #4
 800460a:	e04f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d111      	bne.n	8004638 <HAL_I2C_Init+0x168>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e012      	b.n	800465e <HAL_I2C_Init+0x18e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	0099      	lsls	r1, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Init+0x196>
 8004662:	2301      	movs	r3, #1
 8004664:	e022      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_I2C_Init+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1e58      	subs	r0, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	440b      	add	r3, r1
 800467c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6911      	ldr	r1, [r2, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	000186a0 	.word	0x000186a0
 8004748:	001e847f 	.word	0x001e847f
 800474c:	003d08ff 	.word	0x003d08ff
 8004750:	431bde83 	.word	0x431bde83
 8004754:	10624dd3 	.word	0x10624dd3

08004758 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b20      	cmp	r3, #32
 8004780:	f040 808e 	bne.w	80048a0 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004784:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_I2C_Mem_Write_IT+0x158>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	4a4a      	ldr	r2, [pc, #296]	; (80048b4 <HAL_I2C_Mem_Write_IT+0x15c>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	0a1a      	lsrs	r2, r3, #8
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009a      	lsls	r2, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e064      	b.n	80048a2 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d0db      	beq.n	800479e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2C_Mem_Write_IT+0x9c>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e056      	b.n	80048a2 <HAL_I2C_Mem_Write_IT+0x14a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d007      	beq.n	800481a <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004828:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2221      	movs	r2, #33	; 0x21
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_I2C_Mem_Write_IT+0x160>)
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800485c:	897a      	ldrh	r2, [r7, #10]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004862:	893a      	ldrh	r2, [r7, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004882:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800489a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c
 80048b4:	14f8b589 	.word	0x14f8b589
 80048b8:	ffff0000 	.word	0xffff0000

080048bc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	460b      	mov	r3, r1
 80048d0:	813b      	strh	r3, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	f040 809a 	bne.w	8004a1c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80048e8:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_I2C_Mem_Read_IT+0x170>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	4a50      	ldr	r2, [pc, #320]	; (8004a30 <HAL_I2C_Mem_Read_IT+0x174>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	0a1a      	lsrs	r2, r3, #8
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3b01      	subs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e070      	b.n	8004a1e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d0db      	beq.n	8004902 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_I2C_Mem_Read_IT+0x9c>
 8004954:	2302      	movs	r3, #2
 8004956:	e062      	b.n	8004a1e <HAL_I2C_Mem_Read_IT+0x162>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d007      	beq.n	800497e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2222      	movs	r2, #34	; 0x22
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <HAL_I2C_Mem_Read_IT+0x178>)
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80049c0:	897a      	ldrh	r2, [r7, #10]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80049c6:	893a      	ldrh	r2, [r7, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a16:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	14f8b589 	.word	0x14f8b589
 8004a34:	ffff0000 	.word	0xffff0000

08004a38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d003      	beq.n	8004a70 <HAL_I2C_EV_IRQHandler+0x38>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	f040 80c1 	bne.w	8004bf2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a90:	d003      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x62>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a98:	d101      	bne.n	8004a9e <HAL_I2C_EV_IRQHandler+0x66>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x68>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f000 8132 	beq.w	8004d0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_I2C_EV_IRQHandler+0x92>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	0a5b      	lsrs	r3, r3, #9
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f001 fc7b 	bl	80063b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd83 	bl	80055ce <I2C_Master_SB>
 8004ac8:	e092      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	08db      	lsrs	r3, r3, #3
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0xb2>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	0a5b      	lsrs	r3, r3, #9
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fdf9 	bl	80056da <I2C_Master_ADD10>
 8004ae8:	e082      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0xd2>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a5b      	lsrs	r3, r3, #9
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fe13 	bl	800572e <I2C_Master_ADDR>
 8004b08:	e072      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	089b      	lsrs	r3, r3, #2
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03b      	beq.n	8004b8e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b24:	f000 80f3 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	09db      	lsrs	r3, r3, #7
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00f      	beq.n	8004b54 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9f3 	bl	8004f38 <I2C_MasterTransmit_TXE>
 8004b52:	e04d      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	089b      	lsrs	r3, r3, #2
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80d6 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0a5b      	lsrs	r3, r3, #9
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80cf 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b70:	7bbb      	ldrb	r3, [r7, #14]
 8004b72:	2b21      	cmp	r3, #33	; 0x21
 8004b74:	d103      	bne.n	8004b7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa7a 	bl	8005070 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b7c:	e0c7      	b.n	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	f040 80c4 	bne.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fae8 	bl	800515c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8c:	e0bf      	b.n	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	f000 80b7 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <HAL_I2C_EV_IRQHandler+0x194>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_I2C_EV_IRQHandler+0x194>
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb5d 	bl	8005284 <I2C_MasterReceive_RXNE>
 8004bca:	e011      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809a 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	0a5b      	lsrs	r3, r3, #9
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8093 	beq.w	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fc06 	bl	80053fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bee:	e08e      	b.n	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bf0:	e08d      	b.n	8004d0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e007      	b.n	8004c14 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x20e>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 ffc4 	bl	8005bcc <I2C_Slave_ADDR>
 8004c44:	e066      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_I2C_EV_IRQHandler+0x22e>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fffe 	bl	8005c60 <I2C_Slave_STOPF>
 8004c64:	e056      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	2b21      	cmp	r3, #33	; 0x21
 8004c6a:	d002      	beq.n	8004c72 <HAL_I2C_EV_IRQHandler+0x23a>
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	2b29      	cmp	r3, #41	; 0x29
 8004c70:	d125      	bne.n	8004cbe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	09db      	lsrs	r3, r3, #7
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <HAL_I2C_EV_IRQHandler+0x266>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	0a9b      	lsrs	r3, r3, #10
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_I2C_EV_IRQHandler+0x266>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 feda 	bl	8005a50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9c:	e039      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d033      	beq.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2da>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a5b      	lsrs	r3, r3, #9
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02d      	beq.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 ff07 	bl	8005aca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cbc:	e029      	b.n	8004d12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	0a9b      	lsrs	r3, r3, #10
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	089b      	lsrs	r3, r3, #2
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 ff12 	bl	8005b0c <I2C_SlaveReceive_RXNE>
 8004ce8:	e014      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 ff40 	bl	8005b88 <I2C_SlaveReceive_BTF>
 8004d08:	e004      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b08a      	sub	sp, #40	; 0x28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00e      	beq.n	8004d68 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	0a5b      	lsrs	r3, r3, #9
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <HAL_I2C_ER_IRQHandler+0x78>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	f043 0302 	orr.w	r3, r3, #2
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	0a9b      	lsrs	r3, r3, #10
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d03f      	beq.n	8004e1e <HAL_I2C_ER_IRQHandler+0x104>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d039      	beq.n	8004e1e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004daa:	7efb      	ldrb	r3, [r7, #27]
 8004dac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004dc4:	7ebb      	ldrb	r3, [r7, #26]
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d112      	bne.n	8004df0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	2b21      	cmp	r3, #33	; 0x21
 8004dd4:	d008      	beq.n	8004de8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004dd6:	7cfb      	ldrb	r3, [r7, #19]
 8004dd8:	2b29      	cmp	r3, #41	; 0x29
 8004dda:	d005      	beq.n	8004de8 <HAL_I2C_ER_IRQHandler+0xce>
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b28      	cmp	r3, #40	; 0x28
 8004de0:	d106      	bne.n	8004df0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b21      	cmp	r3, #33	; 0x21
 8004de6:	d103      	bne.n	8004df0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f001 f869 	bl	8005ec0 <I2C_Slave_AF>
 8004dee:	e016      	b.n	8004e1e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	f043 0304 	orr.w	r3, r3, #4
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e02:	7efb      	ldrb	r3, [r7, #27]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d002      	beq.n	8004e0e <HAL_I2C_ER_IRQHandler+0xf4>
 8004e08:	7efb      	ldrb	r3, [r7, #27]
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d107      	bne.n	8004e1e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	0adb      	lsrs	r3, r3, #11
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00e      	beq.n	8004e48 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 f8a0 	bl	8005fa0 <I2C_ITError>
  }
}
 8004e60:	bf00      	nop
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d150      	bne.n	8005000 <I2C_MasterTransmit_TXE+0xc8>
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b21      	cmp	r3, #33	; 0x21
 8004f62:	d14d      	bne.n	8005000 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d01d      	beq.n	8004fa6 <I2C_MasterTransmit_TXE+0x6e>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d01a      	beq.n	8004fa6 <I2C_MasterTransmit_TXE+0x6e>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f76:	d016      	beq.n	8004fa6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f86:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2211      	movs	r2, #17
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ff62 	bl	8004e68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa4:	e060      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fb4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d107      	bne.n	8004ff0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff7d 	bl	8004ee8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fee:	e03b      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff35 	bl	8004e68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ffe:	e033      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b21      	cmp	r3, #33	; 0x21
 8005004:	d005      	beq.n	8005012 <I2C_MasterTransmit_TXE+0xda>
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d12d      	bne.n	8005068 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b22      	cmp	r3, #34	; 0x22
 8005010:	d12a      	bne.n	8005068 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d108      	bne.n	800502e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800502c:	e01c      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d103      	bne.n	8005042 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88e 	bl	800515c <I2C_MemoryTransmit_TXE_BTF>
}
 8005040:	e012      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005066:	e7ff      	b.n	8005068 <I2C_MasterTransmit_TXE+0x130>
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b21      	cmp	r3, #33	; 0x21
 8005088:	d164      	bne.n	8005154 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d012      	beq.n	80050ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	781a      	ldrb	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050b8:	e04c      	b.n	8005154 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d01d      	beq.n	80050fc <I2C_MasterTransmit_BTF+0x8c>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d01a      	beq.n	80050fc <I2C_MasterTransmit_BTF+0x8c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050cc:	d016      	beq.n	80050fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2211      	movs	r2, #17
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff feb7 	bl	8004e68 <HAL_I2C_MasterTxCpltCallback>
}
 80050fa:	e02b      	b.n	8005154 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d107      	bne.n	8005146 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fed2 	bl	8004ee8 <HAL_I2C_MemTxCpltCallback>
}
 8005144:	e006      	b.n	8005154 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fe8a 	bl	8004e68 <HAL_I2C_MasterTxCpltCallback>
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10b      	bne.n	8005194 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005192:	e073      	b.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005198:	b29b      	uxth	r3, r3
 800519a:	121b      	asrs	r3, r3, #8
 800519c:	b2da      	uxtb	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051ae:	e065      	b.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d10b      	bne.n	80051d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051ce:	e055      	b.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d151      	bne.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b22      	cmp	r3, #34	; 0x22
 80051dc:	d10d      	bne.n	80051fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f8:	e040      	b.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b21      	cmp	r3, #33	; 0x21
 8005208:	d112      	bne.n	8005230 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800522e:	e025      	b.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d120      	bne.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b21      	cmp	r3, #33	; 0x21
 800523e:	d11d      	bne.n	800527c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800524e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fe36 	bl	8004ee8 <HAL_I2C_MemTxCpltCallback>
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b22      	cmp	r3, #34	; 0x22
 8005296:	f040 80ac 	bne.w	80053f2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d921      	bls.n	80052ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	f040 808c 	bne.w	80053f2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80052ea:	e082      	b.n	80053f2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d075      	beq.n	80053e0 <I2C_MasterReceive_RXNE+0x15c>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d002      	beq.n	8005300 <I2C_MasterReceive_RXNE+0x7c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d16f      	bne.n	80053e0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 f827 	bl	8006354 <I2C_WaitOnSTOPRequestThroughIT>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d142      	bne.n	8005392 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800532a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d10a      	bne.n	800537c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fdc1 	bl	8004efc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800537a:	e03a      	b.n	80053f2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2212      	movs	r2, #18
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fd76 	bl	8004e7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005390:	e02f      	b.n	80053f2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fd99 	bl	8004f10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053de:	e008      	b.n	80053f2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ee:	605a      	str	r2, [r3, #4]
}
 80053f0:	e7ff      	b.n	80053f2 <I2C_MasterReceive_RXNE+0x16e>
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b04      	cmp	r3, #4
 8005410:	d11b      	bne.n	800544a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005448:	e0bd      	b.n	80055c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d129      	bne.n	80054a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005462:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d00a      	beq.n	8005480 <I2C_MasterReceive_BTF+0x86>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d007      	beq.n	8005480 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054a6:	e08e      	b.n	80055c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d176      	bne.n	80055a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d002      	beq.n	80054be <I2C_MasterReceive_BTF+0xc4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d108      	bne.n	80054d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e019      	b.n	8005504 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d002      	beq.n	80054dc <I2C_MasterReceive_BTF+0xe2>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d108      	bne.n	80054ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e00a      	b.n	8005504 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d007      	beq.n	8005504 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005502:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800555e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d10a      	bne.n	800558a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fcba 	bl	8004efc <HAL_I2C_MemRxCpltCallback>
}
 8005588:	e01d      	b.n	80055c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2212      	movs	r2, #18
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fc6f 	bl	8004e7c <HAL_I2C_MasterRxCpltCallback>
}
 800559e:	e012      	b.n	80055c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d117      	bne.n	8005612 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055fc:	e067      	b.n	80056ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	b2da      	uxtb	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]
}
 8005610:	e05d      	b.n	80056ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561a:	d133      	bne.n	8005684 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b21      	cmp	r3, #33	; 0x21
 8005626:	d109      	bne.n	800563c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005638:	611a      	str	r2, [r3, #16]
 800563a:	e008      	b.n	800564e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <I2C_Master_SB+0x92>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d108      	bne.n	8005672 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	2b00      	cmp	r3, #0
 8005666:	d032      	beq.n	80056ce <I2C_Master_SB+0x100>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d02d      	beq.n	80056ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005680:	605a      	str	r2, [r3, #4]
}
 8005682:	e024      	b.n	80056ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10e      	bne.n	80056aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	b29b      	uxth	r3, r3
 8005692:	11db      	asrs	r3, r3, #7
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0306 	and.w	r3, r3, #6
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f063 030f 	orn	r3, r3, #15
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
}
 80056a8:	e011      	b.n	80056ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10d      	bne.n	80056ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	11db      	asrs	r3, r3, #7
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 0306 	and.w	r3, r3, #6
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f063 030e 	orn	r3, r3, #14
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	611a      	str	r2, [r3, #16]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <I2C_Master_ADD10+0x26>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <I2C_Master_ADD10+0x48>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005720:	605a      	str	r2, [r3, #4]
  }
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800572e:	b480      	push	{r7}
 8005730:	b091      	sub	sp, #68	; 0x44
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b22      	cmp	r3, #34	; 0x22
 8005756:	f040 8169 	bne.w	8005a2c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10f      	bne.n	8005782 <I2C_Master_ADDR+0x54>
 8005762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10b      	bne.n	8005782 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576a:	2300      	movs	r3, #0
 800576c:	633b      	str	r3, [r7, #48]	; 0x30
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	633b      	str	r3, [r7, #48]	; 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	633b      	str	r3, [r7, #48]	; 0x30
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	e160      	b.n	8005a44 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11d      	bne.n	80057c6 <I2C_Master_ADDR+0x98>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005792:	d118      	bne.n	80057c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	651a      	str	r2, [r3, #80]	; 0x50
 80057c4:	e13e      	b.n	8005a44 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d113      	bne.n	80057f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e115      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f040 808a 	bne.w	8005918 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800580a:	d137      	bne.n	800587c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582a:	d113      	bne.n	8005854 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583c:	2300      	movs	r3, #0
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	e0e7      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005854:	2300      	movs	r3, #0
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	623b      	str	r3, [r7, #32]
 8005868:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e0d3      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b08      	cmp	r3, #8
 8005880:	d02e      	beq.n	80058e0 <I2C_Master_ADDR+0x1b2>
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	2b20      	cmp	r3, #32
 8005886:	d02b      	beq.n	80058e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	2b12      	cmp	r3, #18
 800588c:	d102      	bne.n	8005894 <I2C_Master_ADDR+0x166>
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b01      	cmp	r3, #1
 8005892:	d125      	bne.n	80058e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2b04      	cmp	r3, #4
 8005898:	d00e      	beq.n	80058b8 <I2C_Master_ADDR+0x18a>
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2b02      	cmp	r3, #2
 800589e:	d00b      	beq.n	80058b8 <I2C_Master_ADDR+0x18a>
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d008      	beq.n	80058b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e007      	b.n	80058c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	e0a1      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e085      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d14d      	bne.n	80059be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	2b04      	cmp	r3, #4
 8005926:	d016      	beq.n	8005956 <I2C_Master_ADDR+0x228>
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b02      	cmp	r3, #2
 800592c:	d013      	beq.n	8005956 <I2C_Master_ADDR+0x228>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	2b10      	cmp	r3, #16
 8005932:	d010      	beq.n	8005956 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005942:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e007      	b.n	8005966 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005964:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005974:	d117      	bne.n	80059a6 <I2C_Master_ADDR+0x278>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800597c:	d00b      	beq.n	8005996 <I2C_Master_ADDR+0x268>
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2b01      	cmp	r3, #1
 8005982:	d008      	beq.n	8005996 <I2C_Master_ADDR+0x268>
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	2b08      	cmp	r3, #8
 8005988:	d005      	beq.n	8005996 <I2C_Master_ADDR+0x268>
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b10      	cmp	r3, #16
 800598e:	d002      	beq.n	8005996 <I2C_Master_ADDR+0x268>
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	2b20      	cmp	r3, #32
 8005994:	d107      	bne.n	80059a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	e032      	b.n	8005a24 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059dc:	d117      	bne.n	8005a0e <I2C_Master_ADDR+0x2e0>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059e4:	d00b      	beq.n	80059fe <I2C_Master_ADDR+0x2d0>
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d008      	beq.n	80059fe <I2C_Master_ADDR+0x2d0>
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d005      	beq.n	80059fe <I2C_Master_ADDR+0x2d0>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d002      	beq.n	80059fe <I2C_Master_ADDR+0x2d0>
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d107      	bne.n	8005a0e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a2a:	e00b      	b.n	8005a44 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	e7ff      	b.n	8005a44 <I2C_Master_ADDR+0x316>
 8005a44:	bf00      	nop
 8005a46:	3744      	adds	r7, #68	; 0x44
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d02b      	beq.n	8005ac2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	781a      	ldrb	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <I2C_SlaveTransmit_TXE+0x72>
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b29      	cmp	r3, #41	; 0x29
 8005a9c:	d111      	bne.n	8005ac2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2228      	movs	r2, #40	; 0x28
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff f9e7 	bl	8004e90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02c      	beq.n	8005b80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d114      	bne.n	8005b80 <I2C_SlaveReceive_RXNE+0x74>
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d111      	bne.n	8005b80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2222      	movs	r2, #34	; 0x22
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2228      	movs	r2, #40	; 0x28
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff f992 	bl	8004ea4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d012      	beq.n	8005bc0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005be6:	2b28      	cmp	r3, #40	; 0x28
 8005be8:	d127      	bne.n	8005c3a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	81bb      	strh	r3, [r7, #12]
 8005c1c:	e002      	b.n	8005c24 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c2c:	89ba      	ldrh	r2, [r7, #12]
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff f940 	bl	8004eb8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c38:	e00e      	b.n	8005c58 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d172      	bne.n	8005da4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b22      	cmp	r3, #34	; 0x22
 8005cc2:	d002      	beq.n	8005cca <I2C_Slave_STOPF+0x6a>
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc8:	d135      	bne.n	8005d36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f043 0204 	orr.w	r2, r3, #4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe f958 	bl	8003fb8 <HAL_DMA_GetState>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d049      	beq.n	8005da2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	4a69      	ldr	r2, [pc, #420]	; (8005eb8 <I2C_Slave_STOPF+0x258>)
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd ffa0 	bl	8003c60 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d03d      	beq.n	8005da2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d34:	e035      	b.n	8005da2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe f922 	bl	8003fb8 <HAL_DMA_GetState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d014      	beq.n	8005da4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	4a4e      	ldr	r2, [pc, #312]	; (8005eb8 <I2C_Slave_STOPF+0x258>)
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd ff6a 	bl	8003c60 <HAL_DMA_Abort_IT>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d008      	beq.n	8005da4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	e000      	b.n	8005da4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005da2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d03e      	beq.n	8005e2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d112      	bne.n	8005de2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d112      	bne.n	8005e16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f043 0204 	orr.w	r2, r3, #4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8b3 	bl	8005fa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e3a:	e039      	b.n	8005eb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e40:	d109      	bne.n	8005e56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2228      	movs	r2, #40	; 0x28
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff f827 	bl	8004ea4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b28      	cmp	r3, #40	; 0x28
 8005e60:	d111      	bne.n	8005e86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <I2C_Slave_STOPF+0x25c>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff f828 	bl	8004ed4 <HAL_I2C_ListenCpltCallback>
}
 8005e84:	e014      	b.n	8005eb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	2b22      	cmp	r3, #34	; 0x22
 8005e8c:	d002      	beq.n	8005e94 <I2C_Slave_STOPF+0x234>
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b22      	cmp	r3, #34	; 0x22
 8005e92:	d10d      	bne.n	8005eb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fe fffa 	bl	8004ea4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	08006205 	.word	0x08006205
 8005ebc:	ffff0000 	.word	0xffff0000

08005ec0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d002      	beq.n	8005ee2 <I2C_Slave_AF+0x22>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d129      	bne.n	8005f36 <I2C_Slave_AF+0x76>
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b28      	cmp	r3, #40	; 0x28
 8005ee6:	d126      	bne.n	8005f36 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <I2C_Slave_AF+0xdc>)
 8005eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005efc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f06:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f16:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fe ffd0 	bl	8004ed4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f34:	e02e      	b.n	8005f94 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b21      	cmp	r3, #33	; 0x21
 8005f3a:	d126      	bne.n	8005f8a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <I2C_Slave_AF+0xdc>)
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2221      	movs	r2, #33	; 0x21
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f66:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f70:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f80:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fe ff84 	bl	8004e90 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f88:	e004      	b.n	8005f94 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f92:	615a      	str	r2, [r3, #20]
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	ffff0000 	.word	0xffff0000

08005fa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d002      	beq.n	8005fc4 <I2C_ITError+0x24>
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d10a      	bne.n	8005fda <I2C_ITError+0x3a>
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b22      	cmp	r3, #34	; 0x22
 8005fc8:	d107      	bne.n	8005fda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fe0:	2b28      	cmp	r3, #40	; 0x28
 8005fe2:	d107      	bne.n	8005ff4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2228      	movs	r2, #40	; 0x28
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ff2:	e015      	b.n	8006020 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006002:	d00a      	beq.n	800601a <I2C_ITError+0x7a>
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b60      	cmp	r3, #96	; 0x60
 8006008:	d007      	beq.n	800601a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d162      	bne.n	80060f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	d020      	beq.n	8006090 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	4a6a      	ldr	r2, [pc, #424]	; (80061fc <I2C_ITError+0x25c>)
 8006054:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd fe00 	bl	8003c60 <HAL_DMA_Abort_IT>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8089 	beq.w	800617a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800608a:	4610      	mov	r0, r2
 800608c:	4798      	blx	r3
 800608e:	e074      	b.n	800617a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	4a59      	ldr	r2, [pc, #356]	; (80061fc <I2C_ITError+0x25c>)
 8006096:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd fddf 	bl	8003c60 <HAL_DMA_Abort_IT>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d068      	beq.n	800617a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d10b      	bne.n	80060ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
 80060f4:	e041      	b.n	800617a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b60      	cmp	r3, #96	; 0x60
 8006100:	d125      	bne.n	800614e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d10b      	bne.n	8006136 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fe feec 	bl	8004f24 <HAL_I2C_AbortCpltCallback>
 800614c:	e015      	b.n	800617a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d10b      	bne.n	8006174 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fe fecb 	bl	8004f10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d113      	bne.n	80061f4 <I2C_ITError+0x254>
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b28      	cmp	r3, #40	; 0x28
 80061d0:	d110      	bne.n	80061f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <I2C_ITError+0x260>)
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fe fe70 	bl	8004ed4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	08006205 	.word	0x08006205
 8006200:	ffff0000 	.word	0xffff0000

08006204 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800621e:	4b4b      	ldr	r3, [pc, #300]	; (800634c <I2C_DMAAbort+0x148>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <I2C_DMAAbort+0x14c>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	0a1a      	lsrs	r2, r3, #8
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	00da      	lsls	r2, r3, #3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800624a:	e00a      	b.n	8006262 <I2C_DMAAbort+0x5e>
    }
    count--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b01      	subs	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d0ea      	beq.n	8006238 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	2200      	movs	r2, #0
 8006270:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	2200      	movs	r2, #0
 8006280:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006290:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	2200      	movs	r2, #0
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d10e      	bne.n	80062f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062ea:	6978      	ldr	r0, [r7, #20]
 80062ec:	f7fe fe1a 	bl	8004f24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062f0:	e027      	b.n	8006342 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062f8:	2b28      	cmp	r3, #40	; 0x28
 80062fa:	d117      	bne.n	800632c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800631a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2228      	movs	r2, #40	; 0x28
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800632a:	e007      	b.n	800633c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f7fe fde7 	bl	8004f10 <HAL_I2C_ErrorCallback>
}
 8006342:	bf00      	nop
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	2000000c 	.word	0x2000000c
 8006350:	14f8b589 	.word	0x14f8b589

08006354 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	08db      	lsrs	r3, r3, #3
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	0a1a      	lsrs	r2, r3, #8
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b01      	subs	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e008      	b.n	80063a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d0e9      	beq.n	8006376 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	14f8b589 	.word	0x14f8b589

080063b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063c8:	d103      	bne.n	80063d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063d0:	e007      	b.n	80063e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063da:	d102      	bne.n	80063e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2208      	movs	r2, #8
 80063e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e267      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d075      	beq.n	80064fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640e:	4b88      	ldr	r3, [pc, #544]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b04      	cmp	r3, #4
 8006418:	d00c      	beq.n	8006434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800641a:	4b85      	ldr	r3, [pc, #532]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006422:	2b08      	cmp	r3, #8
 8006424:	d112      	bne.n	800644c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006426:	4b82      	ldr	r3, [pc, #520]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006432:	d10b      	bne.n	800644c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006434:	4b7e      	ldr	r3, [pc, #504]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d05b      	beq.n	80064f8 <HAL_RCC_OscConfig+0x108>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d157      	bne.n	80064f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e242      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006454:	d106      	bne.n	8006464 <HAL_RCC_OscConfig+0x74>
 8006456:	4b76      	ldr	r3, [pc, #472]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a75      	ldr	r2, [pc, #468]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e01d      	b.n	80064a0 <HAL_RCC_OscConfig+0xb0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x98>
 800646e:	4b70      	ldr	r3, [pc, #448]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a6f      	ldr	r2, [pc, #444]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b6d      	ldr	r3, [pc, #436]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a6c      	ldr	r2, [pc, #432]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e00b      	b.n	80064a0 <HAL_RCC_OscConfig+0xb0>
 8006488:	4b69      	ldr	r3, [pc, #420]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a68      	ldr	r2, [pc, #416]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800648e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4b66      	ldr	r3, [pc, #408]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a65      	ldr	r2, [pc, #404]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800649a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d013      	beq.n	80064d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a8:	f7fc fc06 	bl	8002cb8 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064b0:	f7fc fc02 	bl	8002cb8 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b64      	cmp	r3, #100	; 0x64
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e207      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c2:	4b5b      	ldr	r3, [pc, #364]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0xc0>
 80064ce:	e014      	b.n	80064fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d0:	f7fc fbf2 	bl	8002cb8 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d8:	f7fc fbee 	bl	8002cb8 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	; 0x64
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e1f3      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ea:	4b51      	ldr	r3, [pc, #324]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <HAL_RCC_OscConfig+0xe8>
 80064f6:	e000      	b.n	80064fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d063      	beq.n	80065ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006506:	4b4a      	ldr	r3, [pc, #296]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 030c 	and.w	r3, r3, #12
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800651a:	2b08      	cmp	r3, #8
 800651c:	d11c      	bne.n	8006558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800651e:	4b44      	ldr	r3, [pc, #272]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d116      	bne.n	8006558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800652a:	4b41      	ldr	r3, [pc, #260]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_RCC_OscConfig+0x152>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d001      	beq.n	8006542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e1c7      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006542:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4937      	ldr	r1, [pc, #220]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006552:	4313      	orrs	r3, r2
 8006554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006556:	e03a      	b.n	80065ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006560:	4b34      	ldr	r3, [pc, #208]	; (8006634 <HAL_RCC_OscConfig+0x244>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fc fba7 	bl	8002cb8 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800656e:	f7fc fba3 	bl	8002cb8 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e1a8      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006580:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658c:	4b28      	ldr	r3, [pc, #160]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4925      	ldr	r1, [pc, #148]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]
 80065a0:	e015      	b.n	80065ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <HAL_RCC_OscConfig+0x244>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fc fb86 	bl	8002cb8 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b0:	f7fc fb82 	bl	8002cb8 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e187      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c2:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d036      	beq.n	8006648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065e2:	4b15      	ldr	r3, [pc, #84]	; (8006638 <HAL_RCC_OscConfig+0x248>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fc fb66 	bl	8002cb8 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fc fb62 	bl	8002cb8 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e167      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <HAL_RCC_OscConfig+0x240>)
 8006604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x200>
 800660e:	e01b      	b.n	8006648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <HAL_RCC_OscConfig+0x248>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fc fb4f 	bl	8002cb8 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800661c:	e00e      	b.n	800663c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800661e:	f7fc fb4b 	bl	8002cb8 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d907      	bls.n	800663c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e150      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
 8006630:	40023800 	.word	0x40023800
 8006634:	42470000 	.word	0x42470000
 8006638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800663c:	4b88      	ldr	r3, [pc, #544]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800663e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ea      	bne.n	800661e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8097 	beq.w	8006784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800665a:	4b81      	ldr	r3, [pc, #516]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10f      	bne.n	8006686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	4b7d      	ldr	r3, [pc, #500]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	4a7c      	ldr	r2, [pc, #496]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006674:	6413      	str	r3, [r2, #64]	; 0x40
 8006676:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006686:	4b77      	ldr	r3, [pc, #476]	; (8006864 <HAL_RCC_OscConfig+0x474>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d118      	bne.n	80066c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006692:	4b74      	ldr	r3, [pc, #464]	; (8006864 <HAL_RCC_OscConfig+0x474>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a73      	ldr	r2, [pc, #460]	; (8006864 <HAL_RCC_OscConfig+0x474>)
 8006698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800669e:	f7fc fb0b 	bl	8002cb8 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a6:	f7fc fb07 	bl	8002cb8 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e10c      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b8:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <HAL_RCC_OscConfig+0x474>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d106      	bne.n	80066da <HAL_RCC_OscConfig+0x2ea>
 80066cc:	4b64      	ldr	r3, [pc, #400]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a63      	ldr	r2, [pc, #396]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
 80066d8:	e01c      	b.n	8006714 <HAL_RCC_OscConfig+0x324>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d10c      	bne.n	80066fc <HAL_RCC_OscConfig+0x30c>
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a5e      	ldr	r2, [pc, #376]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066e8:	f043 0304 	orr.w	r3, r3, #4
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
 80066ee:	4b5c      	ldr	r3, [pc, #368]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4a5b      	ldr	r2, [pc, #364]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	6713      	str	r3, [r2, #112]	; 0x70
 80066fa:	e00b      	b.n	8006714 <HAL_RCC_OscConfig+0x324>
 80066fc:	4b58      	ldr	r3, [pc, #352]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a57      	ldr	r2, [pc, #348]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
 8006708:	4b55      	ldr	r3, [pc, #340]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a54      	ldr	r2, [pc, #336]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800670e:	f023 0304 	bic.w	r3, r3, #4
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d015      	beq.n	8006748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671c:	f7fc facc 	bl	8002cb8 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006722:	e00a      	b.n	800673a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006724:	f7fc fac8 	bl	8002cb8 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e0cb      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673a:	4b49      	ldr	r3, [pc, #292]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0ee      	beq.n	8006724 <HAL_RCC_OscConfig+0x334>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006748:	f7fc fab6 	bl	8002cb8 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800674e:	e00a      	b.n	8006766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006750:	f7fc fab2 	bl	8002cb8 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	; 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e0b5      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006766:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ee      	bne.n	8006750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	4a38      	ldr	r2, [pc, #224]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800677e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a1 	beq.w	80068d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800678e:	4b34      	ldr	r3, [pc, #208]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	2b08      	cmp	r3, #8
 8006798:	d05c      	beq.n	8006854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d141      	bne.n	8006826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a2:	4b31      	ldr	r3, [pc, #196]	; (8006868 <HAL_RCC_OscConfig+0x478>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fc fa86 	bl	8002cb8 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b0:	f7fc fa82 	bl	8002cb8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e087      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c2:	4b27      	ldr	r3, [pc, #156]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	019b      	lsls	r3, r3, #6
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	3b01      	subs	r3, #1
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	061b      	lsls	r3, r3, #24
 80067f2:	491b      	ldr	r1, [pc, #108]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <HAL_RCC_OscConfig+0x478>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fe:	f7fc fa5b 	bl	8002cb8 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006806:	f7fc fa57 	bl	8002cb8 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e05c      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x416>
 8006824:	e054      	b.n	80068d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_RCC_OscConfig+0x478>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc fa44 	bl	8002cb8 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006834:	f7fc fa40 	bl	8002cb8 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e045      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCC_OscConfig+0x470>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x444>
 8006852:	e03d      	b.n	80068d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d107      	bne.n	800686c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e038      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
 8006860:	40023800 	.word	0x40023800
 8006864:	40007000 	.word	0x40007000
 8006868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800686c:	4b1b      	ldr	r3, [pc, #108]	; (80068dc <HAL_RCC_OscConfig+0x4ec>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d028      	beq.n	80068cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d121      	bne.n	80068cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d11a      	bne.n	80068cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800689c:	4013      	ands	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d111      	bne.n	80068cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	3b01      	subs	r3, #1
 80068b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d107      	bne.n	80068cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40023800 	.word	0x40023800

080068e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0cc      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068f4:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d90c      	bls.n	800691c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006902:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0b8      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d020      	beq.n	800696a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006934:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a58      	ldr	r2, [pc, #352]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800693e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800694c:	4b53      	ldr	r3, [pc, #332]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a52      	ldr	r2, [pc, #328]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006958:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	494d      	ldr	r1, [pc, #308]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d044      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d107      	bne.n	800698e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	4b47      	ldr	r3, [pc, #284]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d119      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e07f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d003      	beq.n	800699e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699a:	2b03      	cmp	r3, #3
 800699c:	d107      	bne.n	80069ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e06f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ae:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e067      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069be:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 0203 	bic.w	r2, r3, #3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4934      	ldr	r1, [pc, #208]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d0:	f7fc f972 	bl	8002cb8 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d8:	f7fc f96e 	bl	8002cb8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e04f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 020c 	and.w	r2, r3, #12
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1eb      	bne.n	80069d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d20c      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e032      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a34:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4916      	ldr	r1, [pc, #88]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a52:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	490e      	ldr	r1, [pc, #56]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a66:	f000 f821 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	490a      	ldr	r1, [pc, #40]	; (8006aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a78:	5ccb      	ldrb	r3, [r1, r3]
 8006a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fc f8d2 	bl	8002c30 <HAL_InitTick>

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40023c00 	.word	0x40023c00
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	0800a558 	.word	0x0800a558
 8006aa4:	2000000c 	.word	0x2000000c
 8006aa8:	20000010 	.word	0x20000010

08006aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab0:	b094      	sub	sp, #80	; 0x50
 8006ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab8:	2300      	movs	r3, #0
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006abc:	2300      	movs	r3, #0
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac4:	4b79      	ldr	r3, [pc, #484]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d00d      	beq.n	8006aec <HAL_RCC_GetSysClockFreq+0x40>
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	f200 80e1 	bhi.w	8006c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d003      	beq.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ade:	e0db      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ae0:	4b73      	ldr	r3, [pc, #460]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ae4:	e0db      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ae6:	4b73      	ldr	r3, [pc, #460]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aea:	e0d8      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aec:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006af6:	4b6d      	ldr	r3, [pc, #436]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d063      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b02:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	2200      	movs	r2, #0
 8006b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b1e:	4622      	mov	r2, r4
 8006b20:	462b      	mov	r3, r5
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f04f 0100 	mov.w	r1, #0
 8006b2a:	0159      	lsls	r1, r3, #5
 8006b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b30:	0150      	lsls	r0, r2, #5
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4621      	mov	r1, r4
 8006b38:	1a51      	subs	r1, r2, r1
 8006b3a:	6139      	str	r1, [r7, #16]
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b50:	4659      	mov	r1, fp
 8006b52:	018b      	lsls	r3, r1, #6
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	018a      	lsls	r2, r1, #6
 8006b5e:	4651      	mov	r1, sl
 8006b60:	ebb2 0801 	subs.w	r8, r2, r1
 8006b64:	4659      	mov	r1, fp
 8006b66:	eb63 0901 	sbc.w	r9, r3, r1
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b7e:	4690      	mov	r8, r2
 8006b80:	4699      	mov	r9, r3
 8006b82:	4623      	mov	r3, r4
 8006b84:	eb18 0303 	adds.w	r3, r8, r3
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	eb49 0303 	adc.w	r3, r9, r3
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	024b      	lsls	r3, r1, #9
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ba8:	4621      	mov	r1, r4
 8006baa:	024a      	lsls	r2, r1, #9
 8006bac:	4610      	mov	r0, r2
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bbc:	f7f9 ff56 	bl	8000a6c <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc8:	e058      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bca:	4b38      	ldr	r3, [pc, #224]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	099b      	lsrs	r3, r3, #6
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bda:	623b      	str	r3, [r7, #32]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
 8006be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	f04f 0000 	mov.w	r0, #0
 8006bec:	f04f 0100 	mov.w	r1, #0
 8006bf0:	0159      	lsls	r1, r3, #5
 8006bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bf6:	0150      	lsls	r0, r2, #5
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c02:	4649      	mov	r1, r9
 8006c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8006c20:	eb63 050b 	sbc.w	r5, r3, fp
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	00eb      	lsls	r3, r5, #3
 8006c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c32:	00e2      	lsls	r2, r4, #3
 8006c34:	4614      	mov	r4, r2
 8006c36:	461d      	mov	r5, r3
 8006c38:	4643      	mov	r3, r8
 8006c3a:	18e3      	adds	r3, r4, r3
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	464b      	mov	r3, r9
 8006c40:	eb45 0303 	adc.w	r3, r5, r3
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c52:	4629      	mov	r1, r5
 8006c54:	028b      	lsls	r3, r1, #10
 8006c56:	4621      	mov	r1, r4
 8006c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	028a      	lsls	r2, r1, #10
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c66:	2200      	movs	r2, #0
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	61fa      	str	r2, [r7, #28]
 8006c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c70:	f7f9 fefc 	bl	8000a6c <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4613      	mov	r3, r2
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	3301      	adds	r3, #1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3750      	adds	r7, #80	; 0x50
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006caa:	bf00      	nop
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	00f42400 	.word	0x00f42400
 8006cb4:	007a1200 	.word	0x007a1200

08006cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cbc:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	2000000c 	.word	0x2000000c

08006cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cd4:	f7ff fff0 	bl	8006cb8 <HAL_RCC_GetHCLKFreq>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	0a9b      	lsrs	r3, r3, #10
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	4903      	ldr	r1, [pc, #12]	; (8006cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce6:	5ccb      	ldrb	r3, [r1, r3]
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	0800a568 	.word	0x0800a568

08006cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cfc:	f7ff ffdc 	bl	8006cb8 <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	0b5b      	lsrs	r3, r3, #13
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4903      	ldr	r1, [pc, #12]	; (8006d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	0800a568 	.word	0x0800a568

08006d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e07b      	b.n	8006e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d108      	bne.n	8006d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d42:	d009      	beq.n	8006d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
 8006d4a:	e005      	b.n	8006d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fb fcee 	bl	8002754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	ea42 0103 	orr.w	r1, r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f003 0104 	and.w	r1, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0210 	and.w	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_SPI_Transmit_IT+0x20>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e06f      	b.n	8006f34 <HAL_SPI_Transmit_IT+0x100>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_SPI_Transmit_IT+0x34>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e6c:	e05d      	b.n	8006f2a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d002      	beq.n	8006e80 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e7e:	e054      	b.n	8006f2a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2203      	movs	r2, #3
 8006e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_SPI_Transmit_IT+0x10c>)
 8006ec4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ec6:	e002      	b.n	8006ece <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_SPI_Transmit_IT+0x110>)
 8006ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed6:	d10f      	bne.n	8006ef8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006f06:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d008      	beq.n	8006f28 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8006f28:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	080071cb 	.word	0x080071cb
 8006f44:	08007185 	.word	0x08007185

08006f48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10f      	bne.n	8006f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	099b      	lsrs	r3, r3, #6
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
    return;
 8006f8a:	e0d7      	b.n	800713c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_SPI_IRQHandler+0x66>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	09db      	lsrs	r3, r3, #7
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
    return;
 8006fac:	e0c6      	b.n	800713c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_SPI_IRQHandler+0x8c>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80b4 	beq.w	800713c <HAL_SPI_IRQHandler+0x1f4>
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80ad 	beq.w	800713c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	099b      	lsrs	r3, r3, #6
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d023      	beq.n	8007036 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d011      	beq.n	800701e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	f043 0204 	orr.w	r2, r3, #4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	e00b      	b.n	8007036 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
        return;
 8007034:	e082      	b.n	800713c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d014      	beq.n	800706c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	f043 0201 	orr.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	0a1b      	lsrs	r3, r3, #8
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	f043 0208 	orr.w	r2, r3, #8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007084:	2300      	movs	r3, #0
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60bb      	str	r3, [r7, #8]
 8007090:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	2b00      	cmp	r3, #0
 8007098:	d04f      	beq.n	800713a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <HAL_SPI_IRQHandler+0x17e>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d034      	beq.n	8007130 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0203 	bic.w	r2, r2, #3
 80070d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d011      	beq.n	8007102 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	4a18      	ldr	r2, [pc, #96]	; (8007144 <HAL_SPI_IRQHandler+0x1fc>)
 80070e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fc fdb8 	bl	8003c60 <HAL_DMA_Abort_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710e:	4a0d      	ldr	r2, [pc, #52]	; (8007144 <HAL_SPI_IRQHandler+0x1fc>)
 8007110:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	4618      	mov	r0, r3
 8007118:	f7fc fda2 	bl	8003c60 <HAL_DMA_Abort_IT>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800712e:	e003      	b.n	8007138 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f809 	bl	8007148 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007136:	e000      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007138:	bf00      	nop
    return;
 800713a:	bf00      	nop
  }
}
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	0800715d 	.word	0x0800715d

08007148 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff ffe6 	bl	8007148 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	7812      	ldrb	r2, [r2, #0]
 8007198:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8f1 	bl	80073a4 <SPI_CloseTx_ISR>
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	881a      	ldrh	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f8cf 	bl	80073a4 <SPI_CloseTx_ISR>
  }
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007220:	f7fb fd4a 	bl	8002cb8 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007230:	f7fb fd42 	bl	8002cb8 <HAL_GetTick>
 8007234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	015b      	lsls	r3, r3, #5
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007246:	e054      	b.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d050      	beq.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007250:	f7fb fd32 	bl	8002cb8 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	429a      	cmp	r2, r3
 800725e:	d902      	bls.n	8007266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d13d      	bne.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d111      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d004      	beq.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007292:	d107      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d10f      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e017      	b.n	8007312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d19b      	bne.n	8007248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000000c 	.word	0x2000000c

08007320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <SPI_EndRxTxTransaction+0x7c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <SPI_EndRxTxTransaction+0x80>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	0d5b      	lsrs	r3, r3, #21
 8007338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800734a:	d112      	bne.n	8007372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff ff5a 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e00f      	b.n	8007392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3b01      	subs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d0f2      	beq.n	8007372 <SPI_EndRxTxTransaction+0x52>
 800738c:	e000      	b.n	8007390 <SPI_EndRxTxTransaction+0x70>
        break;
 800738e:	bf00      	nop
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	2000000c 	.word	0x2000000c
 80073a0:	165e9f81 	.word	0x165e9f81

080073a4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80073ac:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <SPI_CloseTx_ISR+0xbc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <SPI_CloseTx_ISR+0xc0>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	0a5b      	lsrs	r3, r3, #9
 80073b8:	2264      	movs	r2, #100	; 0x64
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073c0:	f7fb fc7a 	bl	8002cb8 <HAL_GetTick>
 80073c4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d0:	f043 0220 	orr.w	r2, r3, #32
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073d8:	e009      	b.n	80073ee <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	3b01      	subs	r3, #1
 80073de:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0eb      	beq.n	80073c6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	2164      	movs	r1, #100	; 0x64
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff8c 	bl	8007320 <SPI_EndRxTxTransaction>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fe7d 	bl	8007148 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800744e:	e002      	b.n	8007456 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fa ff53 	bl	80022fc <HAL_SPI_TxCpltCallback>
}
 8007456:	bf00      	nop
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	2000000c 	.word	0x2000000c
 8007464:	057619f1 	.word	0x057619f1

08007468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e041      	b.n	80074fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb f9b0 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f000 fe68 	bl	800817c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d001      	beq.n	8007520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e03c      	b.n	800759a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <HAL_TIM_Base_Start+0xa0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_TIM_Base_Start+0x5c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d013      	beq.n	8007564 <HAL_TIM_Base_Start+0x5c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <HAL_TIM_Base_Start+0xa4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_TIM_Base_Start+0x5c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_TIM_Base_Start+0xa8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_TIM_Base_Start+0x5c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a17      	ldr	r2, [pc, #92]	; (80075b4 <HAL_TIM_Base_Start+0xac>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_TIM_Base_Start+0x5c>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIM_Base_Start+0xb0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d111      	bne.n	8007588 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b06      	cmp	r3, #6
 8007574:	d010      	beq.n	8007598 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007586:	e007      	b.n	8007598 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40014000 	.word	0x40014000

080075bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d001      	beq.n	80075d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e044      	b.n	800765e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_TIM_Base_Start_IT+0xb0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d018      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fe:	d013      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_TIM_Base_Start_IT+0xb4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00e      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_TIM_Base_Start_IT+0xb8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIM_Base_Start_IT+0xbc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIM_Base_Start_IT+0xc0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d111      	bne.n	800764c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b06      	cmp	r3, #6
 8007638:	d010      	beq.n	800765c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764a:	e007      	b.n	800765c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40014000 	.word	0x40014000

08007680 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e041      	b.n	8007716 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f839 	bl	800771e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fd5c 	bl	800817c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <HAL_TIM_IC_Start_DMA+0x22>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e013      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x4a>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b04      	cmp	r3, #4
 800775a:	d104      	bne.n	8007766 <HAL_TIM_IC_Start_DMA+0x32>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007762:	b2db      	uxtb	r3, r3
 8007764:	e00b      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x4a>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d104      	bne.n	8007776 <HAL_TIM_IC_Start_DMA+0x42>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007772:	b2db      	uxtb	r3, r3
 8007774:	e003      	b.n	800777e <HAL_TIM_IC_Start_DMA+0x4a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800777c:	b2db      	uxtb	r3, r3
 800777e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_TIM_IC_Start_DMA+0x5c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e013      	b.n	80077b8 <HAL_TIM_IC_Start_DMA+0x84>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b04      	cmp	r3, #4
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_IC_Start_DMA+0x6c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e00b      	b.n	80077b8 <HAL_TIM_IC_Start_DMA+0x84>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d104      	bne.n	80077b0 <HAL_TIM_IC_Start_DMA+0x7c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	e003      	b.n	80077b8 <HAL_TIM_IC_Start_DMA+0x84>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80077ba:	7dbb      	ldrb	r3, [r7, #22]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d002      	beq.n	80077c6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80077c0:	7d7b      	ldrb	r3, [r7, #21]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
 80077c8:	e13c      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80077ca:	7dbb      	ldrb	r3, [r7, #22]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d143      	bne.n	8007858 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80077d0:	7d7b      	ldrb	r3, [r7, #21]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d140      	bne.n	8007858 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_IC_Start_DMA+0xb2>
 80077dc:	887b      	ldrh	r3, [r7, #2]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e12e      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_IC_Start_DMA+0xc2>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f4:	e013      	b.n	800781e <HAL_TIM_IC_Start_DMA+0xea>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_IC_Start_DMA+0xd2>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	e00b      	b.n	800781e <HAL_TIM_IC_Start_DMA+0xea>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start_DMA+0xe2>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007814:	e003      	b.n	800781e <HAL_TIM_IC_Start_DMA+0xea>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <HAL_TIM_IC_Start_DMA+0xfa>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800782c:	e016      	b.n	800785c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d104      	bne.n	800783e <HAL_TIM_IC_Start_DMA+0x10a>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800783c:	e00e      	b.n	800785c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d104      	bne.n	800784e <HAL_TIM_IC_Start_DMA+0x11a>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800784c:	e006      	b.n	800785c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007856:	e001      	b.n	800785c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0f3      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2201      	movs	r2, #1
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fec1 	bl	80085ec <TIM_CCxChannelCmd>

  switch (Channel)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	f200 80ad 	bhi.w	80079cc <HAL_TIM_IC_Start_DMA+0x298>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_TIM_IC_Start_DMA+0x144>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080079cd 	.word	0x080079cd
 8007880:	080079cd 	.word	0x080079cd
 8007884:	080079cd 	.word	0x080079cd
 8007888:	080078f5 	.word	0x080078f5
 800788c:	080079cd 	.word	0x080079cd
 8007890:	080079cd 	.word	0x080079cd
 8007894:	080079cd 	.word	0x080079cd
 8007898:	0800793d 	.word	0x0800793d
 800789c:	080079cd 	.word	0x080079cd
 80078a0:	080079cd 	.word	0x080079cd
 80078a4:	080079cd 	.word	0x080079cd
 80078a8:	08007985 	.word	0x08007985
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	4a66      	ldr	r2, [pc, #408]	; (8007a4c <HAL_TIM_IC_Start_DMA+0x318>)
 80078b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	4a65      	ldr	r2, [pc, #404]	; (8007a50 <HAL_TIM_IC_Start_DMA+0x31c>)
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	4a64      	ldr	r2, [pc, #400]	; (8007a54 <HAL_TIM_IC_Start_DMA+0x320>)
 80078c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3334      	adds	r3, #52	; 0x34
 80078ce:	4619      	mov	r1, r3
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	f7fc f8fc 	bl	8003ad0 <HAL_DMA_Start_IT>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e0b0      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	60da      	str	r2, [r3, #12]
      break;
 80078f2:	e06e      	b.n	80079d2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	4a54      	ldr	r2, [pc, #336]	; (8007a4c <HAL_TIM_IC_Start_DMA+0x318>)
 80078fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	4a53      	ldr	r2, [pc, #332]	; (8007a50 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	4a52      	ldr	r2, [pc, #328]	; (8007a54 <HAL_TIM_IC_Start_DMA+0x320>)
 800790a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3338      	adds	r3, #56	; 0x38
 8007916:	4619      	mov	r1, r3
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	887b      	ldrh	r3, [r7, #2]
 800791c:	f7fc f8d8 	bl	8003ad0 <HAL_DMA_Start_IT>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e08c      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007938:	60da      	str	r2, [r3, #12]
      break;
 800793a:	e04a      	b.n	80079d2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	4a42      	ldr	r2, [pc, #264]	; (8007a4c <HAL_TIM_IC_Start_DMA+0x318>)
 8007942:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	4a41      	ldr	r2, [pc, #260]	; (8007a50 <HAL_TIM_IC_Start_DMA+0x31c>)
 800794a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <HAL_TIM_IC_Start_DMA+0x320>)
 8007952:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	333c      	adds	r3, #60	; 0x3c
 800795e:	4619      	mov	r1, r3
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	887b      	ldrh	r3, [r7, #2]
 8007964:	f7fc f8b4 	bl	8003ad0 <HAL_DMA_Start_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e068      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007980:	60da      	str	r2, [r3, #12]
      break;
 8007982:	e026      	b.n	80079d2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	4a30      	ldr	r2, [pc, #192]	; (8007a4c <HAL_TIM_IC_Start_DMA+0x318>)
 800798a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	4a2f      	ldr	r2, [pc, #188]	; (8007a50 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	4a2e      	ldr	r2, [pc, #184]	; (8007a54 <HAL_TIM_IC_Start_DMA+0x320>)
 800799a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3340      	adds	r3, #64	; 0x40
 80079a6:	4619      	mov	r1, r3
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	887b      	ldrh	r3, [r7, #2]
 80079ac:	f7fc f890 	bl	8003ad0 <HAL_DMA_Start_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e044      	b.n	8007a44 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079c8:	60da      	str	r2, [r3, #12]
      break;
 80079ca:	e002      	b.n	80079d2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <HAL_TIM_IC_Start_DMA+0x324>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d018      	beq.n	8007a0e <HAL_TIM_IC_Start_DMA+0x2da>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e4:	d013      	beq.n	8007a0e <HAL_TIM_IC_Start_DMA+0x2da>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <HAL_TIM_IC_Start_DMA+0x328>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_TIM_IC_Start_DMA+0x2da>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_TIM_IC_Start_DMA+0x32c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_TIM_IC_Start_DMA+0x2da>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_TIM_IC_Start_DMA+0x330>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_TIM_IC_Start_DMA+0x334>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d111      	bne.n	8007a32 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b06      	cmp	r3, #6
 8007a1e:	d010      	beq.n	8007a42 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0201 	orr.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a30:	e007      	b.n	8007a42 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	0800804d 	.word	0x0800804d
 8007a50:	08008115 	.word	0x08008115
 8007a54:	08007fbb 	.word	0x08007fbb
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40014000 	.word	0x40014000

08007a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d122      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d11b      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0202 	mvn.w	r2, #2
 8007a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa51 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007ab4:	e005      	b.n	8007ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa43 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa5e 	bl	8007f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d122      	bne.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d11b      	bne.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0204 	mvn.w	r2, #4
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa27 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa19 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa34 	bl	8007f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0208 	mvn.w	r2, #8
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2204      	movs	r2, #4
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9fd 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9ef 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa0a 	bl	8007f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0210 	mvn.w	r2, #16
 8007b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2208      	movs	r2, #8
 8007b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9d3 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9c5 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f9e0 	bl	8007f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d107      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0201 	mvn.w	r2, #1
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fa fc1c 	bl	8002428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d10e      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d107      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd86 	bl	8008728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d10e      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d107      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9a5 	bl	8007f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d10e      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0220 	mvn.w	r2, #32
 8007c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fd50 	bl	8008714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e088      	b.n	8007dac <HAL_TIM_IC_ConfigChannel+0x130>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11b      	bne.n	8007ce0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f000 fae0 	bl	800827c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 020c 	bic.w	r2, r2, #12
 8007cca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6999      	ldr	r1, [r3, #24]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	619a      	str	r2, [r3, #24]
 8007cde:	e060      	b.n	8007da2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d11c      	bne.n	8007d20 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f000 fb58 	bl	80083aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d08:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6999      	ldr	r1, [r3, #24]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	021a      	lsls	r2, r3, #8
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	619a      	str	r2, [r3, #24]
 8007d1e:	e040      	b.n	8007da2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d11b      	bne.n	8007d5e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6819      	ldr	r1, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f000 fba5 	bl	8008484 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 020c 	bic.w	r2, r2, #12
 8007d48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69d9      	ldr	r1, [r3, #28]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	61da      	str	r2, [r3, #28]
 8007d5c:	e021      	b.n	8007da2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b0c      	cmp	r3, #12
 8007d62:	d11c      	bne.n	8007d9e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6819      	ldr	r1, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f000 fbc2 	bl	80084fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d86:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69d9      	ldr	r1, [r3, #28]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	021a      	lsls	r2, r3, #8
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	61da      	str	r2, [r3, #28]
 8007d9c:	e001      	b.n	8007da2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e0b4      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x186>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e08:	d03e      	beq.n	8007e88 <HAL_TIM_ConfigClockSource+0xd4>
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0e:	f200 8087 	bhi.w	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e16:	f000 8086 	beq.w	8007f26 <HAL_TIM_ConfigClockSource+0x172>
 8007e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1e:	d87f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e20:	2b70      	cmp	r3, #112	; 0x70
 8007e22:	d01a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xa6>
 8007e24:	2b70      	cmp	r3, #112	; 0x70
 8007e26:	d87b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e28:	2b60      	cmp	r3, #96	; 0x60
 8007e2a:	d050      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x11a>
 8007e2c:	2b60      	cmp	r3, #96	; 0x60
 8007e2e:	d877      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e30:	2b50      	cmp	r3, #80	; 0x50
 8007e32:	d03c      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0xfa>
 8007e34:	2b50      	cmp	r3, #80	; 0x50
 8007e36:	d873      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d058      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x13a>
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d86f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e40:	2b30      	cmp	r3, #48	; 0x30
 8007e42:	d064      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d86b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d060      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d867      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05c      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d05a      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e58:	e062      	b.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6899      	ldr	r1, [r3, #8]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f000 fb9f 	bl	80085ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	609a      	str	r2, [r3, #8]
      break;
 8007e86:	e04f      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	6899      	ldr	r1, [r3, #8]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f000 fb88 	bl	80085ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eaa:	609a      	str	r2, [r3, #8]
      break;
 8007eac:	e03c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f000 fa46 	bl	800834c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2150      	movs	r1, #80	; 0x50
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fb55 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007ecc:	e02c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6859      	ldr	r1, [r3, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f000 faa2 	bl	8008424 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2160      	movs	r1, #96	; 0x60
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fb45 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007eec:	e01c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6859      	ldr	r1, [r3, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f000 fa26 	bl	800834c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb35 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007f0c:	e00c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f000 fb2c 	bl	8008576 <TIM_ITRx_SetConfig>
      break;
 8007f1e:	e003      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
      break;
 8007f24:	e000      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d107      	bne.n	8007fe2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe0:	e02a      	b.n	8008038 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d107      	bne.n	8007ffc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ffa:	e01d      	b.n	8008038 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d107      	bne.n	8008016 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2204      	movs	r2, #4
 800800a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008014:	e010      	b.n	8008038 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d107      	bne.n	8008030 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2208      	movs	r2, #8
 8008024:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800802e:	e003      	b.n	8008038 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff ffb4 	bl	8007fa6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d10f      	bne.n	8008084 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d146      	bne.n	8008100 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008082:	e03d      	b.n	8008100 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	429a      	cmp	r2, r3
 800808c:	d10f      	bne.n	80080ae <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2202      	movs	r2, #2
 8008092:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d131      	bne.n	8008100 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080ac:	e028      	b.n	8008100 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d10f      	bne.n	80080d8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2204      	movs	r2, #4
 80080bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d11c      	bne.n	8008100 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d6:	e013      	b.n	8008100 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10e      	bne.n	8008100 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2208      	movs	r2, #8
 80080e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff ff28 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	771a      	strb	r2, [r3, #28]
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	429a      	cmp	r2, r3
 800812a:	d103      	bne.n	8008134 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	771a      	strb	r2, [r3, #28]
 8008132:	e019      	b.n	8008168 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	429a      	cmp	r2, r3
 800813c:	d103      	bne.n	8008146 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2202      	movs	r2, #2
 8008142:	771a      	strb	r2, [r3, #28]
 8008144:	e010      	b.n	8008168 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d103      	bne.n	8008158 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2204      	movs	r2, #4
 8008154:	771a      	strb	r2, [r3, #28]
 8008156:	e007      	b.n	8008168 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	429a      	cmp	r2, r3
 8008160:	d102      	bne.n	8008168 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2208      	movs	r2, #8
 8008166:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fefe 	bl	8007f6a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	771a      	strb	r2, [r3, #28]
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a34      	ldr	r2, [pc, #208]	; (8008260 <TIM_Base_SetConfig+0xe4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00f      	beq.n	80081b4 <TIM_Base_SetConfig+0x38>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819a:	d00b      	beq.n	80081b4 <TIM_Base_SetConfig+0x38>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a31      	ldr	r2, [pc, #196]	; (8008264 <TIM_Base_SetConfig+0xe8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d007      	beq.n	80081b4 <TIM_Base_SetConfig+0x38>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a30      	ldr	r2, [pc, #192]	; (8008268 <TIM_Base_SetConfig+0xec>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_Base_SetConfig+0x38>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a2f      	ldr	r2, [pc, #188]	; (800826c <TIM_Base_SetConfig+0xf0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d108      	bne.n	80081c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a25      	ldr	r2, [pc, #148]	; (8008260 <TIM_Base_SetConfig+0xe4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01b      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d4:	d017      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a22      	ldr	r2, [pc, #136]	; (8008264 <TIM_Base_SetConfig+0xe8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a21      	ldr	r2, [pc, #132]	; (8008268 <TIM_Base_SetConfig+0xec>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00f      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a20      	ldr	r2, [pc, #128]	; (800826c <TIM_Base_SetConfig+0xf0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00b      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <TIM_Base_SetConfig+0xf4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <TIM_Base_SetConfig+0xf8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0x8a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <TIM_Base_SetConfig+0xfc>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a08      	ldr	r2, [pc, #32]	; (8008260 <TIM_Base_SetConfig+0xe4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d103      	bne.n	800824c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	615a      	str	r2, [r3, #20]
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40010000 	.word	0x40010000
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40014000 	.word	0x40014000
 8008274:	40014400 	.word	0x40014400
 8008278:	40014800 	.word	0x40014800

0800827c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a24      	ldr	r2, [pc, #144]	; (8008338 <TIM_TI1_SetConfig+0xbc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <TIM_TI1_SetConfig+0x56>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b0:	d00f      	beq.n	80082d2 <TIM_TI1_SetConfig+0x56>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a21      	ldr	r2, [pc, #132]	; (800833c <TIM_TI1_SetConfig+0xc0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00b      	beq.n	80082d2 <TIM_TI1_SetConfig+0x56>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a20      	ldr	r2, [pc, #128]	; (8008340 <TIM_TI1_SetConfig+0xc4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d007      	beq.n	80082d2 <TIM_TI1_SetConfig+0x56>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a1f      	ldr	r2, [pc, #124]	; (8008344 <TIM_TI1_SetConfig+0xc8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_TI1_SetConfig+0x56>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a1e      	ldr	r2, [pc, #120]	; (8008348 <TIM_TI1_SetConfig+0xcc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d101      	bne.n	80082d6 <TIM_TI1_SetConfig+0x5a>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <TIM_TI1_SetConfig+0x5c>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e003      	b.n	80082f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f043 0301 	orr.w	r3, r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	b2db      	uxtb	r3, r3
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f023 030a 	bic.w	r3, r3, #10
 8008310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f003 030a 	and.w	r3, r3, #10
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40014000 	.word	0x40014000

0800834c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 030a 	bic.w	r3, r3, #10
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f023 0210 	bic.w	r2, r3, #16
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	031b      	lsls	r3, r3, #12
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	621a      	str	r2, [r3, #32]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f023 0210 	bic.w	r2, r3, #16
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	031b      	lsls	r3, r3, #12
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80084d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	621a      	str	r2, [r3, #32]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800853a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	031b      	lsls	r3, r3, #12
 8008540:	b29b      	uxth	r3, r3
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800854e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	031b      	lsls	r3, r3, #12
 8008554:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	f043 0307 	orr.w	r3, r3, #7
 8008598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	609a      	str	r2, [r3, #8]
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	609a      	str	r2, [r3, #8]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2201      	movs	r2, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1a      	ldr	r2, [r3, #32]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e050      	b.n	80086f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1c      	ldr	r2, [pc, #112]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d018      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869c:	d013      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00e      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a16      	ldr	r2, [pc, #88]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d009      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d004      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a13      	ldr	r2, [pc, #76]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d10c      	bne.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40014000 	.word	0x40014000

08008714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e03f      	b.n	80087ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fa f8fc 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2224      	movs	r2, #36	; 0x24
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800877e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fddf 	bl	8009344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	695a      	ldr	r2, [r3, #20]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b08a      	sub	sp, #40	; 0x28
 80087da:	af02      	add	r7, sp, #8
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d17c      	bne.n	80088f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <HAL_UART_Transmit+0x2c>
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e075      	b.n	80088f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_UART_Transmit+0x3e>
 8008810:	2302      	movs	r3, #2
 8008812:	e06e      	b.n	80088f2 <HAL_UART_Transmit+0x11c>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2221      	movs	r2, #33	; 0x21
 8008826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800882a:	f7fa fa45 	bl	8002cb8 <HAL_GetTick>
 800882e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008844:	d108      	bne.n	8008858 <HAL_UART_Transmit+0x82>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d104      	bne.n	8008858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	e003      	b.n	8008860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008868:	e02a      	b.n	80088c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2200      	movs	r2, #0
 8008872:	2180      	movs	r1, #128	; 0x80
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fb1f 	bl	8008eb8 <UART_WaitOnFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e036      	b.n	80088f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	3302      	adds	r3, #2
 800889e:	61bb      	str	r3, [r7, #24]
 80088a0:	e007      	b.n	80088b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	3301      	adds	r3, #1
 80088b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1cf      	bne.n	800886a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2200      	movs	r2, #0
 80088d2:	2140      	movs	r1, #64	; 0x40
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 faef 	bl	8008eb8 <UART_WaitOnFlagUntilTimeout>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e006      	b.n	80088f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	e000      	b.n	80088f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	4613      	mov	r3, r2
 8008906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b20      	cmp	r3, #32
 8008912:	d11d      	bne.n	8008950 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_UART_Receive_IT+0x26>
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e016      	b.n	8008952 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_UART_Receive_IT+0x38>
 800892e:	2302      	movs	r3, #2
 8008930:	e00f      	b.n	8008952 <HAL_UART_Receive_IT+0x58>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008940:	88fb      	ldrh	r3, [r7, #6]
 8008942:	461a      	mov	r2, r3
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fb24 	bl	8008f94 <UART_Start_Receive_IT>
 800894c:	4603      	mov	r3, r0
 800894e:	e000      	b.n	8008952 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b0ba      	sub	sp, #232	; 0xe8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008982:	2300      	movs	r3, #0
 8008984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800898e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800899a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10f      	bne.n	80089c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <HAL_UART_IRQHandler+0x66>
 80089ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b2:	f003 0320 	and.w	r3, r3, #32
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc07 	bl	80091ce <UART_Receive_IT>
      return;
 80089c0:	e256      	b.n	8008e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80089c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80de 	beq.w	8008b88 <HAL_UART_IRQHandler+0x22c>
 80089cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80d1 	beq.w	8008b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <HAL_UART_IRQHandler+0xae>
 80089f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f043 0201 	orr.w	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <HAL_UART_IRQHandler+0xd2>
 8008a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	f043 0202 	orr.w	r2, r3, #2
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <HAL_UART_IRQHandler+0xf6>
 8008a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	f043 0204 	orr.w	r2, r3, #4
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d011      	beq.n	8008a82 <HAL_UART_IRQHandler+0x126>
 8008a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f043 0208 	orr.w	r2, r3, #8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 81ed 	beq.w	8008e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_UART_IRQHandler+0x14e>
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb92 	bl	80091ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x17a>
 8008ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d04f      	beq.n	8008b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa9a 	bl	8009010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b40      	cmp	r3, #64	; 0x40
 8008ae8:	d141      	bne.n	8008b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3314      	adds	r3, #20
 8008af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1d9      	bne.n	8008aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d013      	beq.n	8008b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	4a7d      	ldr	r2, [pc, #500]	; (8008d38 <HAL_UART_IRQHandler+0x3dc>)
 8008b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fb f888 	bl	8003c60 <HAL_DMA_Abort_IT>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d016      	beq.n	8008b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b60:	4610      	mov	r0, r2
 8008b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b64:	e00e      	b.n	8008b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f990 	bl	8008e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	e00a      	b.n	8008b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f98c 	bl	8008e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b74:	e006      	b.n	8008b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f988 	bl	8008e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b82:	e170      	b.n	8008e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b84:	bf00      	nop
    return;
 8008b86:	e16e      	b.n	8008e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	f040 814a 	bne.w	8008e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 8143 	beq.w	8008e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 813c 	beq.w	8008e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	60bb      	str	r3, [r7, #8]
 8008bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	f040 80b4 	bne.w	8008d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8140 	beq.w	8008e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	f080 8139 	bcs.w	8008e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c0a:	f000 8088 	beq.w	8008d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	330c      	adds	r3, #12
 8008c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1d9      	bne.n	8008c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3314      	adds	r3, #20
 8008c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e1      	bne.n	8008c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cee:	f023 0310 	bic.w	r3, r3, #16
 8008cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e3      	bne.n	8008cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fa ff31 	bl	8003b80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8b6 	bl	8008ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d34:	e099      	b.n	8008e6a <HAL_UART_IRQHandler+0x50e>
 8008d36:	bf00      	nop
 8008d38:	080090d7 	.word	0x080090d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 808b 	beq.w	8008e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8086 	beq.w	8008e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	330c      	adds	r3, #12
 8008d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	330c      	adds	r3, #12
 8008d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d86:	647a      	str	r2, [r7, #68]	; 0x44
 8008d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e3      	bne.n	8008d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	623b      	str	r3, [r7, #32]
   return(result);
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3314      	adds	r3, #20
 8008dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e3      	bne.n	8008d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0310 	bic.w	r3, r3, #16
 8008df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e04:	61fa      	str	r2, [r7, #28]
 8008e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69b9      	ldr	r1, [r7, #24]
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	617b      	str	r3, [r7, #20]
   return(result);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e3      	bne.n	8008de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f83e 	bl	8008ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e24:	e023      	b.n	8008e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_UART_IRQHandler+0x4ea>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f95d 	bl	80090fe <UART_Transmit_IT>
    return;
 8008e44:	e014      	b.n	8008e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00e      	beq.n	8008e70 <HAL_UART_IRQHandler+0x514>
 8008e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d008      	beq.n	8008e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f99d 	bl	800919e <UART_EndTransmit_IT>
    return;
 8008e64:	e004      	b.n	8008e70 <HAL_UART_IRQHandler+0x514>
    return;
 8008e66:	bf00      	nop
 8008e68:	e002      	b.n	8008e70 <HAL_UART_IRQHandler+0x514>
      return;
 8008e6a:	bf00      	nop
 8008e6c:	e000      	b.n	8008e70 <HAL_UART_IRQHandler+0x514>
      return;
 8008e6e:	bf00      	nop
  }
}
 8008e70:	37e8      	adds	r7, #232	; 0xe8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop

08008e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b090      	sub	sp, #64	; 0x40
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec8:	e050      	b.n	8008f6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed0:	d04c      	beq.n	8008f6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed8:	f7f9 feee 	bl	8002cb8 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d241      	bcs.n	8008f6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	330c      	adds	r3, #12
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f08:	637a      	str	r2, [r7, #52]	; 0x34
 8008f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e5      	bne.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3314      	adds	r3, #20
 8008f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3314      	adds	r3, #20
 8008f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3c:	623a      	str	r2, [r7, #32]
 8008f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69f9      	ldr	r1, [r7, #28]
 8008f42:	6a3a      	ldr	r2, [r7, #32]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e5      	bne.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e00f      	b.n	8008f8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	4013      	ands	r3, r2
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2301      	moveq	r3, #1
 8008f7e:	2300      	movne	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d09f      	beq.n	8008eca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3740      	adds	r7, #64	; 0x40
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2222      	movs	r2, #34	; 0x22
 8008fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fe0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0220 	orr.w	r2, r2, #32
 8009000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009010:	b480      	push	{r7}
 8009012:	b095      	sub	sp, #84	; 0x54
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009038:	643a      	str	r2, [r7, #64]	; 0x40
 800903a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800903e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3314      	adds	r3, #20
 8009052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	61fb      	str	r3, [r7, #28]
   return(result);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	64bb      	str	r3, [r7, #72]	; 0x48
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3314      	adds	r3, #20
 800906a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009084:	2b01      	cmp	r3, #1
 8009086:	d119      	bne.n	80090bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	330c      	adds	r3, #12
 800908e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	60bb      	str	r3, [r7, #8]
   return(result);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f023 0310 	bic.w	r3, r3, #16
 800909e:	647b      	str	r3, [r7, #68]	; 0x44
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a8:	61ba      	str	r2, [r7, #24]
 80090aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6979      	ldr	r1, [r7, #20]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	613b      	str	r3, [r7, #16]
   return(result);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e5      	bne.n	8009088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090ca:	bf00      	nop
 80090cc:	3754      	adds	r7, #84	; 0x54
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff fecb 	bl	8008e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b21      	cmp	r3, #33	; 0x21
 8009110:	d13e      	bne.n	8009190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911a:	d114      	bne.n	8009146 <UART_Transmit_IT+0x48>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d110      	bne.n	8009146 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	1c9a      	adds	r2, r3, #2
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	621a      	str	r2, [r3, #32]
 8009144:	e008      	b.n	8009158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6211      	str	r1, [r2, #32]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4619      	mov	r1, r3
 8009166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10f      	bne.n	800918c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800917a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800918a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	e000      	b.n	8009192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009190:	2302      	movs	r3, #2
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff fe5a 	bl	8008e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b08c      	sub	sp, #48	; 0x30
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b22      	cmp	r3, #34	; 0x22
 80091e0:	f040 80ab 	bne.w	800933a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ec:	d117      	bne.n	800921e <UART_Receive_IT+0x50>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d113      	bne.n	800921e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920c:	b29a      	uxth	r2, r3
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	1c9a      	adds	r2, r3, #2
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	629a      	str	r2, [r3, #40]	; 0x28
 800921c:	e026      	b.n	800926c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009230:	d007      	beq.n	8009242 <UART_Receive_IT+0x74>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <UART_Receive_IT+0x82>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	b2da      	uxtb	r2, r3
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e008      	b.n	8009262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925c:	b2da      	uxtb	r2, r3
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	b29b      	uxth	r3, r3
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4619      	mov	r1, r3
 800927a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800927c:	2b00      	cmp	r3, #0
 800927e:	d15a      	bne.n	8009336 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0220 	bic.w	r2, r2, #32
 800928e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800929e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	695a      	ldr	r2, [r3, #20]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d135      	bne.n	800932c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	613b      	str	r3, [r7, #16]
   return(result);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f023 0310 	bic.w	r3, r3, #16
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	330c      	adds	r3, #12
 80092e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e6:	623a      	str	r2, [r7, #32]
 80092e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	69f9      	ldr	r1, [r7, #28]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b10      	cmp	r3, #16
 8009306:	d10a      	bne.n	800931e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7ff fdbb 	bl	8008ea0 <HAL_UARTEx_RxEventCallback>
 800932a:	e002      	b.n	8009332 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7f9 f925 	bl	800257c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	e002      	b.n	800933c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	e000      	b.n	800933c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800933a:	2302      	movs	r3, #2
  }
}
 800933c:	4618      	mov	r0, r3
 800933e:	3730      	adds	r7, #48	; 0x30
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009348:	b0c0      	sub	sp, #256	; 0x100
 800934a:	af00      	add	r7, sp, #0
 800934c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800935c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009360:	68d9      	ldr	r1, [r3, #12]
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	ea40 0301 	orr.w	r3, r0, r1
 800936c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800936e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	431a      	orrs	r2, r3
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	431a      	orrs	r2, r3
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800939c:	f021 010c 	bic.w	r1, r1, #12
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093aa:	430b      	orrs	r3, r1
 80093ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093be:	6999      	ldr	r1, [r3, #24]
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	ea40 0301 	orr.w	r3, r0, r1
 80093ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b8f      	ldr	r3, [pc, #572]	; (8009610 <UART_SetConfig+0x2cc>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d005      	beq.n	80093e4 <UART_SetConfig+0xa0>
 80093d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	4b8d      	ldr	r3, [pc, #564]	; (8009614 <UART_SetConfig+0x2d0>)
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d104      	bne.n	80093ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093e4:	f7fd fc88 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 80093e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093ec:	e003      	b.n	80093f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fd fc6f 	bl	8006cd0 <HAL_RCC_GetPCLK1Freq>
 80093f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009400:	f040 810c 	bne.w	800961c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009408:	2200      	movs	r2, #0
 800940a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800940e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009416:	4622      	mov	r2, r4
 8009418:	462b      	mov	r3, r5
 800941a:	1891      	adds	r1, r2, r2
 800941c:	65b9      	str	r1, [r7, #88]	; 0x58
 800941e:	415b      	adcs	r3, r3
 8009420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009426:	4621      	mov	r1, r4
 8009428:	eb12 0801 	adds.w	r8, r2, r1
 800942c:	4629      	mov	r1, r5
 800942e:	eb43 0901 	adc.w	r9, r3, r1
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	f04f 0300 	mov.w	r3, #0
 800943a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800943e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009446:	4690      	mov	r8, r2
 8009448:	4699      	mov	r9, r3
 800944a:	4623      	mov	r3, r4
 800944c:	eb18 0303 	adds.w	r3, r8, r3
 8009450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009454:	462b      	mov	r3, r5
 8009456:	eb49 0303 	adc.w	r3, r9, r3
 800945a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800945e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800946a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800946e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009472:	460b      	mov	r3, r1
 8009474:	18db      	adds	r3, r3, r3
 8009476:	653b      	str	r3, [r7, #80]	; 0x50
 8009478:	4613      	mov	r3, r2
 800947a:	eb42 0303 	adc.w	r3, r2, r3
 800947e:	657b      	str	r3, [r7, #84]	; 0x54
 8009480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009488:	f7f7 faf0 	bl	8000a6c <__aeabi_uldivmod>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4b61      	ldr	r3, [pc, #388]	; (8009618 <UART_SetConfig+0x2d4>)
 8009492:	fba3 2302 	umull	r2, r3, r3, r2
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	011c      	lsls	r4, r3, #4
 800949a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	1891      	adds	r1, r2, r2
 80094b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80094b4:	415b      	adcs	r3, r3
 80094b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094bc:	4641      	mov	r1, r8
 80094be:	eb12 0a01 	adds.w	sl, r2, r1
 80094c2:	4649      	mov	r1, r9
 80094c4:	eb43 0b01 	adc.w	fp, r3, r1
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094dc:	4692      	mov	sl, r2
 80094de:	469b      	mov	fp, r3
 80094e0:	4643      	mov	r3, r8
 80094e2:	eb1a 0303 	adds.w	r3, sl, r3
 80094e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094ea:	464b      	mov	r3, r9
 80094ec:	eb4b 0303 	adc.w	r3, fp, r3
 80094f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009508:	460b      	mov	r3, r1
 800950a:	18db      	adds	r3, r3, r3
 800950c:	643b      	str	r3, [r7, #64]	; 0x40
 800950e:	4613      	mov	r3, r2
 8009510:	eb42 0303 	adc.w	r3, r2, r3
 8009514:	647b      	str	r3, [r7, #68]	; 0x44
 8009516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800951a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800951e:	f7f7 faa5 	bl	8000a6c <__aeabi_uldivmod>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4611      	mov	r1, r2
 8009528:	4b3b      	ldr	r3, [pc, #236]	; (8009618 <UART_SetConfig+0x2d4>)
 800952a:	fba3 2301 	umull	r2, r3, r3, r1
 800952e:	095b      	lsrs	r3, r3, #5
 8009530:	2264      	movs	r2, #100	; 0x64
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	1acb      	subs	r3, r1, r3
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800953e:	4b36      	ldr	r3, [pc, #216]	; (8009618 <UART_SetConfig+0x2d4>)
 8009540:	fba3 2302 	umull	r2, r3, r3, r2
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800954c:	441c      	add	r4, r3
 800954e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009552:	2200      	movs	r2, #0
 8009554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800955c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009560:	4642      	mov	r2, r8
 8009562:	464b      	mov	r3, r9
 8009564:	1891      	adds	r1, r2, r2
 8009566:	63b9      	str	r1, [r7, #56]	; 0x38
 8009568:	415b      	adcs	r3, r3
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009570:	4641      	mov	r1, r8
 8009572:	1851      	adds	r1, r2, r1
 8009574:	6339      	str	r1, [r7, #48]	; 0x30
 8009576:	4649      	mov	r1, r9
 8009578:	414b      	adcs	r3, r1
 800957a:	637b      	str	r3, [r7, #52]	; 0x34
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009588:	4659      	mov	r1, fp
 800958a:	00cb      	lsls	r3, r1, #3
 800958c:	4651      	mov	r1, sl
 800958e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009592:	4651      	mov	r1, sl
 8009594:	00ca      	lsls	r2, r1, #3
 8009596:	4610      	mov	r0, r2
 8009598:	4619      	mov	r1, r3
 800959a:	4603      	mov	r3, r0
 800959c:	4642      	mov	r2, r8
 800959e:	189b      	adds	r3, r3, r2
 80095a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095a4:	464b      	mov	r3, r9
 80095a6:	460a      	mov	r2, r1
 80095a8:	eb42 0303 	adc.w	r3, r2, r3
 80095ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095c4:	460b      	mov	r3, r1
 80095c6:	18db      	adds	r3, r3, r3
 80095c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ca:	4613      	mov	r3, r2
 80095cc:	eb42 0303 	adc.w	r3, r2, r3
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095da:	f7f7 fa47 	bl	8000a6c <__aeabi_uldivmod>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <UART_SetConfig+0x2d4>)
 80095e4:	fba3 1302 	umull	r1, r3, r3, r2
 80095e8:	095b      	lsrs	r3, r3, #5
 80095ea:	2164      	movs	r1, #100	; 0x64
 80095ec:	fb01 f303 	mul.w	r3, r1, r3
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	3332      	adds	r3, #50	; 0x32
 80095f6:	4a08      	ldr	r2, [pc, #32]	; (8009618 <UART_SetConfig+0x2d4>)
 80095f8:	fba2 2303 	umull	r2, r3, r2, r3
 80095fc:	095b      	lsrs	r3, r3, #5
 80095fe:	f003 0207 	and.w	r2, r3, #7
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4422      	add	r2, r4
 800960a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800960c:	e105      	b.n	800981a <UART_SetConfig+0x4d6>
 800960e:	bf00      	nop
 8009610:	40011000 	.word	0x40011000
 8009614:	40011400 	.word	0x40011400
 8009618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800961c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009620:	2200      	movs	r2, #0
 8009622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800962a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800962e:	4642      	mov	r2, r8
 8009630:	464b      	mov	r3, r9
 8009632:	1891      	adds	r1, r2, r2
 8009634:	6239      	str	r1, [r7, #32]
 8009636:	415b      	adcs	r3, r3
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
 800963a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800963e:	4641      	mov	r1, r8
 8009640:	1854      	adds	r4, r2, r1
 8009642:	4649      	mov	r1, r9
 8009644:	eb43 0501 	adc.w	r5, r3, r1
 8009648:	f04f 0200 	mov.w	r2, #0
 800964c:	f04f 0300 	mov.w	r3, #0
 8009650:	00eb      	lsls	r3, r5, #3
 8009652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009656:	00e2      	lsls	r2, r4, #3
 8009658:	4614      	mov	r4, r2
 800965a:	461d      	mov	r5, r3
 800965c:	4643      	mov	r3, r8
 800965e:	18e3      	adds	r3, r4, r3
 8009660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009664:	464b      	mov	r3, r9
 8009666:	eb45 0303 	adc.w	r3, r5, r3
 800966a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800967a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	f04f 0300 	mov.w	r3, #0
 8009686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800968a:	4629      	mov	r1, r5
 800968c:	008b      	lsls	r3, r1, #2
 800968e:	4621      	mov	r1, r4
 8009690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009694:	4621      	mov	r1, r4
 8009696:	008a      	lsls	r2, r1, #2
 8009698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800969c:	f7f7 f9e6 	bl	8000a6c <__aeabi_uldivmod>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4b60      	ldr	r3, [pc, #384]	; (8009828 <UART_SetConfig+0x4e4>)
 80096a6:	fba3 2302 	umull	r2, r3, r3, r2
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	011c      	lsls	r4, r3, #4
 80096ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	1891      	adds	r1, r2, r2
 80096c6:	61b9      	str	r1, [r7, #24]
 80096c8:	415b      	adcs	r3, r3
 80096ca:	61fb      	str	r3, [r7, #28]
 80096cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096d0:	4641      	mov	r1, r8
 80096d2:	1851      	adds	r1, r2, r1
 80096d4:	6139      	str	r1, [r7, #16]
 80096d6:	4649      	mov	r1, r9
 80096d8:	414b      	adcs	r3, r1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096e8:	4659      	mov	r1, fp
 80096ea:	00cb      	lsls	r3, r1, #3
 80096ec:	4651      	mov	r1, sl
 80096ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096f2:	4651      	mov	r1, sl
 80096f4:	00ca      	lsls	r2, r1, #3
 80096f6:	4610      	mov	r0, r2
 80096f8:	4619      	mov	r1, r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	4642      	mov	r2, r8
 80096fe:	189b      	adds	r3, r3, r2
 8009700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009704:	464b      	mov	r3, r9
 8009706:	460a      	mov	r2, r1
 8009708:	eb42 0303 	adc.w	r3, r2, r3
 800970c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	67bb      	str	r3, [r7, #120]	; 0x78
 800971a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009728:	4649      	mov	r1, r9
 800972a:	008b      	lsls	r3, r1, #2
 800972c:	4641      	mov	r1, r8
 800972e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009732:	4641      	mov	r1, r8
 8009734:	008a      	lsls	r2, r1, #2
 8009736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800973a:	f7f7 f997 	bl	8000a6c <__aeabi_uldivmod>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4b39      	ldr	r3, [pc, #228]	; (8009828 <UART_SetConfig+0x4e4>)
 8009744:	fba3 1302 	umull	r1, r3, r3, r2
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	2164      	movs	r1, #100	; 0x64
 800974c:	fb01 f303 	mul.w	r3, r1, r3
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	3332      	adds	r3, #50	; 0x32
 8009756:	4a34      	ldr	r2, [pc, #208]	; (8009828 <UART_SetConfig+0x4e4>)
 8009758:	fba2 2303 	umull	r2, r3, r2, r3
 800975c:	095b      	lsrs	r3, r3, #5
 800975e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009762:	441c      	add	r4, r3
 8009764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009768:	2200      	movs	r2, #0
 800976a:	673b      	str	r3, [r7, #112]	; 0x70
 800976c:	677a      	str	r2, [r7, #116]	; 0x74
 800976e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009772:	4642      	mov	r2, r8
 8009774:	464b      	mov	r3, r9
 8009776:	1891      	adds	r1, r2, r2
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	415b      	adcs	r3, r3
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009782:	4641      	mov	r1, r8
 8009784:	1851      	adds	r1, r2, r1
 8009786:	6039      	str	r1, [r7, #0]
 8009788:	4649      	mov	r1, r9
 800978a:	414b      	adcs	r3, r1
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	f04f 0200 	mov.w	r2, #0
 8009792:	f04f 0300 	mov.w	r3, #0
 8009796:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800979a:	4659      	mov	r1, fp
 800979c:	00cb      	lsls	r3, r1, #3
 800979e:	4651      	mov	r1, sl
 80097a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a4:	4651      	mov	r1, sl
 80097a6:	00ca      	lsls	r2, r1, #3
 80097a8:	4610      	mov	r0, r2
 80097aa:	4619      	mov	r1, r3
 80097ac:	4603      	mov	r3, r0
 80097ae:	4642      	mov	r2, r8
 80097b0:	189b      	adds	r3, r3, r2
 80097b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80097b4:	464b      	mov	r3, r9
 80097b6:	460a      	mov	r2, r1
 80097b8:	eb42 0303 	adc.w	r3, r2, r3
 80097bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	663b      	str	r3, [r7, #96]	; 0x60
 80097c8:	667a      	str	r2, [r7, #100]	; 0x64
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097d6:	4649      	mov	r1, r9
 80097d8:	008b      	lsls	r3, r1, #2
 80097da:	4641      	mov	r1, r8
 80097dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097e0:	4641      	mov	r1, r8
 80097e2:	008a      	lsls	r2, r1, #2
 80097e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097e8:	f7f7 f940 	bl	8000a6c <__aeabi_uldivmod>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <UART_SetConfig+0x4e4>)
 80097f2:	fba3 1302 	umull	r1, r3, r3, r2
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	2164      	movs	r1, #100	; 0x64
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	3332      	adds	r3, #50	; 0x32
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <UART_SetConfig+0x4e4>)
 8009806:	fba2 2303 	umull	r2, r3, r2, r3
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	f003 020f 	and.w	r2, r3, #15
 8009810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4422      	add	r2, r4
 8009818:	609a      	str	r2, [r3, #8]
}
 800981a:	bf00      	nop
 800981c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009820:	46bd      	mov	sp, r7
 8009822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009826:	bf00      	nop
 8009828:	51eb851f 	.word	0x51eb851f

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000018 	.word	0x20000018

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	; (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	; (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	; (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	; (800987c <__libc_init_array+0x44>)
 800984c:	f000 fc8e 	bl	800a16c <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	0800a5b4 	.word	0x0800a5b4
 8009874:	0800a5b4 	.word	0x0800a5b4
 8009878:	0800a5b4 	.word	0x0800a5b4
 800987c:	0800a5b8 	.word	0x0800a5b8

08009880 <memset>:
 8009880:	4402      	add	r2, r0
 8009882:	4603      	mov	r3, r0
 8009884:	4293      	cmp	r3, r2
 8009886:	d100      	bne.n	800988a <memset+0xa>
 8009888:	4770      	bx	lr
 800988a:	f803 1b01 	strb.w	r1, [r3], #1
 800988e:	e7f9      	b.n	8009884 <memset+0x4>

08009890 <siprintf>:
 8009890:	b40e      	push	{r1, r2, r3}
 8009892:	b500      	push	{lr}
 8009894:	b09c      	sub	sp, #112	; 0x70
 8009896:	ab1d      	add	r3, sp, #116	; 0x74
 8009898:	9002      	str	r0, [sp, #8]
 800989a:	9006      	str	r0, [sp, #24]
 800989c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098a0:	4809      	ldr	r0, [pc, #36]	; (80098c8 <siprintf+0x38>)
 80098a2:	9107      	str	r1, [sp, #28]
 80098a4:	9104      	str	r1, [sp, #16]
 80098a6:	4909      	ldr	r1, [pc, #36]	; (80098cc <siprintf+0x3c>)
 80098a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ac:	9105      	str	r1, [sp, #20]
 80098ae:	6800      	ldr	r0, [r0, #0]
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	a902      	add	r1, sp, #8
 80098b4:	f000 f868 	bl	8009988 <_svfiprintf_r>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	b01c      	add	sp, #112	; 0x70
 80098c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c4:	b003      	add	sp, #12
 80098c6:	4770      	bx	lr
 80098c8:	20000018 	.word	0x20000018
 80098cc:	ffff0208 	.word	0xffff0208

080098d0 <__ssputs_r>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	688e      	ldr	r6, [r1, #8]
 80098d6:	429e      	cmp	r6, r3
 80098d8:	4682      	mov	sl, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	4690      	mov	r8, r2
 80098de:	461f      	mov	r7, r3
 80098e0:	d838      	bhi.n	8009954 <__ssputs_r+0x84>
 80098e2:	898a      	ldrh	r2, [r1, #12]
 80098e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e8:	d032      	beq.n	8009950 <__ssputs_r+0x80>
 80098ea:	6825      	ldr	r5, [r4, #0]
 80098ec:	6909      	ldr	r1, [r1, #16]
 80098ee:	eba5 0901 	sub.w	r9, r5, r1
 80098f2:	6965      	ldr	r5, [r4, #20]
 80098f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098fc:	3301      	adds	r3, #1
 80098fe:	444b      	add	r3, r9
 8009900:	106d      	asrs	r5, r5, #1
 8009902:	429d      	cmp	r5, r3
 8009904:	bf38      	it	cc
 8009906:	461d      	movcc	r5, r3
 8009908:	0553      	lsls	r3, r2, #21
 800990a:	d531      	bpl.n	8009970 <__ssputs_r+0xa0>
 800990c:	4629      	mov	r1, r5
 800990e:	f000 fb63 	bl	8009fd8 <_malloc_r>
 8009912:	4606      	mov	r6, r0
 8009914:	b950      	cbnz	r0, 800992c <__ssputs_r+0x5c>
 8009916:	230c      	movs	r3, #12
 8009918:	f8ca 3000 	str.w	r3, [sl]
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	f04f 30ff 	mov.w	r0, #4294967295
 8009928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992c:	6921      	ldr	r1, [r4, #16]
 800992e:	464a      	mov	r2, r9
 8009930:	f000 fabe 	bl	8009eb0 <memcpy>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800993a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	6126      	str	r6, [r4, #16]
 8009942:	6165      	str	r5, [r4, #20]
 8009944:	444e      	add	r6, r9
 8009946:	eba5 0509 	sub.w	r5, r5, r9
 800994a:	6026      	str	r6, [r4, #0]
 800994c:	60a5      	str	r5, [r4, #8]
 800994e:	463e      	mov	r6, r7
 8009950:	42be      	cmp	r6, r7
 8009952:	d900      	bls.n	8009956 <__ssputs_r+0x86>
 8009954:	463e      	mov	r6, r7
 8009956:	6820      	ldr	r0, [r4, #0]
 8009958:	4632      	mov	r2, r6
 800995a:	4641      	mov	r1, r8
 800995c:	f000 fab6 	bl	8009ecc <memmove>
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	1b9b      	subs	r3, r3, r6
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	4433      	add	r3, r6
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	2000      	movs	r0, #0
 800996e:	e7db      	b.n	8009928 <__ssputs_r+0x58>
 8009970:	462a      	mov	r2, r5
 8009972:	f000 fba5 	bl	800a0c0 <_realloc_r>
 8009976:	4606      	mov	r6, r0
 8009978:	2800      	cmp	r0, #0
 800997a:	d1e1      	bne.n	8009940 <__ssputs_r+0x70>
 800997c:	6921      	ldr	r1, [r4, #16]
 800997e:	4650      	mov	r0, sl
 8009980:	f000 fabe 	bl	8009f00 <_free_r>
 8009984:	e7c7      	b.n	8009916 <__ssputs_r+0x46>
	...

08009988 <_svfiprintf_r>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	4698      	mov	r8, r3
 800998e:	898b      	ldrh	r3, [r1, #12]
 8009990:	061b      	lsls	r3, r3, #24
 8009992:	b09d      	sub	sp, #116	; 0x74
 8009994:	4607      	mov	r7, r0
 8009996:	460d      	mov	r5, r1
 8009998:	4614      	mov	r4, r2
 800999a:	d50e      	bpl.n	80099ba <_svfiprintf_r+0x32>
 800999c:	690b      	ldr	r3, [r1, #16]
 800999e:	b963      	cbnz	r3, 80099ba <_svfiprintf_r+0x32>
 80099a0:	2140      	movs	r1, #64	; 0x40
 80099a2:	f000 fb19 	bl	8009fd8 <_malloc_r>
 80099a6:	6028      	str	r0, [r5, #0]
 80099a8:	6128      	str	r0, [r5, #16]
 80099aa:	b920      	cbnz	r0, 80099b6 <_svfiprintf_r+0x2e>
 80099ac:	230c      	movs	r3, #12
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	e0d1      	b.n	8009b5a <_svfiprintf_r+0x1d2>
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	616b      	str	r3, [r5, #20]
 80099ba:	2300      	movs	r3, #0
 80099bc:	9309      	str	r3, [sp, #36]	; 0x24
 80099be:	2320      	movs	r3, #32
 80099c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099c8:	2330      	movs	r3, #48	; 0x30
 80099ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b74 <_svfiprintf_r+0x1ec>
 80099ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099d2:	f04f 0901 	mov.w	r9, #1
 80099d6:	4623      	mov	r3, r4
 80099d8:	469a      	mov	sl, r3
 80099da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099de:	b10a      	cbz	r2, 80099e4 <_svfiprintf_r+0x5c>
 80099e0:	2a25      	cmp	r2, #37	; 0x25
 80099e2:	d1f9      	bne.n	80099d8 <_svfiprintf_r+0x50>
 80099e4:	ebba 0b04 	subs.w	fp, sl, r4
 80099e8:	d00b      	beq.n	8009a02 <_svfiprintf_r+0x7a>
 80099ea:	465b      	mov	r3, fp
 80099ec:	4622      	mov	r2, r4
 80099ee:	4629      	mov	r1, r5
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff ff6d 	bl	80098d0 <__ssputs_r>
 80099f6:	3001      	adds	r0, #1
 80099f8:	f000 80aa 	beq.w	8009b50 <_svfiprintf_r+0x1c8>
 80099fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099fe:	445a      	add	r2, fp
 8009a00:	9209      	str	r2, [sp, #36]	; 0x24
 8009a02:	f89a 3000 	ldrb.w	r3, [sl]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 80a2 	beq.w	8009b50 <_svfiprintf_r+0x1c8>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a16:	f10a 0a01 	add.w	sl, sl, #1
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	9307      	str	r3, [sp, #28]
 8009a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a22:	931a      	str	r3, [sp, #104]	; 0x68
 8009a24:	4654      	mov	r4, sl
 8009a26:	2205      	movs	r2, #5
 8009a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2c:	4851      	ldr	r0, [pc, #324]	; (8009b74 <_svfiprintf_r+0x1ec>)
 8009a2e:	f7f6 fbdf 	bl	80001f0 <memchr>
 8009a32:	9a04      	ldr	r2, [sp, #16]
 8009a34:	b9d8      	cbnz	r0, 8009a6e <_svfiprintf_r+0xe6>
 8009a36:	06d0      	lsls	r0, r2, #27
 8009a38:	bf44      	itt	mi
 8009a3a:	2320      	movmi	r3, #32
 8009a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a40:	0711      	lsls	r1, r2, #28
 8009a42:	bf44      	itt	mi
 8009a44:	232b      	movmi	r3, #43	; 0x2b
 8009a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a50:	d015      	beq.n	8009a7e <_svfiprintf_r+0xf6>
 8009a52:	9a07      	ldr	r2, [sp, #28]
 8009a54:	4654      	mov	r4, sl
 8009a56:	2000      	movs	r0, #0
 8009a58:	f04f 0c0a 	mov.w	ip, #10
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a62:	3b30      	subs	r3, #48	; 0x30
 8009a64:	2b09      	cmp	r3, #9
 8009a66:	d94e      	bls.n	8009b06 <_svfiprintf_r+0x17e>
 8009a68:	b1b0      	cbz	r0, 8009a98 <_svfiprintf_r+0x110>
 8009a6a:	9207      	str	r2, [sp, #28]
 8009a6c:	e014      	b.n	8009a98 <_svfiprintf_r+0x110>
 8009a6e:	eba0 0308 	sub.w	r3, r0, r8
 8009a72:	fa09 f303 	lsl.w	r3, r9, r3
 8009a76:	4313      	orrs	r3, r2
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	46a2      	mov	sl, r4
 8009a7c:	e7d2      	b.n	8009a24 <_svfiprintf_r+0x9c>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9103      	str	r1, [sp, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfbb      	ittet	lt
 8009a8a:	425b      	neglt	r3, r3
 8009a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a90:	9307      	strge	r3, [sp, #28]
 8009a92:	9307      	strlt	r3, [sp, #28]
 8009a94:	bfb8      	it	lt
 8009a96:	9204      	strlt	r2, [sp, #16]
 8009a98:	7823      	ldrb	r3, [r4, #0]
 8009a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9c:	d10c      	bne.n	8009ab8 <_svfiprintf_r+0x130>
 8009a9e:	7863      	ldrb	r3, [r4, #1]
 8009aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa2:	d135      	bne.n	8009b10 <_svfiprintf_r+0x188>
 8009aa4:	9b03      	ldr	r3, [sp, #12]
 8009aa6:	1d1a      	adds	r2, r3, #4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	9203      	str	r2, [sp, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	bfb8      	it	lt
 8009ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ab4:	3402      	adds	r4, #2
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b84 <_svfiprintf_r+0x1fc>
 8009abc:	7821      	ldrb	r1, [r4, #0]
 8009abe:	2203      	movs	r2, #3
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	f7f6 fb95 	bl	80001f0 <memchr>
 8009ac6:	b140      	cbz	r0, 8009ada <_svfiprintf_r+0x152>
 8009ac8:	2340      	movs	r3, #64	; 0x40
 8009aca:	eba0 000a 	sub.w	r0, r0, sl
 8009ace:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad2:	9b04      	ldr	r3, [sp, #16]
 8009ad4:	4303      	orrs	r3, r0
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ade:	4826      	ldr	r0, [pc, #152]	; (8009b78 <_svfiprintf_r+0x1f0>)
 8009ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae4:	2206      	movs	r2, #6
 8009ae6:	f7f6 fb83 	bl	80001f0 <memchr>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d038      	beq.n	8009b60 <_svfiprintf_r+0x1d8>
 8009aee:	4b23      	ldr	r3, [pc, #140]	; (8009b7c <_svfiprintf_r+0x1f4>)
 8009af0:	bb1b      	cbnz	r3, 8009b3a <_svfiprintf_r+0x1b2>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	3307      	adds	r3, #7
 8009af6:	f023 0307 	bic.w	r3, r3, #7
 8009afa:	3308      	adds	r3, #8
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b00:	4433      	add	r3, r6
 8009b02:	9309      	str	r3, [sp, #36]	; 0x24
 8009b04:	e767      	b.n	80099d6 <_svfiprintf_r+0x4e>
 8009b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	e7a5      	b.n	8009a5c <_svfiprintf_r+0xd4>
 8009b10:	2300      	movs	r3, #0
 8009b12:	3401      	adds	r4, #1
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	4619      	mov	r1, r3
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b22:	3a30      	subs	r2, #48	; 0x30
 8009b24:	2a09      	cmp	r2, #9
 8009b26:	d903      	bls.n	8009b30 <_svfiprintf_r+0x1a8>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0c5      	beq.n	8009ab8 <_svfiprintf_r+0x130>
 8009b2c:	9105      	str	r1, [sp, #20]
 8009b2e:	e7c3      	b.n	8009ab8 <_svfiprintf_r+0x130>
 8009b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b34:	4604      	mov	r4, r0
 8009b36:	2301      	movs	r3, #1
 8009b38:	e7f0      	b.n	8009b1c <_svfiprintf_r+0x194>
 8009b3a:	ab03      	add	r3, sp, #12
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <_svfiprintf_r+0x1f8>)
 8009b42:	a904      	add	r1, sp, #16
 8009b44:	4638      	mov	r0, r7
 8009b46:	f3af 8000 	nop.w
 8009b4a:	1c42      	adds	r2, r0, #1
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	d1d6      	bne.n	8009afe <_svfiprintf_r+0x176>
 8009b50:	89ab      	ldrh	r3, [r5, #12]
 8009b52:	065b      	lsls	r3, r3, #25
 8009b54:	f53f af2c 	bmi.w	80099b0 <_svfiprintf_r+0x28>
 8009b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b5a:	b01d      	add	sp, #116	; 0x74
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	ab03      	add	r3, sp, #12
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	462a      	mov	r2, r5
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <_svfiprintf_r+0x1f8>)
 8009b68:	a904      	add	r1, sp, #16
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	f000 f87a 	bl	8009c64 <_printf_i>
 8009b70:	e7eb      	b.n	8009b4a <_svfiprintf_r+0x1c2>
 8009b72:	bf00      	nop
 8009b74:	0800a578 	.word	0x0800a578
 8009b78:	0800a582 	.word	0x0800a582
 8009b7c:	00000000 	.word	0x00000000
 8009b80:	080098d1 	.word	0x080098d1
 8009b84:	0800a57e 	.word	0x0800a57e

08009b88 <_printf_common>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	4616      	mov	r6, r2
 8009b8e:	4699      	mov	r9, r3
 8009b90:	688a      	ldr	r2, [r1, #8]
 8009b92:	690b      	ldr	r3, [r1, #16]
 8009b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	bfb8      	it	lt
 8009b9c:	4613      	movlt	r3, r2
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	b10a      	cbz	r2, 8009bae <_printf_common+0x26>
 8009baa:	3301      	adds	r3, #1
 8009bac:	6033      	str	r3, [r6, #0]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	0699      	lsls	r1, r3, #26
 8009bb2:	bf42      	ittt	mi
 8009bb4:	6833      	ldrmi	r3, [r6, #0]
 8009bb6:	3302      	addmi	r3, #2
 8009bb8:	6033      	strmi	r3, [r6, #0]
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	f015 0506 	ands.w	r5, r5, #6
 8009bc0:	d106      	bne.n	8009bd0 <_printf_common+0x48>
 8009bc2:	f104 0a19 	add.w	sl, r4, #25
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	6832      	ldr	r2, [r6, #0]
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dc26      	bgt.n	8009c1e <_printf_common+0x96>
 8009bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bd4:	1e13      	subs	r3, r2, #0
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	bf18      	it	ne
 8009bda:	2301      	movne	r3, #1
 8009bdc:	0692      	lsls	r2, r2, #26
 8009bde:	d42b      	bmi.n	8009c38 <_printf_common+0xb0>
 8009be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009be4:	4649      	mov	r1, r9
 8009be6:	4638      	mov	r0, r7
 8009be8:	47c0      	blx	r8
 8009bea:	3001      	adds	r0, #1
 8009bec:	d01e      	beq.n	8009c2c <_printf_common+0xa4>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	68e5      	ldr	r5, [r4, #12]
 8009bf2:	6832      	ldr	r2, [r6, #0]
 8009bf4:	f003 0306 	and.w	r3, r3, #6
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	bf08      	it	eq
 8009bfc:	1aad      	subeq	r5, r5, r2
 8009bfe:	68a3      	ldr	r3, [r4, #8]
 8009c00:	6922      	ldr	r2, [r4, #16]
 8009c02:	bf0c      	ite	eq
 8009c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c08:	2500      	movne	r5, #0
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	bfc4      	itt	gt
 8009c0e:	1a9b      	subgt	r3, r3, r2
 8009c10:	18ed      	addgt	r5, r5, r3
 8009c12:	2600      	movs	r6, #0
 8009c14:	341a      	adds	r4, #26
 8009c16:	42b5      	cmp	r5, r6
 8009c18:	d11a      	bne.n	8009c50 <_printf_common+0xc8>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	e008      	b.n	8009c30 <_printf_common+0xa8>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4652      	mov	r2, sl
 8009c22:	4649      	mov	r1, r9
 8009c24:	4638      	mov	r0, r7
 8009c26:	47c0      	blx	r8
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d103      	bne.n	8009c34 <_printf_common+0xac>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c34:	3501      	adds	r5, #1
 8009c36:	e7c6      	b.n	8009bc6 <_printf_common+0x3e>
 8009c38:	18e1      	adds	r1, r4, r3
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	2030      	movs	r0, #48	; 0x30
 8009c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c42:	4422      	add	r2, r4
 8009c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	e7c7      	b.n	8009be0 <_printf_common+0x58>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4622      	mov	r2, r4
 8009c54:	4649      	mov	r1, r9
 8009c56:	4638      	mov	r0, r7
 8009c58:	47c0      	blx	r8
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d0e6      	beq.n	8009c2c <_printf_common+0xa4>
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7d9      	b.n	8009c16 <_printf_common+0x8e>
	...

08009c64 <_printf_i>:
 8009c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	7e0f      	ldrb	r7, [r1, #24]
 8009c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c6c:	2f78      	cmp	r7, #120	; 0x78
 8009c6e:	4691      	mov	r9, r2
 8009c70:	4680      	mov	r8, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	469a      	mov	sl, r3
 8009c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c7a:	d807      	bhi.n	8009c8c <_printf_i+0x28>
 8009c7c:	2f62      	cmp	r7, #98	; 0x62
 8009c7e:	d80a      	bhi.n	8009c96 <_printf_i+0x32>
 8009c80:	2f00      	cmp	r7, #0
 8009c82:	f000 80d8 	beq.w	8009e36 <_printf_i+0x1d2>
 8009c86:	2f58      	cmp	r7, #88	; 0x58
 8009c88:	f000 80a3 	beq.w	8009dd2 <_printf_i+0x16e>
 8009c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c94:	e03a      	b.n	8009d0c <_printf_i+0xa8>
 8009c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c9a:	2b15      	cmp	r3, #21
 8009c9c:	d8f6      	bhi.n	8009c8c <_printf_i+0x28>
 8009c9e:	a101      	add	r1, pc, #4	; (adr r1, 8009ca4 <_printf_i+0x40>)
 8009ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca4:	08009cfd 	.word	0x08009cfd
 8009ca8:	08009d11 	.word	0x08009d11
 8009cac:	08009c8d 	.word	0x08009c8d
 8009cb0:	08009c8d 	.word	0x08009c8d
 8009cb4:	08009c8d 	.word	0x08009c8d
 8009cb8:	08009c8d 	.word	0x08009c8d
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009c8d 	.word	0x08009c8d
 8009cc4:	08009c8d 	.word	0x08009c8d
 8009cc8:	08009c8d 	.word	0x08009c8d
 8009ccc:	08009c8d 	.word	0x08009c8d
 8009cd0:	08009e1d 	.word	0x08009e1d
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009dff 	.word	0x08009dff
 8009cdc:	08009c8d 	.word	0x08009c8d
 8009ce0:	08009c8d 	.word	0x08009c8d
 8009ce4:	08009e3f 	.word	0x08009e3f
 8009ce8:	08009c8d 	.word	0x08009c8d
 8009cec:	08009d41 	.word	0x08009d41
 8009cf0:	08009c8d 	.word	0x08009c8d
 8009cf4:	08009c8d 	.word	0x08009c8d
 8009cf8:	08009e07 	.word	0x08009e07
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	602a      	str	r2, [r5, #0]
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e0a3      	b.n	8009e58 <_printf_i+0x1f4>
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	6829      	ldr	r1, [r5, #0]
 8009d14:	0606      	lsls	r6, r0, #24
 8009d16:	f101 0304 	add.w	r3, r1, #4
 8009d1a:	d50a      	bpl.n	8009d32 <_printf_i+0xce>
 8009d1c:	680e      	ldr	r6, [r1, #0]
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	2e00      	cmp	r6, #0
 8009d22:	da03      	bge.n	8009d2c <_printf_i+0xc8>
 8009d24:	232d      	movs	r3, #45	; 0x2d
 8009d26:	4276      	negs	r6, r6
 8009d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d2c:	485e      	ldr	r0, [pc, #376]	; (8009ea8 <_printf_i+0x244>)
 8009d2e:	230a      	movs	r3, #10
 8009d30:	e019      	b.n	8009d66 <_printf_i+0x102>
 8009d32:	680e      	ldr	r6, [r1, #0]
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d3a:	bf18      	it	ne
 8009d3c:	b236      	sxthne	r6, r6
 8009d3e:	e7ef      	b.n	8009d20 <_printf_i+0xbc>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	6820      	ldr	r0, [r4, #0]
 8009d44:	1d19      	adds	r1, r3, #4
 8009d46:	6029      	str	r1, [r5, #0]
 8009d48:	0601      	lsls	r1, r0, #24
 8009d4a:	d501      	bpl.n	8009d50 <_printf_i+0xec>
 8009d4c:	681e      	ldr	r6, [r3, #0]
 8009d4e:	e002      	b.n	8009d56 <_printf_i+0xf2>
 8009d50:	0646      	lsls	r6, r0, #25
 8009d52:	d5fb      	bpl.n	8009d4c <_printf_i+0xe8>
 8009d54:	881e      	ldrh	r6, [r3, #0]
 8009d56:	4854      	ldr	r0, [pc, #336]	; (8009ea8 <_printf_i+0x244>)
 8009d58:	2f6f      	cmp	r7, #111	; 0x6f
 8009d5a:	bf0c      	ite	eq
 8009d5c:	2308      	moveq	r3, #8
 8009d5e:	230a      	movne	r3, #10
 8009d60:	2100      	movs	r1, #0
 8009d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d66:	6865      	ldr	r5, [r4, #4]
 8009d68:	60a5      	str	r5, [r4, #8]
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	bfa2      	ittt	ge
 8009d6e:	6821      	ldrge	r1, [r4, #0]
 8009d70:	f021 0104 	bicge.w	r1, r1, #4
 8009d74:	6021      	strge	r1, [r4, #0]
 8009d76:	b90e      	cbnz	r6, 8009d7c <_printf_i+0x118>
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	d04d      	beq.n	8009e18 <_printf_i+0x1b4>
 8009d7c:	4615      	mov	r5, r2
 8009d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d82:	fb03 6711 	mls	r7, r3, r1, r6
 8009d86:	5dc7      	ldrb	r7, [r0, r7]
 8009d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d8c:	4637      	mov	r7, r6
 8009d8e:	42bb      	cmp	r3, r7
 8009d90:	460e      	mov	r6, r1
 8009d92:	d9f4      	bls.n	8009d7e <_printf_i+0x11a>
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d10b      	bne.n	8009db0 <_printf_i+0x14c>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	07de      	lsls	r6, r3, #31
 8009d9c:	d508      	bpl.n	8009db0 <_printf_i+0x14c>
 8009d9e:	6923      	ldr	r3, [r4, #16]
 8009da0:	6861      	ldr	r1, [r4, #4]
 8009da2:	4299      	cmp	r1, r3
 8009da4:	bfde      	ittt	le
 8009da6:	2330      	movle	r3, #48	; 0x30
 8009da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009db0:	1b52      	subs	r2, r2, r5
 8009db2:	6122      	str	r2, [r4, #16]
 8009db4:	f8cd a000 	str.w	sl, [sp]
 8009db8:	464b      	mov	r3, r9
 8009dba:	aa03      	add	r2, sp, #12
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	f7ff fee2 	bl	8009b88 <_printf_common>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d14c      	bne.n	8009e62 <_printf_i+0x1fe>
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	b004      	add	sp, #16
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	4835      	ldr	r0, [pc, #212]	; (8009ea8 <_printf_i+0x244>)
 8009dd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dd8:	6829      	ldr	r1, [r5, #0]
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009de0:	6029      	str	r1, [r5, #0]
 8009de2:	061d      	lsls	r5, r3, #24
 8009de4:	d514      	bpl.n	8009e10 <_printf_i+0x1ac>
 8009de6:	07df      	lsls	r7, r3, #31
 8009de8:	bf44      	itt	mi
 8009dea:	f043 0320 	orrmi.w	r3, r3, #32
 8009dee:	6023      	strmi	r3, [r4, #0]
 8009df0:	b91e      	cbnz	r6, 8009dfa <_printf_i+0x196>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f023 0320 	bic.w	r3, r3, #32
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	2310      	movs	r3, #16
 8009dfc:	e7b0      	b.n	8009d60 <_printf_i+0xfc>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	f043 0320 	orr.w	r3, r3, #32
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	2378      	movs	r3, #120	; 0x78
 8009e08:	4828      	ldr	r0, [pc, #160]	; (8009eac <_printf_i+0x248>)
 8009e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e0e:	e7e3      	b.n	8009dd8 <_printf_i+0x174>
 8009e10:	0659      	lsls	r1, r3, #25
 8009e12:	bf48      	it	mi
 8009e14:	b2b6      	uxthmi	r6, r6
 8009e16:	e7e6      	b.n	8009de6 <_printf_i+0x182>
 8009e18:	4615      	mov	r5, r2
 8009e1a:	e7bb      	b.n	8009d94 <_printf_i+0x130>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	6826      	ldr	r6, [r4, #0]
 8009e20:	6961      	ldr	r1, [r4, #20]
 8009e22:	1d18      	adds	r0, r3, #4
 8009e24:	6028      	str	r0, [r5, #0]
 8009e26:	0635      	lsls	r5, r6, #24
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	d501      	bpl.n	8009e30 <_printf_i+0x1cc>
 8009e2c:	6019      	str	r1, [r3, #0]
 8009e2e:	e002      	b.n	8009e36 <_printf_i+0x1d2>
 8009e30:	0670      	lsls	r0, r6, #25
 8009e32:	d5fb      	bpl.n	8009e2c <_printf_i+0x1c8>
 8009e34:	8019      	strh	r1, [r3, #0]
 8009e36:	2300      	movs	r3, #0
 8009e38:	6123      	str	r3, [r4, #16]
 8009e3a:	4615      	mov	r5, r2
 8009e3c:	e7ba      	b.n	8009db4 <_printf_i+0x150>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	1d1a      	adds	r2, r3, #4
 8009e42:	602a      	str	r2, [r5, #0]
 8009e44:	681d      	ldr	r5, [r3, #0]
 8009e46:	6862      	ldr	r2, [r4, #4]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7f6 f9d0 	bl	80001f0 <memchr>
 8009e50:	b108      	cbz	r0, 8009e56 <_printf_i+0x1f2>
 8009e52:	1b40      	subs	r0, r0, r5
 8009e54:	6060      	str	r0, [r4, #4]
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e60:	e7a8      	b.n	8009db4 <_printf_i+0x150>
 8009e62:	6923      	ldr	r3, [r4, #16]
 8009e64:	462a      	mov	r2, r5
 8009e66:	4649      	mov	r1, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	47d0      	blx	sl
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d0ab      	beq.n	8009dc8 <_printf_i+0x164>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	079b      	lsls	r3, r3, #30
 8009e74:	d413      	bmi.n	8009e9e <_printf_i+0x23a>
 8009e76:	68e0      	ldr	r0, [r4, #12]
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	4298      	cmp	r0, r3
 8009e7c:	bfb8      	it	lt
 8009e7e:	4618      	movlt	r0, r3
 8009e80:	e7a4      	b.n	8009dcc <_printf_i+0x168>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4632      	mov	r2, r6
 8009e86:	4649      	mov	r1, r9
 8009e88:	4640      	mov	r0, r8
 8009e8a:	47d0      	blx	sl
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d09b      	beq.n	8009dc8 <_printf_i+0x164>
 8009e90:	3501      	adds	r5, #1
 8009e92:	68e3      	ldr	r3, [r4, #12]
 8009e94:	9903      	ldr	r1, [sp, #12]
 8009e96:	1a5b      	subs	r3, r3, r1
 8009e98:	42ab      	cmp	r3, r5
 8009e9a:	dcf2      	bgt.n	8009e82 <_printf_i+0x21e>
 8009e9c:	e7eb      	b.n	8009e76 <_printf_i+0x212>
 8009e9e:	2500      	movs	r5, #0
 8009ea0:	f104 0619 	add.w	r6, r4, #25
 8009ea4:	e7f5      	b.n	8009e92 <_printf_i+0x22e>
 8009ea6:	bf00      	nop
 8009ea8:	0800a589 	.word	0x0800a589
 8009eac:	0800a59a 	.word	0x0800a59a

08009eb0 <memcpy>:
 8009eb0:	440a      	add	r2, r1
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb8:	d100      	bne.n	8009ebc <memcpy+0xc>
 8009eba:	4770      	bx	lr
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec6:	4291      	cmp	r1, r2
 8009ec8:	d1f9      	bne.n	8009ebe <memcpy+0xe>
 8009eca:	bd10      	pop	{r4, pc}

08009ecc <memmove>:
 8009ecc:	4288      	cmp	r0, r1
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	eb01 0402 	add.w	r4, r1, r2
 8009ed4:	d902      	bls.n	8009edc <memmove+0x10>
 8009ed6:	4284      	cmp	r4, r0
 8009ed8:	4623      	mov	r3, r4
 8009eda:	d807      	bhi.n	8009eec <memmove+0x20>
 8009edc:	1e43      	subs	r3, r0, #1
 8009ede:	42a1      	cmp	r1, r4
 8009ee0:	d008      	beq.n	8009ef4 <memmove+0x28>
 8009ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eea:	e7f8      	b.n	8009ede <memmove+0x12>
 8009eec:	4402      	add	r2, r0
 8009eee:	4601      	mov	r1, r0
 8009ef0:	428a      	cmp	r2, r1
 8009ef2:	d100      	bne.n	8009ef6 <memmove+0x2a>
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009efe:	e7f7      	b.n	8009ef0 <memmove+0x24>

08009f00 <_free_r>:
 8009f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f02:	2900      	cmp	r1, #0
 8009f04:	d044      	beq.n	8009f90 <_free_r+0x90>
 8009f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0a:	9001      	str	r0, [sp, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f12:	bfb8      	it	lt
 8009f14:	18e4      	addlt	r4, r4, r3
 8009f16:	f000 f913 	bl	800a140 <__malloc_lock>
 8009f1a:	4a1e      	ldr	r2, [pc, #120]	; (8009f94 <_free_r+0x94>)
 8009f1c:	9801      	ldr	r0, [sp, #4]
 8009f1e:	6813      	ldr	r3, [r2, #0]
 8009f20:	b933      	cbnz	r3, 8009f30 <_free_r+0x30>
 8009f22:	6063      	str	r3, [r4, #4]
 8009f24:	6014      	str	r4, [r2, #0]
 8009f26:	b003      	add	sp, #12
 8009f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2c:	f000 b90e 	b.w	800a14c <__malloc_unlock>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d908      	bls.n	8009f46 <_free_r+0x46>
 8009f34:	6825      	ldr	r5, [r4, #0]
 8009f36:	1961      	adds	r1, r4, r5
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf01      	itttt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	1949      	addeq	r1, r1, r5
 8009f42:	6021      	streq	r1, [r4, #0]
 8009f44:	e7ed      	b.n	8009f22 <_free_r+0x22>
 8009f46:	461a      	mov	r2, r3
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	b10b      	cbz	r3, 8009f50 <_free_r+0x50>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d9fa      	bls.n	8009f46 <_free_r+0x46>
 8009f50:	6811      	ldr	r1, [r2, #0]
 8009f52:	1855      	adds	r5, r2, r1
 8009f54:	42a5      	cmp	r5, r4
 8009f56:	d10b      	bne.n	8009f70 <_free_r+0x70>
 8009f58:	6824      	ldr	r4, [r4, #0]
 8009f5a:	4421      	add	r1, r4
 8009f5c:	1854      	adds	r4, r2, r1
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	6011      	str	r1, [r2, #0]
 8009f62:	d1e0      	bne.n	8009f26 <_free_r+0x26>
 8009f64:	681c      	ldr	r4, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	6053      	str	r3, [r2, #4]
 8009f6a:	4421      	add	r1, r4
 8009f6c:	6011      	str	r1, [r2, #0]
 8009f6e:	e7da      	b.n	8009f26 <_free_r+0x26>
 8009f70:	d902      	bls.n	8009f78 <_free_r+0x78>
 8009f72:	230c      	movs	r3, #12
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	e7d6      	b.n	8009f26 <_free_r+0x26>
 8009f78:	6825      	ldr	r5, [r4, #0]
 8009f7a:	1961      	adds	r1, r4, r5
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf04      	itt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	6063      	str	r3, [r4, #4]
 8009f86:	bf04      	itt	eq
 8009f88:	1949      	addeq	r1, r1, r5
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	6054      	str	r4, [r2, #4]
 8009f8e:	e7ca      	b.n	8009f26 <_free_r+0x26>
 8009f90:	b003      	add	sp, #12
 8009f92:	bd30      	pop	{r4, r5, pc}
 8009f94:	200004f0 	.word	0x200004f0

08009f98 <sbrk_aligned>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4e0e      	ldr	r6, [pc, #56]	; (8009fd4 <sbrk_aligned+0x3c>)
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	6831      	ldr	r1, [r6, #0]
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	b911      	cbnz	r1, 8009faa <sbrk_aligned+0x12>
 8009fa4:	f000 f8bc 	bl	800a120 <_sbrk_r>
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f8b7 	bl	800a120 <_sbrk_r>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d00a      	beq.n	8009fcc <sbrk_aligned+0x34>
 8009fb6:	1cc4      	adds	r4, r0, #3
 8009fb8:	f024 0403 	bic.w	r4, r4, #3
 8009fbc:	42a0      	cmp	r0, r4
 8009fbe:	d007      	beq.n	8009fd0 <sbrk_aligned+0x38>
 8009fc0:	1a21      	subs	r1, r4, r0
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f8ac 	bl	800a120 <_sbrk_r>
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d101      	bne.n	8009fd0 <sbrk_aligned+0x38>
 8009fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	200004f4 	.word	0x200004f4

08009fd8 <_malloc_r>:
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	1ccd      	adds	r5, r1, #3
 8009fde:	f025 0503 	bic.w	r5, r5, #3
 8009fe2:	3508      	adds	r5, #8
 8009fe4:	2d0c      	cmp	r5, #12
 8009fe6:	bf38      	it	cc
 8009fe8:	250c      	movcc	r5, #12
 8009fea:	2d00      	cmp	r5, #0
 8009fec:	4607      	mov	r7, r0
 8009fee:	db01      	blt.n	8009ff4 <_malloc_r+0x1c>
 8009ff0:	42a9      	cmp	r1, r5
 8009ff2:	d905      	bls.n	800a000 <_malloc_r+0x28>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	4e2e      	ldr	r6, [pc, #184]	; (800a0bc <_malloc_r+0xe4>)
 800a002:	f000 f89d 	bl	800a140 <__malloc_lock>
 800a006:	6833      	ldr	r3, [r6, #0]
 800a008:	461c      	mov	r4, r3
 800a00a:	bb34      	cbnz	r4, 800a05a <_malloc_r+0x82>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4638      	mov	r0, r7
 800a010:	f7ff ffc2 	bl	8009f98 <sbrk_aligned>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	4604      	mov	r4, r0
 800a018:	d14d      	bne.n	800a0b6 <_malloc_r+0xde>
 800a01a:	6834      	ldr	r4, [r6, #0]
 800a01c:	4626      	mov	r6, r4
 800a01e:	2e00      	cmp	r6, #0
 800a020:	d140      	bne.n	800a0a4 <_malloc_r+0xcc>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4631      	mov	r1, r6
 800a026:	4638      	mov	r0, r7
 800a028:	eb04 0803 	add.w	r8, r4, r3
 800a02c:	f000 f878 	bl	800a120 <_sbrk_r>
 800a030:	4580      	cmp	r8, r0
 800a032:	d13a      	bne.n	800a0aa <_malloc_r+0xd2>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	3503      	adds	r5, #3
 800a038:	1a6d      	subs	r5, r5, r1
 800a03a:	f025 0503 	bic.w	r5, r5, #3
 800a03e:	3508      	adds	r5, #8
 800a040:	2d0c      	cmp	r5, #12
 800a042:	bf38      	it	cc
 800a044:	250c      	movcc	r5, #12
 800a046:	4629      	mov	r1, r5
 800a048:	4638      	mov	r0, r7
 800a04a:	f7ff ffa5 	bl	8009f98 <sbrk_aligned>
 800a04e:	3001      	adds	r0, #1
 800a050:	d02b      	beq.n	800a0aa <_malloc_r+0xd2>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	442b      	add	r3, r5
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	e00e      	b.n	800a078 <_malloc_r+0xa0>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	1b52      	subs	r2, r2, r5
 800a05e:	d41e      	bmi.n	800a09e <_malloc_r+0xc6>
 800a060:	2a0b      	cmp	r2, #11
 800a062:	d916      	bls.n	800a092 <_malloc_r+0xba>
 800a064:	1961      	adds	r1, r4, r5
 800a066:	42a3      	cmp	r3, r4
 800a068:	6025      	str	r5, [r4, #0]
 800a06a:	bf18      	it	ne
 800a06c:	6059      	strne	r1, [r3, #4]
 800a06e:	6863      	ldr	r3, [r4, #4]
 800a070:	bf08      	it	eq
 800a072:	6031      	streq	r1, [r6, #0]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4638      	mov	r0, r7
 800a07a:	f104 060b 	add.w	r6, r4, #11
 800a07e:	f000 f865 	bl	800a14c <__malloc_unlock>
 800a082:	f026 0607 	bic.w	r6, r6, #7
 800a086:	1d23      	adds	r3, r4, #4
 800a088:	1af2      	subs	r2, r6, r3
 800a08a:	d0b6      	beq.n	8009ffa <_malloc_r+0x22>
 800a08c:	1b9b      	subs	r3, r3, r6
 800a08e:	50a3      	str	r3, [r4, r2]
 800a090:	e7b3      	b.n	8009ffa <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	6032      	streq	r2, [r6, #0]
 800a09a:	605a      	strne	r2, [r3, #4]
 800a09c:	e7ec      	b.n	800a078 <_malloc_r+0xa0>
 800a09e:	4623      	mov	r3, r4
 800a0a0:	6864      	ldr	r4, [r4, #4]
 800a0a2:	e7b2      	b.n	800a00a <_malloc_r+0x32>
 800a0a4:	4634      	mov	r4, r6
 800a0a6:	6876      	ldr	r6, [r6, #4]
 800a0a8:	e7b9      	b.n	800a01e <_malloc_r+0x46>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f000 f84c 	bl	800a14c <__malloc_unlock>
 800a0b4:	e7a1      	b.n	8009ffa <_malloc_r+0x22>
 800a0b6:	6025      	str	r5, [r4, #0]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa0>
 800a0ba:	bf00      	nop
 800a0bc:	200004f0 	.word	0x200004f0

0800a0c0 <_realloc_r>:
 800a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4614      	mov	r4, r2
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	b921      	cbnz	r1, 800a0d6 <_realloc_r+0x16>
 800a0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	f7ff bf81 	b.w	8009fd8 <_malloc_r>
 800a0d6:	b92a      	cbnz	r2, 800a0e4 <_realloc_r+0x24>
 800a0d8:	f7ff ff12 	bl	8009f00 <_free_r>
 800a0dc:	4625      	mov	r5, r4
 800a0de:	4628      	mov	r0, r5
 800a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e4:	f000 f838 	bl	800a158 <_malloc_usable_size_r>
 800a0e8:	4284      	cmp	r4, r0
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	d802      	bhi.n	800a0f4 <_realloc_r+0x34>
 800a0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0f2:	d812      	bhi.n	800a11a <_realloc_r+0x5a>
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f7ff ff6e 	bl	8009fd8 <_malloc_r>
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0ed      	beq.n	800a0de <_realloc_r+0x1e>
 800a102:	42bc      	cmp	r4, r7
 800a104:	4622      	mov	r2, r4
 800a106:	4631      	mov	r1, r6
 800a108:	bf28      	it	cs
 800a10a:	463a      	movcs	r2, r7
 800a10c:	f7ff fed0 	bl	8009eb0 <memcpy>
 800a110:	4631      	mov	r1, r6
 800a112:	4640      	mov	r0, r8
 800a114:	f7ff fef4 	bl	8009f00 <_free_r>
 800a118:	e7e1      	b.n	800a0de <_realloc_r+0x1e>
 800a11a:	4635      	mov	r5, r6
 800a11c:	e7df      	b.n	800a0de <_realloc_r+0x1e>
	...

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d06      	ldr	r5, [pc, #24]	; (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f8 fcec 	bl	8002b08 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200004f8 	.word	0x200004f8

0800a140 <__malloc_lock>:
 800a140:	4801      	ldr	r0, [pc, #4]	; (800a148 <__malloc_lock+0x8>)
 800a142:	f000 b811 	b.w	800a168 <__retarget_lock_acquire_recursive>
 800a146:	bf00      	nop
 800a148:	200004fc 	.word	0x200004fc

0800a14c <__malloc_unlock>:
 800a14c:	4801      	ldr	r0, [pc, #4]	; (800a154 <__malloc_unlock+0x8>)
 800a14e:	f000 b80c 	b.w	800a16a <__retarget_lock_release_recursive>
 800a152:	bf00      	nop
 800a154:	200004fc 	.word	0x200004fc

0800a158 <_malloc_usable_size_r>:
 800a158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15c:	1f18      	subs	r0, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbc      	itt	lt
 800a162:	580b      	ldrlt	r3, [r1, r0]
 800a164:	18c0      	addlt	r0, r0, r3
 800a166:	4770      	bx	lr

0800a168 <__retarget_lock_acquire_recursive>:
 800a168:	4770      	bx	lr

0800a16a <__retarget_lock_release_recursive>:
 800a16a:	4770      	bx	lr

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
