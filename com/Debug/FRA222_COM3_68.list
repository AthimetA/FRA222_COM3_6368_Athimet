
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f0  080078f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080078f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000080  08007974  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08007974  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012921  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b8  00000000  00000000  000329cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171dd  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c96  00000000  00000000  0004def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a01  00000000  00000000  00061b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f458c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  000f45dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074b0 	.word	0x080074b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080074b0 	.word	0x080074b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 fc4a 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f818 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f930 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f904 	bl	80007b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f87a 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005ac:	f000 f8a6 	bl	80006fc <MX_SPI3_Init>
  MX_TIM11_Init();
 80005b0:	f000 f8da 	bl	8000768 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f001 fcac 	bl	8001f14 <HAL_Delay>
  MCP23017SetInit();
 80005bc:	f001 f930 	bl	8001820 <MCP23017SetInit>
  HAL_TIM_Base_Start_IT(&htim11);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <main+0x38>)
 80005c2:	f005 f837 	bl	8005634 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 80005c6:	f000 f9a3 	bl	8000910 <StateMachineManagment>
 80005ca:	e7fc      	b.n	80005c6 <main+0x32>
 80005cc:	20000148 	.word	0x20000148

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 faf0 	bl	8006bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a26      	ldr	r2, [pc, #152]	; (8000698 <SystemClock_Config+0xc8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xcc>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f003 ff61 	bl	800451c <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f001 f9ca 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2103      	movs	r1, #3
 8000680:	4618      	mov	r0, r3
 8000682:	f004 f9c3 	bl	8004a0c <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800068c:	f001 f9b4 	bl	80019f8 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f001 ff8d 	bl	80025fc <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f001 f986 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	40005400 	.word	0x40005400
 80006f8:	00061a80 	.word	0x00061a80

080006fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI3_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI3_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI3_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI3_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI3_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI3_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI3_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI3_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI3_Init+0x64>)
 8000730:	2230      	movs	r2, #48	; 0x30
 8000732:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI3_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI3_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI3_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI3_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI3_Init+0x64>)
 800074e:	f004 fb7d 	bl	8004e4c <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000758:	f001 f94e 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000f0 	.word	0x200000f0
 8000764:	40003c00 	.word	0x40003c00

08000768 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM11_Init+0x40>)
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <MX_TIM11_Init+0x44>)
 8000770:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000774:	2263      	movs	r2, #99	; 0x63
 8000776:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_TIM11_Init+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000784:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM11_Init+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM11_Init+0x40>)
 8000794:	f004 fefe 	bl	8005594 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800079e:	f001 f92b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000148 	.word	0x20000148
 80007ac:	40014800 	.word	0x40014800

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f005 f94a 	bl	8005a80 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f001 f901 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000190 	.word	0x20000190
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0xfc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xfc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <MX_GPIO_Init+0xfc>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	481d      	ldr	r0, [pc, #116]	; (8000904 <MX_GPIO_Init+0x100>)
 8000890:	f001 fe9a 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <MX_GPIO_Init+0x104>)
 800089c:	f001 fe94 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_GPIO_Init+0x108>)
 80008b8:	f001 fd02 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_GPIO_Init+0x100>)
 80008d4:	f001 fcf4 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x104>)
 80008f2:	f001 fce5 	bl	80022c0 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800

08000910 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 8000910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af02      	add	r7, sp, #8
	switch (MCState)
 8000918:	4ba4      	ldr	r3, [pc, #656]	; (8000bac <StateMachineManagment+0x29c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b05      	cmp	r3, #5
 800091e:	f200 873b 	bhi.w	8001798 <StateMachineManagment+0xe88>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <StateMachineManagment+0x18>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000941 	.word	0x08000941
 800092c:	080009fb 	.word	0x080009fb
 8000930:	08000d29 	.word	0x08000d29
 8000934:	08001323 	.word	0x08001323
 8000938:	08000ced 	.word	0x08000ced
 800093c:	08000c09 	.word	0x08000c09
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 8000940:	499b      	ldr	r1, [pc, #620]	; (8000bb0 <StateMachineManagment+0x2a0>)
 8000942:	489c      	ldr	r0, [pc, #624]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000944:	f006 f946 	bl	8006bd4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000948:	489a      	ldr	r0, [pc, #616]	; (8000bb4 <StateMachineManagment+0x2a4>)
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	4997      	ldr	r1, [pc, #604]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000958:	4897      	ldr	r0, [pc, #604]	; (8000bb8 <StateMachineManagment+0x2a8>)
 800095a:	f005 f8de 	bl	8005b1a <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800095e:	4b97      	ldr	r3, [pc, #604]	; (8000bbc <StateMachineManagment+0x2ac>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4a97      	ldr	r2, [pc, #604]	; (8000bc0 <StateMachineManagment+0x2b0>)
 8000964:	7811      	ldrb	r1, [r2, #0]
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	4618      	mov	r0, r3
 800096a:	f000 ff31 	bl	80017d0 <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 800096e:	4b95      	ldr	r3, [pc, #596]	; (8000bc4 <StateMachineManagment+0x2b4>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8000974:	4b94      	ldr	r3, [pc, #592]	; (8000bc8 <StateMachineManagment+0x2b8>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 800097a:	4b94      	ldr	r3, [pc, #592]	; (8000bcc <StateMachineManagment+0x2bc>)
 800097c:	2200      	movs	r2, #0
 800097e:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8000980:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000982:	2200      	movs	r2, #0
 8000984:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 8000986:	4b91      	ldr	r3, [pc, #580]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000988:	2200      	movs	r2, #0
 800098a:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 800098c:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <StateMachineManagment+0x2bc>)
 800098e:	2200      	movs	r2, #0
 8000990:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 8000992:	4b8f      	ldr	r3, [pc, #572]	; (8000bd0 <StateMachineManagment+0x2c0>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8000998:	4b8e      	ldr	r3, [pc, #568]	; (8000bd4 <StateMachineManagment+0x2c4>)
 800099a:	2203      	movs	r2, #3
 800099c:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 800099e:	4b8d      	ldr	r3, [pc, #564]	; (8000bd4 <StateMachineManagment+0x2c4>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	220a      	movs	r2, #10
 80009a4:	4619      	mov	r1, r3
 80009a6:	488c      	ldr	r0, [pc, #560]	; (8000bd8 <StateMachineManagment+0x2c8>)
 80009a8:	f000 ff8e 	bl	80018c8 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f001 fab1 	bl	8001f14 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 80009b2:	4b89      	ldr	r3, [pc, #548]	; (8000bd8 <StateMachineManagment+0x2c8>)
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	4b85      	ldr	r3, [pc, #532]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009b8:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 80009ba:	4b87      	ldr	r3, [pc, #540]	; (8000bd8 <StateMachineManagment+0x2c8>)
 80009bc:	785a      	ldrb	r2, [r3, #1]
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009c0:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 80009c2:	4b85      	ldr	r3, [pc, #532]	; (8000bd8 <StateMachineManagment+0x2c8>)
 80009c4:	789a      	ldrb	r2, [r3, #2]
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009c8:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 80009ca:	4b83      	ldr	r3, [pc, #524]	; (8000bd8 <StateMachineManagment+0x2c8>)
 80009cc:	789a      	ldrb	r2, [r3, #2]
 80009ce:	4b7f      	ldr	r3, [pc, #508]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009d0:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 80009d2:	4b7e      	ldr	r3, [pc, #504]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009d4:	78da      	ldrb	r2, [r3, #3]
 80009d6:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009d8:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 80009da:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009dc:	791a      	ldrb	r2, [r3, #4]
 80009de:	4b7b      	ldr	r3, [pc, #492]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009e0:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009e4:	795a      	ldrb	r2, [r3, #5]
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <StateMachineManagment+0x2bc>)
 80009e8:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 80009ea:	4b7c      	ldr	r3, [pc, #496]	; (8000bdc <StateMachineManagment+0x2cc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80009f0:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <StateMachineManagment+0x29c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
			break;
 80009f6:	f000 becf 	b.w	8001798 <StateMachineManagment+0xe88>
		case StanBy:
			// Header
			if(flagUART == 0){
 80009fa:	4b78      	ldr	r3, [pc, #480]	; (8000bdc <StateMachineManagment+0x2cc>)
 80009fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f040 8085 	bne.w	8000b10 <StateMachineManagment+0x200>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000a06:	4976      	ldr	r1, [pc, #472]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000a08:	486a      	ldr	r0, [pc, #424]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a0a:	f006 f8e3 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a0e:	4869      	ldr	r0, [pc, #420]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a10:	f7ff fbe6 	bl	80001e0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	4965      	ldr	r1, [pc, #404]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a1e:	4866      	ldr	r0, [pc, #408]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000a20:	f005 f87b 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 8000a24:	496f      	ldr	r1, [pc, #444]	; (8000be4 <StateMachineManagment+0x2d4>)
 8000a26:	4863      	ldr	r0, [pc, #396]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a28:	f006 f8d4 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a2c:	4861      	ldr	r0, [pc, #388]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a2e:	f7ff fbd7 	bl	80001e0 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	495e      	ldr	r1, [pc, #376]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000a3e:	f005 f86c 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000a42:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	4966      	ldr	r1, [pc, #408]	; (8000be8 <StateMachineManagment+0x2d8>)
 8000a4e:	4859      	ldr	r0, [pc, #356]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a50:	f006 f8c0 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a54:	4857      	ldr	r0, [pc, #348]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a56:	f7ff fbc3 	bl	80001e0 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	4954      	ldr	r1, [pc, #336]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a64:	4854      	ldr	r0, [pc, #336]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000a66:	f005 f858 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000a6a:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <StateMachineManagment+0x2bc>)
 8000a72:	795b      	ldrb	r3, [r3, #5]
 8000a74:	495d      	ldr	r1, [pc, #372]	; (8000bec <StateMachineManagment+0x2dc>)
 8000a76:	484f      	ldr	r0, [pc, #316]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a78:	f006 f8ac 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a7c:	484d      	ldr	r0, [pc, #308]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a7e:	f7ff fbaf 	bl	80001e0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	494a      	ldr	r1, [pc, #296]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a8c:	484a      	ldr	r0, [pc, #296]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000a8e:	f005 f844 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8000a92:	4957      	ldr	r1, [pc, #348]	; (8000bf0 <StateMachineManagment+0x2e0>)
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a96:	f006 f89d 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a9a:	4846      	ldr	r0, [pc, #280]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000a9c:	f7ff fba0 	bl	80001e0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	4942      	ldr	r1, [pc, #264]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000aaa:	4843      	ldr	r0, [pc, #268]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000aac:	f005 f835 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 2 for Choosing Destination Station\r\n");
 8000ab0:	4950      	ldr	r1, [pc, #320]	; (8000bf4 <StateMachineManagment+0x2e4>)
 8000ab2:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ab4:	f006 f88e 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ab8:	483e      	ldr	r0, [pc, #248]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000aba:	f7ff fb91 	bl	80001e0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	493b      	ldr	r1, [pc, #236]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ac8:	483b      	ldr	r0, [pc, #236]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000aca:	f005 f826 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 3 for EEPROM READ\r\n");
 8000ace:	494a      	ldr	r1, [pc, #296]	; (8000bf8 <StateMachineManagment+0x2e8>)
 8000ad0:	4838      	ldr	r0, [pc, #224]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ad2:	f006 f87f 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ad6:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ad8:	f7ff fb82 	bl	80001e0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae4:	4933      	ldr	r1, [pc, #204]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ae6:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000ae8:	f005 f817 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000aec:	493c      	ldr	r1, [pc, #240]	; (8000be0 <StateMachineManagment+0x2d0>)
 8000aee:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000af0:	f006 f870 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000af4:	482f      	ldr	r0, [pc, #188]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000af6:	f7ff fb73 	bl	80001e0 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	492c      	ldr	r1, [pc, #176]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000b04:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000b06:	f005 f808 	bl	8005b1a <HAL_UART_Transmit>
				flagUART = 1;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000b10:	2202      	movs	r2, #2
 8000b12:	493a      	ldr	r1, [pc, #232]	; (8000bfc <StateMachineManagment+0x2ec>)
 8000b14:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000b16:	f005 f892 	bl	8005c3e <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 8000b1a:	f000 fefd 	bl	8001918 <UARTRecieveIT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b24:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	f000 862d 	beq.w	800178e <StateMachineManagment+0xe7e>
			{
				if(inputchar == '1')
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	2b31      	cmp	r3, #49	; 0x31
 8000b3c:	d107      	bne.n	8000b4e <StateMachineManagment+0x23e>
				{
					flagUART = 0;
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <StateMachineManagment+0x29c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 8000b4a:	f000 be20 	b.w	800178e <StateMachineManagment+0xe7e>
				else if(inputchar == '2')
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b54:	2b32      	cmp	r3, #50	; 0x32
 8000b56:	d107      	bne.n	8000b68 <StateMachineManagment+0x258>
					flagUART = 0;
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <StateMachineManagment+0x29c>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	701a      	strb	r2, [r3, #0]
			break;
 8000b64:	f000 be13 	b.w	800178e <StateMachineManagment+0xe7e>
				else if(inputchar == '3')
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <StateMachineManagment+0x2f0>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	2b33      	cmp	r3, #51	; 0x33
 8000b70:	d107      	bne.n	8000b82 <StateMachineManagment+0x272>
					flagUART = 0;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <StateMachineManagment+0x29c>)
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	701a      	strb	r2, [r3, #0]
			break;
 8000b7e:	f000 be06 	b.w	800178e <StateMachineManagment+0xe7e>
					flagUART = 0;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <StateMachineManagment+0x2cc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000b88:	491e      	ldr	r1, [pc, #120]	; (8000c04 <StateMachineManagment+0x2f4>)
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000b8c:	f006 f822 	bl	8006bd4 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000b92:	f7ff fb25 	bl	80001e0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	4905      	ldr	r1, [pc, #20]	; (8000bb4 <StateMachineManagment+0x2a4>)
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <StateMachineManagment+0x2a8>)
 8000ba2:	f004 ffba 	bl	8005b1a <HAL_UART_Transmit>
			break;
 8000ba6:	f000 bdf2 	b.w	800178e <StateMachineManagment+0xe7e>
 8000baa:	bf00      	nop
 8000bac:	200001ef 	.word	0x200001ef
 8000bb0:	080074c8 	.word	0x080074c8
 8000bb4:	200001f4 	.word	0x200001f4
 8000bb8:	20000190 	.word	0x20000190
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	20000005 	.word	0x20000005
 8000bc4:	200001f0 	.word	0x200001f0
 8000bc8:	200001f1 	.word	0x200001f1
 8000bcc:	200001e8 	.word	0x200001e8
 8000bd0:	20000239 	.word	0x20000239
 8000bd4:	20000002 	.word	0x20000002
 8000bd8:	2000023c 	.word	0x2000023c
 8000bdc:	20000234 	.word	0x20000234
 8000be0:	080074e0 	.word	0x080074e0
 8000be4:	08007500 	.word	0x08007500
 8000be8:	08007518 	.word	0x08007518
 8000bec:	0800754c 	.word	0x0800754c
 8000bf0:	08007574 	.word	0x08007574
 8000bf4:	0800759c 	.word	0x0800759c
 8000bf8:	080075c8 	.word	0x080075c8
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000236 	.word	0x20000236
 8000c04:	080075e4 	.word	0x080075e4
		case EEpromReadState:
			// Header
			if(flagUART == 0){
 8000c08:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d12f      	bne.n	8000c72 <StateMachineManagment+0x362>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c12:	49ae      	ldr	r1, [pc, #696]	; (8000ecc <StateMachineManagment+0x5bc>)
 8000c14:	48ae      	ldr	r0, [pc, #696]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c16:	f005 ffdd 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c1a:	48ad      	ldr	r0, [pc, #692]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	49a9      	ldr	r1, [pc, #676]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c2a:	48aa      	ldr	r0, [pc, #680]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000c2c:	f004 ff75 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nEEPROM is Operating\r\n");
 8000c30:	49a9      	ldr	r1, [pc, #676]	; (8000ed8 <StateMachineManagment+0x5c8>)
 8000c32:	48a7      	ldr	r0, [pc, #668]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c34:	f005 ffce 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c38:	48a5      	ldr	r0, [pc, #660]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c3a:	f7ff fad1 	bl	80001e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	49a2      	ldr	r1, [pc, #648]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c48:	48a2      	ldr	r0, [pc, #648]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000c4a:	f004 ff66 	bl	8005b1a <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c4e:	499f      	ldr	r1, [pc, #636]	; (8000ecc <StateMachineManagment+0x5bc>)
 8000c50:	489f      	ldr	r0, [pc, #636]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c52:	f005 ffbf 	bl	8006bd4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c56:	489e      	ldr	r0, [pc, #632]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c58:	f7ff fac2 	bl	80001e0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	499a      	ldr	r1, [pc, #616]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000c66:	489b      	ldr	r0, [pc, #620]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000c68:	f004 ff57 	bl	8005b1a <HAL_UART_Transmit>
				flagUART = 1;
 8000c6c:	4b96      	ldr	r3, [pc, #600]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
			}
			eepromReadFlag = 1;
 8000c72:	4b9a      	ldr	r3, [pc, #616]	; (8000edc <StateMachineManagment+0x5cc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000c78:	4b99      	ldr	r3, [pc, #612]	; (8000ee0 <StateMachineManagment+0x5d0>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <StateMachineManagment+0x5d4>)
 8000c82:	f000 fe21 	bl	80018c8 <EEPROMReadFcn>
			HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f001 f944 	bl	8001f14 <HAL_Delay>
			sprintf(TxDataBuffer, "\r\nWaitingTime:[%d] OperationTime[%d] EndStation[%d]", eepromDataReadBack[0], eepromDataReadBack[1],eepromDataReadBack[2]);
 8000c8c:	4b95      	ldr	r3, [pc, #596]	; (8000ee4 <StateMachineManagment+0x5d4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b94      	ldr	r3, [pc, #592]	; (8000ee4 <StateMachineManagment+0x5d4>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b92      	ldr	r3, [pc, #584]	; (8000ee4 <StateMachineManagment+0x5d4>)
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4991      	ldr	r1, [pc, #580]	; (8000ee8 <StateMachineManagment+0x5d8>)
 8000ca2:	488b      	ldr	r0, [pc, #556]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000ca4:	f005 ff96 	bl	8006bd4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ca8:	4889      	ldr	r0, [pc, #548]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000caa:	f7ff fa99 	bl	80001e0 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	4986      	ldr	r1, [pc, #536]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000cb8:	4886      	ldr	r0, [pc, #536]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000cba:	f004 ff2e 	bl	8005b1a <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000cbe:	4983      	ldr	r1, [pc, #524]	; (8000ecc <StateMachineManagment+0x5bc>)
 8000cc0:	4883      	ldr	r0, [pc, #524]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000cc2:	f005 ff87 	bl	8006bd4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000cc6:	4882      	ldr	r0, [pc, #520]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000cc8:	f7ff fa8a 	bl	80001e0 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd4:	497e      	ldr	r1, [pc, #504]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000cd6:	487f      	ldr	r0, [pc, #508]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000cd8:	f004 ff1f 	bl	8005b1a <HAL_UART_Transmit>
			flagUART = 0;
 8000cdc:	4b7a      	ldr	r3, [pc, #488]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000ce2:	4b82      	ldr	r3, [pc, #520]	; (8000eec <StateMachineManagment+0x5dc>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
			break;
 8000ce8:	f000 bd56 	b.w	8001798 <StateMachineManagment+0xe88>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8000cec:	4b80      	ldr	r3, [pc, #512]	; (8000ef0 <StateMachineManagment+0x5e0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 8000cf2:	4b80      	ldr	r3, [pc, #512]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000cf4:	78da      	ldrb	r2, [r3, #3]
 8000cf6:	4b80      	ldr	r3, [pc, #512]	; (8000ef8 <StateMachineManagment+0x5e8>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8000cfa:	4b7e      	ldr	r3, [pc, #504]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000cfc:	791a      	ldrb	r2, [r3, #4]
 8000cfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <StateMachineManagment+0x5e8>)
 8000d00:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 8000d02:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000d04:	795a      	ldrb	r2, [r3, #5]
 8000d06:	4b7c      	ldr	r3, [pc, #496]	; (8000ef8 <StateMachineManagment+0x5e8>)
 8000d08:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000d0a:	4b75      	ldr	r3, [pc, #468]	; (8000ee0 <StateMachineManagment+0x5d0>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	220a      	movs	r2, #10
 8000d10:	4619      	mov	r1, r3
 8000d12:	4879      	ldr	r0, [pc, #484]	; (8000ef8 <StateMachineManagment+0x5e8>)
 8000d14:	f000 fdb0 	bl	8001878 <EEPROMWriteFcn>
			flagUART = 0;
 8000d18:	4b6b      	ldr	r3, [pc, #428]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000d1e:	4b73      	ldr	r3, [pc, #460]	; (8000eec <StateMachineManagment+0x5dc>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
			break;
 8000d24:	f000 bd38 	b.w	8001798 <StateMachineManagment+0xe88>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 8000d28:	4b74      	ldr	r3, [pc, #464]	; (8000efc <StateMachineManagment+0x5ec>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	f000 8233 	beq.w	8001198 <StateMachineManagment+0x888>
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	f300 852d 	bgt.w	8001792 <StateMachineManagment+0xe82>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <StateMachineManagment+0x436>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	f000 8146 	beq.w	8000fce <StateMachineManagment+0x6be>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 8000d42:	f000 bd26 	b.w	8001792 <StateMachineManagment+0xe82>
					if(flagUART == 0){
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000d48:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f040 8094 	bne.w	8000e7a <StateMachineManagment+0x56a>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000d52:	495e      	ldr	r1, [pc, #376]	; (8000ecc <StateMachineManagment+0x5bc>)
 8000d54:	485e      	ldr	r0, [pc, #376]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d56:	f005 ff3d 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d5a:	485d      	ldr	r0, [pc, #372]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d5c:	f7ff fa40 	bl	80001e0 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d68:	4959      	ldr	r1, [pc, #356]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d6a:	485a      	ldr	r0, [pc, #360]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000d6c:	f004 fed5 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8000d70:	4963      	ldr	r1, [pc, #396]	; (8000f00 <StateMachineManagment+0x5f0>)
 8000d72:	4857      	ldr	r0, [pc, #348]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d74:	f005 ff2e 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d78:	4855      	ldr	r0, [pc, #340]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d7a:	f7ff fa31 	bl	80001e0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	4952      	ldr	r1, [pc, #328]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d88:	4852      	ldr	r0, [pc, #328]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000d8a:	f004 fec6 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000d8e:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	495a      	ldr	r1, [pc, #360]	; (8000f04 <StateMachineManagment+0x5f4>)
 8000d9a:	484d      	ldr	r0, [pc, #308]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000d9c:	f005 ff1a 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000da0:	484b      	ldr	r0, [pc, #300]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000da2:	f7ff fa1d 	bl	80001e0 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	4948      	ldr	r1, [pc, #288]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000db0:	4848      	ldr	r0, [pc, #288]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000db2:	f004 feb2 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000db6:	4b4f      	ldr	r3, [pc, #316]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	4951      	ldr	r1, [pc, #324]	; (8000f08 <StateMachineManagment+0x5f8>)
 8000dc2:	4843      	ldr	r0, [pc, #268]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000dc4:	f005 ff06 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000dc8:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000dca:	f7ff fa09 	bl	80001e0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	493e      	ldr	r1, [pc, #248]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000dd8:	483e      	ldr	r0, [pc, #248]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000dda:	f004 fe9e 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8000dde:	494b      	ldr	r1, [pc, #300]	; (8000f0c <StateMachineManagment+0x5fc>)
 8000de0:	483b      	ldr	r0, [pc, #236]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000de2:	f005 fef7 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000de6:	483a      	ldr	r0, [pc, #232]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000de8:	f7ff f9fa 	bl	80001e0 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	4936      	ldr	r1, [pc, #216]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000df6:	4837      	ldr	r0, [pc, #220]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000df8:	f004 fe8f 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8000dfc:	4944      	ldr	r1, [pc, #272]	; (8000f10 <StateMachineManagment+0x600>)
 8000dfe:	4834      	ldr	r0, [pc, #208]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e00:	f005 fee8 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e04:	4832      	ldr	r0, [pc, #200]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e06:	f7ff f9eb 	bl	80001e0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	492f      	ldr	r1, [pc, #188]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e14:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000e16:	f004 fe80 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 8000e1a:	493e      	ldr	r1, [pc, #248]	; (8000f14 <StateMachineManagment+0x604>)
 8000e1c:	482c      	ldr	r0, [pc, #176]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e1e:	f005 fed9 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e22:	482b      	ldr	r0, [pc, #172]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e24:	f7ff f9dc 	bl	80001e0 <strlen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	4927      	ldr	r1, [pc, #156]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e32:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000e34:	f004 fe71 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8000e38:	4937      	ldr	r1, [pc, #220]	; (8000f18 <StateMachineManagment+0x608>)
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e3c:	f005 feca 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e40:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e42:	f7ff f9cd 	bl	80001e0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	4920      	ldr	r1, [pc, #128]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e50:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000e52:	f004 fe62 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000e56:	491d      	ldr	r1, [pc, #116]	; (8000ecc <StateMachineManagment+0x5bc>)
 8000e58:	481d      	ldr	r0, [pc, #116]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e5a:	f005 febb 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e5e:	481c      	ldr	r0, [pc, #112]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e60:	f7ff f9be 	bl	80001e0 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6c:	4918      	ldr	r1, [pc, #96]	; (8000ed0 <StateMachineManagment+0x5c0>)
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000e70:	f004 fe53 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4927      	ldr	r1, [pc, #156]	; (8000f1c <StateMachineManagment+0x60c>)
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <StateMachineManagment+0x5c4>)
 8000e80:	f004 fedd 	bl	8005c3e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000e84:	f000 fd48 	bl	8001918 <UARTRecieveIT>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <StateMachineManagment+0x610>)
 8000e8e:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <StateMachineManagment+0x610>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	f000 823c 	beq.w	8001316 <StateMachineManagment+0xa06>
						if(inputchar == 'x')
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <StateMachineManagment+0x610>)
 8000ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea4:	2b78      	cmp	r3, #120	; 0x78
 8000ea6:	d13d      	bne.n	8000f24 <StateMachineManagment+0x614>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000eaa:	78da      	ldrb	r2, [r3, #3]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000eae:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000eb2:	791a      	ldrb	r2, [r3, #4]
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <StateMachineManagment+0x5e4>)
 8000eb6:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <StateMachineManagment+0x5b8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <StateMachineManagment+0x5dc>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
					break;
 8000ec4:	e227      	b.n	8001316 <StateMachineManagment+0xa06>
 8000ec6:	bf00      	nop
 8000ec8:	20000234 	.word	0x20000234
 8000ecc:	080074e0 	.word	0x080074e0
 8000ed0:	200001f4 	.word	0x200001f4
 8000ed4:	20000190 	.word	0x20000190
 8000ed8:	080075fc 	.word	0x080075fc
 8000edc:	20000239 	.word	0x20000239
 8000ee0:	20000002 	.word	0x20000002
 8000ee4:	2000023c 	.word	0x2000023c
 8000ee8:	08007614 	.word	0x08007614
 8000eec:	200001ef 	.word	0x200001ef
 8000ef0:	20000238 	.word	0x20000238
 8000ef4:	200001e8 	.word	0x200001e8
 8000ef8:	20000240 	.word	0x20000240
 8000efc:	200001f0 	.word	0x200001f0
 8000f00:	08007648 	.word	0x08007648
 8000f04:	08007518 	.word	0x08007518
 8000f08:	0800754c 	.word	0x0800754c
 8000f0c:	0800766c 	.word	0x0800766c
 8000f10:	08007690 	.word	0x08007690
 8000f14:	080076b4 	.word	0x080076b4
 8000f18:	080076c8 	.word	0x080076c8
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000236 	.word	0x20000236
						else if(inputchar == '1')
 8000f24:	4b8a      	ldr	r3, [pc, #552]	; (8001150 <StateMachineManagment+0x840>)
 8000f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2a:	2b31      	cmp	r3, #49	; 0x31
 8000f2c:	d106      	bne.n	8000f3c <StateMachineManagment+0x62c>
							flagUART = 0;
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <StateMachineManagment+0x844>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 8000f34:	4b88      	ldr	r3, [pc, #544]	; (8001158 <StateMachineManagment+0x848>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
					break;
 8000f3a:	e1ec      	b.n	8001316 <StateMachineManagment+0xa06>
						else if(inputchar == '2')
 8000f3c:	4b84      	ldr	r3, [pc, #528]	; (8001150 <StateMachineManagment+0x840>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	2b32      	cmp	r3, #50	; 0x32
 8000f44:	d106      	bne.n	8000f54 <StateMachineManagment+0x644>
							flagUART = 0;
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <StateMachineManagment+0x844>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 8000f4c:	4b82      	ldr	r3, [pc, #520]	; (8001158 <StateMachineManagment+0x848>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	701a      	strb	r2, [r3, #0]
					break;
 8000f52:	e1e0      	b.n	8001316 <StateMachineManagment+0xa06>
						else if(inputchar == 's')
 8000f54:	4b7e      	ldr	r3, [pc, #504]	; (8001150 <StateMachineManagment+0x840>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	2b73      	cmp	r3, #115	; 0x73
 8000f5c:	d124      	bne.n	8000fa8 <StateMachineManagment+0x698>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	; (800115c <StateMachineManagment+0x84c>)
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	4b7e      	ldr	r3, [pc, #504]	; (800115c <StateMachineManagment+0x84c>)
 8000f64:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <StateMachineManagment+0x84c>)
 8000f68:	785a      	ldrb	r2, [r3, #1]
 8000f6a:	4b7c      	ldr	r3, [pc, #496]	; (800115c <StateMachineManagment+0x84c>)
 8000f6c:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 8000f6e:	4b7c      	ldr	r3, [pc, #496]	; (8001160 <StateMachineManagment+0x850>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8000f74:	4b79      	ldr	r3, [pc, #484]	; (800115c <StateMachineManagment+0x84c>)
 8000f76:	78da      	ldrb	r2, [r3, #3]
 8000f78:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <StateMachineManagment+0x854>)
 8000f7a:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8000f7c:	4b77      	ldr	r3, [pc, #476]	; (800115c <StateMachineManagment+0x84c>)
 8000f7e:	791a      	ldrb	r2, [r3, #4]
 8000f80:	4b78      	ldr	r3, [pc, #480]	; (8001164 <StateMachineManagment+0x854>)
 8000f82:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <StateMachineManagment+0x84c>)
 8000f86:	795a      	ldrb	r2, [r3, #5]
 8000f88:	4b76      	ldr	r3, [pc, #472]	; (8001164 <StateMachineManagment+0x854>)
 8000f8a:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000f8c:	4b76      	ldr	r3, [pc, #472]	; (8001168 <StateMachineManagment+0x858>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	220a      	movs	r2, #10
 8000f92:	4619      	mov	r1, r3
 8000f94:	4873      	ldr	r0, [pc, #460]	; (8001164 <StateMachineManagment+0x854>)
 8000f96:	f000 fc6f 	bl	8001878 <EEPROMWriteFcn>
							flagUART = 0;
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <StateMachineManagment+0x844>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <StateMachineManagment+0x85c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
					break;
 8000fa6:	e1b6      	b.n	8001316 <StateMachineManagment+0xa06>
							flagUART = 0;
 8000fa8:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <StateMachineManagment+0x844>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000fae:	4970      	ldr	r1, [pc, #448]	; (8001170 <StateMachineManagment+0x860>)
 8000fb0:	4870      	ldr	r0, [pc, #448]	; (8001174 <StateMachineManagment+0x864>)
 8000fb2:	f005 fe0f 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fb6:	486f      	ldr	r0, [pc, #444]	; (8001174 <StateMachineManagment+0x864>)
 8000fb8:	f7ff f912 	bl	80001e0 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	496b      	ldr	r1, [pc, #428]	; (8001174 <StateMachineManagment+0x864>)
 8000fc6:	486c      	ldr	r0, [pc, #432]	; (8001178 <StateMachineManagment+0x868>)
 8000fc8:	f004 fda7 	bl	8005b1a <HAL_UART_Transmit>
					break;
 8000fcc:	e1a3      	b.n	8001316 <StateMachineManagment+0xa06>
					if(flagUART == 0){
 8000fce:	4b61      	ldr	r3, [pc, #388]	; (8001154 <StateMachineManagment+0x844>)
 8000fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d14d      	bne.n	8001074 <StateMachineManagment+0x764>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8000fd8:	4968      	ldr	r1, [pc, #416]	; (800117c <StateMachineManagment+0x86c>)
 8000fda:	4866      	ldr	r0, [pc, #408]	; (8001174 <StateMachineManagment+0x864>)
 8000fdc:	f005 fdfa 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fe0:	4864      	ldr	r0, [pc, #400]	; (8001174 <StateMachineManagment+0x864>)
 8000fe2:	f7ff f8fd 	bl	80001e0 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	4961      	ldr	r1, [pc, #388]	; (8001174 <StateMachineManagment+0x864>)
 8000ff0:	4861      	ldr	r0, [pc, #388]	; (8001178 <StateMachineManagment+0x868>)
 8000ff2:	f004 fd92 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8000ff6:	4962      	ldr	r1, [pc, #392]	; (8001180 <StateMachineManagment+0x870>)
 8000ff8:	485e      	ldr	r0, [pc, #376]	; (8001174 <StateMachineManagment+0x864>)
 8000ffa:	f005 fdeb 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ffe:	485d      	ldr	r0, [pc, #372]	; (8001174 <StateMachineManagment+0x864>)
 8001000:	f7ff f8ee 	bl	80001e0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	4959      	ldr	r1, [pc, #356]	; (8001174 <StateMachineManagment+0x864>)
 800100e:	485a      	ldr	r0, [pc, #360]	; (8001178 <StateMachineManagment+0x868>)
 8001010:	f004 fd83 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8001014:	495b      	ldr	r1, [pc, #364]	; (8001184 <StateMachineManagment+0x874>)
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <StateMachineManagment+0x864>)
 8001018:	f005 fddc 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800101c:	4855      	ldr	r0, [pc, #340]	; (8001174 <StateMachineManagment+0x864>)
 800101e:	f7ff f8df 	bl	80001e0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	4952      	ldr	r1, [pc, #328]	; (8001174 <StateMachineManagment+0x864>)
 800102c:	4852      	ldr	r0, [pc, #328]	; (8001178 <StateMachineManagment+0x868>)
 800102e:	f004 fd74 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8001032:	4955      	ldr	r1, [pc, #340]	; (8001188 <StateMachineManagment+0x878>)
 8001034:	484f      	ldr	r0, [pc, #316]	; (8001174 <StateMachineManagment+0x864>)
 8001036:	f005 fdcd 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800103a:	484e      	ldr	r0, [pc, #312]	; (8001174 <StateMachineManagment+0x864>)
 800103c:	f7ff f8d0 	bl	80001e0 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001048:	494a      	ldr	r1, [pc, #296]	; (8001174 <StateMachineManagment+0x864>)
 800104a:	484b      	ldr	r0, [pc, #300]	; (8001178 <StateMachineManagment+0x868>)
 800104c:	f004 fd65 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 8001050:	494e      	ldr	r1, [pc, #312]	; (800118c <StateMachineManagment+0x87c>)
 8001052:	4848      	ldr	r0, [pc, #288]	; (8001174 <StateMachineManagment+0x864>)
 8001054:	f005 fdbe 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001058:	4846      	ldr	r0, [pc, #280]	; (8001174 <StateMachineManagment+0x864>)
 800105a:	f7ff f8c1 	bl	80001e0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	4943      	ldr	r1, [pc, #268]	; (8001174 <StateMachineManagment+0x864>)
 8001068:	4843      	ldr	r0, [pc, #268]	; (8001178 <StateMachineManagment+0x868>)
 800106a:	f004 fd56 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <StateMachineManagment+0x844>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001074:	2202      	movs	r2, #2
 8001076:	4946      	ldr	r1, [pc, #280]	; (8001190 <StateMachineManagment+0x880>)
 8001078:	483f      	ldr	r0, [pc, #252]	; (8001178 <StateMachineManagment+0x868>)
 800107a:	f004 fde0 	bl	8005c3e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 800107e:	f000 fc4b 	bl	8001918 <UARTRecieveIT>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <StateMachineManagment+0x840>)
 8001088:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <StateMachineManagment+0x840>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	f000 8141 	beq.w	800131a <StateMachineManagment+0xa0a>
						if(inputchar == 'x')
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <StateMachineManagment+0x840>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	2b78      	cmp	r3, #120	; 0x78
 80010a0:	d106      	bne.n	80010b0 <StateMachineManagment+0x7a0>
							flagUART = 0;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <StateMachineManagment+0x844>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <StateMachineManagment+0x848>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
					break;
 80010ae:	e134      	b.n	800131a <StateMachineManagment+0xa0a>
						else if(inputchar == '+')
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <StateMachineManagment+0x840>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	2b2b      	cmp	r3, #43	; 0x2b
 80010b8:	d118      	bne.n	80010ec <StateMachineManagment+0x7dc>
							Robot.WaitingTimeBuffer++;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <StateMachineManagment+0x84c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <StateMachineManagment+0x84c>)
 80010c4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <StateMachineManagment+0x84c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4931      	ldr	r1, [pc, #196]	; (8001194 <StateMachineManagment+0x884>)
 80010ce:	4829      	ldr	r0, [pc, #164]	; (8001174 <StateMachineManagment+0x864>)
 80010d0:	f005 fd80 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010d4:	4827      	ldr	r0, [pc, #156]	; (8001174 <StateMachineManagment+0x864>)
 80010d6:	f7ff f883 	bl	80001e0 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	4924      	ldr	r1, [pc, #144]	; (8001174 <StateMachineManagment+0x864>)
 80010e4:	4824      	ldr	r0, [pc, #144]	; (8001178 <StateMachineManagment+0x868>)
 80010e6:	f004 fd18 	bl	8005b1a <HAL_UART_Transmit>
					break;
 80010ea:	e116      	b.n	800131a <StateMachineManagment+0xa0a>
						else if(inputchar == '-')
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <StateMachineManagment+0x840>)
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	2b2d      	cmp	r3, #45	; 0x2d
 80010f4:	d118      	bne.n	8001128 <StateMachineManagment+0x818>
							Robot.WaitingTimeBuffer--;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <StateMachineManagment+0x84c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <StateMachineManagment+0x84c>)
 8001100:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <StateMachineManagment+0x84c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4922      	ldr	r1, [pc, #136]	; (8001194 <StateMachineManagment+0x884>)
 800110a:	481a      	ldr	r0, [pc, #104]	; (8001174 <StateMachineManagment+0x864>)
 800110c:	f005 fd62 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <StateMachineManagment+0x864>)
 8001112:	f7ff f865 	bl	80001e0 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	4915      	ldr	r1, [pc, #84]	; (8001174 <StateMachineManagment+0x864>)
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <StateMachineManagment+0x868>)
 8001122:	f004 fcfa 	bl	8005b1a <HAL_UART_Transmit>
					break;
 8001126:	e0f8      	b.n	800131a <StateMachineManagment+0xa0a>
							flagUART = 0;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <StateMachineManagment+0x844>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800112e:	4910      	ldr	r1, [pc, #64]	; (8001170 <StateMachineManagment+0x860>)
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <StateMachineManagment+0x864>)
 8001132:	f005 fd4f 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <StateMachineManagment+0x864>)
 8001138:	f7ff f852 	bl	80001e0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	490b      	ldr	r1, [pc, #44]	; (8001174 <StateMachineManagment+0x864>)
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <StateMachineManagment+0x868>)
 8001148:	f004 fce7 	bl	8005b1a <HAL_UART_Transmit>
					break;
 800114c:	e0e5      	b.n	800131a <StateMachineManagment+0xa0a>
 800114e:	bf00      	nop
 8001150:	20000236 	.word	0x20000236
 8001154:	20000234 	.word	0x20000234
 8001158:	200001f0 	.word	0x200001f0
 800115c:	200001e8 	.word	0x200001e8
 8001160:	20000238 	.word	0x20000238
 8001164:	20000240 	.word	0x20000240
 8001168:	20000002 	.word	0x20000002
 800116c:	200001ef 	.word	0x200001ef
 8001170:	080075e4 	.word	0x080075e4
 8001174:	200001f4 	.word	0x200001f4
 8001178:	20000190 	.word	0x20000190
 800117c:	080076dc 	.word	0x080076dc
 8001180:	080076f8 	.word	0x080076f8
 8001184:	08007710 	.word	0x08007710
 8001188:	08007728 	.word	0x08007728
 800118c:	0800773c 	.word	0x0800773c
 8001190:	20000000 	.word	0x20000000
 8001194:	08007758 	.word	0x08007758
					if(flagUART == 0){
 8001198:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <StateMachineManagment+0xa34>)
 800119a:	f993 3000 	ldrsb.w	r3, [r3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d14d      	bne.n	800123e <StateMachineManagment+0x92e>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 80011a2:	4969      	ldr	r1, [pc, #420]	; (8001348 <StateMachineManagment+0xa38>)
 80011a4:	4869      	ldr	r0, [pc, #420]	; (800134c <StateMachineManagment+0xa3c>)
 80011a6:	f005 fd15 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011aa:	4868      	ldr	r0, [pc, #416]	; (800134c <StateMachineManagment+0xa3c>)
 80011ac:	f7ff f818 	bl	80001e0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	4964      	ldr	r1, [pc, #400]	; (800134c <StateMachineManagment+0xa3c>)
 80011ba:	4865      	ldr	r0, [pc, #404]	; (8001350 <StateMachineManagment+0xa40>)
 80011bc:	f004 fcad 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 80011c0:	4964      	ldr	r1, [pc, #400]	; (8001354 <StateMachineManagment+0xa44>)
 80011c2:	4862      	ldr	r0, [pc, #392]	; (800134c <StateMachineManagment+0xa3c>)
 80011c4:	f005 fd06 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011c8:	4860      	ldr	r0, [pc, #384]	; (800134c <StateMachineManagment+0xa3c>)
 80011ca:	f7ff f809 	bl	80001e0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	495d      	ldr	r1, [pc, #372]	; (800134c <StateMachineManagment+0xa3c>)
 80011d8:	485d      	ldr	r0, [pc, #372]	; (8001350 <StateMachineManagment+0xa40>)
 80011da:	f004 fc9e 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 80011de:	495e      	ldr	r1, [pc, #376]	; (8001358 <StateMachineManagment+0xa48>)
 80011e0:	485a      	ldr	r0, [pc, #360]	; (800134c <StateMachineManagment+0xa3c>)
 80011e2:	f005 fcf7 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011e6:	4859      	ldr	r0, [pc, #356]	; (800134c <StateMachineManagment+0xa3c>)
 80011e8:	f7fe fffa 	bl	80001e0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	4955      	ldr	r1, [pc, #340]	; (800134c <StateMachineManagment+0xa3c>)
 80011f6:	4856      	ldr	r0, [pc, #344]	; (8001350 <StateMachineManagment+0xa40>)
 80011f8:	f004 fc8f 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 80011fc:	4957      	ldr	r1, [pc, #348]	; (800135c <StateMachineManagment+0xa4c>)
 80011fe:	4853      	ldr	r0, [pc, #332]	; (800134c <StateMachineManagment+0xa3c>)
 8001200:	f005 fce8 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001204:	4851      	ldr	r0, [pc, #324]	; (800134c <StateMachineManagment+0xa3c>)
 8001206:	f7fe ffeb 	bl	80001e0 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	494e      	ldr	r1, [pc, #312]	; (800134c <StateMachineManagment+0xa3c>)
 8001214:	484e      	ldr	r0, [pc, #312]	; (8001350 <StateMachineManagment+0xa40>)
 8001216:	f004 fc80 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 800121a:	4951      	ldr	r1, [pc, #324]	; (8001360 <StateMachineManagment+0xa50>)
 800121c:	484b      	ldr	r0, [pc, #300]	; (800134c <StateMachineManagment+0xa3c>)
 800121e:	f005 fcd9 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001222:	484a      	ldr	r0, [pc, #296]	; (800134c <StateMachineManagment+0xa3c>)
 8001224:	f7fe ffdc 	bl	80001e0 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001230:	4946      	ldr	r1, [pc, #280]	; (800134c <StateMachineManagment+0xa3c>)
 8001232:	4847      	ldr	r0, [pc, #284]	; (8001350 <StateMachineManagment+0xa40>)
 8001234:	f004 fc71 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <StateMachineManagment+0xa34>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 800123e:	2202      	movs	r2, #2
 8001240:	4948      	ldr	r1, [pc, #288]	; (8001364 <StateMachineManagment+0xa54>)
 8001242:	4843      	ldr	r0, [pc, #268]	; (8001350 <StateMachineManagment+0xa40>)
 8001244:	f004 fcfb 	bl	8005c3e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001248:	f000 fb66 	bl	8001918 <UARTRecieveIT>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <StateMachineManagment+0xa58>)
 8001252:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <StateMachineManagment+0xa58>)
 8001256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d05e      	beq.n	800131e <StateMachineManagment+0xa0e>
						if(inputchar == 'x')
 8001260:	4b41      	ldr	r3, [pc, #260]	; (8001368 <StateMachineManagment+0xa58>)
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	2b78      	cmp	r3, #120	; 0x78
 8001268:	d106      	bne.n	8001278 <StateMachineManagment+0x968>
							flagUART = 0;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <StateMachineManagment+0xa34>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <StateMachineManagment+0xa5c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
					break;
 8001276:	e052      	b.n	800131e <StateMachineManagment+0xa0e>
						else if(inputchar == '+')
 8001278:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <StateMachineManagment+0xa58>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	2b2b      	cmp	r3, #43	; 0x2b
 8001280:	d118      	bne.n	80012b4 <StateMachineManagment+0x9a4>
							Robot.OperationTimeBuffer++;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <StateMachineManagment+0xa60>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <StateMachineManagment+0xa60>)
 800128c:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <StateMachineManagment+0xa60>)
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	461a      	mov	r2, r3
 8001294:	4937      	ldr	r1, [pc, #220]	; (8001374 <StateMachineManagment+0xa64>)
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <StateMachineManagment+0xa3c>)
 8001298:	f005 fc9c 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800129c:	482b      	ldr	r0, [pc, #172]	; (800134c <StateMachineManagment+0xa3c>)
 800129e:	f7fe ff9f 	bl	80001e0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	4928      	ldr	r1, [pc, #160]	; (800134c <StateMachineManagment+0xa3c>)
 80012ac:	4828      	ldr	r0, [pc, #160]	; (8001350 <StateMachineManagment+0xa40>)
 80012ae:	f004 fc34 	bl	8005b1a <HAL_UART_Transmit>
					break;
 80012b2:	e034      	b.n	800131e <StateMachineManagment+0xa0e>
						else if(inputchar == '-')
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <StateMachineManagment+0xa58>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	2b2d      	cmp	r3, #45	; 0x2d
 80012bc:	d118      	bne.n	80012f0 <StateMachineManagment+0x9e0>
							Robot.OperationTimeBuffer--;
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <StateMachineManagment+0xa60>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <StateMachineManagment+0xa60>)
 80012c8:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <StateMachineManagment+0xa60>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4928      	ldr	r1, [pc, #160]	; (8001374 <StateMachineManagment+0xa64>)
 80012d2:	481e      	ldr	r0, [pc, #120]	; (800134c <StateMachineManagment+0xa3c>)
 80012d4:	f005 fc7e 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <StateMachineManagment+0xa3c>)
 80012da:	f7fe ff81 	bl	80001e0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	4919      	ldr	r1, [pc, #100]	; (800134c <StateMachineManagment+0xa3c>)
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <StateMachineManagment+0xa40>)
 80012ea:	f004 fc16 	bl	8005b1a <HAL_UART_Transmit>
					break;
 80012ee:	e016      	b.n	800131e <StateMachineManagment+0xa0e>
							flagUART = 0;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <StateMachineManagment+0xa34>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80012f6:	4920      	ldr	r1, [pc, #128]	; (8001378 <StateMachineManagment+0xa68>)
 80012f8:	4814      	ldr	r0, [pc, #80]	; (800134c <StateMachineManagment+0xa3c>)
 80012fa:	f005 fc6b 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <StateMachineManagment+0xa3c>)
 8001300:	f7fe ff6e 	bl	80001e0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	490f      	ldr	r1, [pc, #60]	; (800134c <StateMachineManagment+0xa3c>)
 800130e:	4810      	ldr	r0, [pc, #64]	; (8001350 <StateMachineManagment+0xa40>)
 8001310:	f004 fc03 	bl	8005b1a <HAL_UART_Transmit>
					break;
 8001314:	e003      	b.n	800131e <StateMachineManagment+0xa0e>
					break;
 8001316:	bf00      	nop
 8001318:	e23b      	b.n	8001792 <StateMachineManagment+0xe82>
					break;
 800131a:	bf00      	nop
 800131c:	e239      	b.n	8001792 <StateMachineManagment+0xe82>
					break;
 800131e:	bf00      	nop
			break;
 8001320:	e237      	b.n	8001792 <StateMachineManagment+0xe82>
		case StantionChoosing:
			switch (StantionChoosingState)
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <StateMachineManagment+0xa6c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b03      	cmp	r3, #3
 8001328:	f200 8235 	bhi.w	8001796 <StateMachineManagment+0xe86>
 800132c:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <StateMachineManagment+0xa24>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001381 	.word	0x08001381
 8001338:	080015bf 	.word	0x080015bf
 800133c:	0800164d 	.word	0x0800164d
 8001340:	080016e1 	.word	0x080016e1
 8001344:	20000234 	.word	0x20000234
 8001348:	08007774 	.word	0x08007774
 800134c:	200001f4 	.word	0x200001f4
 8001350:	20000190 	.word	0x20000190
 8001354:	080076f8 	.word	0x080076f8
 8001358:	08007710 	.word	0x08007710
 800135c:	08007728 	.word	0x08007728
 8001360:	0800773c 	.word	0x0800773c
 8001364:	20000000 	.word	0x20000000
 8001368:	20000236 	.word	0x20000236
 800136c:	200001f0 	.word	0x200001f0
 8001370:	200001e8 	.word	0x200001e8
 8001374:	08007794 	.word	0x08007794
 8001378:	080075e4 	.word	0x080075e4
 800137c:	200001f1 	.word	0x200001f1
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 8001380:	4b9d      	ldr	r3, [pc, #628]	; (80015f8 <StateMachineManagment+0xce8>)
 8001382:	f993 3000 	ldrsb.w	r3, [r3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8085 	bne.w	8001496 <StateMachineManagment+0xb86>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 800138c:	499b      	ldr	r1, [pc, #620]	; (80015fc <StateMachineManagment+0xcec>)
 800138e:	489c      	ldr	r0, [pc, #624]	; (8001600 <StateMachineManagment+0xcf0>)
 8001390:	f005 fc20 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001394:	489a      	ldr	r0, [pc, #616]	; (8001600 <StateMachineManagment+0xcf0>)
 8001396:	f7fe ff23 	bl	80001e0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	4997      	ldr	r1, [pc, #604]	; (8001600 <StateMachineManagment+0xcf0>)
 80013a4:	4897      	ldr	r0, [pc, #604]	; (8001604 <StateMachineManagment+0xcf4>)
 80013a6:	f004 fbb8 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80013aa:	4b97      	ldr	r3, [pc, #604]	; (8001608 <StateMachineManagment+0xcf8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b95      	ldr	r3, [pc, #596]	; (8001608 <StateMachineManagment+0xcf8>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	4995      	ldr	r1, [pc, #596]	; (800160c <StateMachineManagment+0xcfc>)
 80013b6:	4892      	ldr	r0, [pc, #584]	; (8001600 <StateMachineManagment+0xcf0>)
 80013b8:	f005 fc0c 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013bc:	4890      	ldr	r0, [pc, #576]	; (8001600 <StateMachineManagment+0xcf0>)
 80013be:	f7fe ff0f 	bl	80001e0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	498d      	ldr	r1, [pc, #564]	; (8001600 <StateMachineManagment+0xcf0>)
 80013cc:	488d      	ldr	r0, [pc, #564]	; (8001604 <StateMachineManagment+0xcf4>)
 80013ce:	f004 fba4 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 80013d2:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <StateMachineManagment+0xcf8>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b8b      	ldr	r3, [pc, #556]	; (8001608 <StateMachineManagment+0xcf8>)
 80013da:	795b      	ldrb	r3, [r3, #5]
 80013dc:	498c      	ldr	r1, [pc, #560]	; (8001610 <StateMachineManagment+0xd00>)
 80013de:	4888      	ldr	r0, [pc, #544]	; (8001600 <StateMachineManagment+0xcf0>)
 80013e0:	f005 fbf8 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013e4:	4886      	ldr	r0, [pc, #536]	; (8001600 <StateMachineManagment+0xcf0>)
 80013e6:	f7fe fefb 	bl	80001e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	4983      	ldr	r1, [pc, #524]	; (8001600 <StateMachineManagment+0xcf0>)
 80013f4:	4883      	ldr	r0, [pc, #524]	; (8001604 <StateMachineManagment+0xcf4>)
 80013f6:	f004 fb90 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type + for +1 Station\r\n");
 80013fa:	4986      	ldr	r1, [pc, #536]	; (8001614 <StateMachineManagment+0xd04>)
 80013fc:	4880      	ldr	r0, [pc, #512]	; (8001600 <StateMachineManagment+0xcf0>)
 80013fe:	f005 fbe9 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001402:	487f      	ldr	r0, [pc, #508]	; (8001600 <StateMachineManagment+0xcf0>)
 8001404:	f7fe feec 	bl	80001e0 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001410:	497b      	ldr	r1, [pc, #492]	; (8001600 <StateMachineManagment+0xcf0>)
 8001412:	487c      	ldr	r0, [pc, #496]	; (8001604 <StateMachineManagment+0xcf4>)
 8001414:	f004 fb81 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001418:	497f      	ldr	r1, [pc, #508]	; (8001618 <StateMachineManagment+0xd08>)
 800141a:	4879      	ldr	r0, [pc, #484]	; (8001600 <StateMachineManagment+0xcf0>)
 800141c:	f005 fbda 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001420:	4877      	ldr	r0, [pc, #476]	; (8001600 <StateMachineManagment+0xcf0>)
 8001422:	f7fe fedd 	bl	80001e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	4974      	ldr	r1, [pc, #464]	; (8001600 <StateMachineManagment+0xcf0>)
 8001430:	4874      	ldr	r0, [pc, #464]	; (8001604 <StateMachineManagment+0xcf4>)
 8001432:	f004 fb72 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8001436:	4979      	ldr	r1, [pc, #484]	; (800161c <StateMachineManagment+0xd0c>)
 8001438:	4871      	ldr	r0, [pc, #452]	; (8001600 <StateMachineManagment+0xcf0>)
 800143a:	f005 fbcb 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800143e:	4870      	ldr	r0, [pc, #448]	; (8001600 <StateMachineManagment+0xcf0>)
 8001440:	f7fe fece 	bl	80001e0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144c:	496c      	ldr	r1, [pc, #432]	; (8001600 <StateMachineManagment+0xcf0>)
 800144e:	486d      	ldr	r0, [pc, #436]	; (8001604 <StateMachineManagment+0xcf4>)
 8001450:	f004 fb63 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type g to Start Operating\r\n");
 8001454:	4972      	ldr	r1, [pc, #456]	; (8001620 <StateMachineManagment+0xd10>)
 8001456:	486a      	ldr	r0, [pc, #424]	; (8001600 <StateMachineManagment+0xcf0>)
 8001458:	f005 fbbc 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800145c:	4868      	ldr	r0, [pc, #416]	; (8001600 <StateMachineManagment+0xcf0>)
 800145e:	f7fe febf 	bl	80001e0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	4965      	ldr	r1, [pc, #404]	; (8001600 <StateMachineManagment+0xcf0>)
 800146c:	4865      	ldr	r0, [pc, #404]	; (8001604 <StateMachineManagment+0xcf4>)
 800146e:	f004 fb54 	bl	8005b1a <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001472:	496c      	ldr	r1, [pc, #432]	; (8001624 <StateMachineManagment+0xd14>)
 8001474:	4862      	ldr	r0, [pc, #392]	; (8001600 <StateMachineManagment+0xcf0>)
 8001476:	f005 fbad 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800147a:	4861      	ldr	r0, [pc, #388]	; (8001600 <StateMachineManagment+0xcf0>)
 800147c:	f7fe feb0 	bl	80001e0 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	495d      	ldr	r1, [pc, #372]	; (8001600 <StateMachineManagment+0xcf0>)
 800148a:	485e      	ldr	r0, [pc, #376]	; (8001604 <StateMachineManagment+0xcf4>)
 800148c:	f004 fb45 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <StateMachineManagment+0xce8>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001496:	2202      	movs	r2, #2
 8001498:	4963      	ldr	r1, [pc, #396]	; (8001628 <StateMachineManagment+0xd18>)
 800149a:	485a      	ldr	r0, [pc, #360]	; (8001604 <StateMachineManagment+0xcf4>)
 800149c:	f004 fbcf 	bl	8005c3e <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80014a0:	2202      	movs	r2, #2
 80014a2:	4961      	ldr	r1, [pc, #388]	; (8001628 <StateMachineManagment+0xd18>)
 80014a4:	4857      	ldr	r0, [pc, #348]	; (8001604 <StateMachineManagment+0xcf4>)
 80014a6:	f004 fbca 	bl	8005c3e <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 80014aa:	f000 fa35 	bl	8001918 <UARTRecieveIT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b5e      	ldr	r3, [pc, #376]	; (800162c <StateMachineManagment+0xd1c>)
 80014b4:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <StateMachineManagment+0xd1c>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	f000 815f 	beq.w	8001782 <StateMachineManagment+0xe72>
					{
						if(inputchar == 'x')
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <StateMachineManagment+0xd1c>)
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	2b78      	cmp	r3, #120	; 0x78
 80014cc:	d10a      	bne.n	80014e4 <StateMachineManagment+0xbd4>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 80014ce:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <StateMachineManagment+0xcf8>)
 80014d0:	795a      	ldrb	r2, [r3, #5]
 80014d2:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <StateMachineManagment+0xcf8>)
 80014d4:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <StateMachineManagment+0xce8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <StateMachineManagment+0xd20>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 80014e2:	e14e      	b.n	8001782 <StateMachineManagment+0xe72>
						else if(inputchar == '+')
 80014e4:	4b51      	ldr	r3, [pc, #324]	; (800162c <StateMachineManagment+0xd1c>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	2b2b      	cmp	r3, #43	; 0x2b
 80014ec:	d11f      	bne.n	800152e <StateMachineManagment+0xc1e>
							Robot.EndStationBuffer++;
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <StateMachineManagment+0xcf8>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <StateMachineManagment+0xcf8>)
 80014f8:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <StateMachineManagment+0xcf8>)
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <StateMachineManagment+0xcf8>)
 8001506:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <StateMachineManagment+0xcf8>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	461a      	mov	r2, r3
 800150e:	4949      	ldr	r1, [pc, #292]	; (8001634 <StateMachineManagment+0xd24>)
 8001510:	483b      	ldr	r0, [pc, #236]	; (8001600 <StateMachineManagment+0xcf0>)
 8001512:	f005 fb5f 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001516:	483a      	ldr	r0, [pc, #232]	; (8001600 <StateMachineManagment+0xcf0>)
 8001518:	f7fe fe62 	bl	80001e0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	4936      	ldr	r1, [pc, #216]	; (8001600 <StateMachineManagment+0xcf0>)
 8001526:	4837      	ldr	r0, [pc, #220]	; (8001604 <StateMachineManagment+0xcf4>)
 8001528:	f004 faf7 	bl	8005b1a <HAL_UART_Transmit>
					break;
 800152c:	e129      	b.n	8001782 <StateMachineManagment+0xe72>
						else if(inputchar == '-')
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <StateMachineManagment+0xd1c>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	2b2d      	cmp	r3, #45	; 0x2d
 8001536:	d11f      	bne.n	8001578 <StateMachineManagment+0xc68>
							Robot.EndStationBuffer--;
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <StateMachineManagment+0xcf8>)
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	3b01      	subs	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <StateMachineManagment+0xcf8>)
 8001542:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <StateMachineManagment+0xcf8>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <StateMachineManagment+0xcf8>)
 8001550:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <StateMachineManagment+0xcf8>)
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	461a      	mov	r2, r3
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <StateMachineManagment+0xd24>)
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <StateMachineManagment+0xcf0>)
 800155c:	f005 fb3a 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001560:	4827      	ldr	r0, [pc, #156]	; (8001600 <StateMachineManagment+0xcf0>)
 8001562:	f7fe fe3d 	bl	80001e0 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	4924      	ldr	r1, [pc, #144]	; (8001600 <StateMachineManagment+0xcf0>)
 8001570:	4824      	ldr	r0, [pc, #144]	; (8001604 <StateMachineManagment+0xcf4>)
 8001572:	f004 fad2 	bl	8005b1a <HAL_UART_Transmit>
					break;
 8001576:	e104      	b.n	8001782 <StateMachineManagment+0xe72>
						else if(inputchar == 'g')
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <StateMachineManagment+0xd1c>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	2b67      	cmp	r3, #103	; 0x67
 8001580:	d10a      	bne.n	8001598 <StateMachineManagment+0xc88>
							Robot.EndStation = Robot.EndStationBuffer;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <StateMachineManagment+0xcf8>)
 8001584:	789a      	ldrb	r2, [r3, #2]
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <StateMachineManagment+0xcf8>)
 8001588:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <StateMachineManagment+0xce8>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <StateMachineManagment+0xd28>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
					break;
 8001596:	e0f4      	b.n	8001782 <StateMachineManagment+0xe72>
							flagUART = 0;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <StateMachineManagment+0xce8>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800159e:	4927      	ldr	r1, [pc, #156]	; (800163c <StateMachineManagment+0xd2c>)
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <StateMachineManagment+0xcf0>)
 80015a2:	f005 fb17 	bl	8006bd4 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015a6:	4816      	ldr	r0, [pc, #88]	; (8001600 <StateMachineManagment+0xcf0>)
 80015a8:	f7fe fe1a 	bl	80001e0 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	4912      	ldr	r1, [pc, #72]	; (8001600 <StateMachineManagment+0xcf0>)
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <StateMachineManagment+0xcf4>)
 80015b8:	f004 faaf 	bl	8005b1a <HAL_UART_Transmit>
					break;
 80015bc:	e0e1      	b.n	8001782 <StateMachineManagment+0xe72>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <StateMachineManagment+0xd30>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <StateMachineManagment+0xcf8>)
 80015c6:	78da      	ldrb	r2, [r3, #3]
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <StateMachineManagment+0xd34>)
 80015ca:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <StateMachineManagment+0xcf8>)
 80015ce:	791a      	ldrb	r2, [r3, #4]
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <StateMachineManagment+0xd34>)
 80015d2:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <StateMachineManagment+0xcf8>)
 80015d6:	795a      	ldrb	r2, [r3, #5]
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <StateMachineManagment+0xd34>)
 80015da:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <StateMachineManagment+0xd38>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	220a      	movs	r2, #10
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <StateMachineManagment+0xd34>)
 80015e6:	f000 f947 	bl	8001878 <EEPROMWriteFcn>
					flagUART = 0;
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <StateMachineManagment+0xce8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <StateMachineManagment+0xd28>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
					break;
 80015f6:	e0c9      	b.n	800178c <StateMachineManagment+0xe7c>
 80015f8:	20000234 	.word	0x20000234
 80015fc:	080077b8 	.word	0x080077b8
 8001600:	200001f4 	.word	0x200001f4
 8001604:	20000190 	.word	0x20000190
 8001608:	200001e8 	.word	0x200001e8
 800160c:	08007518 	.word	0x08007518
 8001610:	0800754c 	.word	0x0800754c
 8001614:	080077e0 	.word	0x080077e0
 8001618:	080077fc 	.word	0x080077fc
 800161c:	080076c8 	.word	0x080076c8
 8001620:	08007818 	.word	0x08007818
 8001624:	080074e0 	.word	0x080074e0
 8001628:	20000000 	.word	0x20000000
 800162c:	20000236 	.word	0x20000236
 8001630:	200001ef 	.word	0x200001ef
 8001634:	08007838 	.word	0x08007838
 8001638:	200001f1 	.word	0x200001f1
 800163c:	080075e4 	.word	0x080075e4
 8001640:	20000238 	.word	0x20000238
 8001644:	20000240 	.word	0x20000240
 8001648:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <StateMachineManagment+0xe94>)
 800164e:	f993 3000 	ldrsb.w	r3, [r3]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d123      	bne.n	800169e <StateMachineManagment+0xd8e>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 8001656:	4954      	ldr	r1, [pc, #336]	; (80017a8 <StateMachineManagment+0xe98>)
 8001658:	4854      	ldr	r0, [pc, #336]	; (80017ac <StateMachineManagment+0xe9c>)
 800165a:	f005 fabb 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800165e:	4853      	ldr	r0, [pc, #332]	; (80017ac <StateMachineManagment+0xe9c>)
 8001660:	f7fe fdbe 	bl	80001e0 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	494f      	ldr	r1, [pc, #316]	; (80017ac <StateMachineManagment+0xe9c>)
 800166e:	4850      	ldr	r0, [pc, #320]	; (80017b0 <StateMachineManagment+0xea0>)
 8001670:	f004 fa53 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <StateMachineManagment+0xe94>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 800167a:	f000 f999 	bl	80019b0 <micros>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	494c      	ldr	r1, [pc, #304]	; (80017b4 <StateMachineManagment+0xea4>)
 8001684:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 8001688:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <StateMachineManagment+0xea8>)
 800168a:	7818      	ldrb	r0, [r3, #0]
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <StateMachineManagment+0xeac>)
 800168e:	7819      	ldrb	r1, [r3, #0]
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <StateMachineManagment+0xeb0>)
 8001692:	799b      	ldrb	r3, [r3, #6]
 8001694:	43db      	mvns	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f000 f899 	bl	80017d0 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 800169e:	f000 f987 	bl	80019b0 <micros>
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <StateMachineManagment+0xea4>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	ebb0 0802 	subs.w	r8, r0, r2
 80016ac:	eb61 0903 	sbc.w	r9, r1, r3
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <StateMachineManagment+0xeb0>)
 80016b2:	78db      	ldrb	r3, [r3, #3]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <StateMachineManagment+0xeb4>)
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80016c6:	460b      	mov	r3, r1
 80016c8:	4543      	cmp	r3, r8
 80016ca:	4613      	mov	r3, r2
 80016cc:	eb73 0309 	sbcs.w	r3, r3, r9
 80016d0:	d259      	bcs.n	8001786 <StateMachineManagment+0xe76>
					{
						flagUART = 0;
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <StateMachineManagment+0xe94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <StateMachineManagment+0xeb8>)
 80016da:	2203      	movs	r2, #3
 80016dc:	701a      	strb	r2, [r3, #0]
					}

					break;
 80016de:	e052      	b.n	8001786 <StateMachineManagment+0xe76>
				case RobotOperatingPart2:
					if(flagUART == 0)
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <StateMachineManagment+0xe94>)
 80016e2:	f993 3000 	ldrsb.w	r3, [r3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d123      	bne.n	8001732 <StateMachineManagment+0xe22>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 80016ea:	4938      	ldr	r1, [pc, #224]	; (80017cc <StateMachineManagment+0xebc>)
 80016ec:	482f      	ldr	r0, [pc, #188]	; (80017ac <StateMachineManagment+0xe9c>)
 80016ee:	f005 fa71 	bl	8006bd4 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016f2:	482e      	ldr	r0, [pc, #184]	; (80017ac <StateMachineManagment+0xe9c>)
 80016f4:	f7fe fd74 	bl	80001e0 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	492a      	ldr	r1, [pc, #168]	; (80017ac <StateMachineManagment+0xe9c>)
 8001702:	482b      	ldr	r0, [pc, #172]	; (80017b0 <StateMachineManagment+0xea0>)
 8001704:	f004 fa09 	bl	8005b1a <HAL_UART_Transmit>
						flagUART = 1;
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <StateMachineManagment+0xe94>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 800170e:	f000 f94f 	bl	80019b0 <micros>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4927      	ldr	r1, [pc, #156]	; (80017b4 <StateMachineManagment+0xea4>)
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <StateMachineManagment+0xea8>)
 800171e:	7818      	ldrb	r0, [r3, #0]
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <StateMachineManagment+0xeac>)
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <StateMachineManagment+0xeb0>)
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	43db      	mvns	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	f000 f84f 	bl	80017d0 <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 8001732:	f000 f93d 	bl	80019b0 <micros>
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <StateMachineManagment+0xea4>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	1a84      	subs	r4, r0, r2
 800173e:	eb61 0503 	sbc.w	r5, r1, r3
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <StateMachineManagment+0xeb0>)
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <StateMachineManagment+0xeb4>)
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	17da      	asrs	r2, r3, #31
 8001750:	469a      	mov	sl, r3
 8001752:	4693      	mov	fp, r2
 8001754:	45a2      	cmp	sl, r4
 8001756:	eb7b 0305 	sbcs.w	r3, fp, r5
 800175a:	d216      	bcs.n	800178a <StateMachineManagment+0xe7a>
					{
						Robot.StartStation = Robot.EndStation;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <StateMachineManagment+0xeb0>)
 800175e:	795a      	ldrb	r2, [r3, #5]
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <StateMachineManagment+0xeb0>)
 8001762:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <StateMachineManagment+0xe94>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <StateMachineManagment+0xea8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <StateMachineManagment+0xeac>)
 8001770:	7811      	ldrb	r1, [r2, #0]
 8001772:	22ff      	movs	r2, #255	; 0xff
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f82b 	bl	80017d0 <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <StateMachineManagment+0xeb8>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
					}

					break;
 8001780:	e003      	b.n	800178a <StateMachineManagment+0xe7a>
					break;
 8001782:	bf00      	nop
 8001784:	e007      	b.n	8001796 <StateMachineManagment+0xe86>
					break;
 8001786:	bf00      	nop
 8001788:	e005      	b.n	8001796 <StateMachineManagment+0xe86>
					break;
 800178a:	bf00      	nop
			}
			break;
 800178c:	e003      	b.n	8001796 <StateMachineManagment+0xe86>
			break;
 800178e:	bf00      	nop
 8001790:	e002      	b.n	8001798 <StateMachineManagment+0xe88>
			break;
 8001792:	bf00      	nop
 8001794:	e000      	b.n	8001798 <StateMachineManagment+0xe88>
			break;
 8001796:	bf00      	nop
	}
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	20000234 	.word	0x20000234
 80017a8:	08007854 	.word	0x08007854
 80017ac:	200001f4 	.word	0x200001f4
 80017b0:	20000190 	.word	0x20000190
 80017b4:	200001e0 	.word	0x200001e0
 80017b8:	20000004 	.word	0x20000004
 80017bc:	20000005 	.word	0x20000005
 80017c0:	200001e8 	.word	0x200001e8
 80017c4:	000f4240 	.word	0x000f4240
 80017c8:	200001f1 	.word	0x200001f1
 80017cc:	08007878 	.word	0x08007878

080017d0 <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <MCP23017SetOutput+0x44>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <MCP23017SetOutput+0x44>)
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <MCP23017SetOutput+0x44>)
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <MCP23017SetOutput+0x48>)
 80017fc:	f000 fee4 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 8001800:	2203      	movs	r2, #3
 8001802:	4904      	ldr	r1, [pc, #16]	; (8001814 <MCP23017SetOutput+0x44>)
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MCP23017SetOutput+0x4c>)
 8001806:	f003 fbab 	bl	8004f60 <HAL_SPI_Transmit_IT>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000244 	.word	0x20000244
 8001818:	40020400 	.word	0x40020400
 800181c:	200000f0 	.word	0x200000f0

08001820 <MCP23017SetInit>:

void MCP23017SetInit()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MCP23017SetInit+0x20>)
 800182c:	f000 fecc 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 8001830:	2203      	movs	r2, #3
 8001832:	4904      	ldr	r1, [pc, #16]	; (8001844 <MCP23017SetInit+0x24>)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MCP23017SetInit+0x28>)
 8001836:	f003 fb93 	bl	8004f60 <HAL_SPI_Transmit_IT>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020400 	.word	0x40020400
 8001844:	20000008 	.word	0x20000008
 8001848:	200000f0 	.word	0x200000f0

0800184c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_SPI_TxCpltCallback+0x24>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d105      	bne.n	8001868 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <HAL_SPI_TxCpltCallback+0x28>)
 8001864:	f000 feb0 	bl	80025c8 <HAL_GPIO_WritePin>
	}
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200000f0 	.word	0x200000f0
 8001874:	40020400 	.word	0x40020400

08001878 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af02      	add	r7, sp, #8
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <EEPROMWriteFcn+0x48>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <EEPROMWriteFcn+0x3e>
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <EEPROMWriteFcn+0x4c>)
 8001892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b20      	cmp	r3, #32
 800189a:	d10c      	bne.n	80018b6 <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 800189c:	883a      	ldrh	r2, [r7, #0]
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2310      	movs	r3, #16
 80018a8:	21a0      	movs	r1, #160	; 0xa0
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <EEPROMWriteFcn+0x4c>)
 80018ac:	f000 ffea 	bl	8002884 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <EEPROMWriteFcn+0x48>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	}
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000238 	.word	0x20000238
 80018c4:	2000009c 	.word	0x2000009c

080018c8 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <EEPROMReadFcn+0x48>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d012      	beq.n	8001906 <EEPROMReadFcn+0x3e>
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <EEPROMReadFcn+0x4c>)
 80018e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d10c      	bne.n	8001906 <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 80018ec:	883a      	ldrh	r2, [r7, #0]
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2310      	movs	r3, #16
 80018f8:	21a0      	movs	r1, #160	; 0xa0
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <EEPROMReadFcn+0x4c>)
 80018fc:	f001 f874 	bl	80029e8 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <EEPROMReadFcn+0x48>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	}
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000239 	.word	0x20000239
 8001914:	2000009c 	.word	0x2000009c

08001918 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800191e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001922:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <UARTRecieveIT+0x54>)
 8001926:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001928:	461a      	mov	r2, r3
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <UARTRecieveIT+0x54>)
 800192c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800192e:	b29b      	uxth	r3, r3
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <UARTRecieveIT+0x58>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	4293      	cmp	r3, r2
 8001938:	d010      	beq.n	800195c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <UARTRecieveIT+0x58>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <UARTRecieveIT+0x5c>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <UARTRecieveIT+0x58>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <UARTRecieveIT+0x54>)
 800194c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800194e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001952:	fb01 f202 	mul.w	r2, r1, r2
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <UARTRecieveIT+0x58>)
 800195a:	6013      	str	r3, [r2, #0]
	}
	return data;
 800195c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	20000190 	.word	0x20000190
 8001970:	20000248 	.word	0x20000248
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001978:	b4b0      	push	{r4, r5, r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10a      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001992:	1854      	adds	r4, r2, r1
 8001994:	f143 0500 	adc.w	r5, r3, #0
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800199a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bcb0      	pop	{r4, r5, r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000148 	.word	0x20000148
 80019ac:	200001d8 	.word	0x200001d8

080019b0 <micros>:

uint64_t micros() {
 80019b0:	b4b0      	push	{r4, r5, r7}
 80019b2:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <micros+0x2c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2200      	movs	r2, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	4611      	mov	r1, r2
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <micros+0x30>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	1884      	adds	r4, r0, r2
 80019c8:	eb41 0503 	adc.w	r5, r1, r3
 80019cc:	4622      	mov	r2, r4
 80019ce:	462b      	mov	r3, r5
}
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bcb0      	pop	{r4, r5, r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000148 	.word	0x20000148
 80019e0:	200001d8 	.word	0x200001d8

080019e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a42:	2007      	movs	r0, #7
 8001a44:	f000 fb5a 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <HAL_I2C_MspInit+0xa4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d13c      	bne.n	8001af0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a98:	2312      	movs	r3, #18
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <HAL_I2C_MspInit+0xac>)
 8001ab0:	f000 fc06 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_I2C_MspInit+0xa8>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	201f      	movs	r0, #31
 8001ad6:	f000 fb1c 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ada:	201f      	movs	r0, #31
 8001adc:	f000 fb35 	bl	800214a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2020      	movs	r0, #32
 8001ae6:	f000 fb14 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001aea:	2020      	movs	r0, #32
 8001aec:	f000 fb2d 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40005400 	.word	0x40005400
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_SPI_MspInit+0x94>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d133      	bne.n	8001b8e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_SPI_MspInit+0x98>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b5e:	2338      	movs	r3, #56	; 0x38
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b6e:	2306      	movs	r3, #6
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_SPI_MspInit+0x9c>)
 8001b7a:	f000 fba1 	bl	80022c0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2033      	movs	r0, #51	; 0x33
 8001b84:	f000 fac5 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001b88:	2033      	movs	r0, #51	; 0x33
 8001b8a:	f000 fade 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_TIM_Base_MspInit+0x48>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d115      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	201a      	movs	r0, #26
 8001bd8:	f000 fa9b 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001bdc:	201a      	movs	r0, #26
 8001bde:	f000 fab4 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40014800 	.word	0x40014800
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_UART_MspInit+0x94>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d133      	bne.n	8001c7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_UART_MspInit+0x98>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <HAL_UART_MspInit+0x9c>)
 8001c6a:	f000 fb29 	bl	80022c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2026      	movs	r0, #38	; 0x26
 8001c74:	f000 fa4d 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c78:	2026      	movs	r0, #38	; 0x26
 8001c7a:	f000 fa66 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f000 f8f8 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cee:	f003 fd03 	bl	80056f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000148 	.word	0x20000148

08001cfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <I2C1_EV_IRQHandler+0x10>)
 8001d02:	f000 ff2f 	bl	8002b64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000009c 	.word	0x2000009c

08001d10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <I2C1_ER_IRQHandler+0x10>)
 8001d16:	f001 f896 	bl	8002e46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000009c 	.word	0x2000009c

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f003 ffb9 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000190 	.word	0x20000190

08001d38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <SPI3_IRQHandler+0x10>)
 8001d3e:	f003 f999 	bl	8005074 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000f0 	.word	0x200000f0

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f004 fef8 	bl	8006b70 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20020000 	.word	0x20020000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	2000024c 	.word	0x2000024c
 8001db4:	20000268 	.word	0x20000268

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001de2:	490e      	ldr	r1, [pc, #56]	; (8001e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df8:	4c0b      	ldr	r4, [pc, #44]	; (8001e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e06:	f7ff ffd7 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f004 feb7 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7fe fbc1 	bl	8000594 <main>
  bx  lr    
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e20:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 8001e24:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e28:	20000264 	.word	0x20000264

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_Init+0x40>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_Init+0x40>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_Init+0x40>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f94f 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fdce 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f967 	bl	8002166 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f92f 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	20000014 	.word	0x20000014
 8001ed0:	20000010 	.word	0x20000010

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000014 	.word	0x20000014
 8001ef8:	20000250 	.word	0x20000250

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000250 	.word	0x20000250

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000014 	.word	0x20000014

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff29 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff3e 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff31 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffa2 	bl	80020b8 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff feb6 	bl	8001efc <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d008      	beq.n	80021b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e052      	b.n	8002256 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0216 	bic.w	r2, r2, #22
 80021be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <HAL_DMA_Abort+0x62>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0208 	bic.w	r2, r2, #8
 80021ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002200:	e013      	b.n	800222a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002202:	f7ff fe7b 	bl	8001efc <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b05      	cmp	r3, #5
 800220e:	d90c      	bls.n	800222a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2203      	movs	r2, #3
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e015      	b.n	8002256 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e4      	bne.n	8002202 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	223f      	movs	r2, #63	; 0x3f
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d004      	beq.n	800227c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e00c      	b.n	8002296 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2205      	movs	r2, #5
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e159      	b.n	8002590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 8148 	bne.w	800258a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a2 	beq.w	800258a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_GPIO_Init+0x2ec>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x202>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x2f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x1fe>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_GPIO_Init+0x2f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x1fa>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a46      	ldr	r2, [pc, #280]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x1f6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a45      	ldr	r2, [pc, #276]	; (80025c0 <HAL_GPIO_Init+0x300>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x1f2>
 80024ae:	2304      	movs	r3, #4
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024c2:	2300      	movs	r3, #0
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <HAL_GPIO_Init+0x2ec>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_GPIO_Init+0x304>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002506:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	f67f aea2 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e12b      	b.n	8002866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fa16 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002660:	f002 fbcc 	bl	8004dfc <HAL_RCC_GetPCLK1Freq>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_I2C_Init+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <HAL_I2C_Init+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_I2C_Init+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e006      	b.n	800268e <HAL_I2C_Init+0x92>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_I2C_Init+0x27c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e7      	b.n	8002866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_I2C_Init+0x280>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_I2C_Init+0x274>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d802      	bhi.n	80026d0 <HAL_I2C_Init+0xd4>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e009      	b.n	80026e4 <HAL_I2C_Init+0xe8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_I2C_Init+0x284>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	3301      	adds	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_I2C_Init+0x274>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d819      	bhi.n	8002738 <HAL_I2C_Init+0x13c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e59      	subs	r1, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_I2C_Init+0x138>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	e051      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e04f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_I2C_Init+0x168>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_I2C_Init+0x18e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x196>
 800278e:	2301      	movs	r3, #1
 8002790:	e022      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_I2C_Init+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e58      	subs	r0, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6911      	ldr	r1, [r2, #16]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	000186a0 	.word	0x000186a0
 8002874:	001e847f 	.word	0x001e847f
 8002878:	003d08ff 	.word	0x003d08ff
 800287c:	431bde83 	.word	0x431bde83
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 808e 	bne.w	80029cc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80028b0:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_I2C_Mem_Write_IT+0x158>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_I2C_Mem_Write_IT+0x15c>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	0a1a      	lsrs	r2, r3, #8
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e064      	b.n	80029ce <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d0db      	beq.n	80028ca <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_I2C_Mem_Write_IT+0x9c>
 800291c:	2302      	movs	r3, #2
 800291e:	e056      	b.n	80029ce <HAL_I2C_Mem_Write_IT+0x14a>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d007      	beq.n	8002946 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002954:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2221      	movs	r2, #33	; 0x21
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a3a      	ldr	r2, [r7, #32]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_I2C_Mem_Write_IT+0x160>)
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002988:	897a      	ldrh	r2, [r7, #10]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800298e:	893a      	ldrh	r2, [r7, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80029c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000000c 	.word	0x2000000c
 80029e0:	14f8b589 	.word	0x14f8b589
 80029e4:	ffff0000 	.word	0xffff0000

080029e8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	f040 809a 	bne.w	8002b48 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_I2C_Mem_Read_IT+0x170>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_I2C_Mem_Read_IT+0x174>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	0a1a      	lsrs	r2, r3, #8
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009a      	lsls	r2, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e070      	b.n	8002b4a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d0db      	beq.n	8002a2e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Mem_Read_IT+0x9c>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e062      	b.n	8002b4a <HAL_I2C_Mem_Read_IT+0x162>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d007      	beq.n	8002aaa <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2222      	movs	r2, #34	; 0x22
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_I2C_Mem_Read_IT+0x178>)
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002aec:	897a      	ldrh	r2, [r7, #10]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002af2:	893a      	ldrh	r2, [r7, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b12:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b22:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b42:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	14f8b589 	.word	0x14f8b589
 8002b60:	ffff0000 	.word	0xffff0000

08002b64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d003      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0x38>
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	f040 80c1 	bne.w	8002d1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002bbc:	d003      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x62>
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_EV_IRQHandler+0x66>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_EV_IRQHandler+0x68>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f000 8132 	beq.w	8002e36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x92>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	0a5b      	lsrs	r3, r3, #9
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 fc7b 	bl	80044e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fd83 	bl	80036fa <I2C_Master_SB>
 8002bf4:	e092      	b.n	8002d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0xb2>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fdf9 	bl	8003806 <I2C_Master_ADD10>
 8002c14:	e082      	b.n	8002d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0xd2>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fe13 	bl	800385a <I2C_Master_ADDR>
 8002c34:	e072      	b.n	8002d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03b      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c50:	f000 80f3 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00f      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f9f3 	bl	8003064 <I2C_MasterTransmit_TXE>
 8002c7e:	e04d      	b.n	8002d1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80d6 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	0a5b      	lsrs	r3, r3, #9
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80cf 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b21      	cmp	r3, #33	; 0x21
 8002ca0:	d103      	bne.n	8002caa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa7a 	bl	800319c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca8:	e0c7      	b.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	f040 80c4 	bne.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fae8 	bl	8003288 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb8:	e0bf      	b.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc8:	f000 80b7 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	099b      	lsrs	r3, r3, #6
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_I2C_EV_IRQHandler+0x194>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_I2C_EV_IRQHandler+0x194>
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb5d 	bl	80033b0 <I2C_MasterReceive_RXNE>
 8002cf6:	e011      	b.n	8002d1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 809a 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	0a5b      	lsrs	r3, r3, #9
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8093 	beq.w	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fc06 	bl	8003526 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1a:	e08e      	b.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d1c:	e08d      	b.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e007      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x20e>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	0a5b      	lsrs	r3, r3, #9
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d68:	69b9      	ldr	r1, [r7, #24]
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 ffc4 	bl	8003cf8 <I2C_Slave_ADDR>
 8002d70:	e066      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x22e>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	0a5b      	lsrs	r3, r3, #9
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fffe 	bl	8003d8c <I2C_Slave_STOPF>
 8002d90:	e056      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d92:	7bbb      	ldrb	r3, [r7, #14]
 8002d94:	2b21      	cmp	r3, #33	; 0x21
 8002d96:	d002      	beq.n	8002d9e <HAL_I2C_EV_IRQHandler+0x23a>
 8002d98:	7bbb      	ldrb	r3, [r7, #14]
 8002d9a:	2b29      	cmp	r3, #41	; 0x29
 8002d9c:	d125      	bne.n	8002dea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	09db      	lsrs	r3, r3, #7
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00f      	beq.n	8002dca <HAL_I2C_EV_IRQHandler+0x266>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	0a9b      	lsrs	r3, r3, #10
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_I2C_EV_IRQHandler+0x266>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 feda 	bl	8003b7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc8:	e039      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d033      	beq.n	8002e3e <HAL_I2C_EV_IRQHandler+0x2da>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	0a5b      	lsrs	r3, r3, #9
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02d      	beq.n	8002e3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 ff07 	bl	8003bf6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002de8:	e029      	b.n	8002e3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00f      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	0a9b      	lsrs	r3, r3, #10
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 ff12 	bl	8003c38 <I2C_SlaveReceive_RXNE>
 8002e14:	e014      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00e      	beq.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	0a5b      	lsrs	r3, r3, #9
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 ff40 	bl	8003cb4 <I2C_SlaveReceive_BTF>
 8002e34:	e004      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08a      	sub	sp, #40	; 0x28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <HAL_I2C_ER_IRQHandler+0x4e>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	0a5b      	lsrs	r3, r3, #9
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x78>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002ebc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	0a9b      	lsrs	r3, r3, #10
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03f      	beq.n	8002f4a <HAL_I2C_ER_IRQHandler+0x104>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d039      	beq.n	8002f4a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002ed6:	7efb      	ldrb	r3, [r7, #27]
 8002ed8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ef0:	7ebb      	ldrb	r3, [r7, #26]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d112      	bne.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd6>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd6>
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	2b21      	cmp	r3, #33	; 0x21
 8002f00:	d008      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b29      	cmp	r3, #41	; 0x29
 8002f06:	d005      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0xce>
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b28      	cmp	r3, #40	; 0x28
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b21      	cmp	r3, #33	; 0x21
 8002f12:	d103      	bne.n	8002f1c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 f869 	bl	8003fec <I2C_Slave_AF>
 8002f1a:	e016      	b.n	8002f4a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f2e:	7efb      	ldrb	r3, [r7, #27]
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d002      	beq.n	8002f3a <HAL_I2C_ER_IRQHandler+0xf4>
 8002f34:	7efb      	ldrb	r3, [r7, #27]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d107      	bne.n	8002f4a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	0adb      	lsrs	r3, r3, #11
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <HAL_I2C_ER_IRQHandler+0x12e>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002f72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 f8a0 	bl	80040cc <I2C_ITError>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d150      	bne.n	800312c <I2C_MasterTransmit_TXE+0xc8>
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b21      	cmp	r3, #33	; 0x21
 800308e:	d14d      	bne.n	800312c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d01d      	beq.n	80030d2 <I2C_MasterTransmit_TXE+0x6e>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b20      	cmp	r3, #32
 800309a:	d01a      	beq.n	80030d2 <I2C_MasterTransmit_TXE+0x6e>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a2:	d016      	beq.n	80030d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2211      	movs	r2, #17
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff62 	bl	8002f94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030d0:	e060      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d107      	bne.n	800311c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff7d 	bl	8003014 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800311a:	e03b      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff35 	bl	8002f94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800312a:	e033      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b21      	cmp	r3, #33	; 0x21
 8003130:	d005      	beq.n	800313e <I2C_MasterTransmit_TXE+0xda>
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d12d      	bne.n	8003194 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b22      	cmp	r3, #34	; 0x22
 800313c:	d12a      	bne.n	8003194 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d108      	bne.n	800315a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003158:	e01c      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d103      	bne.n	800316e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f88e 	bl	8003288 <I2C_MemoryTransmit_TXE_BTF>
}
 800316c:	e012      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003192:	e7ff      	b.n	8003194 <I2C_MasterTransmit_TXE+0x130>
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b21      	cmp	r3, #33	; 0x21
 80031b4:	d164      	bne.n	8003280 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031e4:	e04c      	b.n	8003280 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d01d      	beq.n	8003228 <I2C_MasterTransmit_BTF+0x8c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d01a      	beq.n	8003228 <I2C_MasterTransmit_BTF+0x8c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d016      	beq.n	8003228 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003208:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2211      	movs	r2, #17
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff feb7 	bl	8002f94 <HAL_I2C_MasterTxCpltCallback>
}
 8003226:	e02b      	b.n	8003280 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003236:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d107      	bne.n	8003272 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fed2 	bl	8003014 <HAL_I2C_MemTxCpltCallback>
}
 8003270:	e006      	b.n	8003280 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fe8a 	bl	8002f94 <HAL_I2C_MasterTxCpltCallback>
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11d      	bne.n	80032dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10b      	bne.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032be:	e073      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	121b      	asrs	r3, r3, #8
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032da:	e065      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10b      	bne.n	80032fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032fa:	e055      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	2b02      	cmp	r3, #2
 8003302:	d151      	bne.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b22      	cmp	r3, #34	; 0x22
 8003308:	d10d      	bne.n	8003326 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003318:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003324:	e040      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b21      	cmp	r3, #33	; 0x21
 8003334:	d112      	bne.n	800335c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800335a:	e025      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d120      	bne.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b21      	cmp	r3, #33	; 0x21
 800336a:	d11d      	bne.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fe36 	bl	8003014 <HAL_I2C_MemTxCpltCallback>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b22      	cmp	r3, #34	; 0x22
 80033c2:	f040 80ac 	bne.w	800351e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d921      	bls.n	8003418 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b03      	cmp	r3, #3
 8003402:	f040 808c 	bne.w	800351e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003414:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003416:	e082      	b.n	800351e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2b02      	cmp	r3, #2
 800341e:	d075      	beq.n	800350c <I2C_MasterReceive_RXNE+0x15c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d002      	beq.n	800342c <I2C_MasterReceive_RXNE+0x7c>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d16f      	bne.n	800350c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f001 f827 	bl	8004480 <I2C_WaitOnSTOPRequestThroughIT>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d142      	bne.n	80034be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003446:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003456:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d10a      	bne.n	80034a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fdc1 	bl	8003028 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034a6:	e03a      	b.n	800351e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2212      	movs	r2, #18
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fd76 	bl	8002fa8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034bc:	e02f      	b.n	800351e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff fd99 	bl	800303c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800350a:	e008      	b.n	800351e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	605a      	str	r2, [r3, #4]
}
 800351c:	e7ff      	b.n	800351e <I2C_MasterReceive_RXNE+0x16e>
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b04      	cmp	r3, #4
 800353c:	d11b      	bne.n	8003576 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003574:	e0bd      	b.n	80036f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b03      	cmp	r3, #3
 800357e:	d129      	bne.n	80035d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d00a      	beq.n	80035ac <I2C_MasterReceive_BTF+0x86>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d007      	beq.n	80035ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d2:	e08e      	b.n	80036f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d176      	bne.n	80036cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d002      	beq.n	80035ea <I2C_MasterReceive_BTF+0xc4>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d108      	bne.n	80035fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e019      	b.n	8003630 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d002      	beq.n	8003608 <I2C_MasterReceive_BTF+0xe2>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d108      	bne.n	800361a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e00a      	b.n	8003630 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d007      	beq.n	8003630 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800368a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d10a      	bne.n	80036b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fcba 	bl	8003028 <HAL_I2C_MemRxCpltCallback>
}
 80036b4:	e01d      	b.n	80036f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2212      	movs	r2, #18
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fc6f 	bl	8002fa8 <HAL_I2C_MasterRxCpltCallback>
}
 80036ca:	e012      	b.n	80036f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d117      	bne.n	800373e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003726:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003728:	e067      	b.n	80037fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]
}
 800373c:	e05d      	b.n	80037fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003746:	d133      	bne.n	80037b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b21      	cmp	r3, #33	; 0x21
 8003752:	d109      	bne.n	8003768 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	e008      	b.n	800377a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <I2C_Master_SB+0x92>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d032      	beq.n	80037fa <I2C_Master_SB+0x100>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02d      	beq.n	80037fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ac:	605a      	str	r2, [r3, #4]
}
 80037ae:	e024      	b.n	80037fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10e      	bne.n	80037d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	b29b      	uxth	r3, r3
 80037be:	11db      	asrs	r3, r3, #7
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0306 	and.w	r3, r3, #6
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f063 030f 	orn	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]
}
 80037d4:	e011      	b.n	80037fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10d      	bne.n	80037fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	11db      	asrs	r3, r3, #7
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0306 	and.w	r3, r3, #6
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f063 030e 	orn	r3, r3, #14
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	b2da      	uxtb	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <I2C_Master_ADD10+0x26>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <I2C_Master_ADD10+0x48>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384c:	605a      	str	r2, [r3, #4]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800385a:	b480      	push	{r7}
 800385c:	b091      	sub	sp, #68	; 0x44
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b22      	cmp	r3, #34	; 0x22
 8003882:	f040 8169 	bne.w	8003b58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <I2C_Master_ADDR+0x54>
 800388e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d10b      	bne.n	80038ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	e160      	b.n	8003b70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11d      	bne.n	80038f2 <I2C_Master_ADDR+0x98>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038be:	d118      	bne.n	80038f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
 80038f0:	e13e      	b.n	8003b70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e115      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 808a 	bne.w	8003a44 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003936:	d137      	bne.n	80039a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003956:	d113      	bne.n	8003980 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	e0e7      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e0d3      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d02e      	beq.n	8003a0c <I2C_Master_ADDR+0x1b2>
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d02b      	beq.n	8003a0c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	2b12      	cmp	r3, #18
 80039b8:	d102      	bne.n	80039c0 <I2C_Master_ADDR+0x166>
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d125      	bne.n	8003a0c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d00e      	beq.n	80039e4 <I2C_Master_ADDR+0x18a>
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d00b      	beq.n	80039e4 <I2C_Master_ADDR+0x18a>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d008      	beq.n	80039e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	e0a1      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e085      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d14d      	bne.n	8003aea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d016      	beq.n	8003a82 <I2C_Master_ADDR+0x228>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d013      	beq.n	8003a82 <I2C_Master_ADDR+0x228>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d010      	beq.n	8003a82 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e007      	b.n	8003a92 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a90:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa0:	d117      	bne.n	8003ad2 <I2C_Master_ADDR+0x278>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa8:	d00b      	beq.n	8003ac2 <I2C_Master_ADDR+0x268>
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d008      	beq.n	8003ac2 <I2C_Master_ADDR+0x268>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d005      	beq.n	8003ac2 <I2C_Master_ADDR+0x268>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d002      	beq.n	8003ac2 <I2C_Master_ADDR+0x268>
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d107      	bne.n	8003ad2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ad0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	e032      	b.n	8003b50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b08:	d117      	bne.n	8003b3a <I2C_Master_ADDR+0x2e0>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b10:	d00b      	beq.n	8003b2a <I2C_Master_ADDR+0x2d0>
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d008      	beq.n	8003b2a <I2C_Master_ADDR+0x2d0>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d005      	beq.n	8003b2a <I2C_Master_ADDR+0x2d0>
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d002      	beq.n	8003b2a <I2C_Master_ADDR+0x2d0>
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d107      	bne.n	8003b3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b56:	e00b      	b.n	8003b70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	e7ff      	b.n	8003b70 <I2C_Master_ADDR+0x316>
 8003b70:	bf00      	nop
 8003b72:	3744      	adds	r7, #68	; 0x44
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02b      	beq.n	8003bee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d114      	bne.n	8003bee <I2C_SlaveTransmit_TXE+0x72>
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b29      	cmp	r3, #41	; 0x29
 8003bc8:	d111      	bne.n	8003bee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2228      	movs	r2, #40	; 0x28
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff f9e7 	bl	8002fbc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d011      	beq.n	8003c2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02c      	beq.n	8003cac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <I2C_SlaveReceive_RXNE+0x74>
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b2a      	cmp	r3, #42	; 0x2a
 8003c86:	d111      	bne.n	8003cac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2222      	movs	r2, #34	; 0x22
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2228      	movs	r2, #40	; 0x28
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff f992 	bl	8002fd0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d12:	2b28      	cmp	r3, #40	; 0x28
 8003d14:	d127      	bne.n	8003d66 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	81bb      	strh	r3, [r7, #12]
 8003d48:	e002      	b.n	8003d50 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d58:	89ba      	ldrh	r2, [r7, #12]
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff f940 	bl	8002fe4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d64:	e00e      	b.n	8003d84 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003daa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de8:	d172      	bne.n	8003ed0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b22      	cmp	r3, #34	; 0x22
 8003dee:	d002      	beq.n	8003df6 <I2C_Slave_STOPF+0x6a>
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b2a      	cmp	r3, #42	; 0x2a
 8003df4:	d135      	bne.n	8003e62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fa37 	bl	80022a2 <HAL_DMA_GetState>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d049      	beq.n	8003ece <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <I2C_Slave_STOPF+0x258>)
 8003e40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fa09 	bl	800225e <HAL_DMA_Abort_IT>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d03d      	beq.n	8003ece <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e60:	e035      	b.n	8003ece <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0204 	orr.w	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fa01 	bl	80022a2 <HAL_DMA_GetState>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d014      	beq.n	8003ed0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	4a4e      	ldr	r2, [pc, #312]	; (8003fe4 <I2C_Slave_STOPF+0x258>)
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f9d3 	bl	800225e <HAL_DMA_Abort_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4798      	blx	r3
 8003ecc:	e000      	b.n	8003ed0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ece:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03e      	beq.n	8003f58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d112      	bne.n	8003f0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d112      	bne.n	8003f42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8b3 	bl	80040cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f66:	e039      	b.n	8003fdc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6c:	d109      	bne.n	8003f82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2228      	movs	r2, #40	; 0x28
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff f827 	bl	8002fd0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b28      	cmp	r3, #40	; 0x28
 8003f8c:	d111      	bne.n	8003fb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <I2C_Slave_STOPF+0x25c>)
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff f828 	bl	8003000 <HAL_I2C_ListenCpltCallback>
}
 8003fb0:	e014      	b.n	8003fdc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	2b22      	cmp	r3, #34	; 0x22
 8003fb8:	d002      	beq.n	8003fc0 <I2C_Slave_STOPF+0x234>
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b22      	cmp	r3, #34	; 0x22
 8003fbe:	d10d      	bne.n	8003fdc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fe fffa 	bl	8002fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08004331 	.word	0x08004331
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d002      	beq.n	800400e <I2C_Slave_AF+0x22>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b20      	cmp	r3, #32
 800400c:	d129      	bne.n	8004062 <I2C_Slave_AF+0x76>
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b28      	cmp	r3, #40	; 0x28
 8004012:	d126      	bne.n	8004062 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <I2C_Slave_AF+0xdc>)
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004028:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004032:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe ffd0 	bl	8003000 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004060:	e02e      	b.n	80040c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b21      	cmp	r3, #33	; 0x21
 8004066:	d126      	bne.n	80040b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <I2C_Slave_AF+0xdc>)
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004092:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe ff84 	bl	8002fbc <HAL_I2C_SlaveTxCpltCallback>
}
 80040b4:	e004      	b.n	80040c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040be:	615a      	str	r2, [r3, #20]
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	ffff0000 	.word	0xffff0000

080040cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040e4:	7bbb      	ldrb	r3, [r7, #14]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d002      	beq.n	80040f0 <I2C_ITError+0x24>
 80040ea:	7bbb      	ldrb	r3, [r7, #14]
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d10a      	bne.n	8004106 <I2C_ITError+0x3a>
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b22      	cmp	r3, #34	; 0x22
 80040f4:	d107      	bne.n	8004106 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004104:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800410c:	2b28      	cmp	r3, #40	; 0x28
 800410e:	d107      	bne.n	8004120 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2228      	movs	r2, #40	; 0x28
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800411e:	e015      	b.n	800414c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d00a      	beq.n	8004146 <I2C_ITError+0x7a>
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b60      	cmp	r3, #96	; 0x60
 8004134:	d007      	beq.n	8004146 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d162      	bne.n	8004222 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d020      	beq.n	80041bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4a6a      	ldr	r2, [pc, #424]	; (8004328 <I2C_ITError+0x25c>)
 8004180:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f869 	bl	800225e <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8089 	beq.w	80042a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b6:	4610      	mov	r0, r2
 80041b8:	4798      	blx	r3
 80041ba:	e074      	b.n	80042a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	4a59      	ldr	r2, [pc, #356]	; (8004328 <I2C_ITError+0x25c>)
 80041c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe f848 	bl	800225e <HAL_DMA_Abort_IT>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d068      	beq.n	80042a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d10b      	bne.n	80041fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800421c:	4610      	mov	r0, r2
 800421e:	4798      	blx	r3
 8004220:	e041      	b.n	80042a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b60      	cmp	r3, #96	; 0x60
 800422c:	d125      	bne.n	800427a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d10b      	bne.n	8004262 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe feec 	bl	8003050 <HAL_I2C_AbortCpltCallback>
 8004278:	e015      	b.n	80042a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d10b      	bne.n	80042a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe fecb 	bl	800303c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10e      	bne.n	80042d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d113      	bne.n	8004320 <I2C_ITError+0x254>
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b28      	cmp	r3, #40	; 0x28
 80042fc:	d110      	bne.n	8004320 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <I2C_ITError+0x260>)
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fe fe70 	bl	8003000 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	08004331 	.word	0x08004331
 800432c:	ffff0000 	.word	0xffff0000

08004330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800434a:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <I2C_DMAAbort+0x148>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <I2C_DMAAbort+0x14c>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0a1a      	lsrs	r2, r3, #8
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00da      	lsls	r2, r3, #3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f043 0220 	orr.w	r2, r3, #32
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004376:	e00a      	b.n	800438e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d0ea      	beq.n	8004364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2200      	movs	r2, #0
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	2200      	movs	r2, #0
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	2200      	movs	r2, #0
 80043d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d10e      	bne.n	800441e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7fe fe1a 	bl	8003050 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800441c:	e027      	b.n	800446e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004424:	2b28      	cmp	r3, #40	; 0x28
 8004426:	d117      	bne.n	8004458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2228      	movs	r2, #40	; 0x28
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004456:	e007      	b.n	8004468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7fe fde7 	bl	800303c <HAL_I2C_ErrorCallback>
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c
 800447c:	14f8b589 	.word	0x14f8b589

08004480 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	0a1a      	lsrs	r2, r3, #8
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e008      	b.n	80044d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044cc:	d0e9      	beq.n	80044a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	14f8b589 	.word	0x14f8b589

080044e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044f4:	d103      	bne.n	80044fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044fc:	e007      	b.n	800450e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004506:	d102      	bne.n	800450e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2208      	movs	r2, #8
 800450c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e267      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d075      	beq.n	8004626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800453a:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x240>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00c      	beq.n	8004560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004546:	4b85      	ldr	r3, [pc, #532]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800454e:	2b08      	cmp	r3, #8
 8004550:	d112      	bne.n	8004578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004552:	4b82      	ldr	r3, [pc, #520]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455e:	d10b      	bne.n	8004578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004560:	4b7e      	ldr	r3, [pc, #504]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05b      	beq.n	8004624 <HAL_RCC_OscConfig+0x108>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d157      	bne.n	8004624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e242      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d106      	bne.n	8004590 <HAL_RCC_OscConfig+0x74>
 8004582:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a75      	ldr	r2, [pc, #468]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e01d      	b.n	80045cc <HAL_RCC_OscConfig+0xb0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x98>
 800459a:	4b70      	ldr	r3, [pc, #448]	; (800475c <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6f      	ldr	r2, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b6d      	ldr	r3, [pc, #436]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6c      	ldr	r2, [pc, #432]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0xb0>
 80045b4:	4b69      	ldr	r3, [pc, #420]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a68      	ldr	r2, [pc, #416]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a65      	ldr	r2, [pc, #404]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc92 	bl	8001efc <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd fc8e 	bl	8001efc <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e207      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	4b5b      	ldr	r3, [pc, #364]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0xc0>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd fc7e 	bl	8001efc <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7fd fc7a 	bl	8001efc <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e1f3      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004616:	4b51      	ldr	r3, [pc, #324]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0xe8>
 8004622:	e000      	b.n	8004626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d063      	beq.n	80046fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004632:	4b4a      	ldr	r3, [pc, #296]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004646:	2b08      	cmp	r3, #8
 8004648:	d11c      	bne.n	8004684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_RCC_OscConfig+0x240>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d116      	bne.n	8004684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_RCC_OscConfig+0x152>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e1c7      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4937      	ldr	r1, [pc, #220]	; (800475c <HAL_RCC_OscConfig+0x240>)
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	e03a      	b.n	80046fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d020      	beq.n	80046ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_RCC_OscConfig+0x244>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd fc33 	bl	8001efc <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469a:	f7fd fc2f 	bl	8001efc <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e1a8      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4925      	ldr	r1, [pc, #148]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
 80046cc:	e015      	b.n	80046fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x244>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fc12 	bl	8001efc <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fd fc0e 	bl	8001efc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e187      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d036      	beq.n	8004774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_RCC_OscConfig+0x248>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fbf2 	bl	8001efc <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471c:	f7fd fbee 	bl	8001efc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e167      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x240>)
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x200>
 800473a:	e01b      	b.n	8004774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_RCC_OscConfig+0x248>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004742:	f7fd fbdb 	bl	8001efc <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004748:	e00e      	b.n	8004768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474a:	f7fd fbd7 	bl	8001efc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d907      	bls.n	8004768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e150      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
 800475c:	40023800 	.word	0x40023800
 8004760:	42470000 	.word	0x42470000
 8004764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004768:	4b88      	ldr	r3, [pc, #544]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ea      	bne.n	800474a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8097 	beq.w	80048b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b81      	ldr	r3, [pc, #516]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	4b7d      	ldr	r3, [pc, #500]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a7c      	ldr	r2, [pc, #496]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b7a      	ldr	r3, [pc, #488]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b2:	4b77      	ldr	r3, [pc, #476]	; (8004990 <HAL_RCC_OscConfig+0x474>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d118      	bne.n	80047f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047be:	4b74      	ldr	r3, [pc, #464]	; (8004990 <HAL_RCC_OscConfig+0x474>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a73      	ldr	r2, [pc, #460]	; (8004990 <HAL_RCC_OscConfig+0x474>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ca:	f7fd fb97 	bl	8001efc <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f7fd fb93 	bl	8001efc <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e10c      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x474>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_OscConfig+0x2ea>
 80047f8:	4b64      	ldr	r3, [pc, #400]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a63      	ldr	r2, [pc, #396]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	e01c      	b.n	8004840 <HAL_RCC_OscConfig+0x324>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b05      	cmp	r3, #5
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x30c>
 800480e:	4b5f      	ldr	r3, [pc, #380]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a5e      	ldr	r2, [pc, #376]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
 800481a:	4b5c      	ldr	r3, [pc, #368]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a5b      	ldr	r2, [pc, #364]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0x324>
 8004828:	4b58      	ldr	r3, [pc, #352]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a57      	ldr	r2, [pc, #348]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
 8004834:	4b55      	ldr	r3, [pc, #340]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a54      	ldr	r2, [pc, #336]	; (800498c <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 0304 	bic.w	r3, r3, #4
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d015      	beq.n	8004874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fd fb58 	bl	8001efc <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	e00a      	b.n	8004866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004850:	f7fd fb54 	bl	8001efc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0cb      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004866:	4b49      	ldr	r3, [pc, #292]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ee      	beq.n	8004850 <HAL_RCC_OscConfig+0x334>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004874:	f7fd fb42 	bl	8001efc <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fd fb3e 	bl	8001efc <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0b5      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004892:	4b3e      	ldr	r3, [pc, #248]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ee      	bne.n	800487c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b39      	ldr	r3, [pc, #228]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	4a38      	ldr	r2, [pc, #224]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80a1 	beq.w	80049fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ba:	4b34      	ldr	r3, [pc, #208]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d05c      	beq.n	8004980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d141      	bne.n	8004952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_RCC_OscConfig+0x478>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd fb12 	bl	8001efc <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd fb0e 	bl	8001efc <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e087      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_RCC_OscConfig+0x470>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	3b01      	subs	r3, #1
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	491b      	ldr	r1, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x478>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd fae7 	bl	8001efc <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd fae3 	bl	8001efc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e05c      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x416>
 8004950:	e054      	b.n	80049fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <HAL_RCC_OscConfig+0x478>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd fad0 	bl	8001efc <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd facc 	bl	8001efc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e045      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_OscConfig+0x470>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x444>
 800497e:	e03d      	b.n	80049fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e038      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
 800498c:	40023800 	.word	0x40023800
 8004990:	40007000 	.word	0x40007000
 8004994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCC_OscConfig+0x4ec>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d028      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d121      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d11a      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d111      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	3b01      	subs	r3, #1
 80049e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800

08004a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0cc      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b68      	ldr	r3, [pc, #416]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d90c      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a58      	ldr	r2, [pc, #352]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a78:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	494d      	ldr	r1, [pc, #308]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d044      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	4b47      	ldr	r3, [pc, #284]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d119      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e06f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e067      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aea:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4934      	ldr	r1, [pc, #208]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004afc:	f7fd f9fe 	bl	8001efc <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fd f9fa 	bl	8001efc <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e04f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 020c 	and.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1eb      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d20c      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e032      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b92:	f000 f821 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	490a      	ldr	r1, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd f95e 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800789c 	.word	0x0800789c
 8004bd0:	2000000c 	.word	0x2000000c
 8004bd4:	20000010 	.word	0x20000010

08004bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b094      	sub	sp, #80	; 0x50
 8004bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
 8004be4:	2300      	movs	r3, #0
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	2300      	movs	r3, #0
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf0:	4b79      	ldr	r3, [pc, #484]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d00d      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x40>
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	f200 80e1 	bhi.w	8004dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x34>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c0a:	e0db      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c10:	e0db      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c12:	4b73      	ldr	r3, [pc, #460]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c16:	e0d8      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c18:	4b6f      	ldr	r3, [pc, #444]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c22:	4b6d      	ldr	r3, [pc, #436]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d063      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2e:	4b6a      	ldr	r3, [pc, #424]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	099b      	lsrs	r3, r3, #6
 8004c34:	2200      	movs	r2, #0
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f04f 0000 	mov.w	r0, #0
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c5c:	0150      	lsls	r0, r2, #5
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4621      	mov	r1, r4
 8004c64:	1a51      	subs	r1, r2, r1
 8004c66:	6139      	str	r1, [r7, #16]
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	018b      	lsls	r3, r1, #6
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c86:	4651      	mov	r1, sl
 8004c88:	018a      	lsls	r2, r1, #6
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c90:	4659      	mov	r1, fp
 8004c92:	eb63 0901 	sbc.w	r9, r3, r1
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004caa:	4690      	mov	r8, r2
 8004cac:	4699      	mov	r9, r3
 8004cae:	4623      	mov	r3, r4
 8004cb0:	eb18 0303 	adds.w	r3, r8, r3
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	eb49 0303 	adc.w	r3, r9, r3
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	024b      	lsls	r3, r1, #9
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	024a      	lsls	r2, r1, #9
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce8:	f7fb fad2 	bl	8000290 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf4:	e058      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf6:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	4611      	mov	r1, r2
 8004d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	0159      	lsls	r1, r3, #5
 8004d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d22:	0150      	lsls	r0, r2, #5
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2e:	4649      	mov	r1, r9
 8004d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d48:	ebb2 040a 	subs.w	r4, r2, sl
 8004d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb45 0303 	adc.w	r3, r5, r3
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	028b      	lsls	r3, r1, #10
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d88:	4621      	mov	r1, r4
 8004d8a:	028a      	lsls	r2, r1, #10
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	61fa      	str	r2, [r7, #28]
 8004d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9c:	f7fb fa78 	bl	8000290 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	3301      	adds	r3, #1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc2:	e002      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3750      	adds	r7, #80	; 0x50
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00f42400 	.word	0x00f42400
 8004de0:	007a1200 	.word	0x007a1200

08004de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e00:	f7ff fff0 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	0a9b      	lsrs	r3, r3, #10
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4903      	ldr	r1, [pc, #12]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	080078ac 	.word	0x080078ac

08004e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e28:	f7ff ffdc 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0b5b      	lsrs	r3, r3, #13
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	080078ac 	.word	0x080078ac

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07b      	b.n	8004f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fe30 	bl	8001b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0104 	and.w	r1, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0210 	and.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_SPI_Transmit_IT+0x20>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e06f      	b.n	8005060 <HAL_SPI_Transmit_IT+0x100>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_Transmit_IT+0x34>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f98:	e05d      	b.n	8005056 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004faa:	e054      	b.n	8005056 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	88fa      	ldrh	r2, [r7, #6]
 8004fc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_SPI_Transmit_IT+0x10c>)
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ff2:	e002      	b.n	8004ffa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_SPI_Transmit_IT+0x110>)
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d10f      	bne.n	8005024 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005012:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005032:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d008      	beq.n	8005054 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e000      	b.n	8005056 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005054:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	080052f7 	.word	0x080052f7
 8005070:	080052b1 	.word	0x080052b1

08005074 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	099b      	lsrs	r3, r3, #6
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
    return;
 80050b6:	e0d7      	b.n	8005268 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_SPI_IRQHandler+0x66>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	4798      	blx	r3
    return;
 80050d8:	e0c6      	b.n	8005268 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10c      	bne.n	8005100 <HAL_SPI_IRQHandler+0x8c>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80b4 	beq.w	8005268 <HAL_SPI_IRQHandler+0x1f4>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80ad 	beq.w	8005268 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	099b      	lsrs	r3, r3, #6
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d023      	beq.n	8005162 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d011      	beq.n	800514a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f043 0204 	orr.w	r2, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	e00b      	b.n	8005162 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]
        return;
 8005160:	e082      	b.n	8005268 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00c      	beq.n	80051be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f043 0208 	orr.w	r2, r3, #8
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d04f      	beq.n	8005266 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_SPI_IRQHandler+0x17e>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d034      	beq.n	800525c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0203 	bic.w	r2, r2, #3
 8005200:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d011      	beq.n	800522e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	4a18      	ldr	r2, [pc, #96]	; (8005270 <HAL_SPI_IRQHandler+0x1fc>)
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd f821 	bl	800225e <HAL_DMA_Abort_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <HAL_SPI_IRQHandler+0x1fc>)
 800523c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd f80b 	bl	800225e <HAL_DMA_Abort_IT>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800525a:	e003      	b.n	8005264 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f809 	bl	8005274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005262:	e000      	b.n	8005266 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005264:	bf00      	nop
    return;
 8005266:	bf00      	nop
  }
}
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	08005289 	.word	0x08005289

08005274 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ffe6 	bl	8005274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8f1 	bl	80054d0 <SPI_CloseTx_ISR>
  }
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f8cf 	bl	80054d0 <SPI_CloseTx_ISR>
  }
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800534c:	f7fc fdd6 	bl	8001efc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4413      	add	r3, r2
 800535a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800535c:	f7fc fdce 	bl	8001efc <HAL_GetTick>
 8005360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	015b      	lsls	r3, r3, #5
 8005368:	0d1b      	lsrs	r3, r3, #20
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005372:	e054      	b.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d050      	beq.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800537c:	f7fc fdbe 	bl	8001efc <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d902      	bls.n	8005392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d13d      	bne.n	800540e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d111      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d004      	beq.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d107      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d10f      	bne.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e017      	b.n	800543e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3b01      	subs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	429a      	cmp	r2, r3
 800543a:	d19b      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	2000000c 	.word	0x2000000c

0800544c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <SPI_EndRxTxTransaction+0x7c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <SPI_EndRxTxTransaction+0x80>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	0d5b      	lsrs	r3, r3, #21
 8005464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005468:	fb02 f303 	mul.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005476:	d112      	bne.n	800549e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff ff5a 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e00f      	b.n	80054be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d0f2      	beq.n	800549e <SPI_EndRxTxTransaction+0x52>
 80054b8:	e000      	b.n	80054bc <SPI_EndRxTxTransaction+0x70>
        break;
 80054ba:	bf00      	nop
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000000c 	.word	0x2000000c
 80054cc:	165e9f81 	.word	0x165e9f81

080054d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80054d8:	4b2c      	ldr	r3, [pc, #176]	; (800558c <SPI_CloseTx_ISR+0xbc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <SPI_CloseTx_ISR+0xc0>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0a5b      	lsrs	r3, r3, #9
 80054e4:	2264      	movs	r2, #100	; 0x64
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ec:	f7fc fd06 	bl	8001efc <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005504:	e009      	b.n	800551a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3b01      	subs	r3, #1
 800550a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0eb      	beq.n	80054f2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005528:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	2164      	movs	r1, #100	; 0x64
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ff8c 	bl	800544c <SPI_EndRxTxTransaction>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fe7d 	bl	8005274 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800557a:	e002      	b.n	8005582 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fc f965 	bl	800184c <HAL_SPI_TxCpltCallback>
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c
 8005590:	057619f1 	.word	0x057619f1

08005594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e041      	b.n	800562a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc faf2 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 f9c0 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e044      	b.n	80056d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x6c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_TIM_Base_Start_IT+0xb8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x6c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d010      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	e007      	b.n	80056d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0202 	mvn.w	r2, #2
 8005724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8ee 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8e0 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8f1 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0204 	mvn.w	r2, #4
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8c4 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8b6 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f8c7 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0208 	mvn.w	r2, #8
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f89a 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f88c 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f89d 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b10      	cmp	r3, #16
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f870 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f862 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f873 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0201 	mvn.w	r2, #1
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f87e 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f8e2 	bl	8005a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d107      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f838 	bl	8005944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d10e      	bne.n	8005900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d107      	bne.n	8005900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0220 	mvn.w	r2, #32
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8ac 	bl	8005a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a34      	ldr	r2, [pc, #208]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <TIM_Base_SetConfig+0xe8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01b      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d017      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <TIM_Base_SetConfig+0xe8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <TIM_Base_SetConfig+0xf4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <TIM_Base_SetConfig+0xf8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <TIM_Base_SetConfig+0xfc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d103      	bne.n	8005a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e03f      	b.n	8005b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc f8a4 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	; 0x24
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fddf 	bl	8006688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b08a      	sub	sp, #40	; 0x28
 8005b1e:	af02      	add	r7, sp, #8
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d17c      	bne.n	8005c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_UART_Transmit+0x2c>
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e075      	b.n	8005c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UART_Transmit+0x3e>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e06e      	b.n	8005c36 <HAL_UART_Transmit+0x11c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2221      	movs	r2, #33	; 0x21
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b6e:	f7fc f9c5 	bl	8001efc <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	88fa      	ldrh	r2, [r7, #6]
 8005b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d108      	bne.n	8005b9c <HAL_UART_Transmit+0x82>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e003      	b.n	8005ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bac:	e02a      	b.n	8005c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fb1f 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e036      	b.n	8005c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3302      	adds	r3, #2
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e007      	b.n	8005bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1cf      	bne.n	8005bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2140      	movs	r1, #64	; 0x40
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 faef 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e006      	b.n	8005c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e000      	b.n	8005c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c34:	2302      	movs	r3, #2
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d11d      	bne.n	8005c94 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_UART_Receive_IT+0x26>
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e016      	b.n	8005c96 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Receive_IT+0x38>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e00f      	b.n	8005c96 <HAL_UART_Receive_IT+0x58>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fb24 	bl	80062d8 <UART_Start_Receive_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	e000      	b.n	8005c96 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b0ba      	sub	sp, #232	; 0xe8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10f      	bne.n	8005d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_UART_IRQHandler+0x66>
 8005cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc07 	bl	8006512 <UART_Receive_IT>
      return;
 8005d04:	e256      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80de 	beq.w	8005ecc <HAL_UART_IRQHandler+0x22c>
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80d1 	beq.w	8005ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_UART_IRQHandler+0xae>
 8005d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_UART_IRQHandler+0xd2>
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f043 0202 	orr.w	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_UART_IRQHandler+0xf6>
 8005d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x126>
 8005da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0208 	orr.w	r2, r3, #8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 81ed 	beq.w	80061aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x14e>
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb92 	bl	8006512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <HAL_UART_IRQHandler+0x17a>
 8005e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04f      	beq.n	8005eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa9a 	bl	8006354 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d141      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3314      	adds	r3, #20
 8005e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1d9      	bne.n	8005e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	4a7d      	ldr	r2, [pc, #500]	; (800607c <HAL_UART_IRQHandler+0x3dc>)
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fc f9e5 	bl	800225e <HAL_DMA_Abort_IT>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	e00e      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f990 	bl	80061d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	e00a      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f98c 	bl	80061d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e006      	b.n	8005ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f988 	bl	80061d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ec6:	e170      	b.n	80061aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	bf00      	nop
    return;
 8005eca:	e16e      	b.n	80061aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 814a 	bne.w	800616a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8143 	beq.w	800616a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0310 	and.w	r3, r3, #16
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 813c 	beq.w	800616a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	f040 80b4 	bne.w	8006080 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8140 	beq.w	80061ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f36:	429a      	cmp	r2, r3
 8005f38:	f080 8139 	bcs.w	80061ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	f000 8088 	beq.w	8006062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d9      	bne.n	8005f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e1      	bne.n	8005f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e3      	bne.n	8005fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006044:	65ba      	str	r2, [r7, #88]	; 0x58
 8006046:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800604a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e3      	bne.n	8006020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	4618      	mov	r0, r3
 800605e:	f7fc f88e 	bl	800217e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	b29b      	uxth	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8b6 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006078:	e099      	b.n	80061ae <HAL_UART_IRQHandler+0x50e>
 800607a:	bf00      	nop
 800607c:	0800641b 	.word	0x0800641b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006088:	b29b      	uxth	r3, r3
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 808b 	beq.w	80061b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800609c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8086 	beq.w	80061b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060ca:	647a      	str	r2, [r7, #68]	; 0x44
 80060cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	623b      	str	r3, [r7, #32]
   return(result);
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3314      	adds	r3, #20
 80060fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006102:	633a      	str	r2, [r7, #48]	; 0x30
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e3      	bne.n	80060de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60fb      	str	r3, [r7, #12]
   return(result);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	617b      	str	r3, [r7, #20]
   return(result);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e3      	bne.n	8006124 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800615c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f83e 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006168:	e023      	b.n	80061b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_UART_IRQHandler+0x4ea>
 8006176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f95d 	bl	8006442 <UART_Transmit_IT>
    return;
 8006188:	e014      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <HAL_UART_IRQHandler+0x514>
 8006196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f99d 	bl	80064e2 <UART_EndTransmit_IT>
    return;
 80061a8:	e004      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
    return;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
      return;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_UART_IRQHandler+0x514>
      return;
 80061b2:	bf00      	nop
  }
}
 80061b4:	37e8      	adds	r7, #232	; 0xe8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop

080061bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b090      	sub	sp, #64	; 0x40
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620c:	e050      	b.n	80062b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d04c      	beq.n	80062b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <UART_WaitOnFlagUntilTimeout+0x30>
 800621c:	f7fb fe6e 	bl	8001efc <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006228:	429a      	cmp	r2, r3
 800622a:	d241      	bcs.n	80062b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800624c:	637a      	str	r2, [r7, #52]	; 0x34
 800624e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	63bb      	str	r3, [r7, #56]	; 0x38
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006280:	623a      	str	r2, [r7, #32]
 8006282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	61bb      	str	r3, [r7, #24]
   return(result);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e00f      	b.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4013      	ands	r3, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d09f      	beq.n	800620e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3740      	adds	r7, #64	; 0x40
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2222      	movs	r2, #34	; 0x22
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006324:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0220 	orr.w	r2, r2, #32
 8006344:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b095      	sub	sp, #84	; 0x54
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800637c:	643a      	str	r2, [r7, #64]	; 0x40
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d119      	bne.n	8006400 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60bb      	str	r3, [r7, #8]
   return(result);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f023 0310 	bic.w	r3, r3, #16
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ec:	61ba      	str	r2, [r7, #24]
 80063ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	613b      	str	r3, [r7, #16]
   return(result);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800640e:	bf00      	nop
 8006410:	3754      	adds	r7, #84	; 0x54
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff fecb 	bl	80061d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b21      	cmp	r3, #33	; 0x21
 8006454:	d13e      	bne.n	80064d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	d114      	bne.n	800648a <UART_Transmit_IT+0x48>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d110      	bne.n	800648a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800647c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]
 8006488:	e008      	b.n	800649c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6211      	str	r1, [r2, #32]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4619      	mov	r1, r3
 80064aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10f      	bne.n	80064d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fe5a 	bl	80061bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b08c      	sub	sp, #48	; 0x30
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b22      	cmp	r3, #34	; 0x22
 8006524:	f040 80ab 	bne.w	800667e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d117      	bne.n	8006562 <UART_Receive_IT+0x50>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006550:	b29a      	uxth	r2, r3
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
 8006560:	e026      	b.n	80065b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006574:	d007      	beq.n	8006586 <UART_Receive_IT+0x74>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <UART_Receive_IT+0x82>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	e008      	b.n	80065a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d15a      	bne.n	800667a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0220 	bic.w	r2, r2, #32
 80065d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	2b01      	cmp	r3, #1
 8006602:	d135      	bne.n	8006670 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	613b      	str	r3, [r7, #16]
   return(result);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f023 0310 	bic.w	r3, r3, #16
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	623a      	str	r2, [r7, #32]
 800662c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	69f9      	ldr	r1, [r7, #28]
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	61bb      	str	r3, [r7, #24]
   return(result);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b10      	cmp	r3, #16
 800664a:	d10a      	bne.n	8006662 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fdbb 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
 800666e:	e002      	b.n	8006676 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fb f9b7 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e002      	b.n	8006680 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3730      	adds	r7, #48	; 0x30
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b0c0      	sub	sp, #256	; 0x100
 800668e:	af00      	add	r7, sp, #0
 8006690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	68d9      	ldr	r1, [r3, #12]
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	ea40 0301 	orr.w	r3, r0, r1
 80066b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	431a      	orrs	r2, r3
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066e0:	f021 010c 	bic.w	r1, r1, #12
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ee:	430b      	orrs	r3, r1
 80066f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	6999      	ldr	r1, [r3, #24]
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	ea40 0301 	orr.w	r3, r0, r1
 800670e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b8f      	ldr	r3, [pc, #572]	; (8006954 <UART_SetConfig+0x2cc>)
 8006718:	429a      	cmp	r2, r3
 800671a:	d005      	beq.n	8006728 <UART_SetConfig+0xa0>
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b8d      	ldr	r3, [pc, #564]	; (8006958 <UART_SetConfig+0x2d0>)
 8006724:	429a      	cmp	r2, r3
 8006726:	d104      	bne.n	8006732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe fb7c 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 800672c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006730:	e003      	b.n	800673a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006732:	f7fe fb63 	bl	8004dfc <HAL_RCC_GetPCLK1Freq>
 8006736:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	f040 810c 	bne.w	8006960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006752:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800675a:	4622      	mov	r2, r4
 800675c:	462b      	mov	r3, r5
 800675e:	1891      	adds	r1, r2, r2
 8006760:	65b9      	str	r1, [r7, #88]	; 0x58
 8006762:	415b      	adcs	r3, r3
 8006764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800676a:	4621      	mov	r1, r4
 800676c:	eb12 0801 	adds.w	r8, r2, r1
 8006770:	4629      	mov	r1, r5
 8006772:	eb43 0901 	adc.w	r9, r3, r1
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800678a:	4690      	mov	r8, r2
 800678c:	4699      	mov	r9, r3
 800678e:	4623      	mov	r3, r4
 8006790:	eb18 0303 	adds.w	r3, r8, r3
 8006794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006798:	462b      	mov	r3, r5
 800679a:	eb49 0303 	adc.w	r3, r9, r3
 800679e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067b6:	460b      	mov	r3, r1
 80067b8:	18db      	adds	r3, r3, r3
 80067ba:	653b      	str	r3, [r7, #80]	; 0x50
 80067bc:	4613      	mov	r3, r2
 80067be:	eb42 0303 	adc.w	r3, r2, r3
 80067c2:	657b      	str	r3, [r7, #84]	; 0x54
 80067c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067cc:	f7f9 fd60 	bl	8000290 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4b61      	ldr	r3, [pc, #388]	; (800695c <UART_SetConfig+0x2d4>)
 80067d6:	fba3 2302 	umull	r2, r3, r3, r2
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	011c      	lsls	r4, r3, #4
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80067f8:	415b      	adcs	r3, r3
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006800:	4641      	mov	r1, r8
 8006802:	eb12 0a01 	adds.w	sl, r2, r1
 8006806:	4649      	mov	r1, r9
 8006808:	eb43 0b01 	adc.w	fp, r3, r1
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800681c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006820:	4692      	mov	sl, r2
 8006822:	469b      	mov	fp, r3
 8006824:	4643      	mov	r3, r8
 8006826:	eb1a 0303 	adds.w	r3, sl, r3
 800682a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800682e:	464b      	mov	r3, r9
 8006830:	eb4b 0303 	adc.w	r3, fp, r3
 8006834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006844:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800684c:	460b      	mov	r3, r1
 800684e:	18db      	adds	r3, r3, r3
 8006850:	643b      	str	r3, [r7, #64]	; 0x40
 8006852:	4613      	mov	r3, r2
 8006854:	eb42 0303 	adc.w	r3, r2, r3
 8006858:	647b      	str	r3, [r7, #68]	; 0x44
 800685a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800685e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006862:	f7f9 fd15 	bl	8000290 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4611      	mov	r1, r2
 800686c:	4b3b      	ldr	r3, [pc, #236]	; (800695c <UART_SetConfig+0x2d4>)
 800686e:	fba3 2301 	umull	r2, r3, r3, r1
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	2264      	movs	r2, #100	; 0x64
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	1acb      	subs	r3, r1, r3
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <UART_SetConfig+0x2d4>)
 8006884:	fba3 2302 	umull	r2, r3, r3, r2
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006890:	441c      	add	r4, r3
 8006892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800689c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	1891      	adds	r1, r2, r2
 80068aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80068ac:	415b      	adcs	r3, r3
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068b4:	4641      	mov	r1, r8
 80068b6:	1851      	adds	r1, r2, r1
 80068b8:	6339      	str	r1, [r7, #48]	; 0x30
 80068ba:	4649      	mov	r1, r9
 80068bc:	414b      	adcs	r3, r1
 80068be:	637b      	str	r3, [r7, #52]	; 0x34
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068cc:	4659      	mov	r1, fp
 80068ce:	00cb      	lsls	r3, r1, #3
 80068d0:	4651      	mov	r1, sl
 80068d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d6:	4651      	mov	r1, sl
 80068d8:	00ca      	lsls	r2, r1, #3
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	4642      	mov	r2, r8
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e8:	464b      	mov	r3, r9
 80068ea:	460a      	mov	r2, r1
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006900:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006908:	460b      	mov	r3, r1
 800690a:	18db      	adds	r3, r3, r3
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
 800690e:	4613      	mov	r3, r2
 8006910:	eb42 0303 	adc.w	r3, r2, r3
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800691a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800691e:	f7f9 fcb7 	bl	8000290 <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <UART_SetConfig+0x2d4>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a08      	ldr	r2, [pc, #32]	; (800695c <UART_SetConfig+0x2d4>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 0207 	and.w	r2, r3, #7
 8006946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4422      	add	r2, r4
 800694e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006950:	e105      	b.n	8006b5e <UART_SetConfig+0x4d6>
 8006952:	bf00      	nop
 8006954:	40011000 	.word	0x40011000
 8006958:	40011400 	.word	0x40011400
 800695c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006964:	2200      	movs	r2, #0
 8006966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800696a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800696e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006972:	4642      	mov	r2, r8
 8006974:	464b      	mov	r3, r9
 8006976:	1891      	adds	r1, r2, r2
 8006978:	6239      	str	r1, [r7, #32]
 800697a:	415b      	adcs	r3, r3
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006982:	4641      	mov	r1, r8
 8006984:	1854      	adds	r4, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb43 0501 	adc.w	r5, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	00eb      	lsls	r3, r5, #3
 8006996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699a:	00e2      	lsls	r2, r4, #3
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	4643      	mov	r3, r8
 80069a2:	18e3      	adds	r3, r4, r3
 80069a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a8:	464b      	mov	r3, r9
 80069aa:	eb45 0303 	adc.w	r3, r5, r3
 80069ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ce:	4629      	mov	r1, r5
 80069d0:	008b      	lsls	r3, r1, #2
 80069d2:	4621      	mov	r1, r4
 80069d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d8:	4621      	mov	r1, r4
 80069da:	008a      	lsls	r2, r1, #2
 80069dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069e0:	f7f9 fc56 	bl	8000290 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4b60      	ldr	r3, [pc, #384]	; (8006b6c <UART_SetConfig+0x4e4>)
 80069ea:	fba3 2302 	umull	r2, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	011c      	lsls	r4, r3, #4
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	61b9      	str	r1, [r7, #24]
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a14:	4641      	mov	r1, r8
 8006a16:	1851      	adds	r1, r2, r1
 8006a18:	6139      	str	r1, [r7, #16]
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	414b      	adcs	r3, r1
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4651      	mov	r1, sl
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4642      	mov	r2, r8
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a48:	464b      	mov	r3, r9
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	eb42 0303 	adc.w	r3, r2, r3
 8006a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	008b      	lsls	r3, r1, #2
 8006a70:	4641      	mov	r1, r8
 8006a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a76:	4641      	mov	r1, r8
 8006a78:	008a      	lsls	r2, r1, #2
 8006a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a7e:	f7f9 fc07 	bl	8000290 <__aeabi_uldivmod>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <UART_SetConfig+0x4e4>)
 8006a88:	fba3 1302 	umull	r1, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	2164      	movs	r1, #100	; 0x64
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	3332      	adds	r3, #50	; 0x32
 8006a9a:	4a34      	ldr	r2, [pc, #208]	; (8006b6c <UART_SetConfig+0x4e4>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa6:	441c      	add	r4, r3
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aac:	2200      	movs	r2, #0
 8006aae:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ab2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	1891      	adds	r1, r2, r2
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	415b      	adcs	r3, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	1851      	adds	r1, r2, r1
 8006aca:	6039      	str	r1, [r7, #0]
 8006acc:	4649      	mov	r1, r9
 8006ace:	414b      	adcs	r3, r1
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ade:	4659      	mov	r1, fp
 8006ae0:	00cb      	lsls	r3, r1, #3
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ae8:	4651      	mov	r1, sl
 8006aea:	00ca      	lsls	r2, r1, #3
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	4642      	mov	r2, r8
 8006af4:	189b      	adds	r3, r3, r2
 8006af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af8:	464b      	mov	r3, r9
 8006afa:	460a      	mov	r2, r1
 8006afc:	eb42 0303 	adc.w	r3, r2, r3
 8006b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b0c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	008b      	lsls	r3, r1, #2
 8006b1e:	4641      	mov	r1, r8
 8006b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b24:	4641      	mov	r1, r8
 8006b26:	008a      	lsls	r2, r1, #2
 8006b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b2c:	f7f9 fbb0 	bl	8000290 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <UART_SetConfig+0x4e4>)
 8006b36:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	2164      	movs	r1, #100	; 0x64
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	3332      	adds	r3, #50	; 0x32
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <UART_SetConfig+0x4e4>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4422      	add	r2, r4
 8006b5c:	609a      	str	r2, [r3, #8]
}
 8006b5e:	bf00      	nop
 8006b60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b64:	46bd      	mov	sp, r7
 8006b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6a:	bf00      	nop
 8006b6c:	51eb851f 	.word	0x51eb851f

08006b70 <__errno>:
 8006b70:	4b01      	ldr	r3, [pc, #4]	; (8006b78 <__errno+0x8>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20000018 	.word	0x20000018

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4d0d      	ldr	r5, [pc, #52]	; (8006bb4 <__libc_init_array+0x38>)
 8006b80:	4c0d      	ldr	r4, [pc, #52]	; (8006bb8 <__libc_init_array+0x3c>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	2600      	movs	r6, #0
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	4d0b      	ldr	r5, [pc, #44]	; (8006bbc <__libc_init_array+0x40>)
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	; (8006bc0 <__libc_init_array+0x44>)
 8006b90:	f000 fc8e 	bl	80074b0 <_init>
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	2600      	movs	r6, #0
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	080078f0 	.word	0x080078f0
 8006bb8:	080078f0 	.word	0x080078f0
 8006bbc:	080078f0 	.word	0x080078f0
 8006bc0:	080078f4 	.word	0x080078f4

08006bc4 <memset>:
 8006bc4:	4402      	add	r2, r0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d100      	bne.n	8006bce <memset+0xa>
 8006bcc:	4770      	bx	lr
 8006bce:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd2:	e7f9      	b.n	8006bc8 <memset+0x4>

08006bd4 <siprintf>:
 8006bd4:	b40e      	push	{r1, r2, r3}
 8006bd6:	b500      	push	{lr}
 8006bd8:	b09c      	sub	sp, #112	; 0x70
 8006bda:	ab1d      	add	r3, sp, #116	; 0x74
 8006bdc:	9002      	str	r0, [sp, #8]
 8006bde:	9006      	str	r0, [sp, #24]
 8006be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be4:	4809      	ldr	r0, [pc, #36]	; (8006c0c <siprintf+0x38>)
 8006be6:	9107      	str	r1, [sp, #28]
 8006be8:	9104      	str	r1, [sp, #16]
 8006bea:	4909      	ldr	r1, [pc, #36]	; (8006c10 <siprintf+0x3c>)
 8006bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf0:	9105      	str	r1, [sp, #20]
 8006bf2:	6800      	ldr	r0, [r0, #0]
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	a902      	add	r1, sp, #8
 8006bf8:	f000 f868 	bl	8006ccc <_svfiprintf_r>
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	b01c      	add	sp, #112	; 0x70
 8006c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c08:	b003      	add	sp, #12
 8006c0a:	4770      	bx	lr
 8006c0c:	20000018 	.word	0x20000018
 8006c10:	ffff0208 	.word	0xffff0208

08006c14 <__ssputs_r>:
 8006c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	688e      	ldr	r6, [r1, #8]
 8006c1a:	429e      	cmp	r6, r3
 8006c1c:	4682      	mov	sl, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	4690      	mov	r8, r2
 8006c22:	461f      	mov	r7, r3
 8006c24:	d838      	bhi.n	8006c98 <__ssputs_r+0x84>
 8006c26:	898a      	ldrh	r2, [r1, #12]
 8006c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c2c:	d032      	beq.n	8006c94 <__ssputs_r+0x80>
 8006c2e:	6825      	ldr	r5, [r4, #0]
 8006c30:	6909      	ldr	r1, [r1, #16]
 8006c32:	eba5 0901 	sub.w	r9, r5, r1
 8006c36:	6965      	ldr	r5, [r4, #20]
 8006c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c40:	3301      	adds	r3, #1
 8006c42:	444b      	add	r3, r9
 8006c44:	106d      	asrs	r5, r5, #1
 8006c46:	429d      	cmp	r5, r3
 8006c48:	bf38      	it	cc
 8006c4a:	461d      	movcc	r5, r3
 8006c4c:	0553      	lsls	r3, r2, #21
 8006c4e:	d531      	bpl.n	8006cb4 <__ssputs_r+0xa0>
 8006c50:	4629      	mov	r1, r5
 8006c52:	f000 fb63 	bl	800731c <_malloc_r>
 8006c56:	4606      	mov	r6, r0
 8006c58:	b950      	cbnz	r0, 8006c70 <__ssputs_r+0x5c>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	f8ca 3000 	str.w	r3, [sl]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	6921      	ldr	r1, [r4, #16]
 8006c72:	464a      	mov	r2, r9
 8006c74:	f000 fabe 	bl	80071f4 <memcpy>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	81a3      	strh	r3, [r4, #12]
 8006c84:	6126      	str	r6, [r4, #16]
 8006c86:	6165      	str	r5, [r4, #20]
 8006c88:	444e      	add	r6, r9
 8006c8a:	eba5 0509 	sub.w	r5, r5, r9
 8006c8e:	6026      	str	r6, [r4, #0]
 8006c90:	60a5      	str	r5, [r4, #8]
 8006c92:	463e      	mov	r6, r7
 8006c94:	42be      	cmp	r6, r7
 8006c96:	d900      	bls.n	8006c9a <__ssputs_r+0x86>
 8006c98:	463e      	mov	r6, r7
 8006c9a:	6820      	ldr	r0, [r4, #0]
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	f000 fab6 	bl	8007210 <memmove>
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	1b9b      	subs	r3, r3, r6
 8006ca8:	60a3      	str	r3, [r4, #8]
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	4433      	add	r3, r6
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e7db      	b.n	8006c6c <__ssputs_r+0x58>
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	f000 fba5 	bl	8007404 <_realloc_r>
 8006cba:	4606      	mov	r6, r0
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1e1      	bne.n	8006c84 <__ssputs_r+0x70>
 8006cc0:	6921      	ldr	r1, [r4, #16]
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f000 fabe 	bl	8007244 <_free_r>
 8006cc8:	e7c7      	b.n	8006c5a <__ssputs_r+0x46>
	...

08006ccc <_svfiprintf_r>:
 8006ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4698      	mov	r8, r3
 8006cd2:	898b      	ldrh	r3, [r1, #12]
 8006cd4:	061b      	lsls	r3, r3, #24
 8006cd6:	b09d      	sub	sp, #116	; 0x74
 8006cd8:	4607      	mov	r7, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	4614      	mov	r4, r2
 8006cde:	d50e      	bpl.n	8006cfe <_svfiprintf_r+0x32>
 8006ce0:	690b      	ldr	r3, [r1, #16]
 8006ce2:	b963      	cbnz	r3, 8006cfe <_svfiprintf_r+0x32>
 8006ce4:	2140      	movs	r1, #64	; 0x40
 8006ce6:	f000 fb19 	bl	800731c <_malloc_r>
 8006cea:	6028      	str	r0, [r5, #0]
 8006cec:	6128      	str	r0, [r5, #16]
 8006cee:	b920      	cbnz	r0, 8006cfa <_svfiprintf_r+0x2e>
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	e0d1      	b.n	8006e9e <_svfiprintf_r+0x1d2>
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	616b      	str	r3, [r5, #20]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9309      	str	r3, [sp, #36]	; 0x24
 8006d02:	2320      	movs	r3, #32
 8006d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d0c:	2330      	movs	r3, #48	; 0x30
 8006d0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006eb8 <_svfiprintf_r+0x1ec>
 8006d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d16:	f04f 0901 	mov.w	r9, #1
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	469a      	mov	sl, r3
 8006d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d22:	b10a      	cbz	r2, 8006d28 <_svfiprintf_r+0x5c>
 8006d24:	2a25      	cmp	r2, #37	; 0x25
 8006d26:	d1f9      	bne.n	8006d1c <_svfiprintf_r+0x50>
 8006d28:	ebba 0b04 	subs.w	fp, sl, r4
 8006d2c:	d00b      	beq.n	8006d46 <_svfiprintf_r+0x7a>
 8006d2e:	465b      	mov	r3, fp
 8006d30:	4622      	mov	r2, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff ff6d 	bl	8006c14 <__ssputs_r>
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f000 80aa 	beq.w	8006e94 <_svfiprintf_r+0x1c8>
 8006d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d42:	445a      	add	r2, fp
 8006d44:	9209      	str	r2, [sp, #36]	; 0x24
 8006d46:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80a2 	beq.w	8006e94 <_svfiprintf_r+0x1c8>
 8006d50:	2300      	movs	r3, #0
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d5a:	f10a 0a01 	add.w	sl, sl, #1
 8006d5e:	9304      	str	r3, [sp, #16]
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d66:	931a      	str	r3, [sp, #104]	; 0x68
 8006d68:	4654      	mov	r4, sl
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d70:	4851      	ldr	r0, [pc, #324]	; (8006eb8 <_svfiprintf_r+0x1ec>)
 8006d72:	f7f9 fa3d 	bl	80001f0 <memchr>
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	b9d8      	cbnz	r0, 8006db2 <_svfiprintf_r+0xe6>
 8006d7a:	06d0      	lsls	r0, r2, #27
 8006d7c:	bf44      	itt	mi
 8006d7e:	2320      	movmi	r3, #32
 8006d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d84:	0711      	lsls	r1, r2, #28
 8006d86:	bf44      	itt	mi
 8006d88:	232b      	movmi	r3, #43	; 0x2b
 8006d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d92:	2b2a      	cmp	r3, #42	; 0x2a
 8006d94:	d015      	beq.n	8006dc2 <_svfiprintf_r+0xf6>
 8006d96:	9a07      	ldr	r2, [sp, #28]
 8006d98:	4654      	mov	r4, sl
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f04f 0c0a 	mov.w	ip, #10
 8006da0:	4621      	mov	r1, r4
 8006da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da6:	3b30      	subs	r3, #48	; 0x30
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	d94e      	bls.n	8006e4a <_svfiprintf_r+0x17e>
 8006dac:	b1b0      	cbz	r0, 8006ddc <_svfiprintf_r+0x110>
 8006dae:	9207      	str	r2, [sp, #28]
 8006db0:	e014      	b.n	8006ddc <_svfiprintf_r+0x110>
 8006db2:	eba0 0308 	sub.w	r3, r0, r8
 8006db6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	46a2      	mov	sl, r4
 8006dc0:	e7d2      	b.n	8006d68 <_svfiprintf_r+0x9c>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	1d19      	adds	r1, r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	9103      	str	r1, [sp, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bfbb      	ittet	lt
 8006dce:	425b      	neglt	r3, r3
 8006dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd4:	9307      	strge	r3, [sp, #28]
 8006dd6:	9307      	strlt	r3, [sp, #28]
 8006dd8:	bfb8      	it	lt
 8006dda:	9204      	strlt	r2, [sp, #16]
 8006ddc:	7823      	ldrb	r3, [r4, #0]
 8006dde:	2b2e      	cmp	r3, #46	; 0x2e
 8006de0:	d10c      	bne.n	8006dfc <_svfiprintf_r+0x130>
 8006de2:	7863      	ldrb	r3, [r4, #1]
 8006de4:	2b2a      	cmp	r3, #42	; 0x2a
 8006de6:	d135      	bne.n	8006e54 <_svfiprintf_r+0x188>
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	9203      	str	r2, [sp, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bfb8      	it	lt
 8006df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df8:	3402      	adds	r4, #2
 8006dfa:	9305      	str	r3, [sp, #20]
 8006dfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ec8 <_svfiprintf_r+0x1fc>
 8006e00:	7821      	ldrb	r1, [r4, #0]
 8006e02:	2203      	movs	r2, #3
 8006e04:	4650      	mov	r0, sl
 8006e06:	f7f9 f9f3 	bl	80001f0 <memchr>
 8006e0a:	b140      	cbz	r0, 8006e1e <_svfiprintf_r+0x152>
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	eba0 000a 	sub.w	r0, r0, sl
 8006e12:	fa03 f000 	lsl.w	r0, r3, r0
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	4303      	orrs	r3, r0
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e22:	4826      	ldr	r0, [pc, #152]	; (8006ebc <_svfiprintf_r+0x1f0>)
 8006e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e28:	2206      	movs	r2, #6
 8006e2a:	f7f9 f9e1 	bl	80001f0 <memchr>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d038      	beq.n	8006ea4 <_svfiprintf_r+0x1d8>
 8006e32:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <_svfiprintf_r+0x1f4>)
 8006e34:	bb1b      	cbnz	r3, 8006e7e <_svfiprintf_r+0x1b2>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	3307      	adds	r3, #7
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	3308      	adds	r3, #8
 8006e40:	9303      	str	r3, [sp, #12]
 8006e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e44:	4433      	add	r3, r6
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	e767      	b.n	8006d1a <_svfiprintf_r+0x4e>
 8006e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e4e:	460c      	mov	r4, r1
 8006e50:	2001      	movs	r0, #1
 8006e52:	e7a5      	b.n	8006da0 <_svfiprintf_r+0xd4>
 8006e54:	2300      	movs	r3, #0
 8006e56:	3401      	adds	r4, #1
 8006e58:	9305      	str	r3, [sp, #20]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f04f 0c0a 	mov.w	ip, #10
 8006e60:	4620      	mov	r0, r4
 8006e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e66:	3a30      	subs	r2, #48	; 0x30
 8006e68:	2a09      	cmp	r2, #9
 8006e6a:	d903      	bls.n	8006e74 <_svfiprintf_r+0x1a8>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0c5      	beq.n	8006dfc <_svfiprintf_r+0x130>
 8006e70:	9105      	str	r1, [sp, #20]
 8006e72:	e7c3      	b.n	8006dfc <_svfiprintf_r+0x130>
 8006e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e78:	4604      	mov	r4, r0
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e7f0      	b.n	8006e60 <_svfiprintf_r+0x194>
 8006e7e:	ab03      	add	r3, sp, #12
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	462a      	mov	r2, r5
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <_svfiprintf_r+0x1f8>)
 8006e86:	a904      	add	r1, sp, #16
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f3af 8000 	nop.w
 8006e8e:	1c42      	adds	r2, r0, #1
 8006e90:	4606      	mov	r6, r0
 8006e92:	d1d6      	bne.n	8006e42 <_svfiprintf_r+0x176>
 8006e94:	89ab      	ldrh	r3, [r5, #12]
 8006e96:	065b      	lsls	r3, r3, #25
 8006e98:	f53f af2c 	bmi.w	8006cf4 <_svfiprintf_r+0x28>
 8006e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e9e:	b01d      	add	sp, #116	; 0x74
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <_svfiprintf_r+0x1f8>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f000 f87a 	bl	8006fa8 <_printf_i>
 8006eb4:	e7eb      	b.n	8006e8e <_svfiprintf_r+0x1c2>
 8006eb6:	bf00      	nop
 8006eb8:	080078b4 	.word	0x080078b4
 8006ebc:	080078be 	.word	0x080078be
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	08006c15 	.word	0x08006c15
 8006ec8:	080078ba 	.word	0x080078ba

08006ecc <_printf_common>:
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	4699      	mov	r9, r3
 8006ed4:	688a      	ldr	r2, [r1, #8]
 8006ed6:	690b      	ldr	r3, [r1, #16]
 8006ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bfb8      	it	lt
 8006ee0:	4613      	movlt	r3, r2
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee8:	4607      	mov	r7, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	b10a      	cbz	r2, 8006ef2 <_printf_common+0x26>
 8006eee:	3301      	adds	r3, #1
 8006ef0:	6033      	str	r3, [r6, #0]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	0699      	lsls	r1, r3, #26
 8006ef6:	bf42      	ittt	mi
 8006ef8:	6833      	ldrmi	r3, [r6, #0]
 8006efa:	3302      	addmi	r3, #2
 8006efc:	6033      	strmi	r3, [r6, #0]
 8006efe:	6825      	ldr	r5, [r4, #0]
 8006f00:	f015 0506 	ands.w	r5, r5, #6
 8006f04:	d106      	bne.n	8006f14 <_printf_common+0x48>
 8006f06:	f104 0a19 	add.w	sl, r4, #25
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	6832      	ldr	r2, [r6, #0]
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	dc26      	bgt.n	8006f62 <_printf_common+0x96>
 8006f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f18:	1e13      	subs	r3, r2, #0
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	0692      	lsls	r2, r2, #26
 8006f22:	d42b      	bmi.n	8006f7c <_printf_common+0xb0>
 8006f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	47c0      	blx	r8
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d01e      	beq.n	8006f70 <_printf_common+0xa4>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	68e5      	ldr	r5, [r4, #12]
 8006f36:	6832      	ldr	r2, [r6, #0]
 8006f38:	f003 0306 	and.w	r3, r3, #6
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	bf08      	it	eq
 8006f40:	1aad      	subeq	r5, r5, r2
 8006f42:	68a3      	ldr	r3, [r4, #8]
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	bf0c      	ite	eq
 8006f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f4c:	2500      	movne	r5, #0
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bfc4      	itt	gt
 8006f52:	1a9b      	subgt	r3, r3, r2
 8006f54:	18ed      	addgt	r5, r5, r3
 8006f56:	2600      	movs	r6, #0
 8006f58:	341a      	adds	r4, #26
 8006f5a:	42b5      	cmp	r5, r6
 8006f5c:	d11a      	bne.n	8006f94 <_printf_common+0xc8>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	e008      	b.n	8006f74 <_printf_common+0xa8>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4652      	mov	r2, sl
 8006f66:	4649      	mov	r1, r9
 8006f68:	4638      	mov	r0, r7
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d103      	bne.n	8006f78 <_printf_common+0xac>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	3501      	adds	r5, #1
 8006f7a:	e7c6      	b.n	8006f0a <_printf_common+0x3e>
 8006f7c:	18e1      	adds	r1, r4, r3
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	2030      	movs	r0, #48	; 0x30
 8006f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f86:	4422      	add	r2, r4
 8006f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f90:	3302      	adds	r3, #2
 8006f92:	e7c7      	b.n	8006f24 <_printf_common+0x58>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4622      	mov	r2, r4
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d0e6      	beq.n	8006f70 <_printf_common+0xa4>
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7d9      	b.n	8006f5a <_printf_common+0x8e>
	...

08006fa8 <_printf_i>:
 8006fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	7e0f      	ldrb	r7, [r1, #24]
 8006fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fb0:	2f78      	cmp	r7, #120	; 0x78
 8006fb2:	4691      	mov	r9, r2
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	469a      	mov	sl, r3
 8006fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fbe:	d807      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fc0:	2f62      	cmp	r7, #98	; 0x62
 8006fc2:	d80a      	bhi.n	8006fda <_printf_i+0x32>
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	f000 80d8 	beq.w	800717a <_printf_i+0x1d2>
 8006fca:	2f58      	cmp	r7, #88	; 0x58
 8006fcc:	f000 80a3 	beq.w	8007116 <_printf_i+0x16e>
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd8:	e03a      	b.n	8007050 <_printf_i+0xa8>
 8006fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fde:	2b15      	cmp	r3, #21
 8006fe0:	d8f6      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fe2:	a101      	add	r1, pc, #4	; (adr r1, 8006fe8 <_printf_i+0x40>)
 8006fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08006fd1 	.word	0x08006fd1
 8006ff4:	08006fd1 	.word	0x08006fd1
 8006ff8:	08006fd1 	.word	0x08006fd1
 8006ffc:	08006fd1 	.word	0x08006fd1
 8007000:	08007055 	.word	0x08007055
 8007004:	08006fd1 	.word	0x08006fd1
 8007008:	08006fd1 	.word	0x08006fd1
 800700c:	08006fd1 	.word	0x08006fd1
 8007010:	08006fd1 	.word	0x08006fd1
 8007014:	08007161 	.word	0x08007161
 8007018:	08007085 	.word	0x08007085
 800701c:	08007143 	.word	0x08007143
 8007020:	08006fd1 	.word	0x08006fd1
 8007024:	08006fd1 	.word	0x08006fd1
 8007028:	08007183 	.word	0x08007183
 800702c:	08006fd1 	.word	0x08006fd1
 8007030:	08007085 	.word	0x08007085
 8007034:	08006fd1 	.word	0x08006fd1
 8007038:	08006fd1 	.word	0x08006fd1
 800703c:	0800714b 	.word	0x0800714b
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800704c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007050:	2301      	movs	r3, #1
 8007052:	e0a3      	b.n	800719c <_printf_i+0x1f4>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	6829      	ldr	r1, [r5, #0]
 8007058:	0606      	lsls	r6, r0, #24
 800705a:	f101 0304 	add.w	r3, r1, #4
 800705e:	d50a      	bpl.n	8007076 <_printf_i+0xce>
 8007060:	680e      	ldr	r6, [r1, #0]
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	2e00      	cmp	r6, #0
 8007066:	da03      	bge.n	8007070 <_printf_i+0xc8>
 8007068:	232d      	movs	r3, #45	; 0x2d
 800706a:	4276      	negs	r6, r6
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007070:	485e      	ldr	r0, [pc, #376]	; (80071ec <_printf_i+0x244>)
 8007072:	230a      	movs	r3, #10
 8007074:	e019      	b.n	80070aa <_printf_i+0x102>
 8007076:	680e      	ldr	r6, [r1, #0]
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800707e:	bf18      	it	ne
 8007080:	b236      	sxthne	r6, r6
 8007082:	e7ef      	b.n	8007064 <_printf_i+0xbc>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	1d19      	adds	r1, r3, #4
 800708a:	6029      	str	r1, [r5, #0]
 800708c:	0601      	lsls	r1, r0, #24
 800708e:	d501      	bpl.n	8007094 <_printf_i+0xec>
 8007090:	681e      	ldr	r6, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0xf2>
 8007094:	0646      	lsls	r6, r0, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0xe8>
 8007098:	881e      	ldrh	r6, [r3, #0]
 800709a:	4854      	ldr	r0, [pc, #336]	; (80071ec <_printf_i+0x244>)
 800709c:	2f6f      	cmp	r7, #111	; 0x6f
 800709e:	bf0c      	ite	eq
 80070a0:	2308      	moveq	r3, #8
 80070a2:	230a      	movne	r3, #10
 80070a4:	2100      	movs	r1, #0
 80070a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070aa:	6865      	ldr	r5, [r4, #4]
 80070ac:	60a5      	str	r5, [r4, #8]
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	bfa2      	ittt	ge
 80070b2:	6821      	ldrge	r1, [r4, #0]
 80070b4:	f021 0104 	bicge.w	r1, r1, #4
 80070b8:	6021      	strge	r1, [r4, #0]
 80070ba:	b90e      	cbnz	r6, 80070c0 <_printf_i+0x118>
 80070bc:	2d00      	cmp	r5, #0
 80070be:	d04d      	beq.n	800715c <_printf_i+0x1b4>
 80070c0:	4615      	mov	r5, r2
 80070c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070c6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ca:	5dc7      	ldrb	r7, [r0, r7]
 80070cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d0:	4637      	mov	r7, r6
 80070d2:	42bb      	cmp	r3, r7
 80070d4:	460e      	mov	r6, r1
 80070d6:	d9f4      	bls.n	80070c2 <_printf_i+0x11a>
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d10b      	bne.n	80070f4 <_printf_i+0x14c>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	07de      	lsls	r6, r3, #31
 80070e0:	d508      	bpl.n	80070f4 <_printf_i+0x14c>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	6861      	ldr	r1, [r4, #4]
 80070e6:	4299      	cmp	r1, r3
 80070e8:	bfde      	ittt	le
 80070ea:	2330      	movle	r3, #48	; 0x30
 80070ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070f4:	1b52      	subs	r2, r2, r5
 80070f6:	6122      	str	r2, [r4, #16]
 80070f8:	f8cd a000 	str.w	sl, [sp]
 80070fc:	464b      	mov	r3, r9
 80070fe:	aa03      	add	r2, sp, #12
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff fee2 	bl	8006ecc <_printf_common>
 8007108:	3001      	adds	r0, #1
 800710a:	d14c      	bne.n	80071a6 <_printf_i+0x1fe>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	b004      	add	sp, #16
 8007112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007116:	4835      	ldr	r0, [pc, #212]	; (80071ec <_printf_i+0x244>)
 8007118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800711c:	6829      	ldr	r1, [r5, #0]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f851 6b04 	ldr.w	r6, [r1], #4
 8007124:	6029      	str	r1, [r5, #0]
 8007126:	061d      	lsls	r5, r3, #24
 8007128:	d514      	bpl.n	8007154 <_printf_i+0x1ac>
 800712a:	07df      	lsls	r7, r3, #31
 800712c:	bf44      	itt	mi
 800712e:	f043 0320 	orrmi.w	r3, r3, #32
 8007132:	6023      	strmi	r3, [r4, #0]
 8007134:	b91e      	cbnz	r6, 800713e <_printf_i+0x196>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f023 0320 	bic.w	r3, r3, #32
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	2310      	movs	r3, #16
 8007140:	e7b0      	b.n	80070a4 <_printf_i+0xfc>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f043 0320 	orr.w	r3, r3, #32
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	2378      	movs	r3, #120	; 0x78
 800714c:	4828      	ldr	r0, [pc, #160]	; (80071f0 <_printf_i+0x248>)
 800714e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007152:	e7e3      	b.n	800711c <_printf_i+0x174>
 8007154:	0659      	lsls	r1, r3, #25
 8007156:	bf48      	it	mi
 8007158:	b2b6      	uxthmi	r6, r6
 800715a:	e7e6      	b.n	800712a <_printf_i+0x182>
 800715c:	4615      	mov	r5, r2
 800715e:	e7bb      	b.n	80070d8 <_printf_i+0x130>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	6826      	ldr	r6, [r4, #0]
 8007164:	6961      	ldr	r1, [r4, #20]
 8007166:	1d18      	adds	r0, r3, #4
 8007168:	6028      	str	r0, [r5, #0]
 800716a:	0635      	lsls	r5, r6, #24
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	d501      	bpl.n	8007174 <_printf_i+0x1cc>
 8007170:	6019      	str	r1, [r3, #0]
 8007172:	e002      	b.n	800717a <_printf_i+0x1d2>
 8007174:	0670      	lsls	r0, r6, #25
 8007176:	d5fb      	bpl.n	8007170 <_printf_i+0x1c8>
 8007178:	8019      	strh	r1, [r3, #0]
 800717a:	2300      	movs	r3, #0
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	4615      	mov	r5, r2
 8007180:	e7ba      	b.n	80070f8 <_printf_i+0x150>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	1d1a      	adds	r2, r3, #4
 8007186:	602a      	str	r2, [r5, #0]
 8007188:	681d      	ldr	r5, [r3, #0]
 800718a:	6862      	ldr	r2, [r4, #4]
 800718c:	2100      	movs	r1, #0
 800718e:	4628      	mov	r0, r5
 8007190:	f7f9 f82e 	bl	80001f0 <memchr>
 8007194:	b108      	cbz	r0, 800719a <_printf_i+0x1f2>
 8007196:	1b40      	subs	r0, r0, r5
 8007198:	6060      	str	r0, [r4, #4]
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	2300      	movs	r3, #0
 80071a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a4:	e7a8      	b.n	80070f8 <_printf_i+0x150>
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4649      	mov	r1, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	47d0      	blx	sl
 80071b0:	3001      	adds	r0, #1
 80071b2:	d0ab      	beq.n	800710c <_printf_i+0x164>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	079b      	lsls	r3, r3, #30
 80071b8:	d413      	bmi.n	80071e2 <_printf_i+0x23a>
 80071ba:	68e0      	ldr	r0, [r4, #12]
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	4298      	cmp	r0, r3
 80071c0:	bfb8      	it	lt
 80071c2:	4618      	movlt	r0, r3
 80071c4:	e7a4      	b.n	8007110 <_printf_i+0x168>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4632      	mov	r2, r6
 80071ca:	4649      	mov	r1, r9
 80071cc:	4640      	mov	r0, r8
 80071ce:	47d0      	blx	sl
 80071d0:	3001      	adds	r0, #1
 80071d2:	d09b      	beq.n	800710c <_printf_i+0x164>
 80071d4:	3501      	adds	r5, #1
 80071d6:	68e3      	ldr	r3, [r4, #12]
 80071d8:	9903      	ldr	r1, [sp, #12]
 80071da:	1a5b      	subs	r3, r3, r1
 80071dc:	42ab      	cmp	r3, r5
 80071de:	dcf2      	bgt.n	80071c6 <_printf_i+0x21e>
 80071e0:	e7eb      	b.n	80071ba <_printf_i+0x212>
 80071e2:	2500      	movs	r5, #0
 80071e4:	f104 0619 	add.w	r6, r4, #25
 80071e8:	e7f5      	b.n	80071d6 <_printf_i+0x22e>
 80071ea:	bf00      	nop
 80071ec:	080078c5 	.word	0x080078c5
 80071f0:	080078d6 	.word	0x080078d6

080071f4 <memcpy>:
 80071f4:	440a      	add	r2, r1
 80071f6:	4291      	cmp	r1, r2
 80071f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071fc:	d100      	bne.n	8007200 <memcpy+0xc>
 80071fe:	4770      	bx	lr
 8007200:	b510      	push	{r4, lr}
 8007202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800720a:	4291      	cmp	r1, r2
 800720c:	d1f9      	bne.n	8007202 <memcpy+0xe>
 800720e:	bd10      	pop	{r4, pc}

08007210 <memmove>:
 8007210:	4288      	cmp	r0, r1
 8007212:	b510      	push	{r4, lr}
 8007214:	eb01 0402 	add.w	r4, r1, r2
 8007218:	d902      	bls.n	8007220 <memmove+0x10>
 800721a:	4284      	cmp	r4, r0
 800721c:	4623      	mov	r3, r4
 800721e:	d807      	bhi.n	8007230 <memmove+0x20>
 8007220:	1e43      	subs	r3, r0, #1
 8007222:	42a1      	cmp	r1, r4
 8007224:	d008      	beq.n	8007238 <memmove+0x28>
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800722e:	e7f8      	b.n	8007222 <memmove+0x12>
 8007230:	4402      	add	r2, r0
 8007232:	4601      	mov	r1, r0
 8007234:	428a      	cmp	r2, r1
 8007236:	d100      	bne.n	800723a <memmove+0x2a>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800723e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007242:	e7f7      	b.n	8007234 <memmove+0x24>

08007244 <_free_r>:
 8007244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007246:	2900      	cmp	r1, #0
 8007248:	d044      	beq.n	80072d4 <_free_r+0x90>
 800724a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724e:	9001      	str	r0, [sp, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f1a1 0404 	sub.w	r4, r1, #4
 8007256:	bfb8      	it	lt
 8007258:	18e4      	addlt	r4, r4, r3
 800725a:	f000 f913 	bl	8007484 <__malloc_lock>
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <_free_r+0x94>)
 8007260:	9801      	ldr	r0, [sp, #4]
 8007262:	6813      	ldr	r3, [r2, #0]
 8007264:	b933      	cbnz	r3, 8007274 <_free_r+0x30>
 8007266:	6063      	str	r3, [r4, #4]
 8007268:	6014      	str	r4, [r2, #0]
 800726a:	b003      	add	sp, #12
 800726c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007270:	f000 b90e 	b.w	8007490 <__malloc_unlock>
 8007274:	42a3      	cmp	r3, r4
 8007276:	d908      	bls.n	800728a <_free_r+0x46>
 8007278:	6825      	ldr	r5, [r4, #0]
 800727a:	1961      	adds	r1, r4, r5
 800727c:	428b      	cmp	r3, r1
 800727e:	bf01      	itttt	eq
 8007280:	6819      	ldreq	r1, [r3, #0]
 8007282:	685b      	ldreq	r3, [r3, #4]
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	e7ed      	b.n	8007266 <_free_r+0x22>
 800728a:	461a      	mov	r2, r3
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b10b      	cbz	r3, 8007294 <_free_r+0x50>
 8007290:	42a3      	cmp	r3, r4
 8007292:	d9fa      	bls.n	800728a <_free_r+0x46>
 8007294:	6811      	ldr	r1, [r2, #0]
 8007296:	1855      	adds	r5, r2, r1
 8007298:	42a5      	cmp	r5, r4
 800729a:	d10b      	bne.n	80072b4 <_free_r+0x70>
 800729c:	6824      	ldr	r4, [r4, #0]
 800729e:	4421      	add	r1, r4
 80072a0:	1854      	adds	r4, r2, r1
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	d1e0      	bne.n	800726a <_free_r+0x26>
 80072a8:	681c      	ldr	r4, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	6053      	str	r3, [r2, #4]
 80072ae:	4421      	add	r1, r4
 80072b0:	6011      	str	r1, [r2, #0]
 80072b2:	e7da      	b.n	800726a <_free_r+0x26>
 80072b4:	d902      	bls.n	80072bc <_free_r+0x78>
 80072b6:	230c      	movs	r3, #12
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	e7d6      	b.n	800726a <_free_r+0x26>
 80072bc:	6825      	ldr	r5, [r4, #0]
 80072be:	1961      	adds	r1, r4, r5
 80072c0:	428b      	cmp	r3, r1
 80072c2:	bf04      	itt	eq
 80072c4:	6819      	ldreq	r1, [r3, #0]
 80072c6:	685b      	ldreq	r3, [r3, #4]
 80072c8:	6063      	str	r3, [r4, #4]
 80072ca:	bf04      	itt	eq
 80072cc:	1949      	addeq	r1, r1, r5
 80072ce:	6021      	streq	r1, [r4, #0]
 80072d0:	6054      	str	r4, [r2, #4]
 80072d2:	e7ca      	b.n	800726a <_free_r+0x26>
 80072d4:	b003      	add	sp, #12
 80072d6:	bd30      	pop	{r4, r5, pc}
 80072d8:	20000254 	.word	0x20000254

080072dc <sbrk_aligned>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4e0e      	ldr	r6, [pc, #56]	; (8007318 <sbrk_aligned+0x3c>)
 80072e0:	460c      	mov	r4, r1
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	4605      	mov	r5, r0
 80072e6:	b911      	cbnz	r1, 80072ee <sbrk_aligned+0x12>
 80072e8:	f000 f8bc 	bl	8007464 <_sbrk_r>
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f8b7 	bl	8007464 <_sbrk_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d00a      	beq.n	8007310 <sbrk_aligned+0x34>
 80072fa:	1cc4      	adds	r4, r0, #3
 80072fc:	f024 0403 	bic.w	r4, r4, #3
 8007300:	42a0      	cmp	r0, r4
 8007302:	d007      	beq.n	8007314 <sbrk_aligned+0x38>
 8007304:	1a21      	subs	r1, r4, r0
 8007306:	4628      	mov	r0, r5
 8007308:	f000 f8ac 	bl	8007464 <_sbrk_r>
 800730c:	3001      	adds	r0, #1
 800730e:	d101      	bne.n	8007314 <sbrk_aligned+0x38>
 8007310:	f04f 34ff 	mov.w	r4, #4294967295
 8007314:	4620      	mov	r0, r4
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	20000258 	.word	0x20000258

0800731c <_malloc_r>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	1ccd      	adds	r5, r1, #3
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	2d00      	cmp	r5, #0
 8007330:	4607      	mov	r7, r0
 8007332:	db01      	blt.n	8007338 <_malloc_r+0x1c>
 8007334:	42a9      	cmp	r1, r5
 8007336:	d905      	bls.n	8007344 <_malloc_r+0x28>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	2600      	movs	r6, #0
 800733e:	4630      	mov	r0, r6
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007344:	4e2e      	ldr	r6, [pc, #184]	; (8007400 <_malloc_r+0xe4>)
 8007346:	f000 f89d 	bl	8007484 <__malloc_lock>
 800734a:	6833      	ldr	r3, [r6, #0]
 800734c:	461c      	mov	r4, r3
 800734e:	bb34      	cbnz	r4, 800739e <_malloc_r+0x82>
 8007350:	4629      	mov	r1, r5
 8007352:	4638      	mov	r0, r7
 8007354:	f7ff ffc2 	bl	80072dc <sbrk_aligned>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	4604      	mov	r4, r0
 800735c:	d14d      	bne.n	80073fa <_malloc_r+0xde>
 800735e:	6834      	ldr	r4, [r6, #0]
 8007360:	4626      	mov	r6, r4
 8007362:	2e00      	cmp	r6, #0
 8007364:	d140      	bne.n	80073e8 <_malloc_r+0xcc>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	4631      	mov	r1, r6
 800736a:	4638      	mov	r0, r7
 800736c:	eb04 0803 	add.w	r8, r4, r3
 8007370:	f000 f878 	bl	8007464 <_sbrk_r>
 8007374:	4580      	cmp	r8, r0
 8007376:	d13a      	bne.n	80073ee <_malloc_r+0xd2>
 8007378:	6821      	ldr	r1, [r4, #0]
 800737a:	3503      	adds	r5, #3
 800737c:	1a6d      	subs	r5, r5, r1
 800737e:	f025 0503 	bic.w	r5, r5, #3
 8007382:	3508      	adds	r5, #8
 8007384:	2d0c      	cmp	r5, #12
 8007386:	bf38      	it	cc
 8007388:	250c      	movcc	r5, #12
 800738a:	4629      	mov	r1, r5
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff ffa5 	bl	80072dc <sbrk_aligned>
 8007392:	3001      	adds	r0, #1
 8007394:	d02b      	beq.n	80073ee <_malloc_r+0xd2>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	442b      	add	r3, r5
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	e00e      	b.n	80073bc <_malloc_r+0xa0>
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	1b52      	subs	r2, r2, r5
 80073a2:	d41e      	bmi.n	80073e2 <_malloc_r+0xc6>
 80073a4:	2a0b      	cmp	r2, #11
 80073a6:	d916      	bls.n	80073d6 <_malloc_r+0xba>
 80073a8:	1961      	adds	r1, r4, r5
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	6025      	str	r5, [r4, #0]
 80073ae:	bf18      	it	ne
 80073b0:	6059      	strne	r1, [r3, #4]
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	bf08      	it	eq
 80073b6:	6031      	streq	r1, [r6, #0]
 80073b8:	5162      	str	r2, [r4, r5]
 80073ba:	604b      	str	r3, [r1, #4]
 80073bc:	4638      	mov	r0, r7
 80073be:	f104 060b 	add.w	r6, r4, #11
 80073c2:	f000 f865 	bl	8007490 <__malloc_unlock>
 80073c6:	f026 0607 	bic.w	r6, r6, #7
 80073ca:	1d23      	adds	r3, r4, #4
 80073cc:	1af2      	subs	r2, r6, r3
 80073ce:	d0b6      	beq.n	800733e <_malloc_r+0x22>
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	50a3      	str	r3, [r4, r2]
 80073d4:	e7b3      	b.n	800733e <_malloc_r+0x22>
 80073d6:	6862      	ldr	r2, [r4, #4]
 80073d8:	42a3      	cmp	r3, r4
 80073da:	bf0c      	ite	eq
 80073dc:	6032      	streq	r2, [r6, #0]
 80073de:	605a      	strne	r2, [r3, #4]
 80073e0:	e7ec      	b.n	80073bc <_malloc_r+0xa0>
 80073e2:	4623      	mov	r3, r4
 80073e4:	6864      	ldr	r4, [r4, #4]
 80073e6:	e7b2      	b.n	800734e <_malloc_r+0x32>
 80073e8:	4634      	mov	r4, r6
 80073ea:	6876      	ldr	r6, [r6, #4]
 80073ec:	e7b9      	b.n	8007362 <_malloc_r+0x46>
 80073ee:	230c      	movs	r3, #12
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	4638      	mov	r0, r7
 80073f4:	f000 f84c 	bl	8007490 <__malloc_unlock>
 80073f8:	e7a1      	b.n	800733e <_malloc_r+0x22>
 80073fa:	6025      	str	r5, [r4, #0]
 80073fc:	e7de      	b.n	80073bc <_malloc_r+0xa0>
 80073fe:	bf00      	nop
 8007400:	20000254 	.word	0x20000254

08007404 <_realloc_r>:
 8007404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	4680      	mov	r8, r0
 800740a:	4614      	mov	r4, r2
 800740c:	460e      	mov	r6, r1
 800740e:	b921      	cbnz	r1, 800741a <_realloc_r+0x16>
 8007410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4611      	mov	r1, r2
 8007416:	f7ff bf81 	b.w	800731c <_malloc_r>
 800741a:	b92a      	cbnz	r2, 8007428 <_realloc_r+0x24>
 800741c:	f7ff ff12 	bl	8007244 <_free_r>
 8007420:	4625      	mov	r5, r4
 8007422:	4628      	mov	r0, r5
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	f000 f838 	bl	800749c <_malloc_usable_size_r>
 800742c:	4284      	cmp	r4, r0
 800742e:	4607      	mov	r7, r0
 8007430:	d802      	bhi.n	8007438 <_realloc_r+0x34>
 8007432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007436:	d812      	bhi.n	800745e <_realloc_r+0x5a>
 8007438:	4621      	mov	r1, r4
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff ff6e 	bl	800731c <_malloc_r>
 8007440:	4605      	mov	r5, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d0ed      	beq.n	8007422 <_realloc_r+0x1e>
 8007446:	42bc      	cmp	r4, r7
 8007448:	4622      	mov	r2, r4
 800744a:	4631      	mov	r1, r6
 800744c:	bf28      	it	cs
 800744e:	463a      	movcs	r2, r7
 8007450:	f7ff fed0 	bl	80071f4 <memcpy>
 8007454:	4631      	mov	r1, r6
 8007456:	4640      	mov	r0, r8
 8007458:	f7ff fef4 	bl	8007244 <_free_r>
 800745c:	e7e1      	b.n	8007422 <_realloc_r+0x1e>
 800745e:	4635      	mov	r5, r6
 8007460:	e7df      	b.n	8007422 <_realloc_r+0x1e>
	...

08007464 <_sbrk_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d06      	ldr	r5, [pc, #24]	; (8007480 <_sbrk_r+0x1c>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	f7fa fc6c 	bl	8001d4c <_sbrk>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_sbrk_r+0x1a>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_sbrk_r+0x1a>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	2000025c 	.word	0x2000025c

08007484 <__malloc_lock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_lock+0x8>)
 8007486:	f000 b811 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20000260 	.word	0x20000260

08007490 <__malloc_unlock>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__malloc_unlock+0x8>)
 8007492:	f000 b80c 	b.w	80074ae <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20000260 	.word	0x20000260

0800749c <_malloc_usable_size_r>:
 800749c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a0:	1f18      	subs	r0, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bfbc      	itt	lt
 80074a6:	580b      	ldrlt	r3, [r1, r0]
 80074a8:	18c0      	addlt	r0, r0, r3
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_acquire_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_release_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <_init>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	bf00      	nop
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr

080074bc <_fini>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr
