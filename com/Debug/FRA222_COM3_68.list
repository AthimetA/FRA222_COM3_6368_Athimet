
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006558  08006558  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000074  080065d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080065d4  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb60  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001977  00000000  00000000  0002bc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002df30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f52  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbce  00000000  00000000  000447b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000886fc  00000000  00000000  00051380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9a7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  000d9acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061ac 	.word	0x080061ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080061ac 	.word	0x080061ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 f8e2 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f80c 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ca 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f89e 	bl	80006e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f86e 	bl	8000688 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f001 f949 	bl	8001844 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 80005b2:	f000 f92f 	bl	8000814 <StateMachineManagment>
 80005b6:	e7fc      	b.n	80005b2 <main+0x1e>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f97a 	bl	80058c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fc05 	bl	8003e4c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 fefa 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fe67 	bl	800433c <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 fee4 	bl	8001440 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f001 fc31 	bl	8001f2c <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 feb6 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000090 	.word	0x20000090
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00061a80 	.word	0x00061a80

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f004 f82e 	bl	800477c <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 fe8b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000e4 	.word	0x200000e4
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0xd4>)
 80007c4:	f001 fb98 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_GPIO_Init+0xd8>)
 80007e0:	f001 fa06 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e4:	2320      	movs	r3, #32
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xd4>)
 80007fc:	f001 f9f8 	bl	8001bf0 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	40020800 	.word	0x40020800

08000814 <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch (MCState)
 8000818:	4bb1      	ldr	r3, [pc, #708]	; (8000ae0 <StateMachineManagment+0x2cc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b05      	cmp	r3, #5
 800081e:	f200 8560 	bhi.w	80012e2 <StateMachineManagment+0xace>
 8000822:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <StateMachineManagment+0x14>)
 8000824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000828:	08000841 	.word	0x08000841
 800082c:	080008eb 	.word	0x080008eb
 8000830:	08000ac3 	.word	0x08000ac3
 8000834:	080010bb 	.word	0x080010bb
 8000838:	08000a87 	.word	0x08000a87
 800083c:	08000a63 	.word	0x08000a63
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 8000840:	49a8      	ldr	r1, [pc, #672]	; (8000ae4 <StateMachineManagment+0x2d0>)
 8000842:	48a9      	ldr	r0, [pc, #676]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000844:	f005 f844 	bl	80058d0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000848:	48a7      	ldr	r0, [pc, #668]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800084a:	f7ff fcc9 	bl	80001e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	49a4      	ldr	r1, [pc, #656]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000858:	48a4      	ldr	r0, [pc, #656]	; (8000aec <StateMachineManagment+0x2d8>)
 800085a:	f003 ffdc 	bl	8004816 <HAL_UART_Transmit>
			// Main
			// State init
			ParamEditState = UserChooseWhatToDo;
 800085e:	4ba4      	ldr	r3, [pc, #656]	; (8000af0 <StateMachineManagment+0x2dc>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8000864:	4ba3      	ldr	r3, [pc, #652]	; (8000af4 <StateMachineManagment+0x2e0>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 800086a:	4ba3      	ldr	r3, [pc, #652]	; (8000af8 <StateMachineManagment+0x2e4>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
			Robot.OperationTime = 0;
 8000870:	4ba1      	ldr	r3, [pc, #644]	; (8000af8 <StateMachineManagment+0x2e4>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
			Robot.StartStation = 0;
 8000876:	4ba0      	ldr	r3, [pc, #640]	; (8000af8 <StateMachineManagment+0x2e4>)
 8000878:	2200      	movs	r2, #0
 800087a:	70da      	strb	r2, [r3, #3]
			Robot.EndStation = 0;
 800087c:	4b9e      	ldr	r3, [pc, #632]	; (8000af8 <StateMachineManagment+0x2e4>)
 800087e:	2200      	movs	r2, #0
 8000880:	719a      	strb	r2, [r3, #6]
			// EEPROM READ
			eepromReadFlag = 1;
 8000882:	4b9e      	ldr	r3, [pc, #632]	; (8000afc <StateMachineManagment+0x2e8>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8000888:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <StateMachineManagment+0x2ec>)
 800088a:	2203      	movs	r2, #3
 800088c:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 800088e:	4b9c      	ldr	r3, [pc, #624]	; (8000b00 <StateMachineManagment+0x2ec>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	220a      	movs	r2, #10
 8000894:	4619      	mov	r1, r3
 8000896:	489b      	ldr	r0, [pc, #620]	; (8000b04 <StateMachineManagment+0x2f0>)
 8000898:	f000 fd70 	bl	800137c <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 ffd1 	bl	8001844 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 80008a2:	4b98      	ldr	r3, [pc, #608]	; (8000b04 <StateMachineManagment+0x2f0>)
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	4b94      	ldr	r3, [pc, #592]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008a8:	711a      	strb	r2, [r3, #4]
			Robot.OperationTime = eepromDataReadBack[1];
 80008aa:	4b96      	ldr	r3, [pc, #600]	; (8000b04 <StateMachineManagment+0x2f0>)
 80008ac:	785a      	ldrb	r2, [r3, #1]
 80008ae:	4b92      	ldr	r3, [pc, #584]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008b0:	715a      	strb	r2, [r3, #5]
			Robot.StartStation = eepromDataReadBack[2];
 80008b2:	4b94      	ldr	r3, [pc, #592]	; (8000b04 <StateMachineManagment+0x2f0>)
 80008b4:	789a      	ldrb	r2, [r3, #2]
 80008b6:	4b90      	ldr	r3, [pc, #576]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008b8:	70da      	strb	r2, [r3, #3]
			Robot.EndStation = eepromDataReadBack[2];
 80008ba:	4b92      	ldr	r3, [pc, #584]	; (8000b04 <StateMachineManagment+0x2f0>)
 80008bc:	789a      	ldrb	r2, [r3, #2]
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008c0:	719a      	strb	r2, [r3, #6]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 80008c2:	4b8d      	ldr	r3, [pc, #564]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008c4:	791a      	ldrb	r2, [r3, #4]
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008c8:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 80008ca:	4b8b      	ldr	r3, [pc, #556]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008cc:	795a      	ldrb	r2, [r3, #5]
 80008ce:	4b8a      	ldr	r3, [pc, #552]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008d0:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 80008d2:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008d4:	799a      	ldrb	r2, [r3, #6]
 80008d6:	4b88      	ldr	r3, [pc, #544]	; (8000af8 <StateMachineManagment+0x2e4>)
 80008d8:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 80008da:	4b8b      	ldr	r3, [pc, #556]	; (8000b08 <StateMachineManagment+0x2f4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 80008e0:	4b7f      	ldr	r3, [pc, #508]	; (8000ae0 <StateMachineManagment+0x2cc>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
			break;
 80008e6:	f000 bcfc 	b.w	80012e2 <StateMachineManagment+0xace>
		case StanBy:
			// Header
			if(flagUART == 0){
 80008ea:	4b87      	ldr	r3, [pc, #540]	; (8000b08 <StateMachineManagment+0x2f4>)
 80008ec:	f993 3000 	ldrsb.w	r3, [r3]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d15c      	bne.n	80009ae <StateMachineManagment+0x19a>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 80008f4:	4985      	ldr	r1, [pc, #532]	; (8000b0c <StateMachineManagment+0x2f8>)
 80008f6:	487c      	ldr	r0, [pc, #496]	; (8000ae8 <StateMachineManagment+0x2d4>)
 80008f8:	f004 ffea 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80008fc:	487a      	ldr	r0, [pc, #488]	; (8000ae8 <StateMachineManagment+0x2d4>)
 80008fe:	f7ff fc6f 	bl	80001e0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	4977      	ldr	r1, [pc, #476]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800090c:	4877      	ldr	r0, [pc, #476]	; (8000aec <StateMachineManagment+0x2d8>)
 800090e:	f003 ff82 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 8000912:	497f      	ldr	r1, [pc, #508]	; (8000b10 <StateMachineManagment+0x2fc>)
 8000914:	4874      	ldr	r0, [pc, #464]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000916:	f004 ffdb 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800091a:	4873      	ldr	r0, [pc, #460]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800091c:	f7ff fc60 	bl	80001e0 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000928:	496f      	ldr	r1, [pc, #444]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800092a:	4870      	ldr	r0, [pc, #448]	; (8000aec <StateMachineManagment+0x2d8>)
 800092c:	f003 ff73 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8000930:	4978      	ldr	r1, [pc, #480]	; (8000b14 <StateMachineManagment+0x300>)
 8000932:	486d      	ldr	r0, [pc, #436]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000934:	f004 ffcc 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800093a:	f7ff fc51 	bl	80001e0 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	4968      	ldr	r1, [pc, #416]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000948:	4868      	ldr	r0, [pc, #416]	; (8000aec <StateMachineManagment+0x2d8>)
 800094a:	f003 ff64 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 2 for Choosing Destination Station\r\n");
 800094e:	4972      	ldr	r1, [pc, #456]	; (8000b18 <StateMachineManagment+0x304>)
 8000950:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000952:	f004 ffbd 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000956:	4864      	ldr	r0, [pc, #400]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000958:	f7ff fc42 	bl	80001e0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	4960      	ldr	r1, [pc, #384]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000966:	4861      	ldr	r0, [pc, #388]	; (8000aec <StateMachineManagment+0x2d8>)
 8000968:	f003 ff55 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 3 for EEPROM READ\r\n");
 800096c:	496b      	ldr	r1, [pc, #428]	; (8000b1c <StateMachineManagment+0x308>)
 800096e:	485e      	ldr	r0, [pc, #376]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000970:	f004 ffae 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000974:	485c      	ldr	r0, [pc, #368]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000976:	f7ff fc33 	bl	80001e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	4959      	ldr	r1, [pc, #356]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000984:	4859      	ldr	r0, [pc, #356]	; (8000aec <StateMachineManagment+0x2d8>)
 8000986:	f003 ff46 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800098a:	4960      	ldr	r1, [pc, #384]	; (8000b0c <StateMachineManagment+0x2f8>)
 800098c:	4856      	ldr	r0, [pc, #344]	; (8000ae8 <StateMachineManagment+0x2d4>)
 800098e:	f004 ff9f 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000992:	4855      	ldr	r0, [pc, #340]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000994:	f7ff fc24 	bl	80001e0 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	4951      	ldr	r1, [pc, #324]	; (8000ae8 <StateMachineManagment+0x2d4>)
 80009a2:	4852      	ldr	r0, [pc, #328]	; (8000aec <StateMachineManagment+0x2d8>)
 80009a4:	f003 ff37 	bl	8004816 <HAL_UART_Transmit>
				flagUART = 1;
 80009a8:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <StateMachineManagment+0x2f4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80009ae:	2202      	movs	r2, #2
 80009b0:	495b      	ldr	r1, [pc, #364]	; (8000b20 <StateMachineManagment+0x30c>)
 80009b2:	484e      	ldr	r0, [pc, #312]	; (8000aec <StateMachineManagment+0x2d8>)
 80009b4:	f003 ffc1 	bl	800493a <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 80009b8:	f000 fd08 	bl	80013cc <UARTRecieveIT>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	4b58      	ldr	r3, [pc, #352]	; (8000b24 <StateMachineManagment+0x310>)
 80009c2:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 80009c4:	4b57      	ldr	r3, [pc, #348]	; (8000b24 <StateMachineManagment+0x310>)
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ce:	f000 8483 	beq.w	80012d8 <StateMachineManagment+0xac4>
			{
				if(inputchar == '1')
 80009d2:	4b54      	ldr	r3, [pc, #336]	; (8000b24 <StateMachineManagment+0x310>)
 80009d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d8:	2b31      	cmp	r3, #49	; 0x31
 80009da:	d107      	bne.n	80009ec <StateMachineManagment+0x1d8>
				{
					flagUART = 0;
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <StateMachineManagment+0x2f4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <StateMachineManagment+0x2cc>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 80009e8:	f000 bc76 	b.w	80012d8 <StateMachineManagment+0xac4>
				else if(inputchar == '2')
 80009ec:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <StateMachineManagment+0x310>)
 80009ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f2:	2b32      	cmp	r3, #50	; 0x32
 80009f4:	d107      	bne.n	8000a06 <StateMachineManagment+0x1f2>
					flagUART = 0;
 80009f6:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <StateMachineManagment+0x2f4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <StateMachineManagment+0x2cc>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	701a      	strb	r2, [r3, #0]
			break;
 8000a02:	f000 bc69 	b.w	80012d8 <StateMachineManagment+0xac4>
				else if(inputchar == '3')
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <StateMachineManagment+0x310>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	2b33      	cmp	r3, #51	; 0x33
 8000a0e:	d107      	bne.n	8000a20 <StateMachineManagment+0x20c>
					flagUART = 0;
 8000a10:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <StateMachineManagment+0x2f4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <StateMachineManagment+0x2cc>)
 8000a18:	2205      	movs	r2, #5
 8000a1a:	701a      	strb	r2, [r3, #0]
			break;
 8000a1c:	f000 bc5c 	b.w	80012d8 <StateMachineManagment+0xac4>
				else if(inputchar == '4')
 8000a20:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <StateMachineManagment+0x310>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	2b34      	cmp	r3, #52	; 0x34
 8000a28:	d107      	bne.n	8000a3a <StateMachineManagment+0x226>
					flagUART = 0;
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <StateMachineManagment+0x2f4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
					MCState = EEpromWriteState;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <StateMachineManagment+0x2cc>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	701a      	strb	r2, [r3, #0]
			break;
 8000a36:	f000 bc4f 	b.w	80012d8 <StateMachineManagment+0xac4>
					flagUART = 0;
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <StateMachineManagment+0x2f4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000a40:	4939      	ldr	r1, [pc, #228]	; (8000b28 <StateMachineManagment+0x314>)
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000a44:	f004 ff44 	bl	80058d0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000a48:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000a4a:	f7ff fbc9 	bl	80001e0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	4924      	ldr	r1, [pc, #144]	; (8000ae8 <StateMachineManagment+0x2d4>)
 8000a58:	4824      	ldr	r0, [pc, #144]	; (8000aec <StateMachineManagment+0x2d8>)
 8000a5a:	f003 fedc 	bl	8004816 <HAL_UART_Transmit>
			break;
 8000a5e:	f000 bc3b 	b.w	80012d8 <StateMachineManagment+0xac4>
		case EEpromReadState:
			eepromReadFlag = 1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <StateMachineManagment+0x2e8>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <StateMachineManagment+0x2ec>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4824      	ldr	r0, [pc, #144]	; (8000b04 <StateMachineManagment+0x2f0>)
 8000a72:	f000 fc83 	bl	800137c <EEPROMReadFcn>
			flagUART = 0;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <StateMachineManagment+0x2f4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <StateMachineManagment+0x2cc>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
			break;
 8000a82:	f000 bc2e 	b.w	80012e2 <StateMachineManagment+0xace>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <StateMachineManagment+0x318>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <StateMachineManagment+0x2e4>)
 8000a8e:	791a      	ldrb	r2, [r3, #4]
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <StateMachineManagment+0x31c>)
 8000a92:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <StateMachineManagment+0x2e4>)
 8000a96:	795a      	ldrb	r2, [r3, #5]
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <StateMachineManagment+0x31c>)
 8000a9a:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <StateMachineManagment+0x2e4>)
 8000a9e:	799a      	ldrb	r2, [r3, #6]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <StateMachineManagment+0x31c>)
 8000aa2:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <StateMachineManagment+0x2ec>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <StateMachineManagment+0x31c>)
 8000aae:	f000 fc3d 	bl	800132c <EEPROMWriteFcn>
			flagUART = 0;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <StateMachineManagment+0x2f4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <StateMachineManagment+0x2cc>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
			break;
 8000abe:	f000 bc10 	b.w	80012e2 <StateMachineManagment+0xace>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <StateMachineManagment+0x2dc>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	f000 8223 	beq.w	8000f12 <StateMachineManagment+0x6fe>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	f300 8405 	bgt.w	80012dc <StateMachineManagment+0xac8>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d02e      	beq.n	8000b34 <StateMachineManagment+0x320>
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f000 816a 	beq.w	8000db0 <StateMachineManagment+0x59c>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 8000adc:	e3fe      	b.n	80012dc <StateMachineManagment+0xac8>
 8000ade:	bf00      	nop
 8000ae0:	2000012f 	.word	0x2000012f
 8000ae4:	080061c4 	.word	0x080061c4
 8000ae8:	20000134 	.word	0x20000134
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	20000130 	.word	0x20000130
 8000af4:	20000131 	.word	0x20000131
 8000af8:	20000128 	.word	0x20000128
 8000afc:	20000179 	.word	0x20000179
 8000b00:	20000002 	.word	0x20000002
 8000b04:	2000017c 	.word	0x2000017c
 8000b08:	20000174 	.word	0x20000174
 8000b0c:	080061dc 	.word	0x080061dc
 8000b10:	080061fc 	.word	0x080061fc
 8000b14:	08006214 	.word	0x08006214
 8000b18:	0800623c 	.word	0x0800623c
 8000b1c:	0800626c 	.word	0x0800626c
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000176 	.word	0x20000176
 8000b28:	08006288 	.word	0x08006288
 8000b2c:	20000178 	.word	0x20000178
 8000b30:	20000180 	.word	0x20000180
					if(flagUART == 0){
 8000b34:	4b8a      	ldr	r3, [pc, #552]	; (8000d60 <StateMachineManagment+0x54c>)
 8000b36:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8094 	bne.w	8000c68 <StateMachineManagment+0x454>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000b40:	4988      	ldr	r1, [pc, #544]	; (8000d64 <StateMachineManagment+0x550>)
 8000b42:	4889      	ldr	r0, [pc, #548]	; (8000d68 <StateMachineManagment+0x554>)
 8000b44:	f004 fec4 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b48:	4887      	ldr	r0, [pc, #540]	; (8000d68 <StateMachineManagment+0x554>)
 8000b4a:	f7ff fb49 	bl	80001e0 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	4984      	ldr	r1, [pc, #528]	; (8000d68 <StateMachineManagment+0x554>)
 8000b58:	4884      	ldr	r0, [pc, #528]	; (8000d6c <StateMachineManagment+0x558>)
 8000b5a:	f003 fe5c 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8000b5e:	4984      	ldr	r1, [pc, #528]	; (8000d70 <StateMachineManagment+0x55c>)
 8000b60:	4881      	ldr	r0, [pc, #516]	; (8000d68 <StateMachineManagment+0x554>)
 8000b62:	f004 feb5 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b66:	4880      	ldr	r0, [pc, #512]	; (8000d68 <StateMachineManagment+0x554>)
 8000b68:	f7ff fb3a 	bl	80001e0 <strlen>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b74:	497c      	ldr	r1, [pc, #496]	; (8000d68 <StateMachineManagment+0x554>)
 8000b76:	487d      	ldr	r0, [pc, #500]	; (8000d6c <StateMachineManagment+0x558>)
 8000b78:	f003 fe4d 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000b7c:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <StateMachineManagment+0x560>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b7c      	ldr	r3, [pc, #496]	; (8000d74 <StateMachineManagment+0x560>)
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	497c      	ldr	r1, [pc, #496]	; (8000d78 <StateMachineManagment+0x564>)
 8000b88:	4877      	ldr	r0, [pc, #476]	; (8000d68 <StateMachineManagment+0x554>)
 8000b8a:	f004 fea1 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000b8e:	4876      	ldr	r0, [pc, #472]	; (8000d68 <StateMachineManagment+0x554>)
 8000b90:	f7ff fb26 	bl	80001e0 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9c:	4972      	ldr	r1, [pc, #456]	; (8000d68 <StateMachineManagment+0x554>)
 8000b9e:	4873      	ldr	r0, [pc, #460]	; (8000d6c <StateMachineManagment+0x558>)
 8000ba0:	f003 fe39 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000ba4:	4b73      	ldr	r3, [pc, #460]	; (8000d74 <StateMachineManagment+0x560>)
 8000ba6:	78db      	ldrb	r3, [r3, #3]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <StateMachineManagment+0x560>)
 8000bac:	799b      	ldrb	r3, [r3, #6]
 8000bae:	4973      	ldr	r1, [pc, #460]	; (8000d7c <StateMachineManagment+0x568>)
 8000bb0:	486d      	ldr	r0, [pc, #436]	; (8000d68 <StateMachineManagment+0x554>)
 8000bb2:	f004 fe8d 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bb6:	486c      	ldr	r0, [pc, #432]	; (8000d68 <StateMachineManagment+0x554>)
 8000bb8:	f7ff fb12 	bl	80001e0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	4968      	ldr	r1, [pc, #416]	; (8000d68 <StateMachineManagment+0x554>)
 8000bc6:	4869      	ldr	r0, [pc, #420]	; (8000d6c <StateMachineManagment+0x558>)
 8000bc8:	f003 fe25 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8000bcc:	496c      	ldr	r1, [pc, #432]	; (8000d80 <StateMachineManagment+0x56c>)
 8000bce:	4866      	ldr	r0, [pc, #408]	; (8000d68 <StateMachineManagment+0x554>)
 8000bd0:	f004 fe7e 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bd4:	4864      	ldr	r0, [pc, #400]	; (8000d68 <StateMachineManagment+0x554>)
 8000bd6:	f7ff fb03 	bl	80001e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	4961      	ldr	r1, [pc, #388]	; (8000d68 <StateMachineManagment+0x554>)
 8000be4:	4861      	ldr	r0, [pc, #388]	; (8000d6c <StateMachineManagment+0x558>)
 8000be6:	f003 fe16 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8000bea:	4966      	ldr	r1, [pc, #408]	; (8000d84 <StateMachineManagment+0x570>)
 8000bec:	485e      	ldr	r0, [pc, #376]	; (8000d68 <StateMachineManagment+0x554>)
 8000bee:	f004 fe6f 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bf2:	485d      	ldr	r0, [pc, #372]	; (8000d68 <StateMachineManagment+0x554>)
 8000bf4:	f7ff faf4 	bl	80001e0 <strlen>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	4959      	ldr	r1, [pc, #356]	; (8000d68 <StateMachineManagment+0x554>)
 8000c02:	485a      	ldr	r0, [pc, #360]	; (8000d6c <StateMachineManagment+0x558>)
 8000c04:	f003 fe07 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 8000c08:	495f      	ldr	r1, [pc, #380]	; (8000d88 <StateMachineManagment+0x574>)
 8000c0a:	4857      	ldr	r0, [pc, #348]	; (8000d68 <StateMachineManagment+0x554>)
 8000c0c:	f004 fe60 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c10:	4855      	ldr	r0, [pc, #340]	; (8000d68 <StateMachineManagment+0x554>)
 8000c12:	f7ff fae5 	bl	80001e0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	4952      	ldr	r1, [pc, #328]	; (8000d68 <StateMachineManagment+0x554>)
 8000c20:	4852      	ldr	r0, [pc, #328]	; (8000d6c <StateMachineManagment+0x558>)
 8000c22:	f003 fdf8 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8000c26:	4959      	ldr	r1, [pc, #356]	; (8000d8c <StateMachineManagment+0x578>)
 8000c28:	484f      	ldr	r0, [pc, #316]	; (8000d68 <StateMachineManagment+0x554>)
 8000c2a:	f004 fe51 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c2e:	484e      	ldr	r0, [pc, #312]	; (8000d68 <StateMachineManagment+0x554>)
 8000c30:	f7ff fad6 	bl	80001e0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	494a      	ldr	r1, [pc, #296]	; (8000d68 <StateMachineManagment+0x554>)
 8000c3e:	484b      	ldr	r0, [pc, #300]	; (8000d6c <StateMachineManagment+0x558>)
 8000c40:	f003 fde9 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c44:	4947      	ldr	r1, [pc, #284]	; (8000d64 <StateMachineManagment+0x550>)
 8000c46:	4848      	ldr	r0, [pc, #288]	; (8000d68 <StateMachineManagment+0x554>)
 8000c48:	f004 fe42 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c4c:	4846      	ldr	r0, [pc, #280]	; (8000d68 <StateMachineManagment+0x554>)
 8000c4e:	f7ff fac7 	bl	80001e0 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	4943      	ldr	r1, [pc, #268]	; (8000d68 <StateMachineManagment+0x554>)
 8000c5c:	4843      	ldr	r0, [pc, #268]	; (8000d6c <StateMachineManagment+0x558>)
 8000c5e:	f003 fdda 	bl	8004816 <HAL_UART_Transmit>
						flagUART = 1;
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <StateMachineManagment+0x54c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4949      	ldr	r1, [pc, #292]	; (8000d90 <StateMachineManagment+0x57c>)
 8000c6c:	483f      	ldr	r0, [pc, #252]	; (8000d6c <StateMachineManagment+0x558>)
 8000c6e:	f003 fe64 	bl	800493a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000c72:	f000 fbab 	bl	80013cc <UARTRecieveIT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <StateMachineManagment+0x580>)
 8000c7c:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000c7e:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <StateMachineManagment+0x580>)
 8000c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	f000 8211 	beq.w	80010ae <StateMachineManagment+0x89a>
						if(inputchar == 'x')
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <StateMachineManagment+0x580>)
 8000c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c92:	2b78      	cmp	r3, #120	; 0x78
 8000c94:	d10e      	bne.n	8000cb4 <StateMachineManagment+0x4a0>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <StateMachineManagment+0x560>)
 8000c98:	791a      	ldrb	r2, [r3, #4]
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <StateMachineManagment+0x560>)
 8000c9c:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <StateMachineManagment+0x560>)
 8000ca0:	795a      	ldrb	r2, [r3, #5]
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <StateMachineManagment+0x560>)
 8000ca4:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <StateMachineManagment+0x54c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <StateMachineManagment+0x584>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
					break;
 8000cb2:	e1fc      	b.n	80010ae <StateMachineManagment+0x89a>
						else if(inputchar == '1')
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <StateMachineManagment+0x580>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	2b31      	cmp	r3, #49	; 0x31
 8000cbc:	d106      	bne.n	8000ccc <StateMachineManagment+0x4b8>
							flagUART = 0;
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <StateMachineManagment+0x54c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <StateMachineManagment+0x588>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
					break;
 8000cca:	e1f0      	b.n	80010ae <StateMachineManagment+0x89a>
						else if(inputchar == '2')
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <StateMachineManagment+0x580>)
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	2b32      	cmp	r3, #50	; 0x32
 8000cd4:	d106      	bne.n	8000ce4 <StateMachineManagment+0x4d0>
							flagUART = 0;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <StateMachineManagment+0x54c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <StateMachineManagment+0x588>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	701a      	strb	r2, [r3, #0]
					break;
 8000ce2:	e1e4      	b.n	80010ae <StateMachineManagment+0x89a>
						else if(inputchar == 's')
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <StateMachineManagment+0x580>)
 8000ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cea:	2b73      	cmp	r3, #115	; 0x73
 8000cec:	d124      	bne.n	8000d38 <StateMachineManagment+0x524>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <StateMachineManagment+0x560>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <StateMachineManagment+0x560>)
 8000cf4:	711a      	strb	r2, [r3, #4]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <StateMachineManagment+0x560>)
 8000cf8:	785a      	ldrb	r2, [r3, #1]
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <StateMachineManagment+0x560>)
 8000cfc:	715a      	strb	r2, [r3, #5]
							eepromWriteFlag = 1;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <StateMachineManagment+0x58c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <StateMachineManagment+0x560>)
 8000d06:	791a      	ldrb	r2, [r3, #4]
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <StateMachineManagment+0x590>)
 8000d0a:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <StateMachineManagment+0x560>)
 8000d0e:	795a      	ldrb	r2, [r3, #5]
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <StateMachineManagment+0x590>)
 8000d12:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <StateMachineManagment+0x560>)
 8000d16:	799a      	ldrb	r2, [r3, #6]
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <StateMachineManagment+0x590>)
 8000d1a:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <StateMachineManagment+0x594>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	220a      	movs	r2, #10
 8000d22:	4619      	mov	r1, r3
 8000d24:	481f      	ldr	r0, [pc, #124]	; (8000da4 <StateMachineManagment+0x590>)
 8000d26:	f000 fb01 	bl	800132c <EEPROMWriteFcn>
							flagUART = 0;
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <StateMachineManagment+0x54c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <StateMachineManagment+0x584>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
					break;
 8000d36:	e1ba      	b.n	80010ae <StateMachineManagment+0x89a>
							flagUART = 0;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <StateMachineManagment+0x54c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000d3e:	491b      	ldr	r1, [pc, #108]	; (8000dac <StateMachineManagment+0x598>)
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <StateMachineManagment+0x554>)
 8000d42:	f004 fdc5 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <StateMachineManagment+0x554>)
 8000d48:	f7ff fa4a 	bl	80001e0 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d54:	4904      	ldr	r1, [pc, #16]	; (8000d68 <StateMachineManagment+0x554>)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <StateMachineManagment+0x558>)
 8000d58:	f003 fd5d 	bl	8004816 <HAL_UART_Transmit>
					break;
 8000d5c:	e1a7      	b.n	80010ae <StateMachineManagment+0x89a>
 8000d5e:	bf00      	nop
 8000d60:	20000174 	.word	0x20000174
 8000d64:	080061dc 	.word	0x080061dc
 8000d68:	20000134 	.word	0x20000134
 8000d6c:	200000e4 	.word	0x200000e4
 8000d70:	080062a0 	.word	0x080062a0
 8000d74:	20000128 	.word	0x20000128
 8000d78:	080062c4 	.word	0x080062c4
 8000d7c:	080062f8 	.word	0x080062f8
 8000d80:	08006320 	.word	0x08006320
 8000d84:	08006344 	.word	0x08006344
 8000d88:	08006368 	.word	0x08006368
 8000d8c:	0800637c 	.word	0x0800637c
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000176 	.word	0x20000176
 8000d98:	2000012f 	.word	0x2000012f
 8000d9c:	20000130 	.word	0x20000130
 8000da0:	20000178 	.word	0x20000178
 8000da4:	20000180 	.word	0x20000180
 8000da8:	20000002 	.word	0x20000002
 8000dac:	08006288 	.word	0x08006288
					if(flagUART == 0){
 8000db0:	4ba6      	ldr	r3, [pc, #664]	; (800104c <StateMachineManagment+0x838>)
 8000db2:	f993 3000 	ldrsb.w	r3, [r3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d13e      	bne.n	8000e38 <StateMachineManagment+0x624>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8000dba:	49a5      	ldr	r1, [pc, #660]	; (8001050 <StateMachineManagment+0x83c>)
 8000dbc:	48a5      	ldr	r0, [pc, #660]	; (8001054 <StateMachineManagment+0x840>)
 8000dbe:	f004 fd87 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000dc2:	48a4      	ldr	r0, [pc, #656]	; (8001054 <StateMachineManagment+0x840>)
 8000dc4:	f7ff fa0c 	bl	80001e0 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	49a0      	ldr	r1, [pc, #640]	; (8001054 <StateMachineManagment+0x840>)
 8000dd2:	48a1      	ldr	r0, [pc, #644]	; (8001058 <StateMachineManagment+0x844>)
 8000dd4:	f003 fd1f 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8000dd8:	49a0      	ldr	r1, [pc, #640]	; (800105c <StateMachineManagment+0x848>)
 8000dda:	489e      	ldr	r0, [pc, #632]	; (8001054 <StateMachineManagment+0x840>)
 8000ddc:	f004 fd78 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000de0:	489c      	ldr	r0, [pc, #624]	; (8001054 <StateMachineManagment+0x840>)
 8000de2:	f7ff f9fd 	bl	80001e0 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	4999      	ldr	r1, [pc, #612]	; (8001054 <StateMachineManagment+0x840>)
 8000df0:	4899      	ldr	r0, [pc, #612]	; (8001058 <StateMachineManagment+0x844>)
 8000df2:	f003 fd10 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8000df6:	499a      	ldr	r1, [pc, #616]	; (8001060 <StateMachineManagment+0x84c>)
 8000df8:	4896      	ldr	r0, [pc, #600]	; (8001054 <StateMachineManagment+0x840>)
 8000dfa:	f004 fd69 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000dfe:	4895      	ldr	r0, [pc, #596]	; (8001054 <StateMachineManagment+0x840>)
 8000e00:	f7ff f9ee 	bl	80001e0 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	4991      	ldr	r1, [pc, #580]	; (8001054 <StateMachineManagment+0x840>)
 8000e0e:	4892      	ldr	r0, [pc, #584]	; (8001058 <StateMachineManagment+0x844>)
 8000e10:	f003 fd01 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8000e14:	4993      	ldr	r1, [pc, #588]	; (8001064 <StateMachineManagment+0x850>)
 8000e16:	488f      	ldr	r0, [pc, #572]	; (8001054 <StateMachineManagment+0x840>)
 8000e18:	f004 fd5a 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e1c:	488d      	ldr	r0, [pc, #564]	; (8001054 <StateMachineManagment+0x840>)
 8000e1e:	f7ff f9df 	bl	80001e0 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	498a      	ldr	r1, [pc, #552]	; (8001054 <StateMachineManagment+0x840>)
 8000e2c:	488a      	ldr	r0, [pc, #552]	; (8001058 <StateMachineManagment+0x844>)
 8000e2e:	f003 fcf2 	bl	8004816 <HAL_UART_Transmit>
						flagUART = 1;
 8000e32:	4b86      	ldr	r3, [pc, #536]	; (800104c <StateMachineManagment+0x838>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000e38:	2202      	movs	r2, #2
 8000e3a:	498b      	ldr	r1, [pc, #556]	; (8001068 <StateMachineManagment+0x854>)
 8000e3c:	4886      	ldr	r0, [pc, #536]	; (8001058 <StateMachineManagment+0x844>)
 8000e3e:	f003 fd7c 	bl	800493a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000e42:	f000 fac3 	bl	80013cc <UARTRecieveIT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b88      	ldr	r3, [pc, #544]	; (800106c <StateMachineManagment+0x858>)
 8000e4c:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000e4e:	4b87      	ldr	r3, [pc, #540]	; (800106c <StateMachineManagment+0x858>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	f000 812b 	beq.w	80010b2 <StateMachineManagment+0x89e>
						if(inputchar == 'x')
 8000e5c:	4b83      	ldr	r3, [pc, #524]	; (800106c <StateMachineManagment+0x858>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	2b78      	cmp	r3, #120	; 0x78
 8000e64:	d106      	bne.n	8000e74 <StateMachineManagment+0x660>
							flagUART = 0;
 8000e66:	4b79      	ldr	r3, [pc, #484]	; (800104c <StateMachineManagment+0x838>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <StateMachineManagment+0x85c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
					break;
 8000e72:	e11e      	b.n	80010b2 <StateMachineManagment+0x89e>
						else if(inputchar == '+')
 8000e74:	4b7d      	ldr	r3, [pc, #500]	; (800106c <StateMachineManagment+0x858>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	2b2b      	cmp	r3, #43	; 0x2b
 8000e7c:	d118      	bne.n	8000eb0 <StateMachineManagment+0x69c>
							Robot.WaitingTimeBuffer++;
 8000e7e:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <StateMachineManagment+0x860>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <StateMachineManagment+0x860>)
 8000e88:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000e8a:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <StateMachineManagment+0x860>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4979      	ldr	r1, [pc, #484]	; (8001078 <StateMachineManagment+0x864>)
 8000e92:	4870      	ldr	r0, [pc, #448]	; (8001054 <StateMachineManagment+0x840>)
 8000e94:	f004 fd1c 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e98:	486e      	ldr	r0, [pc, #440]	; (8001054 <StateMachineManagment+0x840>)
 8000e9a:	f7ff f9a1 	bl	80001e0 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	496b      	ldr	r1, [pc, #428]	; (8001054 <StateMachineManagment+0x840>)
 8000ea8:	486b      	ldr	r0, [pc, #428]	; (8001058 <StateMachineManagment+0x844>)
 8000eaa:	f003 fcb4 	bl	8004816 <HAL_UART_Transmit>
					break;
 8000eae:	e100      	b.n	80010b2 <StateMachineManagment+0x89e>
						else if(inputchar == '-')
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	; (800106c <StateMachineManagment+0x858>)
 8000eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb6:	2b2d      	cmp	r3, #45	; 0x2d
 8000eb8:	d118      	bne.n	8000eec <StateMachineManagment+0x6d8>
							Robot.WaitingTimeBuffer--;
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <StateMachineManagment+0x860>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <StateMachineManagment+0x860>)
 8000ec4:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8000ec6:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <StateMachineManagment+0x860>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	496a      	ldr	r1, [pc, #424]	; (8001078 <StateMachineManagment+0x864>)
 8000ece:	4861      	ldr	r0, [pc, #388]	; (8001054 <StateMachineManagment+0x840>)
 8000ed0:	f004 fcfe 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ed4:	485f      	ldr	r0, [pc, #380]	; (8001054 <StateMachineManagment+0x840>)
 8000ed6:	f7ff f983 	bl	80001e0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	495c      	ldr	r1, [pc, #368]	; (8001054 <StateMachineManagment+0x840>)
 8000ee4:	485c      	ldr	r0, [pc, #368]	; (8001058 <StateMachineManagment+0x844>)
 8000ee6:	f003 fc96 	bl	8004816 <HAL_UART_Transmit>
					break;
 8000eea:	e0e2      	b.n	80010b2 <StateMachineManagment+0x89e>
							flagUART = 0;
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <StateMachineManagment+0x838>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000ef2:	4962      	ldr	r1, [pc, #392]	; (800107c <StateMachineManagment+0x868>)
 8000ef4:	4857      	ldr	r0, [pc, #348]	; (8001054 <StateMachineManagment+0x840>)
 8000ef6:	f004 fceb 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000efa:	4856      	ldr	r0, [pc, #344]	; (8001054 <StateMachineManagment+0x840>)
 8000efc:	f7ff f970 	bl	80001e0 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	4952      	ldr	r1, [pc, #328]	; (8001054 <StateMachineManagment+0x840>)
 8000f0a:	4853      	ldr	r0, [pc, #332]	; (8001058 <StateMachineManagment+0x844>)
 8000f0c:	f003 fc83 	bl	8004816 <HAL_UART_Transmit>
					break;
 8000f10:	e0cf      	b.n	80010b2 <StateMachineManagment+0x89e>
					if(flagUART == 0){
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <StateMachineManagment+0x838>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d13e      	bne.n	8000f9a <StateMachineManagment+0x786>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 8000f1c:	4958      	ldr	r1, [pc, #352]	; (8001080 <StateMachineManagment+0x86c>)
 8000f1e:	484d      	ldr	r0, [pc, #308]	; (8001054 <StateMachineManagment+0x840>)
 8000f20:	f004 fcd6 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f24:	484b      	ldr	r0, [pc, #300]	; (8001054 <StateMachineManagment+0x840>)
 8000f26:	f7ff f95b 	bl	80001e0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	4948      	ldr	r1, [pc, #288]	; (8001054 <StateMachineManagment+0x840>)
 8000f34:	4848      	ldr	r0, [pc, #288]	; (8001058 <StateMachineManagment+0x844>)
 8000f36:	f003 fc6e 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 8000f3a:	4948      	ldr	r1, [pc, #288]	; (800105c <StateMachineManagment+0x848>)
 8000f3c:	4845      	ldr	r0, [pc, #276]	; (8001054 <StateMachineManagment+0x840>)
 8000f3e:	f004 fcc7 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f42:	4844      	ldr	r0, [pc, #272]	; (8001054 <StateMachineManagment+0x840>)
 8000f44:	f7ff f94c 	bl	80001e0 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	4940      	ldr	r1, [pc, #256]	; (8001054 <StateMachineManagment+0x840>)
 8000f52:	4841      	ldr	r0, [pc, #260]	; (8001058 <StateMachineManagment+0x844>)
 8000f54:	f003 fc5f 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 8000f58:	4941      	ldr	r1, [pc, #260]	; (8001060 <StateMachineManagment+0x84c>)
 8000f5a:	483e      	ldr	r0, [pc, #248]	; (8001054 <StateMachineManagment+0x840>)
 8000f5c:	f004 fcb8 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f60:	483c      	ldr	r0, [pc, #240]	; (8001054 <StateMachineManagment+0x840>)
 8000f62:	f7ff f93d 	bl	80001e0 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	4939      	ldr	r1, [pc, #228]	; (8001054 <StateMachineManagment+0x840>)
 8000f70:	4839      	ldr	r0, [pc, #228]	; (8001058 <StateMachineManagment+0x844>)
 8000f72:	f003 fc50 	bl	8004816 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 8000f76:	493b      	ldr	r1, [pc, #236]	; (8001064 <StateMachineManagment+0x850>)
 8000f78:	4836      	ldr	r0, [pc, #216]	; (8001054 <StateMachineManagment+0x840>)
 8000f7a:	f004 fca9 	bl	80058d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <StateMachineManagment+0x840>)
 8000f80:	f7ff f92e 	bl	80001e0 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	4931      	ldr	r1, [pc, #196]	; (8001054 <StateMachineManagment+0x840>)
 8000f8e:	4832      	ldr	r0, [pc, #200]	; (8001058 <StateMachineManagment+0x844>)
 8000f90:	f003 fc41 	bl	8004816 <HAL_UART_Transmit>
						flagUART = 1;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <StateMachineManagment+0x838>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4932      	ldr	r1, [pc, #200]	; (8001068 <StateMachineManagment+0x854>)
 8000f9e:	482e      	ldr	r0, [pc, #184]	; (8001058 <StateMachineManagment+0x844>)
 8000fa0:	f003 fccb 	bl	800493a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8000fa4:	f000 fa12 	bl	80013cc <UARTRecieveIT>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <StateMachineManagment+0x858>)
 8000fae:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <StateMachineManagment+0x858>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fba:	d07c      	beq.n	80010b6 <StateMachineManagment+0x8a2>
						if(inputchar == 'x')
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <StateMachineManagment+0x858>)
 8000fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc2:	2b78      	cmp	r3, #120	; 0x78
 8000fc4:	d106      	bne.n	8000fd4 <StateMachineManagment+0x7c0>
							flagUART = 0;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <StateMachineManagment+0x838>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <StateMachineManagment+0x85c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
					break;
 8000fd2:	e070      	b.n	80010b6 <StateMachineManagment+0x8a2>
						else if(inputchar == '+')
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <StateMachineManagment+0x858>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	2b2b      	cmp	r3, #43	; 0x2b
 8000fdc:	d118      	bne.n	8001010 <StateMachineManagment+0x7fc>
							Robot.OperationTimeBuffer++;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <StateMachineManagment+0x860>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <StateMachineManagment+0x860>)
 8000fe8:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <StateMachineManagment+0x860>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4924      	ldr	r1, [pc, #144]	; (8001084 <StateMachineManagment+0x870>)
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <StateMachineManagment+0x840>)
 8000ff4:	f004 fc6c 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <StateMachineManagment+0x840>)
 8000ffa:	f7ff f8f1 	bl	80001e0 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	4913      	ldr	r1, [pc, #76]	; (8001054 <StateMachineManagment+0x840>)
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <StateMachineManagment+0x844>)
 800100a:	f003 fc04 	bl	8004816 <HAL_UART_Transmit>
					break;
 800100e:	e052      	b.n	80010b6 <StateMachineManagment+0x8a2>
						else if(inputchar == '-')
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <StateMachineManagment+0x858>)
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	2b2d      	cmp	r3, #45	; 0x2d
 8001018:	d136      	bne.n	8001088 <StateMachineManagment+0x874>
							Robot.OperationTimeBuffer--;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <StateMachineManagment+0x860>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	3b01      	subs	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <StateMachineManagment+0x860>)
 8001024:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <StateMachineManagment+0x860>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	461a      	mov	r2, r3
 800102c:	4915      	ldr	r1, [pc, #84]	; (8001084 <StateMachineManagment+0x870>)
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <StateMachineManagment+0x840>)
 8001030:	f004 fc4e 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <StateMachineManagment+0x840>)
 8001036:	f7ff f8d3 	bl	80001e0 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	4904      	ldr	r1, [pc, #16]	; (8001054 <StateMachineManagment+0x840>)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <StateMachineManagment+0x844>)
 8001046:	f003 fbe6 	bl	8004816 <HAL_UART_Transmit>
					break;
 800104a:	e034      	b.n	80010b6 <StateMachineManagment+0x8a2>
 800104c:	20000174 	.word	0x20000174
 8001050:	08006390 	.word	0x08006390
 8001054:	20000134 	.word	0x20000134
 8001058:	200000e4 	.word	0x200000e4
 800105c:	080063ac 	.word	0x080063ac
 8001060:	080063c4 	.word	0x080063c4
 8001064:	080063dc 	.word	0x080063dc
 8001068:	20000000 	.word	0x20000000
 800106c:	20000176 	.word	0x20000176
 8001070:	20000130 	.word	0x20000130
 8001074:	20000128 	.word	0x20000128
 8001078:	080063f0 	.word	0x080063f0
 800107c:	08006288 	.word	0x08006288
 8001080:	0800640c 	.word	0x0800640c
 8001084:	0800642c 	.word	0x0800642c
							flagUART = 0;
 8001088:	4b97      	ldr	r3, [pc, #604]	; (80012e8 <StateMachineManagment+0xad4>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800108e:	4997      	ldr	r1, [pc, #604]	; (80012ec <StateMachineManagment+0xad8>)
 8001090:	4897      	ldr	r0, [pc, #604]	; (80012f0 <StateMachineManagment+0xadc>)
 8001092:	f004 fc1d 	bl	80058d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001096:	4896      	ldr	r0, [pc, #600]	; (80012f0 <StateMachineManagment+0xadc>)
 8001098:	f7ff f8a2 	bl	80001e0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	4992      	ldr	r1, [pc, #584]	; (80012f0 <StateMachineManagment+0xadc>)
 80010a6:	4893      	ldr	r0, [pc, #588]	; (80012f4 <StateMachineManagment+0xae0>)
 80010a8:	f003 fbb5 	bl	8004816 <HAL_UART_Transmit>
					break;
 80010ac:	e003      	b.n	80010b6 <StateMachineManagment+0x8a2>
					break;
 80010ae:	bf00      	nop
 80010b0:	e114      	b.n	80012dc <StateMachineManagment+0xac8>
					break;
 80010b2:	bf00      	nop
 80010b4:	e112      	b.n	80012dc <StateMachineManagment+0xac8>
					break;
 80010b6:	bf00      	nop
			break;
 80010b8:	e110      	b.n	80012dc <StateMachineManagment+0xac8>
		case StantionChoosing:
			// Header
			if(flagUART == 0){
 80010ba:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <StateMachineManagment+0xad4>)
 80010bc:	f993 3000 	ldrsb.w	r3, [r3]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d175      	bne.n	80011b0 <StateMachineManagment+0x99c>
				sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 80010c4:	498c      	ldr	r1, [pc, #560]	; (80012f8 <StateMachineManagment+0xae4>)
 80010c6:	488a      	ldr	r0, [pc, #552]	; (80012f0 <StateMachineManagment+0xadc>)
 80010c8:	f004 fc02 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010cc:	4888      	ldr	r0, [pc, #544]	; (80012f0 <StateMachineManagment+0xadc>)
 80010ce:	f7ff f887 	bl	80001e0 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	4985      	ldr	r1, [pc, #532]	; (80012f0 <StateMachineManagment+0xadc>)
 80010dc:	4885      	ldr	r0, [pc, #532]	; (80012f4 <StateMachineManagment+0xae0>)
 80010de:	f003 fb9a 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 80010e2:	4b86      	ldr	r3, [pc, #536]	; (80012fc <StateMachineManagment+0xae8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b84      	ldr	r3, [pc, #528]	; (80012fc <StateMachineManagment+0xae8>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	4984      	ldr	r1, [pc, #528]	; (8001300 <StateMachineManagment+0xaec>)
 80010ee:	4880      	ldr	r0, [pc, #512]	; (80012f0 <StateMachineManagment+0xadc>)
 80010f0:	f004 fbee 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80010f4:	487e      	ldr	r0, [pc, #504]	; (80012f0 <StateMachineManagment+0xadc>)
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	497b      	ldr	r1, [pc, #492]	; (80012f0 <StateMachineManagment+0xadc>)
 8001104:	487b      	ldr	r0, [pc, #492]	; (80012f4 <StateMachineManagment+0xae0>)
 8001106:	f003 fb86 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800110a:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <StateMachineManagment+0xae8>)
 800110c:	78db      	ldrb	r3, [r3, #3]
 800110e:	461a      	mov	r2, r3
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <StateMachineManagment+0xae8>)
 8001112:	799b      	ldrb	r3, [r3, #6]
 8001114:	497b      	ldr	r1, [pc, #492]	; (8001304 <StateMachineManagment+0xaf0>)
 8001116:	4876      	ldr	r0, [pc, #472]	; (80012f0 <StateMachineManagment+0xadc>)
 8001118:	f004 fbda 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800111c:	4874      	ldr	r0, [pc, #464]	; (80012f0 <StateMachineManagment+0xadc>)
 800111e:	f7ff f85f 	bl	80001e0 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	4971      	ldr	r1, [pc, #452]	; (80012f0 <StateMachineManagment+0xadc>)
 800112c:	4871      	ldr	r0, [pc, #452]	; (80012f4 <StateMachineManagment+0xae0>)
 800112e:	f003 fb72 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type + for +1 Station\r\n");
 8001132:	4975      	ldr	r1, [pc, #468]	; (8001308 <StateMachineManagment+0xaf4>)
 8001134:	486e      	ldr	r0, [pc, #440]	; (80012f0 <StateMachineManagment+0xadc>)
 8001136:	f004 fbcb 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800113a:	486d      	ldr	r0, [pc, #436]	; (80012f0 <StateMachineManagment+0xadc>)
 800113c:	f7ff f850 	bl	80001e0 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	4969      	ldr	r1, [pc, #420]	; (80012f0 <StateMachineManagment+0xadc>)
 800114a:	486a      	ldr	r0, [pc, #424]	; (80012f4 <StateMachineManagment+0xae0>)
 800114c:	f003 fb63 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 8001150:	496e      	ldr	r1, [pc, #440]	; (800130c <StateMachineManagment+0xaf8>)
 8001152:	4867      	ldr	r0, [pc, #412]	; (80012f0 <StateMachineManagment+0xadc>)
 8001154:	f004 fbbc 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001158:	4865      	ldr	r0, [pc, #404]	; (80012f0 <StateMachineManagment+0xadc>)
 800115a:	f7ff f841 	bl	80001e0 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	4962      	ldr	r1, [pc, #392]	; (80012f0 <StateMachineManagment+0xadc>)
 8001168:	4862      	ldr	r0, [pc, #392]	; (80012f4 <StateMachineManagment+0xae0>)
 800116a:	f003 fb54 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type x to cancel\r\n");
 800116e:	4968      	ldr	r1, [pc, #416]	; (8001310 <StateMachineManagment+0xafc>)
 8001170:	485f      	ldr	r0, [pc, #380]	; (80012f0 <StateMachineManagment+0xadc>)
 8001172:	f004 fbad 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001176:	485e      	ldr	r0, [pc, #376]	; (80012f0 <StateMachineManagment+0xadc>)
 8001178:	f7ff f832 	bl	80001e0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	495a      	ldr	r1, [pc, #360]	; (80012f0 <StateMachineManagment+0xadc>)
 8001186:	485b      	ldr	r0, [pc, #364]	; (80012f4 <StateMachineManagment+0xae0>)
 8001188:	f003 fb45 	bl	8004816 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type g to Start Operating\r\n");
 800118c:	4961      	ldr	r1, [pc, #388]	; (8001314 <StateMachineManagment+0xb00>)
 800118e:	4858      	ldr	r0, [pc, #352]	; (80012f0 <StateMachineManagment+0xadc>)
 8001190:	f004 fb9e 	bl	80058d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001194:	4856      	ldr	r0, [pc, #344]	; (80012f0 <StateMachineManagment+0xadc>)
 8001196:	f7ff f823 	bl	80001e0 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	4953      	ldr	r1, [pc, #332]	; (80012f0 <StateMachineManagment+0xadc>)
 80011a4:	4853      	ldr	r0, [pc, #332]	; (80012f4 <StateMachineManagment+0xae0>)
 80011a6:	f003 fb36 	bl	8004816 <HAL_UART_Transmit>
				flagUART = 1;
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <StateMachineManagment+0xad4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80011b0:	2202      	movs	r2, #2
 80011b2:	4959      	ldr	r1, [pc, #356]	; (8001318 <StateMachineManagment+0xb04>)
 80011b4:	484f      	ldr	r0, [pc, #316]	; (80012f4 <StateMachineManagment+0xae0>)
 80011b6:	f003 fbc0 	bl	800493a <HAL_UART_Receive_IT>
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80011ba:	2202      	movs	r2, #2
 80011bc:	4956      	ldr	r1, [pc, #344]	; (8001318 <StateMachineManagment+0xb04>)
 80011be:	484d      	ldr	r0, [pc, #308]	; (80012f4 <StateMachineManagment+0xae0>)
 80011c0:	f003 fbbb 	bl	800493a <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 80011c4:	f000 f902 	bl	80013cc <UARTRecieveIT>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b53      	ldr	r3, [pc, #332]	; (800131c <StateMachineManagment+0xb08>)
 80011ce:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 80011d0:	4b52      	ldr	r3, [pc, #328]	; (800131c <StateMachineManagment+0xb08>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011da:	f000 8081 	beq.w	80012e0 <StateMachineManagment+0xacc>
			{
				if(inputchar == 'x')
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <StateMachineManagment+0xb08>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	2b78      	cmp	r3, #120	; 0x78
 80011e6:	d10a      	bne.n	80011fe <StateMachineManagment+0x9ea>
				{
					Robot.EndStationBuffer = Robot.EndStation;
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <StateMachineManagment+0xae8>)
 80011ea:	799a      	ldrb	r2, [r3, #6]
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <StateMachineManagment+0xae8>)
 80011ee:	709a      	strb	r2, [r3, #2]
					flagUART = 0;
 80011f0:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <StateMachineManagment+0xad4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
					ParamEditState = UserChooseWhatToDo;
 80011f6:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <StateMachineManagment+0xb0c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 80011fc:	e070      	b.n	80012e0 <StateMachineManagment+0xacc>
				else if(inputchar == '+')
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <StateMachineManagment+0xb08>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	2b2b      	cmp	r3, #43	; 0x2b
 8001206:	d11f      	bne.n	8001248 <StateMachineManagment+0xa34>
					Robot.EndStationBuffer++;
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <StateMachineManagment+0xae8>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	3301      	adds	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <StateMachineManagment+0xae8>)
 8001212:	709a      	strb	r2, [r3, #2]
					Robot.EndStationBuffer %= 16;
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <StateMachineManagment+0xae8>)
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <StateMachineManagment+0xae8>)
 8001220:	709a      	strb	r2, [r3, #2]
					sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <StateMachineManagment+0xae8>)
 8001224:	789b      	ldrb	r3, [r3, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	493e      	ldr	r1, [pc, #248]	; (8001324 <StateMachineManagment+0xb10>)
 800122a:	4831      	ldr	r0, [pc, #196]	; (80012f0 <StateMachineManagment+0xadc>)
 800122c:	f004 fb50 	bl	80058d0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001230:	482f      	ldr	r0, [pc, #188]	; (80012f0 <StateMachineManagment+0xadc>)
 8001232:	f7fe ffd5 	bl	80001e0 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	492c      	ldr	r1, [pc, #176]	; (80012f0 <StateMachineManagment+0xadc>)
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <StateMachineManagment+0xae0>)
 8001242:	f003 fae8 	bl	8004816 <HAL_UART_Transmit>
			break;
 8001246:	e04b      	b.n	80012e0 <StateMachineManagment+0xacc>
				else if(inputchar == '-')
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <StateMachineManagment+0xb08>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	2b2d      	cmp	r3, #45	; 0x2d
 8001250:	d11f      	bne.n	8001292 <StateMachineManagment+0xa7e>
					Robot.EndStationBuffer--;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <StateMachineManagment+0xae8>)
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	3b01      	subs	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <StateMachineManagment+0xae8>)
 800125c:	709a      	strb	r2, [r3, #2]
					Robot.EndStationBuffer %= 16;
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <StateMachineManagment+0xae8>)
 8001260:	789b      	ldrb	r3, [r3, #2]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <StateMachineManagment+0xae8>)
 800126a:	709a      	strb	r2, [r3, #2]
					sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <StateMachineManagment+0xae8>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	461a      	mov	r2, r3
 8001272:	492c      	ldr	r1, [pc, #176]	; (8001324 <StateMachineManagment+0xb10>)
 8001274:	481e      	ldr	r0, [pc, #120]	; (80012f0 <StateMachineManagment+0xadc>)
 8001276:	f004 fb2b 	bl	80058d0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800127a:	481d      	ldr	r0, [pc, #116]	; (80012f0 <StateMachineManagment+0xadc>)
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	4919      	ldr	r1, [pc, #100]	; (80012f0 <StateMachineManagment+0xadc>)
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <StateMachineManagment+0xae0>)
 800128c:	f003 fac3 	bl	8004816 <HAL_UART_Transmit>
			break;
 8001290:	e026      	b.n	80012e0 <StateMachineManagment+0xacc>
				else if(inputchar == 'g')
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <StateMachineManagment+0xb08>)
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	2b67      	cmp	r3, #103	; 0x67
 800129a:	d10a      	bne.n	80012b2 <StateMachineManagment+0xa9e>
					Robot.EndStation = Robot.EndStationBuffer;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <StateMachineManagment+0xae8>)
 800129e:	789a      	ldrb	r2, [r3, #2]
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <StateMachineManagment+0xae8>)
 80012a2:	719a      	strb	r2, [r3, #6]
					flagUART = 0;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <StateMachineManagment+0xad4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
					MCState = EEpromWriteState;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <StateMachineManagment+0xb14>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	701a      	strb	r2, [r3, #0]
			break;
 80012b0:	e016      	b.n	80012e0 <StateMachineManagment+0xacc>
					flagUART = 0;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <StateMachineManagment+0xad4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <StateMachineManagment+0xad8>)
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <StateMachineManagment+0xadc>)
 80012bc:	f004 fb08 	bl	80058d0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <StateMachineManagment+0xadc>)
 80012c2:	f7fe ff8d 	bl	80001e0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <StateMachineManagment+0xadc>)
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <StateMachineManagment+0xae0>)
 80012d2:	f003 faa0 	bl	8004816 <HAL_UART_Transmit>
			break;
 80012d6:	e003      	b.n	80012e0 <StateMachineManagment+0xacc>
			break;
 80012d8:	bf00      	nop
 80012da:	e002      	b.n	80012e2 <StateMachineManagment+0xace>
			break;
 80012dc:	bf00      	nop
 80012de:	e000      	b.n	80012e2 <StateMachineManagment+0xace>
			break;
 80012e0:	bf00      	nop
	}
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000174 	.word	0x20000174
 80012ec:	08006288 	.word	0x08006288
 80012f0:	20000134 	.word	0x20000134
 80012f4:	200000e4 	.word	0x200000e4
 80012f8:	08006450 	.word	0x08006450
 80012fc:	20000128 	.word	0x20000128
 8001300:	080062c4 	.word	0x080062c4
 8001304:	080062f8 	.word	0x080062f8
 8001308:	08006478 	.word	0x08006478
 800130c:	08006494 	.word	0x08006494
 8001310:	080064b0 	.word	0x080064b0
 8001314:	080064c8 	.word	0x080064c8
 8001318:	20000000 	.word	0x20000000
 800131c:	20000176 	.word	0x20000176
 8001320:	20000130 	.word	0x20000130
 8001324:	080064e8 	.word	0x080064e8
 8001328:	2000012f 	.word	0x2000012f

0800132c <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <EEPROMWriteFcn+0x48>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d012      	beq.n	800136a <EEPROMWriteFcn+0x3e>
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <EEPROMWriteFcn+0x4c>)
 8001346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b20      	cmp	r3, #32
 800134e:	d10c      	bne.n	800136a <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8001350:	883a      	ldrh	r2, [r7, #0]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2310      	movs	r3, #16
 800135c:	21a0      	movs	r1, #160	; 0xa0
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <EEPROMWriteFcn+0x4c>)
 8001360:	f000 ff28 	bl	80021b4 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <EEPROMWriteFcn+0x48>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000178 	.word	0x20000178
 8001378:	20000090 	.word	0x20000090

0800137c <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <EEPROMReadFcn+0x48>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <EEPROMReadFcn+0x3e>
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <EEPROMReadFcn+0x4c>)
 8001396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b20      	cmp	r3, #32
 800139e:	d10c      	bne.n	80013ba <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 80013a0:	883a      	ldrh	r2, [r7, #0]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2310      	movs	r3, #16
 80013ac:	21a0      	movs	r1, #160	; 0xa0
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <EEPROMReadFcn+0x4c>)
 80013b0:	f000 ffb2 	bl	8002318 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <EEPROMReadFcn+0x48>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
	}
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000179 	.word	0x20000179
 80013c8:	20000090 	.word	0x20000090

080013cc <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80013d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <UARTRecieveIT+0x54>)
 80013da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80013dc:	461a      	mov	r2, r3
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <UARTRecieveIT+0x54>)
 80013e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <UARTRecieveIT+0x58>)
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d010      	beq.n	8001410 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <UARTRecieveIT+0x58>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <UARTRecieveIT+0x5c>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <UARTRecieveIT+0x58>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <UARTRecieveIT+0x54>)
 8001400:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001402:	fbb3 f1f2 	udiv	r1, r3, r2
 8001406:	fb01 f202 	mul.w	r2, r1, r2
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <UARTRecieveIT+0x58>)
 800140e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	200000e4 	.word	0x200000e4
 8001424:	20000184 	.word	0x20000184
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148a:	2007      	movs	r0, #7
 800148c:	f000 face 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_I2C_MspInit+0xa4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d13c      	bne.n	8001538 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	2312      	movs	r3, #18
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ec:	2304      	movs	r3, #4
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <HAL_I2C_MspInit+0xac>)
 80014f8:	f000 fb7a 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 8001506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_I2C_MspInit+0xa8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	201f      	movs	r0, #31
 800151e:	f000 fa90 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001522:	201f      	movs	r0, #31
 8001524:	f000 faa9 	bl	8001a7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2020      	movs	r0, #32
 800152e:	f000 fa88 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001532:	2020      	movs	r0, #32
 8001534:	f000 faa1 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_UART_MspInit+0x94>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d133      	bne.n	80015d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_UART_MspInit+0x98>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_UART_MspInit+0x98>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0x98>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_UART_MspInit+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_UART_MspInit+0x98>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_UART_MspInit+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_UART_MspInit+0x9c>)
 80015c2:	f000 fb15 	bl	8001bf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2026      	movs	r0, #38	; 0x26
 80015cc:	f000 fa39 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d0:	2026      	movs	r0, #38	; 0x26
 80015d2:	f000 fa52 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f8e4 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <I2C1_EV_IRQHandler+0x10>)
 8001646:	f000 ff25 	bl	8002494 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000090 	.word	0x20000090

08001654 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <I2C1_ER_IRQHandler+0x10>)
 800165a:	f001 f88c 	bl	8002776 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000090 	.word	0x20000090

08001668 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <USART2_IRQHandler+0x10>)
 800166e:	f003 f995 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000e4 	.word	0x200000e4

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f004 f8de 	bl	800586c <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20020000 	.word	0x20020000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	20000188 	.word	0x20000188
 80016e4:	200001a0 	.word	0x200001a0

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001728:	4c0b      	ldr	r4, [pc, #44]	; (8001758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001736:	f7ff ffd7 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f004 f89d 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7fe ff29 	bl	8000594 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001750:	08006560 	.word	0x08006560
  ldr r2, =_sbss
 8001754:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001758:	200001a0 	.word	0x200001a0

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_Init+0x40>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_Init+0x40>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_Init+0x40>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 f94f 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fe5a 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f967 	bl	8001a96 <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f92f 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000004 	.word	0x20000004
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000000c 	.word	0x2000000c
 8001828:	2000018c 	.word	0x2000018c

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000018c 	.word	0x2000018c

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000000c 	.word	0x2000000c

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff feb6 	bl	800182c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d008      	beq.n	8001ae0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e052      	b.n	8001b86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0216 	bic.w	r2, r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001afe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_DMA_Abort+0x62>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0208 	bic.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b30:	e013      	b.n	8001b5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b32:	f7ff fe7b 	bl	800182c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d90c      	bls.n	8001b5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e015      	b.n	8001b86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e4      	bne.n	8001b32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	223f      	movs	r2, #63	; 0x3f
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e00c      	b.n	8001bc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2205      	movs	r2, #5
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e12b      	b.n	8002196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff faa2 	bl	800149c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	; 0x24
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f90:	f002 fbcc 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8001f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a81      	ldr	r2, [pc, #516]	; (80021a0 <HAL_I2C_Init+0x274>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d807      	bhi.n	8001fb0 <HAL_I2C_Init+0x84>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a80      	ldr	r2, [pc, #512]	; (80021a4 <HAL_I2C_Init+0x278>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	bf94      	ite	ls
 8001fa8:	2301      	movls	r3, #1
 8001faa:	2300      	movhi	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e006      	b.n	8001fbe <HAL_I2C_Init+0x92>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a7d      	ldr	r2, [pc, #500]	; (80021a8 <HAL_I2C_Init+0x27c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	bf94      	ite	ls
 8001fb8:	2301      	movls	r3, #1
 8001fba:	2300      	movhi	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0e7      	b.n	8002196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a78      	ldr	r2, [pc, #480]	; (80021ac <HAL_I2C_Init+0x280>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <HAL_I2C_Init+0x274>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d802      	bhi.n	8002000 <HAL_I2C_Init+0xd4>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	e009      	b.n	8002014 <HAL_I2C_Init+0xe8>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <HAL_I2C_Init+0x284>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	3301      	adds	r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002026:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	495c      	ldr	r1, [pc, #368]	; (80021a0 <HAL_I2C_Init+0x274>)
 8002030:	428b      	cmp	r3, r1
 8002032:	d819      	bhi.n	8002068 <HAL_I2C_Init+0x13c>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e59      	subs	r1, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002042:	1c59      	adds	r1, r3, #1
 8002044:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002048:	400b      	ands	r3, r1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_I2C_Init+0x138>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e59      	subs	r1, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fbb1 f3f3 	udiv	r3, r1, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002062:	e051      	b.n	8002108 <HAL_I2C_Init+0x1dc>
 8002064:	2304      	movs	r3, #4
 8002066:	e04f      	b.n	8002108 <HAL_I2C_Init+0x1dc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d111      	bne.n	8002094 <HAL_I2C_Init+0x168>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e012      	b.n	80020ba <HAL_I2C_Init+0x18e>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	0099      	lsls	r1, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x196>
 80020be:	2301      	movs	r3, #1
 80020c0:	e022      	b.n	8002108 <HAL_I2C_Init+0x1dc>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10e      	bne.n	80020e8 <HAL_I2C_Init+0x1bc>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e58      	subs	r0, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	440b      	add	r3, r1
 80020d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	e00f      	b.n	8002108 <HAL_I2C_Init+0x1dc>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	0099      	lsls	r1, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	6809      	ldr	r1, [r1, #0]
 800210c:	4313      	orrs	r3, r2
 800210e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6911      	ldr	r1, [r2, #16]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	430b      	orrs	r3, r1
 800214a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	000186a0 	.word	0x000186a0
 80021a4:	001e847f 	.word	0x001e847f
 80021a8:	003d08ff 	.word	0x003d08ff
 80021ac:	431bde83 	.word	0x431bde83
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	817b      	strh	r3, [r7, #10]
 80021c6:	460b      	mov	r3, r1
 80021c8:	813b      	strh	r3, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	f040 808e 	bne.w	80022fc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_I2C_Mem_Write_IT+0x158>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_I2C_Mem_Write_IT+0x15c>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0a1a      	lsrs	r2, r3, #8
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e064      	b.n	80022fe <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d0db      	beq.n	80021fa <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_I2C_Mem_Write_IT+0x9c>
 800224c:	2302      	movs	r3, #2
 800224e:	e056      	b.n	80022fe <HAL_I2C_Mem_Write_IT+0x14a>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d007      	beq.n	8002276 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2221      	movs	r2, #33	; 0x21
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a3a      	ldr	r2, [r7, #32]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_I2C_Mem_Write_IT+0x160>)
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80022b8:	897a      	ldrh	r2, [r7, #10]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80022be:	893a      	ldrh	r2, [r7, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80022f6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000004 	.word	0x20000004
 8002310:	14f8b589 	.word	0x14f8b589
 8002314:	ffff0000 	.word	0xffff0000

08002318 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	f040 809a 	bne.w	8002478 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_I2C_Mem_Read_IT+0x170>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_I2C_Mem_Read_IT+0x174>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0a1a      	lsrs	r2, r3, #8
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	009a      	lsls	r2, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b01      	subs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e070      	b.n	800247a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d0db      	beq.n	800235e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Mem_Read_IT+0x9c>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e062      	b.n	800247a <HAL_I2C_Mem_Read_IT+0x162>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d007      	beq.n	80023da <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2222      	movs	r2, #34	; 0x22
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a3a      	ldr	r2, [r7, #32]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_I2C_Mem_Read_IT+0x178>)
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800241c:	897a      	ldrh	r2, [r7, #10]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002422:	893a      	ldrh	r2, [r7, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002442:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002472:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000004 	.word	0x20000004
 800248c:	14f8b589 	.word	0x14f8b589
 8002490:	ffff0000 	.word	0xffff0000

08002494 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d003      	beq.n	80024cc <HAL_I2C_EV_IRQHandler+0x38>
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	f040 80c1 	bne.w	800264e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_I2C_EV_IRQHandler+0x6e>
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80024ec:	d003      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0x62>
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_EV_IRQHandler+0x66>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_I2C_EV_IRQHandler+0x68>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f000 8132 	beq.w	8002766 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_I2C_EV_IRQHandler+0x92>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 fc7b 	bl	8003e14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fd83 	bl	800302a <I2C_Master_SB>
 8002524:	e092      	b.n	800264c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0xb2>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	0a5b      	lsrs	r3, r3, #9
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fdf9 	bl	8003136 <I2C_Master_ADD10>
 8002544:	e082      	b.n	800264c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_I2C_EV_IRQHandler+0xd2>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	0a5b      	lsrs	r3, r3, #9
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fe13 	bl	800318a <I2C_Master_ADDR>
 8002564:	e072      	b.n	800264c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03b      	beq.n	80025ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002580:	f000 80f3 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	09db      	lsrs	r3, r3, #7
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00f      	beq.n	80025b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9f3 	bl	8002994 <I2C_MasterTransmit_TXE>
 80025ae:	e04d      	b.n	800264c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80d6 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	0a5b      	lsrs	r3, r3, #9
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80cf 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	2b21      	cmp	r3, #33	; 0x21
 80025d0:	d103      	bne.n	80025da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa7a 	bl	8002acc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d8:	e0c7      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	f040 80c4 	bne.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fae8 	bl	8002bb8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e8:	e0bf      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f8:	f000 80b7 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00f      	beq.n	8002628 <HAL_I2C_EV_IRQHandler+0x194>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_I2C_EV_IRQHandler+0x194>
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fb5d 	bl	8002ce0 <I2C_MasterReceive_RXNE>
 8002626:	e011      	b.n	800264c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 809a 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	0a5b      	lsrs	r3, r3, #9
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8093 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc06 	bl	8002e56 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800264a:	e08e      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
 800264c:	e08d      	b.n	800276a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e007      	b.n	8002670 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 ffc4 	bl	8003628 <I2C_Slave_ADDR>
 80026a0:	e066      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	0a5b      	lsrs	r3, r3, #9
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fffe 	bl	80036bc <I2C_Slave_STOPF>
 80026c0:	e056      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	2b21      	cmp	r3, #33	; 0x21
 80026c6:	d002      	beq.n	80026ce <HAL_I2C_EV_IRQHandler+0x23a>
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	2b29      	cmp	r3, #41	; 0x29
 80026cc:	d125      	bne.n	800271a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	09db      	lsrs	r3, r3, #7
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00f      	beq.n	80026fa <HAL_I2C_EV_IRQHandler+0x266>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	0a9b      	lsrs	r3, r3, #10
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_I2C_EV_IRQHandler+0x266>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 feda 	bl	80034ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f8:	e039      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d033      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x2da>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	0a5b      	lsrs	r3, r3, #9
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02d      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 ff07 	bl	8003526 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002718:	e029      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00f      	beq.n	8002746 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	0a9b      	lsrs	r3, r3, #10
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 ff12 	bl	8003568 <I2C_SlaveReceive_RXNE>
 8002744:	e014      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00e      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	0a5b      	lsrs	r3, r3, #9
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 ff40 	bl	80035e4 <I2C_SlaveReceive_BTF>
 8002764:	e004      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800276e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b08a      	sub	sp, #40	; 0x28
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002798:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00e      	beq.n	80027c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	0a5b      	lsrs	r3, r3, #9
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <HAL_I2C_ER_IRQHandler+0x78>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80027ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	0a9b      	lsrs	r3, r3, #10
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d03f      	beq.n	800287a <HAL_I2C_ER_IRQHandler+0x104>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d039      	beq.n	800287a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002806:	7efb      	ldrb	r3, [r7, #27]
 8002808:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002820:	7ebb      	ldrb	r3, [r7, #26]
 8002822:	2b20      	cmp	r3, #32
 8002824:	d112      	bne.n	800284c <HAL_I2C_ER_IRQHandler+0xd6>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10f      	bne.n	800284c <HAL_I2C_ER_IRQHandler+0xd6>
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b21      	cmp	r3, #33	; 0x21
 8002830:	d008      	beq.n	8002844 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	2b29      	cmp	r3, #41	; 0x29
 8002836:	d005      	beq.n	8002844 <HAL_I2C_ER_IRQHandler+0xce>
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b28      	cmp	r3, #40	; 0x28
 800283c:	d106      	bne.n	800284c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b21      	cmp	r3, #33	; 0x21
 8002842:	d103      	bne.n	800284c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f001 f869 	bl	800391c <I2C_Slave_AF>
 800284a:	e016      	b.n	800287a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002854:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800285e:	7efb      	ldrb	r3, [r7, #27]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d002      	beq.n	800286a <HAL_I2C_ER_IRQHandler+0xf4>
 8002864:	7efb      	ldrb	r3, [r7, #27]
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d107      	bne.n	800287a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002878:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	0adb      	lsrs	r3, r3, #11
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00e      	beq.n	80028a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80028a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f001 f8a0 	bl	80039fc <I2C_ITError>
  }
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
 8002920:	4613      	mov	r3, r2
 8002922:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d150      	bne.n	8002a5c <I2C_MasterTransmit_TXE+0xc8>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b21      	cmp	r3, #33	; 0x21
 80029be:	d14d      	bne.n	8002a5c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d01d      	beq.n	8002a02 <I2C_MasterTransmit_TXE+0x6e>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d01a      	beq.n	8002a02 <I2C_MasterTransmit_TXE+0x6e>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d2:	d016      	beq.n	8002a02 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2211      	movs	r2, #17
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff62 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a00:	e060      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a10:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d107      	bne.n	8002a4c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff7d 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a4a:	e03b      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff35 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5a:	e033      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b21      	cmp	r3, #33	; 0x21
 8002a60:	d005      	beq.n	8002a6e <I2C_MasterTransmit_TXE+0xda>
 8002a62:	7bbb      	ldrb	r3, [r7, #14]
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d12d      	bne.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b22      	cmp	r3, #34	; 0x22
 8002a6c:	d12a      	bne.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a88:	e01c      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d103      	bne.n	8002a9e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f88e 	bl	8002bb8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002a9c:	e012      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ac2:	e7ff      	b.n	8002ac4 <I2C_MasterTransmit_TXE+0x130>
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b21      	cmp	r3, #33	; 0x21
 8002ae4:	d164      	bne.n	8002bb0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b14:	e04c      	b.n	8002bb0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d01d      	beq.n	8002b58 <I2C_MasterTransmit_BTF+0x8c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d01a      	beq.n	8002b58 <I2C_MasterTransmit_BTF+0x8c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b28:	d016      	beq.n	8002b58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2211      	movs	r2, #17
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff feb7 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
}
 8002b56:	e02b      	b.n	8002bb0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d107      	bne.n	8002ba2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fed2 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
}
 8002ba0:	e006      	b.n	8002bb0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fe8a 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11d      	bne.n	8002c0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10b      	bne.n	8002bf0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002bee:	e073      	b.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	121b      	asrs	r3, r3, #8
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c0a:	e065      	b.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10b      	bne.n	8002c2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c2a:	e055      	b.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d151      	bne.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b22      	cmp	r3, #34	; 0x22
 8002c38:	d10d      	bne.n	8002c56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c54:	e040      	b.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b21      	cmp	r3, #33	; 0x21
 8002c64:	d112      	bne.n	8002c8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c8a:	e025      	b.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d120      	bne.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d11d      	bne.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002caa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fe36 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b22      	cmp	r3, #34	; 0x22
 8002cf2:	f040 80ac 	bne.w	8002e4e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d921      	bls.n	8002d48 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	f040 808c 	bne.w	8002e4e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d46:	e082      	b.n	8002e4e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d075      	beq.n	8002e3c <I2C_MasterReceive_RXNE+0x15c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <I2C_MasterReceive_RXNE+0x7c>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d16f      	bne.n	8002e3c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f001 f827 	bl	8003db0 <I2C_WaitOnSTOPRequestThroughIT>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d142      	bne.n	8002dee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d10a      	bne.n	8002dd8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fdc1 	bl	8002958 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dd6:	e03a      	b.n	8002e4e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2212      	movs	r2, #18
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fd76 	bl	80028d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dec:	e02f      	b.n	8002e4e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fd99 	bl	800296c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e3a:	e008      	b.n	8002e4e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	605a      	str	r2, [r3, #4]
}
 8002e4c:	e7ff      	b.n	8002e4e <I2C_MasterReceive_RXNE+0x16e>
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d11b      	bne.n	8002ea6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ea4:	e0bd      	b.n	8003022 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d129      	bne.n	8002f04 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00a      	beq.n	8002edc <I2C_MasterReceive_BTF+0x86>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d007      	beq.n	8002edc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f02:	e08e      	b.n	8003022 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d176      	bne.n	8002ffc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <I2C_MasterReceive_BTF+0xc4>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d108      	bne.n	8002f2c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e019      	b.n	8002f60 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d002      	beq.n	8002f38 <I2C_MasterReceive_BTF+0xe2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d108      	bne.n	8002f4a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e00a      	b.n	8002f60 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d007      	beq.n	8002f60 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d10a      	bne.n	8002fe6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fcba 	bl	8002958 <HAL_I2C_MemRxCpltCallback>
}
 8002fe4:	e01d      	b.n	8003022 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2212      	movs	r2, #18
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fc6f 	bl	80028d8 <HAL_I2C_MasterRxCpltCallback>
}
 8002ffa:	e012      	b.n	8003022 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d117      	bne.n	800306e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003056:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003058:	e067      	b.n	800312a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]
}
 800306c:	e05d      	b.n	800312a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d133      	bne.n	80030e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b21      	cmp	r3, #33	; 0x21
 8003082:	d109      	bne.n	8003098 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003094:	611a      	str	r2, [r3, #16]
 8003096:	e008      	b.n	80030aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <I2C_Master_SB+0x92>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d108      	bne.n	80030ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d032      	beq.n	800312a <I2C_Master_SB+0x100>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02d      	beq.n	800312a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030dc:	605a      	str	r2, [r3, #4]
}
 80030de:	e024      	b.n	800312a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10e      	bne.n	8003106 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	11db      	asrs	r3, r3, #7
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0306 	and.w	r3, r3, #6
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f063 030f 	orn	r3, r3, #15
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
}
 8003104:	e011      	b.n	800312a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10d      	bne.n	800312a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	b29b      	uxth	r3, r3
 8003114:	11db      	asrs	r3, r3, #7
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 0306 	and.w	r3, r3, #6
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f063 030e 	orn	r3, r3, #14
 8003122:	b2da      	uxtb	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	b2da      	uxtb	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <I2C_Master_ADD10+0x26>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <I2C_Master_ADD10+0x48>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	605a      	str	r2, [r3, #4]
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800318a:	b480      	push	{r7}
 800318c:	b091      	sub	sp, #68	; 0x44
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b22      	cmp	r3, #34	; 0x22
 80031b2:	f040 8169 	bne.w	8003488 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <I2C_Master_ADDR+0x54>
 80031be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d10b      	bne.n	80031de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	e160      	b.n	80034a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11d      	bne.n	8003222 <I2C_Master_ADDR+0x98>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031ee:	d118      	bne.n	8003222 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	651a      	str	r2, [r3, #80]	; 0x50
 8003220:	e13e      	b.n	80034a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d113      	bne.n	8003254 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e115      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 808a 	bne.w	8003374 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003266:	d137      	bne.n	80032d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003276:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d113      	bne.n	80032b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	e0e7      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e0d3      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d02e      	beq.n	800333c <I2C_Master_ADDR+0x1b2>
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d02b      	beq.n	800333c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	2b12      	cmp	r3, #18
 80032e8:	d102      	bne.n	80032f0 <I2C_Master_ADDR+0x166>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d125      	bne.n	800333c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00e      	beq.n	8003314 <I2C_Master_ADDR+0x18a>
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d00b      	beq.n	8003314 <I2C_Master_ADDR+0x18a>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d008      	beq.n	8003314 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e007      	b.n	8003324 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	e0a1      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e085      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d14d      	bne.n	800341a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b04      	cmp	r3, #4
 8003382:	d016      	beq.n	80033b2 <I2C_Master_ADDR+0x228>
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b02      	cmp	r3, #2
 8003388:	d013      	beq.n	80033b2 <I2C_Master_ADDR+0x228>
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b10      	cmp	r3, #16
 800338e:	d010      	beq.n	80033b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d0:	d117      	bne.n	8003402 <I2C_Master_ADDR+0x278>
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d8:	d00b      	beq.n	80033f2 <I2C_Master_ADDR+0x268>
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d008      	beq.n	80033f2 <I2C_Master_ADDR+0x268>
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d005      	beq.n	80033f2 <I2C_Master_ADDR+0x268>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d002      	beq.n	80033f2 <I2C_Master_ADDR+0x268>
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d107      	bne.n	8003402 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003400:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	e032      	b.n	8003480 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003428:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003438:	d117      	bne.n	800346a <I2C_Master_ADDR+0x2e0>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003440:	d00b      	beq.n	800345a <I2C_Master_ADDR+0x2d0>
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b01      	cmp	r3, #1
 8003446:	d008      	beq.n	800345a <I2C_Master_ADDR+0x2d0>
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	2b08      	cmp	r3, #8
 800344c:	d005      	beq.n	800345a <I2C_Master_ADDR+0x2d0>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	2b10      	cmp	r3, #16
 8003452:	d002      	beq.n	800345a <I2C_Master_ADDR+0x2d0>
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	2b20      	cmp	r3, #32
 8003458:	d107      	bne.n	800346a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003468:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003486:	e00b      	b.n	80034a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
}
 800349e:	e7ff      	b.n	80034a0 <I2C_Master_ADDR+0x316>
 80034a0:	bf00      	nop
 80034a2:	3744      	adds	r7, #68	; 0x44
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02b      	beq.n	800351e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d114      	bne.n	800351e <I2C_SlaveTransmit_TXE+0x72>
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b29      	cmp	r3, #41	; 0x29
 80034f8:	d111      	bne.n	800351e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003508:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2221      	movs	r2, #33	; 0x21
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2228      	movs	r2, #40	; 0x28
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff f9e7 	bl	80028ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d011      	beq.n	800355c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02c      	beq.n	80035dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d114      	bne.n	80035dc <I2C_SlaveReceive_RXNE+0x74>
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b2a      	cmp	r3, #42	; 0x2a
 80035b6:	d111      	bne.n	80035dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2222      	movs	r2, #34	; 0x22
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2228      	movs	r2, #40	; 0x28
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff f992 	bl	8002900 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003642:	2b28      	cmp	r3, #40	; 0x28
 8003644:	d127      	bne.n	8003696 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003654:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	09db      	lsrs	r3, r3, #7
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	81bb      	strh	r3, [r7, #12]
 8003678:	e002      	b.n	8003680 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003688:	89ba      	ldrh	r2, [r7, #12]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff f940 	bl	8002914 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003694:	e00e      	b.n	80036b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003708:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003718:	d172      	bne.n	8003800 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b22      	cmp	r3, #34	; 0x22
 800371e:	d002      	beq.n	8003726 <I2C_Slave_STOPF+0x6a>
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b2a      	cmp	r3, #42	; 0x2a
 8003724:	d135      	bne.n	8003792 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003758:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fa37 	bl	8001bd2 <HAL_DMA_GetState>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d049      	beq.n	80037fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4a69      	ldr	r2, [pc, #420]	; (8003914 <I2C_Slave_STOPF+0x258>)
 8003770:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fa09 	bl	8001b8e <HAL_DMA_Abort_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03d      	beq.n	80037fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003790:	e035      	b.n	80037fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fa01 	bl	8001bd2 <HAL_DMA_GetState>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d014      	beq.n	8003800 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4a4e      	ldr	r2, [pc, #312]	; (8003914 <I2C_Slave_STOPF+0x258>)
 80037dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe f9d3 	bl	8001b8e <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
 80037fc:	e000      	b.n	8003800 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d03e      	beq.n	8003888 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b04      	cmp	r3, #4
 8003816:	d112      	bne.n	800383e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d112      	bne.n	8003872 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f8b3 	bl	80039fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003896:	e039      	b.n	800390c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b2a      	cmp	r3, #42	; 0x2a
 800389c:	d109      	bne.n	80038b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2228      	movs	r2, #40	; 0x28
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff f827 	bl	8002900 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b28      	cmp	r3, #40	; 0x28
 80038bc:	d111      	bne.n	80038e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <I2C_Slave_STOPF+0x25c>)
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff f828 	bl	8002930 <HAL_I2C_ListenCpltCallback>
}
 80038e0:	e014      	b.n	800390c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b22      	cmp	r3, #34	; 0x22
 80038e8:	d002      	beq.n	80038f0 <I2C_Slave_STOPF+0x234>
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b22      	cmp	r3, #34	; 0x22
 80038ee:	d10d      	bne.n	800390c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe fffa 	bl	8002900 <HAL_I2C_SlaveRxCpltCallback>
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08003c61 	.word	0x08003c61
 8003918:	ffff0000 	.word	0xffff0000

0800391c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d002      	beq.n	800393e <I2C_Slave_AF+0x22>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b20      	cmp	r3, #32
 800393c:	d129      	bne.n	8003992 <I2C_Slave_AF+0x76>
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b28      	cmp	r3, #40	; 0x28
 8003942:	d126      	bne.n	8003992 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <I2C_Slave_AF+0xdc>)
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003958:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003962:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe ffd0 	bl	8002930 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003990:	e02e      	b.n	80039f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b21      	cmp	r3, #33	; 0x21
 8003996:	d126      	bne.n	80039e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <I2C_Slave_AF+0xdc>)
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2221      	movs	r2, #33	; 0x21
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe ff84 	bl	80028ec <HAL_I2C_SlaveTxCpltCallback>
}
 80039e4:	e004      	b.n	80039f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ee:	615a      	str	r2, [r3, #20]
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	ffff0000 	.word	0xffff0000

080039fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d002      	beq.n	8003a20 <I2C_ITError+0x24>
 8003a1a:	7bbb      	ldrb	r3, [r7, #14]
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d10a      	bne.n	8003a36 <I2C_ITError+0x3a>
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b22      	cmp	r3, #34	; 0x22
 8003a24:	d107      	bne.n	8003a36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a3c:	2b28      	cmp	r3, #40	; 0x28
 8003a3e:	d107      	bne.n	8003a50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2228      	movs	r2, #40	; 0x28
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a4e:	e015      	b.n	8003a7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d00a      	beq.n	8003a76 <I2C_ITError+0x7a>
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b60      	cmp	r3, #96	; 0x60
 8003a64:	d007      	beq.n	8003a76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8a:	d162      	bne.n	8003b52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d020      	beq.n	8003aec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	4a6a      	ldr	r2, [pc, #424]	; (8003c58 <I2C_ITError+0x25c>)
 8003ab0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe f869 	bl	8001b8e <HAL_DMA_Abort_IT>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8089 	beq.w	8003bd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4798      	blx	r3
 8003aea:	e074      	b.n	8003bd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <I2C_ITError+0x25c>)
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe f848 	bl	8001b8e <HAL_DMA_Abort_IT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d068      	beq.n	8003bd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d10b      	bne.n	8003b2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
 8003b50:	e041      	b.n	8003bd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b60      	cmp	r3, #96	; 0x60
 8003b5c:	d125      	bne.n	8003baa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d10b      	bne.n	8003b92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe feec 	bl	8002980 <HAL_I2C_AbortCpltCallback>
 8003ba8:	e015      	b.n	8003bd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d10b      	bne.n	8003bd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe fecb 	bl	800296c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d113      	bne.n	8003c50 <I2C_ITError+0x254>
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b28      	cmp	r3, #40	; 0x28
 8003c2c:	d110      	bne.n	8003c50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <I2C_ITError+0x260>)
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe fe70 	bl	8002930 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003c61 	.word	0x08003c61
 8003c5c:	ffff0000 	.word	0xffff0000

08003c60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <I2C_DMAAbort+0x148>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	4a4a      	ldr	r2, [pc, #296]	; (8003dac <I2C_DMAAbort+0x14c>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a1a      	lsrs	r2, r3, #8
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003ca6:	e00a      	b.n	8003cbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cbc:	d0ea      	beq.n	8003c94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2200      	movs	r2, #0
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	2200      	movs	r2, #0
 8003cdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2200      	movs	r2, #0
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	2200      	movs	r2, #0
 8003d12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d10e      	bne.n	8003d4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7fe fe1a 	bl	8002980 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d4c:	e027      	b.n	8003d9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d54:	2b28      	cmp	r3, #40	; 0x28
 8003d56:	d117      	bne.n	8003d88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2228      	movs	r2, #40	; 0x28
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d86:	e007      	b.n	8003d98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f7fe fde7 	bl	800296c <HAL_I2C_ErrorCallback>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000004 	.word	0x20000004
 8003dac:	14f8b589 	.word	0x14f8b589

08003db0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	08db      	lsrs	r3, r3, #3
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0a1a      	lsrs	r2, r3, #8
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e008      	b.n	8003e00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d0e9      	beq.n	8003dd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000004 	.word	0x20000004
 8003e10:	14f8b589 	.word	0x14f8b589

08003e14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e24:	d103      	bne.n	8003e2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e2c:	e007      	b.n	8003e3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e36:	d102      	bne.n	8003e3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e267      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d075      	beq.n	8003f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b85      	ldr	r3, [pc, #532]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b82      	ldr	r3, [pc, #520]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b7e      	ldr	r3, [pc, #504]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05b      	beq.n	8003f54 <HAL_RCC_OscConfig+0x108>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d157      	bne.n	8003f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e242      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x74>
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a75      	ldr	r2, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e01d      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x98>
 8003eca:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6f      	ldr	r2, [pc, #444]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6c      	ldr	r2, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a65      	ldr	r2, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd fc92 	bl	800182c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fd fc8e 	bl	800182c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e207      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xc0>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fc7e 	bl	800182c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd fc7a 	bl	800182c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	; 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1f3      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0xe8>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d063      	beq.n	800402a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d11c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7a:	4b44      	ldr	r3, [pc, #272]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e1c7      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4937      	ldr	r1, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb2:	e03a      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fbc:	4b34      	ldr	r3, [pc, #208]	; (8004090 <HAL_RCC_OscConfig+0x244>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fc33 	bl	800182c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fca:	f7fd fc2f 	bl	800182c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1a8      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4925      	ldr	r1, [pc, #148]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]
 8003ffc:	e015      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_OscConfig+0x244>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd fc12 	bl	800182c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400c:	f7fd fc0e 	bl	800182c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e187      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d036      	beq.n	80040a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_RCC_OscConfig+0x248>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd fbf2 	bl	800182c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800404c:	f7fd fbee 	bl	800182c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e167      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x200>
 800406a:	e01b      	b.n	80040a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCC_OscConfig+0x248>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004072:	f7fd fbdb 	bl	800182c <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	e00e      	b.n	8004098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407a:	f7fd fbd7 	bl	800182c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d907      	bls.n	8004098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e150      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 800408c:	40023800 	.word	0x40023800
 8004090:	42470000 	.word	0x42470000
 8004094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800409a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ea      	bne.n	800407a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8097 	beq.w	80041e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b6:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	4b7d      	ldr	r3, [pc, #500]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a7c      	ldr	r2, [pc, #496]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b7a      	ldr	r3, [pc, #488]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	4b77      	ldr	r3, [pc, #476]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ee:	4b74      	ldr	r3, [pc, #464]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a73      	ldr	r2, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fb97 	bl	800182c <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fd fb93 	bl	800182c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e10c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x2ea>
 8004128:	4b64      	ldr	r3, [pc, #400]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a63      	ldr	r2, [pc, #396]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
 8004134:	e01c      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x30c>
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a5b      	ldr	r2, [pc, #364]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004158:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	4a57      	ldr	r2, [pc, #348]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6713      	str	r3, [r2, #112]	; 0x70
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a54      	ldr	r2, [pc, #336]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800416a:	f023 0304 	bic.w	r3, r3, #4
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fb58 	bl	800182c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fd fb54 	bl	800182c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0cb      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	4b49      	ldr	r3, [pc, #292]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ee      	beq.n	8004180 <HAL_RCC_OscConfig+0x334>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fd fb42 	bl	800182c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fd fb3e 	bl	800182c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0b5      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ee      	bne.n	80041ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d4:	4b39      	ldr	r3, [pc, #228]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	4a38      	ldr	r2, [pc, #224]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80a1 	beq.w	800432c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d05c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d141      	bne.n	8004282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fb12 	bl	800182c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420c:	f7fd fb0e 	bl	800182c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e087      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	3b01      	subs	r3, #1
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	491b      	ldr	r1, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fd fae7 	bl	800182c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fd fae3 	bl	800182c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e05c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x416>
 8004280:	e054      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fd fad0 	bl	800182c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7fd facc 	bl	800182c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e045      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x444>
 80042ae:	e03d      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e038      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x4ec>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d028      	beq.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11a      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7fd f9fe 	bl	800182c <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fd f9fa 	bl	800182c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f821 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd f95e 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08006504 	.word	0x08006504
 8004500:	20000004 	.word	0x20000004
 8004504:	20000008 	.word	0x20000008

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b094      	sub	sp, #80	; 0x50
 800450e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	2300      	movs	r3, #0
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	2300      	movs	r3, #0
 800451a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004520:	4b79      	ldr	r3, [pc, #484]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b08      	cmp	r3, #8
 800452a:	d00d      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x40>
 800452c:	2b08      	cmp	r3, #8
 800452e:	f200 80e1 	bhi.w	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x34>
 8004536:	2b04      	cmp	r3, #4
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x3a>
 800453a:	e0db      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b73      	ldr	r3, [pc, #460]	; (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004540:	e0db      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_GetSysClockFreq+0x208>)
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004546:	e0d8      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004548:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004552:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d063      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	2200      	movs	r2, #0
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
 8004568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	0159      	lsls	r1, r3, #5
 8004588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458c:	0150      	lsls	r0, r2, #5
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4621      	mov	r1, r4
 8004594:	1a51      	subs	r1, r2, r1
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	4629      	mov	r1, r5
 800459a:	eb63 0301 	sbc.w	r3, r3, r1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ac:	4659      	mov	r1, fp
 80045ae:	018b      	lsls	r3, r1, #6
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b6:	4651      	mov	r1, sl
 80045b8:	018a      	lsls	r2, r1, #6
 80045ba:	4651      	mov	r1, sl
 80045bc:	ebb2 0801 	subs.w	r8, r2, r1
 80045c0:	4659      	mov	r1, fp
 80045c2:	eb63 0901 	sbc.w	r9, r3, r1
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	eb18 0303 	adds.w	r3, r8, r3
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	462b      	mov	r3, r5
 80045e8:	eb49 0303 	adc.w	r3, r9, r3
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fa:	4629      	mov	r1, r5
 80045fc:	024b      	lsls	r3, r1, #9
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004604:	4621      	mov	r1, r4
 8004606:	024a      	lsls	r2, r1, #9
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460e:	2200      	movs	r2, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004618:	f7fb fe3a 	bl	8000290 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004624:	e058      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b38      	ldr	r3, [pc, #224]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	2200      	movs	r2, #0
 800462e:	4618      	mov	r0, r3
 8004630:	4611      	mov	r1, r2
 8004632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	0159      	lsls	r1, r3, #5
 800464e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004652:	0150      	lsls	r0, r2, #5
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4641      	mov	r1, r8
 800465a:	ebb2 0a01 	subs.w	sl, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb63 0b01 	sbc.w	fp, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004678:	ebb2 040a 	subs.w	r4, r2, sl
 800467c:	eb63 050b 	sbc.w	r5, r3, fp
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	00eb      	lsls	r3, r5, #3
 800468a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468e:	00e2      	lsls	r2, r4, #3
 8004690:	4614      	mov	r4, r2
 8004692:	461d      	mov	r5, r3
 8004694:	4643      	mov	r3, r8
 8004696:	18e3      	adds	r3, r4, r3
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	464b      	mov	r3, r9
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ae:	4629      	mov	r1, r5
 80046b0:	028b      	lsls	r3, r1, #10
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046b8:	4621      	mov	r1, r4
 80046ba:	028a      	lsls	r2, r1, #10
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	2200      	movs	r2, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	61fa      	str	r2, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	f7fb fde0 	bl	8000290 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	3301      	adds	r3, #1
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 80046f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3750      	adds	r7, #80	; 0x50
 8004700:	46bd      	mov	sp, r7
 8004702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400
 8004710:	007a1200 	.word	0x007a1200

08004714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_RCC_GetHCLKFreq+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004730:	f7ff fff0 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0a9b      	lsrs	r3, r3, #10
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	08006514 	.word	0x08006514

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004758:	f7ff ffdc 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0b5b      	lsrs	r3, r3, #13
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	08006514 	.word	0x08006514

0800477c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e03f      	b.n	800480e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc fed2 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fddf 	bl	8005384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08a      	sub	sp, #40	; 0x28
 800481a:	af02      	add	r7, sp, #8
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	d17c      	bne.n	8004930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_Transmit+0x2c>
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e075      	b.n	8004932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_UART_Transmit+0x3e>
 8004850:	2302      	movs	r3, #2
 8004852:	e06e      	b.n	8004932 <HAL_UART_Transmit+0x11c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486a:	f7fc ffdf 	bl	800182c <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d108      	bne.n	8004898 <HAL_UART_Transmit+0x82>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e003      	b.n	80048a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048a8:	e02a      	b.n	8004900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb1f 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e036      	b.n	8004932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3302      	adds	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e007      	b.n	80048f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1cf      	bne.n	80048aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 faef 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e006      	b.n	8004932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d11d      	bne.n	8004990 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Receive_IT+0x26>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e016      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Receive_IT+0x38>
 800496e:	2302      	movs	r3, #2
 8004970:	e00f      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	461a      	mov	r2, r3
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fb24 	bl	8004fd4 <UART_Start_Receive_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	e000      	b.n	8004992 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0ba      	sub	sp, #232	; 0xe8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fc07 	bl	800520e <UART_Receive_IT>
      return;
 8004a00:	e256      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80de 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
 8004a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80d1 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
 8004a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0202 	orr.w	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 81ed 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb92 	bl	800520e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_UART_IRQHandler+0x17a>
 8004b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04f      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa9a 	bl	8005050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d141      	bne.n	8004bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1d9      	bne.n	8004b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d013      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <HAL_UART_IRQHandler+0x3dc>)
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fc ffff 	bl	8001b8e <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00e      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f990 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e00a      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f98c 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	e006      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f988 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bc2:	e170      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	bf00      	nop
    return;
 8004bc6:	e16e      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	f040 814a 	bne.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8143 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 813c 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	f040 80b4 	bne.w	8004d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8140 	beq.w	8004eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c32:	429a      	cmp	r2, r3
 8004c34:	f080 8139 	bcs.w	8004eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	f000 8088 	beq.w	8004d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d9      	bne.n	8004c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e1      	bne.n	8004c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fc fea8 	bl	8001aae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8b6 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d74:	e099      	b.n	8004eaa <HAL_UART_IRQHandler+0x50e>
 8004d76:	bf00      	nop
 8004d78:	08005117 	.word	0x08005117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 808b 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8086 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	617b      	str	r3, [r7, #20]
   return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e3      	bne.n	8004e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f83e 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e64:	e023      	b.n	8004eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f95d 	bl	800513e <UART_Transmit_IT>
    return;
 8004e84:	e014      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f99d 	bl	80051de <UART_EndTransmit_IT>
    return;
 8004ea4:	e004      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eae:	bf00      	nop
  }
}
 8004eb0:	37e8      	adds	r7, #232	; 0xe8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b090      	sub	sp, #64	; 0x40
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	e050      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d04c      	beq.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f18:	f7fc fc88 	bl	800182c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d241      	bcs.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f48:	637a      	str	r2, [r7, #52]	; 0x34
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	623a      	str	r2, [r7, #32]
 8004f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e00f      	b.n	8004fcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d09f      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3740      	adds	r7, #64	; 0x40
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2222      	movs	r2, #34	; 0x22
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b095      	sub	sp, #84	; 0x54
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005078:	643a      	str	r2, [r7, #64]	; 0x40
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800507e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	61fb      	str	r3, [r7, #28]
   return(result);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d119      	bne.n	80050fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	647b      	str	r3, [r7, #68]	; 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e8:	61ba      	str	r2, [r7, #24]
 80050ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	613b      	str	r3, [r7, #16]
   return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
}
 800510a:	bf00      	nop
 800510c:	3754      	adds	r7, #84	; 0x54
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fecb 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b21      	cmp	r3, #33	; 0x21
 8005150:	d13e      	bne.n	80051d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d114      	bne.n	8005186 <UART_Transmit_IT+0x48>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6211      	str	r1, [r2, #32]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe5a 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08c      	sub	sp, #48	; 0x30
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	f040 80ab 	bne.w	800537a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522c:	d117      	bne.n	800525e <UART_Receive_IT+0x50>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524c:	b29a      	uxth	r2, r3
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	1c9a      	adds	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
 800525c:	e026      	b.n	80052ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d007      	beq.n	8005282 <UART_Receive_IT+0x74>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <UART_Receive_IT+0x82>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e008      	b.n	80052a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4619      	mov	r1, r3
 80052ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d15a      	bne.n	8005376 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0220 	bic.w	r2, r2, #32
 80052ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d135      	bne.n	800536c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	613b      	str	r3, [r7, #16]
   return(result);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	623a      	str	r2, [r7, #32]
 8005328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	69f9      	ldr	r1, [r7, #28]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	61bb      	str	r3, [r7, #24]
   return(result);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d10a      	bne.n	800535e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fdbb 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
 800536a:	e002      	b.n	8005372 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fc f85d 	bl	800142c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e002      	b.n	800537c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3730      	adds	r7, #48	; 0x30
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b0c0      	sub	sp, #256	; 0x100
 800538a:	af00      	add	r7, sp, #0
 800538c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	ea40 0301 	orr.w	r3, r0, r1
 80053ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053dc:	f021 010c 	bic.w	r1, r1, #12
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ea:	430b      	orrs	r3, r1
 80053ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	6999      	ldr	r1, [r3, #24]
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	ea40 0301 	orr.w	r3, r0, r1
 800540a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b8f      	ldr	r3, [pc, #572]	; (8005650 <UART_SetConfig+0x2cc>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <UART_SetConfig+0xa0>
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b8d      	ldr	r3, [pc, #564]	; (8005654 <UART_SetConfig+0x2d0>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d104      	bne.n	800542e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7ff f996 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 8005428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800542c:	e003      	b.n	8005436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542e:	f7ff f97d 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8005432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005440:	f040 810c 	bne.w	800565c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800544e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	1891      	adds	r1, r2, r2
 800545c:	65b9      	str	r1, [r7, #88]	; 0x58
 800545e:	415b      	adcs	r3, r3
 8005460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005466:	4621      	mov	r1, r4
 8005468:	eb12 0801 	adds.w	r8, r2, r1
 800546c:	4629      	mov	r1, r5
 800546e:	eb43 0901 	adc.w	r9, r3, r1
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005486:	4690      	mov	r8, r2
 8005488:	4699      	mov	r9, r3
 800548a:	4623      	mov	r3, r4
 800548c:	eb18 0303 	adds.w	r3, r8, r3
 8005490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005494:	462b      	mov	r3, r5
 8005496:	eb49 0303 	adc.w	r3, r9, r3
 800549a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054b2:	460b      	mov	r3, r1
 80054b4:	18db      	adds	r3, r3, r3
 80054b6:	653b      	str	r3, [r7, #80]	; 0x50
 80054b8:	4613      	mov	r3, r2
 80054ba:	eb42 0303 	adc.w	r3, r2, r3
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
 80054c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054c8:	f7fa fee2 	bl	8000290 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4b61      	ldr	r3, [pc, #388]	; (8005658 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2302 	umull	r2, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	011c      	lsls	r4, r3, #4
 80054da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	1891      	adds	r1, r2, r2
 80054f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054f4:	415b      	adcs	r3, r3
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054fc:	4641      	mov	r1, r8
 80054fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005502:	4649      	mov	r1, r9
 8005504:	eb43 0b01 	adc.w	fp, r3, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551c:	4692      	mov	sl, r2
 800551e:	469b      	mov	fp, r3
 8005520:	4643      	mov	r3, r8
 8005522:	eb1a 0303 	adds.w	r3, sl, r3
 8005526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800552a:	464b      	mov	r3, r9
 800552c:	eb4b 0303 	adc.w	r3, fp, r3
 8005530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
 8005556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800555a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800555e:	f7fa fe97 	bl	8000290 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <UART_SetConfig+0x2d4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	; 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800557e:	4b36      	ldr	r3, [pc, #216]	; (8005658 <UART_SetConfig+0x2d4>)
 8005580:	fba3 2302 	umull	r2, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800558c:	441c      	add	r4, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800559c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a8:	415b      	adcs	r3, r3
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6339      	str	r1, [r7, #48]	; 0x30
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005604:	460b      	mov	r3, r1
 8005606:	18db      	adds	r3, r3, r3
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
 800560a:	4613      	mov	r3, r2
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800561a:	f7fa fe39 	bl	8000290 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <UART_SetConfig+0x2d4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	; 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a08      	ldr	r2, [pc, #32]	; (8005658 <UART_SetConfig+0x2d4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4422      	add	r2, r4
 800564a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800564c:	e105      	b.n	800585a <UART_SetConfig+0x4d6>
 800564e:	bf00      	nop
 8005650:	40011000 	.word	0x40011000
 8005654:	40011400 	.word	0x40011400
 8005658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800566a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	1891      	adds	r1, r2, r2
 8005674:	6239      	str	r1, [r7, #32]
 8005676:	415b      	adcs	r3, r3
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800567e:	4641      	mov	r1, r8
 8005680:	1854      	adds	r4, r2, r1
 8005682:	4649      	mov	r1, r9
 8005684:	eb43 0501 	adc.w	r5, r3, r1
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	00eb      	lsls	r3, r5, #3
 8005692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005696:	00e2      	lsls	r2, r4, #3
 8005698:	4614      	mov	r4, r2
 800569a:	461d      	mov	r5, r3
 800569c:	4643      	mov	r3, r8
 800569e:	18e3      	adds	r3, r4, r3
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a4:	464b      	mov	r3, r9
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056ca:	4629      	mov	r1, r5
 80056cc:	008b      	lsls	r3, r1, #2
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d4:	4621      	mov	r1, r4
 80056d6:	008a      	lsls	r2, r1, #2
 80056d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056dc:	f7fa fdd8 	bl	8000290 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b60      	ldr	r3, [pc, #384]	; (8005868 <UART_SetConfig+0x4e4>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011c      	lsls	r4, r3, #4
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	61b9      	str	r1, [r7, #24]
 8005708:	415b      	adcs	r3, r3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	4641      	mov	r1, r8
 8005712:	1851      	adds	r1, r2, r1
 8005714:	6139      	str	r1, [r7, #16]
 8005716:	4649      	mov	r1, r9
 8005718:	414b      	adcs	r3, r1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005728:	4659      	mov	r1, fp
 800572a:	00cb      	lsls	r3, r1, #3
 800572c:	4651      	mov	r1, sl
 800572e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005732:	4651      	mov	r1, sl
 8005734:	00ca      	lsls	r2, r1, #3
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	4603      	mov	r3, r0
 800573c:	4642      	mov	r2, r8
 800573e:	189b      	adds	r3, r3, r2
 8005740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005744:	464b      	mov	r3, r9
 8005746:	460a      	mov	r2, r1
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	67bb      	str	r3, [r7, #120]	; 0x78
 800575a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005768:	4649      	mov	r1, r9
 800576a:	008b      	lsls	r3, r1, #2
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005772:	4641      	mov	r1, r8
 8005774:	008a      	lsls	r2, r1, #2
 8005776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800577a:	f7fa fd89 	bl	8000290 <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4b39      	ldr	r3, [pc, #228]	; (8005868 <UART_SetConfig+0x4e4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <UART_SetConfig+0x4e4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a2:	441c      	add	r4, r3
 80057a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a8:	2200      	movs	r2, #0
 80057aa:	673b      	str	r3, [r7, #112]	; 0x70
 80057ac:	677a      	str	r2, [r7, #116]	; 0x74
 80057ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057b2:	4642      	mov	r2, r8
 80057b4:	464b      	mov	r3, r9
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c2:	4641      	mov	r1, r8
 80057c4:	1851      	adds	r1, r2, r1
 80057c6:	6039      	str	r1, [r7, #0]
 80057c8:	4649      	mov	r1, r9
 80057ca:	414b      	adcs	r3, r1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057da:	4659      	mov	r1, fp
 80057dc:	00cb      	lsls	r3, r1, #3
 80057de:	4651      	mov	r1, sl
 80057e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e4:	4651      	mov	r1, sl
 80057e6:	00ca      	lsls	r2, r1, #3
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	4603      	mov	r3, r0
 80057ee:	4642      	mov	r2, r8
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	663b      	str	r3, [r7, #96]	; 0x60
 8005808:	667a      	str	r2, [r7, #100]	; 0x64
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005816:	4649      	mov	r1, r9
 8005818:	008b      	lsls	r3, r1, #2
 800581a:	4641      	mov	r1, r8
 800581c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005820:	4641      	mov	r1, r8
 8005822:	008a      	lsls	r2, r1, #2
 8005824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005828:	f7fa fd32 	bl	8000290 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <UART_SetConfig+0x4e4>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <UART_SetConfig+0x4e4>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4422      	add	r2, r4
 8005858:	609a      	str	r2, [r3, #8]
}
 800585a:	bf00      	nop
 800585c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	51eb851f 	.word	0x51eb851f

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000010 	.word	0x20000010

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f000 fc8e 	bl	80061ac <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08006558 	.word	0x08006558
 80058b4:	08006558 	.word	0x08006558
 80058b8:	08006558 	.word	0x08006558
 80058bc:	0800655c 	.word	0x0800655c

080058c0 <memset>:
 80058c0:	4402      	add	r2, r0
 80058c2:	4603      	mov	r3, r0
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d100      	bne.n	80058ca <memset+0xa>
 80058c8:	4770      	bx	lr
 80058ca:	f803 1b01 	strb.w	r1, [r3], #1
 80058ce:	e7f9      	b.n	80058c4 <memset+0x4>

080058d0 <siprintf>:
 80058d0:	b40e      	push	{r1, r2, r3}
 80058d2:	b500      	push	{lr}
 80058d4:	b09c      	sub	sp, #112	; 0x70
 80058d6:	ab1d      	add	r3, sp, #116	; 0x74
 80058d8:	9002      	str	r0, [sp, #8]
 80058da:	9006      	str	r0, [sp, #24]
 80058dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058e0:	4809      	ldr	r0, [pc, #36]	; (8005908 <siprintf+0x38>)
 80058e2:	9107      	str	r1, [sp, #28]
 80058e4:	9104      	str	r1, [sp, #16]
 80058e6:	4909      	ldr	r1, [pc, #36]	; (800590c <siprintf+0x3c>)
 80058e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ec:	9105      	str	r1, [sp, #20]
 80058ee:	6800      	ldr	r0, [r0, #0]
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	a902      	add	r1, sp, #8
 80058f4:	f000 f868 	bl	80059c8 <_svfiprintf_r>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	b01c      	add	sp, #112	; 0x70
 8005900:	f85d eb04 	ldr.w	lr, [sp], #4
 8005904:	b003      	add	sp, #12
 8005906:	4770      	bx	lr
 8005908:	20000010 	.word	0x20000010
 800590c:	ffff0208 	.word	0xffff0208

08005910 <__ssputs_r>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	688e      	ldr	r6, [r1, #8]
 8005916:	429e      	cmp	r6, r3
 8005918:	4682      	mov	sl, r0
 800591a:	460c      	mov	r4, r1
 800591c:	4690      	mov	r8, r2
 800591e:	461f      	mov	r7, r3
 8005920:	d838      	bhi.n	8005994 <__ssputs_r+0x84>
 8005922:	898a      	ldrh	r2, [r1, #12]
 8005924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005928:	d032      	beq.n	8005990 <__ssputs_r+0x80>
 800592a:	6825      	ldr	r5, [r4, #0]
 800592c:	6909      	ldr	r1, [r1, #16]
 800592e:	eba5 0901 	sub.w	r9, r5, r1
 8005932:	6965      	ldr	r5, [r4, #20]
 8005934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800593c:	3301      	adds	r3, #1
 800593e:	444b      	add	r3, r9
 8005940:	106d      	asrs	r5, r5, #1
 8005942:	429d      	cmp	r5, r3
 8005944:	bf38      	it	cc
 8005946:	461d      	movcc	r5, r3
 8005948:	0553      	lsls	r3, r2, #21
 800594a:	d531      	bpl.n	80059b0 <__ssputs_r+0xa0>
 800594c:	4629      	mov	r1, r5
 800594e:	f000 fb63 	bl	8006018 <_malloc_r>
 8005952:	4606      	mov	r6, r0
 8005954:	b950      	cbnz	r0, 800596c <__ssputs_r+0x5c>
 8005956:	230c      	movs	r3, #12
 8005958:	f8ca 3000 	str.w	r3, [sl]
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	6921      	ldr	r1, [r4, #16]
 800596e:	464a      	mov	r2, r9
 8005970:	f000 fabe 	bl	8005ef0 <memcpy>
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800597a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	6126      	str	r6, [r4, #16]
 8005982:	6165      	str	r5, [r4, #20]
 8005984:	444e      	add	r6, r9
 8005986:	eba5 0509 	sub.w	r5, r5, r9
 800598a:	6026      	str	r6, [r4, #0]
 800598c:	60a5      	str	r5, [r4, #8]
 800598e:	463e      	mov	r6, r7
 8005990:	42be      	cmp	r6, r7
 8005992:	d900      	bls.n	8005996 <__ssputs_r+0x86>
 8005994:	463e      	mov	r6, r7
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	4632      	mov	r2, r6
 800599a:	4641      	mov	r1, r8
 800599c:	f000 fab6 	bl	8005f0c <memmove>
 80059a0:	68a3      	ldr	r3, [r4, #8]
 80059a2:	1b9b      	subs	r3, r3, r6
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4433      	add	r3, r6
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	2000      	movs	r0, #0
 80059ae:	e7db      	b.n	8005968 <__ssputs_r+0x58>
 80059b0:	462a      	mov	r2, r5
 80059b2:	f000 fba5 	bl	8006100 <_realloc_r>
 80059b6:	4606      	mov	r6, r0
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d1e1      	bne.n	8005980 <__ssputs_r+0x70>
 80059bc:	6921      	ldr	r1, [r4, #16]
 80059be:	4650      	mov	r0, sl
 80059c0:	f000 fabe 	bl	8005f40 <_free_r>
 80059c4:	e7c7      	b.n	8005956 <__ssputs_r+0x46>
	...

080059c8 <_svfiprintf_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	4698      	mov	r8, r3
 80059ce:	898b      	ldrh	r3, [r1, #12]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	b09d      	sub	sp, #116	; 0x74
 80059d4:	4607      	mov	r7, r0
 80059d6:	460d      	mov	r5, r1
 80059d8:	4614      	mov	r4, r2
 80059da:	d50e      	bpl.n	80059fa <_svfiprintf_r+0x32>
 80059dc:	690b      	ldr	r3, [r1, #16]
 80059de:	b963      	cbnz	r3, 80059fa <_svfiprintf_r+0x32>
 80059e0:	2140      	movs	r1, #64	; 0x40
 80059e2:	f000 fb19 	bl	8006018 <_malloc_r>
 80059e6:	6028      	str	r0, [r5, #0]
 80059e8:	6128      	str	r0, [r5, #16]
 80059ea:	b920      	cbnz	r0, 80059f6 <_svfiprintf_r+0x2e>
 80059ec:	230c      	movs	r3, #12
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e0d1      	b.n	8005b9a <_svfiprintf_r+0x1d2>
 80059f6:	2340      	movs	r3, #64	; 0x40
 80059f8:	616b      	str	r3, [r5, #20]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
 80059fe:	2320      	movs	r3, #32
 8005a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a08:	2330      	movs	r3, #48	; 0x30
 8005a0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bb4 <_svfiprintf_r+0x1ec>
 8005a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a12:	f04f 0901 	mov.w	r9, #1
 8005a16:	4623      	mov	r3, r4
 8005a18:	469a      	mov	sl, r3
 8005a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a1e:	b10a      	cbz	r2, 8005a24 <_svfiprintf_r+0x5c>
 8005a20:	2a25      	cmp	r2, #37	; 0x25
 8005a22:	d1f9      	bne.n	8005a18 <_svfiprintf_r+0x50>
 8005a24:	ebba 0b04 	subs.w	fp, sl, r4
 8005a28:	d00b      	beq.n	8005a42 <_svfiprintf_r+0x7a>
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff ff6d 	bl	8005910 <__ssputs_r>
 8005a36:	3001      	adds	r0, #1
 8005a38:	f000 80aa 	beq.w	8005b90 <_svfiprintf_r+0x1c8>
 8005a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a3e:	445a      	add	r2, fp
 8005a40:	9209      	str	r2, [sp, #36]	; 0x24
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a2 	beq.w	8005b90 <_svfiprintf_r+0x1c8>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a56:	f10a 0a01 	add.w	sl, sl, #1
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	9307      	str	r3, [sp, #28]
 8005a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a62:	931a      	str	r3, [sp, #104]	; 0x68
 8005a64:	4654      	mov	r4, sl
 8005a66:	2205      	movs	r2, #5
 8005a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6c:	4851      	ldr	r0, [pc, #324]	; (8005bb4 <_svfiprintf_r+0x1ec>)
 8005a6e:	f7fa fbbf 	bl	80001f0 <memchr>
 8005a72:	9a04      	ldr	r2, [sp, #16]
 8005a74:	b9d8      	cbnz	r0, 8005aae <_svfiprintf_r+0xe6>
 8005a76:	06d0      	lsls	r0, r2, #27
 8005a78:	bf44      	itt	mi
 8005a7a:	2320      	movmi	r3, #32
 8005a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a80:	0711      	lsls	r1, r2, #28
 8005a82:	bf44      	itt	mi
 8005a84:	232b      	movmi	r3, #43	; 0x2b
 8005a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a90:	d015      	beq.n	8005abe <_svfiprintf_r+0xf6>
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	4654      	mov	r4, sl
 8005a96:	2000      	movs	r0, #0
 8005a98:	f04f 0c0a 	mov.w	ip, #10
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa2:	3b30      	subs	r3, #48	; 0x30
 8005aa4:	2b09      	cmp	r3, #9
 8005aa6:	d94e      	bls.n	8005b46 <_svfiprintf_r+0x17e>
 8005aa8:	b1b0      	cbz	r0, 8005ad8 <_svfiprintf_r+0x110>
 8005aaa:	9207      	str	r2, [sp, #28]
 8005aac:	e014      	b.n	8005ad8 <_svfiprintf_r+0x110>
 8005aae:	eba0 0308 	sub.w	r3, r0, r8
 8005ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	46a2      	mov	sl, r4
 8005abc:	e7d2      	b.n	8005a64 <_svfiprintf_r+0x9c>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	1d19      	adds	r1, r3, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	9103      	str	r1, [sp, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfbb      	ittet	lt
 8005aca:	425b      	neglt	r3, r3
 8005acc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad0:	9307      	strge	r3, [sp, #28]
 8005ad2:	9307      	strlt	r3, [sp, #28]
 8005ad4:	bfb8      	it	lt
 8005ad6:	9204      	strlt	r2, [sp, #16]
 8005ad8:	7823      	ldrb	r3, [r4, #0]
 8005ada:	2b2e      	cmp	r3, #46	; 0x2e
 8005adc:	d10c      	bne.n	8005af8 <_svfiprintf_r+0x130>
 8005ade:	7863      	ldrb	r3, [r4, #1]
 8005ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae2:	d135      	bne.n	8005b50 <_svfiprintf_r+0x188>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	1d1a      	adds	r2, r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	9203      	str	r2, [sp, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfb8      	it	lt
 8005af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005af4:	3402      	adds	r4, #2
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bc4 <_svfiprintf_r+0x1fc>
 8005afc:	7821      	ldrb	r1, [r4, #0]
 8005afe:	2203      	movs	r2, #3
 8005b00:	4650      	mov	r0, sl
 8005b02:	f7fa fb75 	bl	80001f0 <memchr>
 8005b06:	b140      	cbz	r0, 8005b1a <_svfiprintf_r+0x152>
 8005b08:	2340      	movs	r3, #64	; 0x40
 8005b0a:	eba0 000a 	sub.w	r0, r0, sl
 8005b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	4303      	orrs	r3, r0
 8005b16:	3401      	adds	r4, #1
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1e:	4826      	ldr	r0, [pc, #152]	; (8005bb8 <_svfiprintf_r+0x1f0>)
 8005b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b24:	2206      	movs	r2, #6
 8005b26:	f7fa fb63 	bl	80001f0 <memchr>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d038      	beq.n	8005ba0 <_svfiprintf_r+0x1d8>
 8005b2e:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <_svfiprintf_r+0x1f4>)
 8005b30:	bb1b      	cbnz	r3, 8005b7a <_svfiprintf_r+0x1b2>
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	3307      	adds	r3, #7
 8005b36:	f023 0307 	bic.w	r3, r3, #7
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b40:	4433      	add	r3, r6
 8005b42:	9309      	str	r3, [sp, #36]	; 0x24
 8005b44:	e767      	b.n	8005a16 <_svfiprintf_r+0x4e>
 8005b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	e7a5      	b.n	8005a9c <_svfiprintf_r+0xd4>
 8005b50:	2300      	movs	r3, #0
 8005b52:	3401      	adds	r4, #1
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 0c0a 	mov.w	ip, #10
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b62:	3a30      	subs	r2, #48	; 0x30
 8005b64:	2a09      	cmp	r2, #9
 8005b66:	d903      	bls.n	8005b70 <_svfiprintf_r+0x1a8>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0c5      	beq.n	8005af8 <_svfiprintf_r+0x130>
 8005b6c:	9105      	str	r1, [sp, #20]
 8005b6e:	e7c3      	b.n	8005af8 <_svfiprintf_r+0x130>
 8005b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b74:	4604      	mov	r4, r0
 8005b76:	2301      	movs	r3, #1
 8005b78:	e7f0      	b.n	8005b5c <_svfiprintf_r+0x194>
 8005b7a:	ab03      	add	r3, sp, #12
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	462a      	mov	r2, r5
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <_svfiprintf_r+0x1f8>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	4638      	mov	r0, r7
 8005b86:	f3af 8000 	nop.w
 8005b8a:	1c42      	adds	r2, r0, #1
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	d1d6      	bne.n	8005b3e <_svfiprintf_r+0x176>
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	065b      	lsls	r3, r3, #25
 8005b94:	f53f af2c 	bmi.w	80059f0 <_svfiprintf_r+0x28>
 8005b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9a:	b01d      	add	sp, #116	; 0x74
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	ab03      	add	r3, sp, #12
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <_svfiprintf_r+0x1f8>)
 8005ba8:	a904      	add	r1, sp, #16
 8005baa:	4638      	mov	r0, r7
 8005bac:	f000 f87a 	bl	8005ca4 <_printf_i>
 8005bb0:	e7eb      	b.n	8005b8a <_svfiprintf_r+0x1c2>
 8005bb2:	bf00      	nop
 8005bb4:	0800651c 	.word	0x0800651c
 8005bb8:	08006526 	.word	0x08006526
 8005bbc:	00000000 	.word	0x00000000
 8005bc0:	08005911 	.word	0x08005911
 8005bc4:	08006522 	.word	0x08006522

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4616      	mov	r6, r2
 8005bce:	4699      	mov	r9, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfb8      	it	lt
 8005bdc:	4613      	movlt	r3, r2
 8005bde:	6033      	str	r3, [r6, #0]
 8005be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be4:	4607      	mov	r7, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	b10a      	cbz	r2, 8005bee <_printf_common+0x26>
 8005bea:	3301      	adds	r3, #1
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0699      	lsls	r1, r3, #26
 8005bf2:	bf42      	ittt	mi
 8005bf4:	6833      	ldrmi	r3, [r6, #0]
 8005bf6:	3302      	addmi	r3, #2
 8005bf8:	6033      	strmi	r3, [r6, #0]
 8005bfa:	6825      	ldr	r5, [r4, #0]
 8005bfc:	f015 0506 	ands.w	r5, r5, #6
 8005c00:	d106      	bne.n	8005c10 <_printf_common+0x48>
 8005c02:	f104 0a19 	add.w	sl, r4, #25
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	6832      	ldr	r2, [r6, #0]
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ab      	cmp	r3, r5
 8005c0e:	dc26      	bgt.n	8005c5e <_printf_common+0x96>
 8005c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c14:	1e13      	subs	r3, r2, #0
 8005c16:	6822      	ldr	r2, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	0692      	lsls	r2, r2, #26
 8005c1e:	d42b      	bmi.n	8005c78 <_printf_common+0xb0>
 8005c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c24:	4649      	mov	r1, r9
 8005c26:	4638      	mov	r0, r7
 8005c28:	47c0      	blx	r8
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d01e      	beq.n	8005c6c <_printf_common+0xa4>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	68e5      	ldr	r5, [r4, #12]
 8005c32:	6832      	ldr	r2, [r6, #0]
 8005c34:	f003 0306 	and.w	r3, r3, #6
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	bf08      	it	eq
 8005c3c:	1aad      	subeq	r5, r5, r2
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	6922      	ldr	r2, [r4, #16]
 8005c42:	bf0c      	ite	eq
 8005c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c48:	2500      	movne	r5, #0
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	bfc4      	itt	gt
 8005c4e:	1a9b      	subgt	r3, r3, r2
 8005c50:	18ed      	addgt	r5, r5, r3
 8005c52:	2600      	movs	r6, #0
 8005c54:	341a      	adds	r4, #26
 8005c56:	42b5      	cmp	r5, r6
 8005c58:	d11a      	bne.n	8005c90 <_printf_common+0xc8>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e008      	b.n	8005c70 <_printf_common+0xa8>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	4649      	mov	r1, r9
 8005c64:	4638      	mov	r0, r7
 8005c66:	47c0      	blx	r8
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d103      	bne.n	8005c74 <_printf_common+0xac>
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	3501      	adds	r5, #1
 8005c76:	e7c6      	b.n	8005c06 <_printf_common+0x3e>
 8005c78:	18e1      	adds	r1, r4, r3
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	2030      	movs	r0, #48	; 0x30
 8005c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c82:	4422      	add	r2, r4
 8005c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	e7c7      	b.n	8005c20 <_printf_common+0x58>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4622      	mov	r2, r4
 8005c94:	4649      	mov	r1, r9
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d0e6      	beq.n	8005c6c <_printf_common+0xa4>
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7d9      	b.n	8005c56 <_printf_common+0x8e>
	...

08005ca4 <_printf_i>:
 8005ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	7e0f      	ldrb	r7, [r1, #24]
 8005caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cac:	2f78      	cmp	r7, #120	; 0x78
 8005cae:	4691      	mov	r9, r2
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cba:	d807      	bhi.n	8005ccc <_printf_i+0x28>
 8005cbc:	2f62      	cmp	r7, #98	; 0x62
 8005cbe:	d80a      	bhi.n	8005cd6 <_printf_i+0x32>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	f000 80d8 	beq.w	8005e76 <_printf_i+0x1d2>
 8005cc6:	2f58      	cmp	r7, #88	; 0x58
 8005cc8:	f000 80a3 	beq.w	8005e12 <_printf_i+0x16e>
 8005ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cd4:	e03a      	b.n	8005d4c <_printf_i+0xa8>
 8005cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cda:	2b15      	cmp	r3, #21
 8005cdc:	d8f6      	bhi.n	8005ccc <_printf_i+0x28>
 8005cde:	a101      	add	r1, pc, #4	; (adr r1, 8005ce4 <_printf_i+0x40>)
 8005ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005ccd 	.word	0x08005ccd
 8005cf0:	08005ccd 	.word	0x08005ccd
 8005cf4:	08005ccd 	.word	0x08005ccd
 8005cf8:	08005ccd 	.word	0x08005ccd
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005ccd 	.word	0x08005ccd
 8005d04:	08005ccd 	.word	0x08005ccd
 8005d08:	08005ccd 	.word	0x08005ccd
 8005d0c:	08005ccd 	.word	0x08005ccd
 8005d10:	08005e5d 	.word	0x08005e5d
 8005d14:	08005d81 	.word	0x08005d81
 8005d18:	08005e3f 	.word	0x08005e3f
 8005d1c:	08005ccd 	.word	0x08005ccd
 8005d20:	08005ccd 	.word	0x08005ccd
 8005d24:	08005e7f 	.word	0x08005e7f
 8005d28:	08005ccd 	.word	0x08005ccd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005ccd 	.word	0x08005ccd
 8005d34:	08005ccd 	.word	0x08005ccd
 8005d38:	08005e47 	.word	0x08005e47
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	602a      	str	r2, [r5, #0]
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0a3      	b.n	8005e98 <_printf_i+0x1f4>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	6829      	ldr	r1, [r5, #0]
 8005d54:	0606      	lsls	r6, r0, #24
 8005d56:	f101 0304 	add.w	r3, r1, #4
 8005d5a:	d50a      	bpl.n	8005d72 <_printf_i+0xce>
 8005d5c:	680e      	ldr	r6, [r1, #0]
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	2e00      	cmp	r6, #0
 8005d62:	da03      	bge.n	8005d6c <_printf_i+0xc8>
 8005d64:	232d      	movs	r3, #45	; 0x2d
 8005d66:	4276      	negs	r6, r6
 8005d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6c:	485e      	ldr	r0, [pc, #376]	; (8005ee8 <_printf_i+0x244>)
 8005d6e:	230a      	movs	r3, #10
 8005d70:	e019      	b.n	8005da6 <_printf_i+0x102>
 8005d72:	680e      	ldr	r6, [r1, #0]
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d7a:	bf18      	it	ne
 8005d7c:	b236      	sxthne	r6, r6
 8005d7e:	e7ef      	b.n	8005d60 <_printf_i+0xbc>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	6029      	str	r1, [r5, #0]
 8005d88:	0601      	lsls	r1, r0, #24
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0xec>
 8005d8c:	681e      	ldr	r6, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <_printf_i+0xf2>
 8005d90:	0646      	lsls	r6, r0, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0xe8>
 8005d94:	881e      	ldrh	r6, [r3, #0]
 8005d96:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_printf_i+0x244>)
 8005d98:	2f6f      	cmp	r7, #111	; 0x6f
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2308      	moveq	r3, #8
 8005d9e:	230a      	movne	r3, #10
 8005da0:	2100      	movs	r1, #0
 8005da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da6:	6865      	ldr	r5, [r4, #4]
 8005da8:	60a5      	str	r5, [r4, #8]
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	bfa2      	ittt	ge
 8005dae:	6821      	ldrge	r1, [r4, #0]
 8005db0:	f021 0104 	bicge.w	r1, r1, #4
 8005db4:	6021      	strge	r1, [r4, #0]
 8005db6:	b90e      	cbnz	r6, 8005dbc <_printf_i+0x118>
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	d04d      	beq.n	8005e58 <_printf_i+0x1b4>
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005dc6:	5dc7      	ldrb	r7, [r0, r7]
 8005dc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dcc:	4637      	mov	r7, r6
 8005dce:	42bb      	cmp	r3, r7
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	d9f4      	bls.n	8005dbe <_printf_i+0x11a>
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10b      	bne.n	8005df0 <_printf_i+0x14c>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07de      	lsls	r6, r3, #31
 8005ddc:	d508      	bpl.n	8005df0 <_printf_i+0x14c>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	6861      	ldr	r1, [r4, #4]
 8005de2:	4299      	cmp	r1, r3
 8005de4:	bfde      	ittt	le
 8005de6:	2330      	movle	r3, #48	; 0x30
 8005de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005df0:	1b52      	subs	r2, r2, r5
 8005df2:	6122      	str	r2, [r4, #16]
 8005df4:	f8cd a000 	str.w	sl, [sp]
 8005df8:	464b      	mov	r3, r9
 8005dfa:	aa03      	add	r2, sp, #12
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4640      	mov	r0, r8
 8005e00:	f7ff fee2 	bl	8005bc8 <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d14c      	bne.n	8005ea2 <_printf_i+0x1fe>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	b004      	add	sp, #16
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	4835      	ldr	r0, [pc, #212]	; (8005ee8 <_printf_i+0x244>)
 8005e14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e18:	6829      	ldr	r1, [r5, #0]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e20:	6029      	str	r1, [r5, #0]
 8005e22:	061d      	lsls	r5, r3, #24
 8005e24:	d514      	bpl.n	8005e50 <_printf_i+0x1ac>
 8005e26:	07df      	lsls	r7, r3, #31
 8005e28:	bf44      	itt	mi
 8005e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e2e:	6023      	strmi	r3, [r4, #0]
 8005e30:	b91e      	cbnz	r6, 8005e3a <_printf_i+0x196>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	f023 0320 	bic.w	r3, r3, #32
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	e7b0      	b.n	8005da0 <_printf_i+0xfc>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f043 0320 	orr.w	r3, r3, #32
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	2378      	movs	r3, #120	; 0x78
 8005e48:	4828      	ldr	r0, [pc, #160]	; (8005eec <_printf_i+0x248>)
 8005e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e4e:	e7e3      	b.n	8005e18 <_printf_i+0x174>
 8005e50:	0659      	lsls	r1, r3, #25
 8005e52:	bf48      	it	mi
 8005e54:	b2b6      	uxthmi	r6, r6
 8005e56:	e7e6      	b.n	8005e26 <_printf_i+0x182>
 8005e58:	4615      	mov	r5, r2
 8005e5a:	e7bb      	b.n	8005dd4 <_printf_i+0x130>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	6826      	ldr	r6, [r4, #0]
 8005e60:	6961      	ldr	r1, [r4, #20]
 8005e62:	1d18      	adds	r0, r3, #4
 8005e64:	6028      	str	r0, [r5, #0]
 8005e66:	0635      	lsls	r5, r6, #24
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	d501      	bpl.n	8005e70 <_printf_i+0x1cc>
 8005e6c:	6019      	str	r1, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <_printf_i+0x1d2>
 8005e70:	0670      	lsls	r0, r6, #25
 8005e72:	d5fb      	bpl.n	8005e6c <_printf_i+0x1c8>
 8005e74:	8019      	strh	r1, [r3, #0]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	e7ba      	b.n	8005df4 <_printf_i+0x150>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	681d      	ldr	r5, [r3, #0]
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f7fa f9b0 	bl	80001f0 <memchr>
 8005e90:	b108      	cbz	r0, 8005e96 <_printf_i+0x1f2>
 8005e92:	1b40      	subs	r0, r0, r5
 8005e94:	6060      	str	r0, [r4, #4]
 8005e96:	6863      	ldr	r3, [r4, #4]
 8005e98:	6123      	str	r3, [r4, #16]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea0:	e7a8      	b.n	8005df4 <_printf_i+0x150>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	47d0      	blx	sl
 8005eac:	3001      	adds	r0, #1
 8005eae:	d0ab      	beq.n	8005e08 <_printf_i+0x164>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	079b      	lsls	r3, r3, #30
 8005eb4:	d413      	bmi.n	8005ede <_printf_i+0x23a>
 8005eb6:	68e0      	ldr	r0, [r4, #12]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	bfb8      	it	lt
 8005ebe:	4618      	movlt	r0, r3
 8005ec0:	e7a4      	b.n	8005e0c <_printf_i+0x168>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	4640      	mov	r0, r8
 8005eca:	47d0      	blx	sl
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d09b      	beq.n	8005e08 <_printf_i+0x164>
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	9903      	ldr	r1, [sp, #12]
 8005ed6:	1a5b      	subs	r3, r3, r1
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dcf2      	bgt.n	8005ec2 <_printf_i+0x21e>
 8005edc:	e7eb      	b.n	8005eb6 <_printf_i+0x212>
 8005ede:	2500      	movs	r5, #0
 8005ee0:	f104 0619 	add.w	r6, r4, #25
 8005ee4:	e7f5      	b.n	8005ed2 <_printf_i+0x22e>
 8005ee6:	bf00      	nop
 8005ee8:	0800652d 	.word	0x0800652d
 8005eec:	0800653e 	.word	0x0800653e

08005ef0 <memcpy>:
 8005ef0:	440a      	add	r2, r1
 8005ef2:	4291      	cmp	r1, r2
 8005ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef8:	d100      	bne.n	8005efc <memcpy+0xc>
 8005efa:	4770      	bx	lr
 8005efc:	b510      	push	{r4, lr}
 8005efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f06:	4291      	cmp	r1, r2
 8005f08:	d1f9      	bne.n	8005efe <memcpy+0xe>
 8005f0a:	bd10      	pop	{r4, pc}

08005f0c <memmove>:
 8005f0c:	4288      	cmp	r0, r1
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	eb01 0402 	add.w	r4, r1, r2
 8005f14:	d902      	bls.n	8005f1c <memmove+0x10>
 8005f16:	4284      	cmp	r4, r0
 8005f18:	4623      	mov	r3, r4
 8005f1a:	d807      	bhi.n	8005f2c <memmove+0x20>
 8005f1c:	1e43      	subs	r3, r0, #1
 8005f1e:	42a1      	cmp	r1, r4
 8005f20:	d008      	beq.n	8005f34 <memmove+0x28>
 8005f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f2a:	e7f8      	b.n	8005f1e <memmove+0x12>
 8005f2c:	4402      	add	r2, r0
 8005f2e:	4601      	mov	r1, r0
 8005f30:	428a      	cmp	r2, r1
 8005f32:	d100      	bne.n	8005f36 <memmove+0x2a>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f3e:	e7f7      	b.n	8005f30 <memmove+0x24>

08005f40 <_free_r>:
 8005f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d044      	beq.n	8005fd0 <_free_r+0x90>
 8005f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4a:	9001      	str	r0, [sp, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f52:	bfb8      	it	lt
 8005f54:	18e4      	addlt	r4, r4, r3
 8005f56:	f000 f913 	bl	8006180 <__malloc_lock>
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <_free_r+0x94>)
 8005f5c:	9801      	ldr	r0, [sp, #4]
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	b933      	cbnz	r3, 8005f70 <_free_r+0x30>
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6014      	str	r4, [r2, #0]
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f6c:	f000 b90e 	b.w	800618c <__malloc_unlock>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d908      	bls.n	8005f86 <_free_r+0x46>
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1961      	adds	r1, r4, r5
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	bf01      	itttt	eq
 8005f7c:	6819      	ldreq	r1, [r3, #0]
 8005f7e:	685b      	ldreq	r3, [r3, #4]
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	e7ed      	b.n	8005f62 <_free_r+0x22>
 8005f86:	461a      	mov	r2, r3
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b10b      	cbz	r3, 8005f90 <_free_r+0x50>
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x46>
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	1855      	adds	r5, r2, r1
 8005f94:	42a5      	cmp	r5, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x70>
 8005f98:	6824      	ldr	r4, [r4, #0]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	d1e0      	bne.n	8005f66 <_free_r+0x26>
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	4421      	add	r1, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7da      	b.n	8005f66 <_free_r+0x26>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x78>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	e7d6      	b.n	8005f66 <_free_r+0x26>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1949      	addeq	r1, r1, r5
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6054      	str	r4, [r2, #4]
 8005fce:	e7ca      	b.n	8005f66 <_free_r+0x26>
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	20000190 	.word	0x20000190

08005fd8 <sbrk_aligned>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4e0e      	ldr	r6, [pc, #56]	; (8006014 <sbrk_aligned+0x3c>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b911      	cbnz	r1, 8005fea <sbrk_aligned+0x12>
 8005fe4:	f000 f8bc 	bl	8006160 <_sbrk_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f8b7 	bl	8006160 <_sbrk_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <sbrk_aligned+0x34>
 8005ff6:	1cc4      	adds	r4, r0, #3
 8005ff8:	f024 0403 	bic.w	r4, r4, #3
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d007      	beq.n	8006010 <sbrk_aligned+0x38>
 8006000:	1a21      	subs	r1, r4, r0
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f8ac 	bl	8006160 <_sbrk_r>
 8006008:	3001      	adds	r0, #1
 800600a:	d101      	bne.n	8006010 <sbrk_aligned+0x38>
 800600c:	f04f 34ff 	mov.w	r4, #4294967295
 8006010:	4620      	mov	r0, r4
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	20000194 	.word	0x20000194

08006018 <_malloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	1ccd      	adds	r5, r1, #3
 800601e:	f025 0503 	bic.w	r5, r5, #3
 8006022:	3508      	adds	r5, #8
 8006024:	2d0c      	cmp	r5, #12
 8006026:	bf38      	it	cc
 8006028:	250c      	movcc	r5, #12
 800602a:	2d00      	cmp	r5, #0
 800602c:	4607      	mov	r7, r0
 800602e:	db01      	blt.n	8006034 <_malloc_r+0x1c>
 8006030:	42a9      	cmp	r1, r5
 8006032:	d905      	bls.n	8006040 <_malloc_r+0x28>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	2600      	movs	r6, #0
 800603a:	4630      	mov	r0, r6
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	4e2e      	ldr	r6, [pc, #184]	; (80060fc <_malloc_r+0xe4>)
 8006042:	f000 f89d 	bl	8006180 <__malloc_lock>
 8006046:	6833      	ldr	r3, [r6, #0]
 8006048:	461c      	mov	r4, r3
 800604a:	bb34      	cbnz	r4, 800609a <_malloc_r+0x82>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ffc2 	bl	8005fd8 <sbrk_aligned>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	4604      	mov	r4, r0
 8006058:	d14d      	bne.n	80060f6 <_malloc_r+0xde>
 800605a:	6834      	ldr	r4, [r6, #0]
 800605c:	4626      	mov	r6, r4
 800605e:	2e00      	cmp	r6, #0
 8006060:	d140      	bne.n	80060e4 <_malloc_r+0xcc>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	4631      	mov	r1, r6
 8006066:	4638      	mov	r0, r7
 8006068:	eb04 0803 	add.w	r8, r4, r3
 800606c:	f000 f878 	bl	8006160 <_sbrk_r>
 8006070:	4580      	cmp	r8, r0
 8006072:	d13a      	bne.n	80060ea <_malloc_r+0xd2>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	3503      	adds	r5, #3
 8006078:	1a6d      	subs	r5, r5, r1
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	4629      	mov	r1, r5
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ffa5 	bl	8005fd8 <sbrk_aligned>
 800608e:	3001      	adds	r0, #1
 8006090:	d02b      	beq.n	80060ea <_malloc_r+0xd2>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	442b      	add	r3, r5
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e00e      	b.n	80060b8 <_malloc_r+0xa0>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	d41e      	bmi.n	80060de <_malloc_r+0xc6>
 80060a0:	2a0b      	cmp	r2, #11
 80060a2:	d916      	bls.n	80060d2 <_malloc_r+0xba>
 80060a4:	1961      	adds	r1, r4, r5
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	bf18      	it	ne
 80060ac:	6059      	strne	r1, [r3, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	bf08      	it	eq
 80060b2:	6031      	streq	r1, [r6, #0]
 80060b4:	5162      	str	r2, [r4, r5]
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	4638      	mov	r0, r7
 80060ba:	f104 060b 	add.w	r6, r4, #11
 80060be:	f000 f865 	bl	800618c <__malloc_unlock>
 80060c2:	f026 0607 	bic.w	r6, r6, #7
 80060c6:	1d23      	adds	r3, r4, #4
 80060c8:	1af2      	subs	r2, r6, r3
 80060ca:	d0b6      	beq.n	800603a <_malloc_r+0x22>
 80060cc:	1b9b      	subs	r3, r3, r6
 80060ce:	50a3      	str	r3, [r4, r2]
 80060d0:	e7b3      	b.n	800603a <_malloc_r+0x22>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	bf0c      	ite	eq
 80060d8:	6032      	streq	r2, [r6, #0]
 80060da:	605a      	strne	r2, [r3, #4]
 80060dc:	e7ec      	b.n	80060b8 <_malloc_r+0xa0>
 80060de:	4623      	mov	r3, r4
 80060e0:	6864      	ldr	r4, [r4, #4]
 80060e2:	e7b2      	b.n	800604a <_malloc_r+0x32>
 80060e4:	4634      	mov	r4, r6
 80060e6:	6876      	ldr	r6, [r6, #4]
 80060e8:	e7b9      	b.n	800605e <_malloc_r+0x46>
 80060ea:	230c      	movs	r3, #12
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4638      	mov	r0, r7
 80060f0:	f000 f84c 	bl	800618c <__malloc_unlock>
 80060f4:	e7a1      	b.n	800603a <_malloc_r+0x22>
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	e7de      	b.n	80060b8 <_malloc_r+0xa0>
 80060fa:	bf00      	nop
 80060fc:	20000190 	.word	0x20000190

08006100 <_realloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	4680      	mov	r8, r0
 8006106:	4614      	mov	r4, r2
 8006108:	460e      	mov	r6, r1
 800610a:	b921      	cbnz	r1, 8006116 <_realloc_r+0x16>
 800610c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	4611      	mov	r1, r2
 8006112:	f7ff bf81 	b.w	8006018 <_malloc_r>
 8006116:	b92a      	cbnz	r2, 8006124 <_realloc_r+0x24>
 8006118:	f7ff ff12 	bl	8005f40 <_free_r>
 800611c:	4625      	mov	r5, r4
 800611e:	4628      	mov	r0, r5
 8006120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006124:	f000 f838 	bl	8006198 <_malloc_usable_size_r>
 8006128:	4284      	cmp	r4, r0
 800612a:	4607      	mov	r7, r0
 800612c:	d802      	bhi.n	8006134 <_realloc_r+0x34>
 800612e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006132:	d812      	bhi.n	800615a <_realloc_r+0x5a>
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff ff6e 	bl	8006018 <_malloc_r>
 800613c:	4605      	mov	r5, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	d0ed      	beq.n	800611e <_realloc_r+0x1e>
 8006142:	42bc      	cmp	r4, r7
 8006144:	4622      	mov	r2, r4
 8006146:	4631      	mov	r1, r6
 8006148:	bf28      	it	cs
 800614a:	463a      	movcs	r2, r7
 800614c:	f7ff fed0 	bl	8005ef0 <memcpy>
 8006150:	4631      	mov	r1, r6
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fef4 	bl	8005f40 <_free_r>
 8006158:	e7e1      	b.n	800611e <_realloc_r+0x1e>
 800615a:	4635      	mov	r5, r6
 800615c:	e7df      	b.n	800611e <_realloc_r+0x1e>
	...

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	; (800617c <_sbrk_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fb fa86 	bl	800167c <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000198 	.word	0x20000198

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__malloc_lock+0x8>)
 8006182:	f000 b811 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	2000019c 	.word	0x2000019c

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	; (8006194 <__malloc_unlock+0x8>)
 800618e:	f000 b80c 	b.w	80061aa <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	2000019c 	.word	0x2000019c

08006198 <_malloc_usable_size_r>:
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f18      	subs	r0, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfbc      	itt	lt
 80061a2:	580b      	ldrlt	r3, [r1, r0]
 80061a4:	18c0      	addlt	r0, r0, r3
 80061a6:	4770      	bx	lr

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
