
FRA222_COM3_68.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080090fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000080  08009178  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08009178  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f6d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00035019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018828  00000000  00000000  00039b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016305  00000000  00000000  00052360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9c4  00000000  00000000  00068665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0010707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cac 	.word	0x08008cac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008cac 	.word	0x08008cac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 fde2 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fa06 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f9ba 	bl	800091c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f8e2 	bl	8000770 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005ac:	f000 f90e 	bl	80007cc <MX_SPI3_Init>
  MX_TIM3_Init();
 80005b0:	f000 f942 	bl	8000838 <MX_TIM3_Init>
  MX_DMA_Init();
 80005b4:	f000 f9dc 	bl	8000970 <MX_DMA_Init>
  MX_TIM11_Init();
 80005b8:	f000 f98c 	bl	80008d4 <MX_TIM11_Init>
  MX_ADC1_Init();
 80005bc:	f000 f884 	bl	80006c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f001 fe3f 	bl	8002244 <HAL_Delay>
  MCP23017SetInit();
 80005c6:	f001 fa01 	bl	80019cc <MCP23017SetInit>
	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x54>)
 80005cc:	f006 fa60 	bl	8006a90 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x58>)
 80005d2:	f006 fa5d 	bl	8006a90 <HAL_TIM_Base_Start_IT>
	// Start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4905      	ldr	r1, [pc, #20]	; (80005f0 <main+0x5c>)
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x60>)
 80005dc:	f001 ffaa 	bl	8002534 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  StateMachineManagment();
 80005e0:	f000 fa6c 	bl	8000abc <StateMachineManagment>
 80005e4:	e7fc      	b.n	80005e0 <main+0x4c>
 80005e6:	bf00      	nop
 80005e8:	200001f0 	.word	0x200001f0
 80005ec:	20000238 	.word	0x20000238
 80005f0:	20000338 	.word	0x20000338
 80005f4:	2000009c 	.word	0x2000009c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 feda 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f005 f97b 	bl	8005978 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f001 fab6 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2103      	movs	r1, #3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fbdd 	bl	8005e68 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f001 faa0 	bl	8001bf8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <MX_ADC1_Init+0xa0>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ADC1_Init+0x9c>)
 8000704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_ADC1_Init+0x9c>)
 800070c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x9c>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC1_Init+0x9c>)
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x9c>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x9c>)
 800072e:	f001 fdad 	bl	800228c <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000738:	f001 fa5e 	bl	8001bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_ADC1_Init+0xa4>)
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x9c>)
 800074e:	f002 f809 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000758:	f001 fa4e 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009c 	.word	0x2000009c
 8000768:	40012000 	.word	0x40012000
 800076c:	10000012 	.word	0x10000012

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f003 f953 	bl	8003a58 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f001 fa1e 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000144 	.word	0x20000144
 80007c4:	40005400 	.word	0x40005400
 80007c8:	00061a80 	.word	0x00061a80

080007cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI3_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI3_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI3_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI3_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI3_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI3_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI3_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI3_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI3_Init+0x64>)
 8000800:	2230      	movs	r2, #48	; 0x30
 8000802:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI3_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI3_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI3_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI3_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI3_Init+0x64>)
 800081e:	f005 fd43 	bl	80062a8 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000828:	f001 f9e6 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000198 	.word	0x20000198
 8000834:	40003c00 	.word	0x40003c00

08000838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_TIM3_Init+0x94>)
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <MX_TIM3_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_TIM3_Init+0x94>)
 800085c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_TIM3_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_TIM3_Init+0x94>)
 800086a:	f242 7210 	movw	r2, #10000	; 0x2710
 800086e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_TIM3_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM3_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_TIM3_Init+0x94>)
 800087e:	f006 f8b7 	bl	80069f0 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000888:	f001 f9b6 	bl	8001bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_TIM3_Init+0x94>)
 800089a:	f006 fa63 	bl	8006d64 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008a4:	f001 f9a8 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a8:	2320      	movs	r3, #32
 80008aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM3_Init+0x94>)
 80008b6:	f006 fc5f 	bl	8007178 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f001 f99a 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001f0 	.word	0x200001f0
 80008d0:	40000400 	.word	0x40000400

080008d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_TIM11_Init+0x40>)
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_TIM11_Init+0x44>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_TIM11_Init+0x40>)
 80008e0:	2263      	movs	r2, #99	; 0x63
 80008e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_TIM11_Init+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_TIM11_Init+0x40>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_TIM11_Init+0x40>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_TIM11_Init+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_TIM11_Init+0x40>)
 8000900:	f006 f876 	bl	80069f0 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800090a:	f001 f975 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000238 	.word	0x20000238
 8000918:	40014800 	.word	0x40014800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f006 fc92 	bl	800727c <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f001 f94b 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000280 	.word	0x20000280
 800096c:	40004400 	.word	0x40004400

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_DMA_Init+0x3c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <MX_DMA_Init+0x3c>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_DMA_Init+0x3c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2038      	movs	r0, #56	; 0x38
 8000998:	f002 fa79 	bl	8002e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800099c:	2038      	movs	r0, #56	; 0x38
 800099e:	f002 fa92 	bl	8002ec6 <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a37      	ldr	r2, [pc, #220]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a30      	ldr	r2, [pc, #192]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_GPIO_Init+0xfc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a22      	ldr	r2, [pc, #136]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a3c:	f002 fff2 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a46:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0x104>)
 8000a48:	f002 ffec 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a64:	f002 fe5a 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a80:	f002 fe4c 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8000a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_GPIO_Init+0x104>)
 8000a9e:	f002 fe3d 	bl	800371c <HAL_GPIO_Init>

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800

08000abc <StateMachineManagment>:

/* USER CODE BEGIN 4 */
void StateMachineManagment()
{
 8000abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af02      	add	r7, sp, #8
	switch (MCState)
 8000ac4:	4ba4      	ldr	r3, [pc, #656]	; (8000d58 <StateMachineManagment+0x29c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	f200 873b 	bhi.w	8001944 <StateMachineManagment+0xe88>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <StateMachineManagment+0x18>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000ba7 	.word	0x08000ba7
 8000adc:	08000ed5 	.word	0x08000ed5
 8000ae0:	080014cf 	.word	0x080014cf
 8000ae4:	08000e99 	.word	0x08000e99
 8000ae8:	08000db5 	.word	0x08000db5
	{
		case init:
			// Header
			sprintf(TxDataBuffer, "\r\n---Program Start---\r\n");
 8000aec:	499b      	ldr	r1, [pc, #620]	; (8000d5c <StateMachineManagment+0x2a0>)
 8000aee:	489c      	ldr	r0, [pc, #624]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000af0:	f007 fc6e 	bl	80083d0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000af4:	489a      	ldr	r0, [pc, #616]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000af6:	f7ff fb73 	bl	80001e0 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	4997      	ldr	r1, [pc, #604]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000b04:	4897      	ldr	r0, [pc, #604]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000b06:	f006 fc06 	bl	8007316 <HAL_UART_Transmit>
			// Main
			// SET PSI
			MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 8000b0a:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <StateMachineManagment+0x2ac>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4a97      	ldr	r2, [pc, #604]	; (8000d6c <StateMachineManagment+0x2b0>)
 8000b10:	7811      	ldrb	r1, [r2, #0]
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 ff31 	bl	800197c <MCP23017SetOutput>
			// State init
			ParamEditState = UserChooseWhatToDo;
 8000b1a:	4b95      	ldr	r3, [pc, #596]	; (8000d70 <StateMachineManagment+0x2b4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			StantionChoosingState = UserChooseStation;
 8000b20:	4b94      	ldr	r3, [pc, #592]	; (8000d74 <StateMachineManagment+0x2b8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
			// Init Robot
			Robot.WaitingTime = 0;
 8000b26:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = 0;
 8000b2c:	4b92      	ldr	r3, [pc, #584]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = 0;
 8000b32:	4b91      	ldr	r3, [pc, #580]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = 0;
 8000b38:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	715a      	strb	r2, [r3, #5]
			// EEPROM READ
			eepromReadFlag = 1;
 8000b3e:	4b8f      	ldr	r3, [pc, #572]	; (8000d7c <StateMachineManagment+0x2c0>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
			dataLen = 3;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <StateMachineManagment+0x2c4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	801a      	strh	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000b4a:	4b8d      	ldr	r3, [pc, #564]	; (8000d80 <StateMachineManagment+0x2c4>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	220a      	movs	r2, #10
 8000b50:	4619      	mov	r1, r3
 8000b52:	488c      	ldr	r0, [pc, #560]	; (8000d84 <StateMachineManagment+0x2c8>)
 8000b54:	f000 ff8e 	bl	8001a74 <EEPROMReadFcn>
			// Wait for Data
			HAL_Delay(100);
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f001 fb73 	bl	8002244 <HAL_Delay>
			// Wait for Data
			Robot.WaitingTime = eepromDataReadBack[0];
 8000b5e:	4b89      	ldr	r3, [pc, #548]	; (8000d84 <StateMachineManagment+0x2c8>)
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	4b85      	ldr	r3, [pc, #532]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b64:	70da      	strb	r2, [r3, #3]
			Robot.OperationTime = eepromDataReadBack[1];
 8000b66:	4b87      	ldr	r3, [pc, #540]	; (8000d84 <StateMachineManagment+0x2c8>)
 8000b68:	785a      	ldrb	r2, [r3, #1]
 8000b6a:	4b83      	ldr	r3, [pc, #524]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b6c:	711a      	strb	r2, [r3, #4]
			Robot.StartStation = eepromDataReadBack[2];
 8000b6e:	4b85      	ldr	r3, [pc, #532]	; (8000d84 <StateMachineManagment+0x2c8>)
 8000b70:	789a      	ldrb	r2, [r3, #2]
 8000b72:	4b81      	ldr	r3, [pc, #516]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b74:	719a      	strb	r2, [r3, #6]
			Robot.EndStation = eepromDataReadBack[2];
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <StateMachineManagment+0x2c8>)
 8000b78:	789a      	ldrb	r2, [r3, #2]
 8000b7a:	4b7f      	ldr	r3, [pc, #508]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b7c:	715a      	strb	r2, [r3, #5]
			Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b80:	78da      	ldrb	r2, [r3, #3]
 8000b82:	4b7d      	ldr	r3, [pc, #500]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b84:	701a      	strb	r2, [r3, #0]
			Robot.OperationTimeBuffer = Robot.OperationTime;
 8000b86:	4b7c      	ldr	r3, [pc, #496]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b88:	791a      	ldrb	r2, [r3, #4]
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b8c:	705a      	strb	r2, [r3, #1]
			Robot.EndStationBuffer = Robot.EndStation;
 8000b8e:	4b7a      	ldr	r3, [pc, #488]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b90:	795a      	ldrb	r2, [r3, #5]
 8000b92:	4b79      	ldr	r3, [pc, #484]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000b94:	709a      	strb	r2, [r3, #2]
			// End
			flagUART = 0;
 8000b96:	4b7c      	ldr	r3, [pc, #496]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000b9c:	4b6e      	ldr	r3, [pc, #440]	; (8000d58 <StateMachineManagment+0x29c>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
			break;
 8000ba2:	f000 becf 	b.w	8001944 <StateMachineManagment+0xe88>
		case StanBy:
			// Header
			if(flagUART == 0){
 8000ba6:	4b78      	ldr	r3, [pc, #480]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 8085 	bne.w	8000cbc <StateMachineManagment+0x200>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000bb2:	4976      	ldr	r1, [pc, #472]	; (8000d8c <StateMachineManagment+0x2d0>)
 8000bb4:	486a      	ldr	r0, [pc, #424]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bb6:	f007 fc0b 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bba:	4869      	ldr	r0, [pc, #420]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bbc:	f7ff fb10 	bl	80001e0 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	4965      	ldr	r1, [pc, #404]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bca:	4866      	ldr	r0, [pc, #408]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000bcc:	f006 fba3 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nPlease Select Mode\r\n");
 8000bd0:	496f      	ldr	r1, [pc, #444]	; (8000d90 <StateMachineManagment+0x2d4>)
 8000bd2:	4863      	ldr	r0, [pc, #396]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bd4:	f007 fbfc 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000bd8:	4861      	ldr	r0, [pc, #388]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bda:	f7ff fb01 	bl	80001e0 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	495e      	ldr	r1, [pc, #376]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000be8:	485e      	ldr	r0, [pc, #376]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000bea:	f006 fb94 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000bee:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	4966      	ldr	r1, [pc, #408]	; (8000d94 <StateMachineManagment+0x2d8>)
 8000bfa:	4859      	ldr	r0, [pc, #356]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000bfc:	f007 fbe8 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c00:	4857      	ldr	r0, [pc, #348]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c02:	f7ff faed 	bl	80001e0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	4954      	ldr	r1, [pc, #336]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000c12:	f006 fb80 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000c16:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <StateMachineManagment+0x2bc>)
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	495d      	ldr	r1, [pc, #372]	; (8000d98 <StateMachineManagment+0x2dc>)
 8000c22:	484f      	ldr	r0, [pc, #316]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c24:	f007 fbd4 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c28:	484d      	ldr	r0, [pc, #308]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c2a:	f7ff fad9 	bl	80001e0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	494a      	ldr	r1, [pc, #296]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c38:	484a      	ldr	r0, [pc, #296]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000c3a:	f006 fb6c 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n+Type 1 for Robot Parameter Setting\r\n");
 8000c3e:	4957      	ldr	r1, [pc, #348]	; (8000d9c <StateMachineManagment+0x2e0>)
 8000c40:	4847      	ldr	r0, [pc, #284]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c42:	f007 fbc5 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c46:	4846      	ldr	r0, [pc, #280]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c48:	f7ff faca 	bl	80001e0 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c54:	4942      	ldr	r1, [pc, #264]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c56:	4843      	ldr	r0, [pc, #268]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000c58:	f006 fb5d 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 2 for Choosing Destination Station\r\n");
 8000c5c:	4950      	ldr	r1, [pc, #320]	; (8000da0 <StateMachineManagment+0x2e4>)
 8000c5e:	4840      	ldr	r0, [pc, #256]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c60:	f007 fbb6 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c64:	483e      	ldr	r0, [pc, #248]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c66:	f7ff fabb 	bl	80001e0 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	493b      	ldr	r1, [pc, #236]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c74:	483b      	ldr	r0, [pc, #236]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000c76:	f006 fb4e 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "+Type 3 for EEPROM READ\r\n");
 8000c7a:	494a      	ldr	r1, [pc, #296]	; (8000da4 <StateMachineManagment+0x2e8>)
 8000c7c:	4838      	ldr	r0, [pc, #224]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c7e:	f007 fba7 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000c82:	4837      	ldr	r0, [pc, #220]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c84:	f7ff faac 	bl	80001e0 <strlen>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	4933      	ldr	r1, [pc, #204]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c92:	4834      	ldr	r0, [pc, #208]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000c94:	f006 fb3f 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000c98:	493c      	ldr	r1, [pc, #240]	; (8000d8c <StateMachineManagment+0x2d0>)
 8000c9a:	4831      	ldr	r0, [pc, #196]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000c9c:	f007 fb98 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000ca0:	482f      	ldr	r0, [pc, #188]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000ca2:	f7ff fa9d 	bl	80001e0 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	492c      	ldr	r1, [pc, #176]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000cb0:	482c      	ldr	r0, [pc, #176]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000cb2:	f006 fb30 	bl	8007316 <HAL_UART_Transmit>
				flagUART = 1;
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
			}
			// Main
			HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	493a      	ldr	r1, [pc, #232]	; (8000da8 <StateMachineManagment+0x2ec>)
 8000cc0:	4828      	ldr	r0, [pc, #160]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000cc2:	f006 fbba 	bl	800743a <HAL_UART_Receive_IT>
			inputchar = UARTRecieveIT();
 8000cc6:	f000 fefd 	bl	8001ac4 <UARTRecieveIT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <StateMachineManagment+0x2f0>)
 8000cd0:	801a      	strh	r2, [r3, #0]
			if(inputchar!=-1)
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <StateMachineManagment+0x2f0>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	f000 862d 	beq.w	800193a <StateMachineManagment+0xe7e>
			{
				if(inputchar == '1')
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <StateMachineManagment+0x2f0>)
 8000ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce6:	2b31      	cmp	r3, #49	; 0x31
 8000ce8:	d107      	bne.n	8000cfa <StateMachineManagment+0x23e>
				{
					flagUART = 0;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
					MCState = ParamSetting;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <StateMachineManagment+0x29c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
					flagUART = 0;
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
				}
			}
			break;
 8000cf6:	f000 be20 	b.w	800193a <StateMachineManagment+0xe7e>
				else if(inputchar == '2')
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <StateMachineManagment+0x2f0>)
 8000cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d00:	2b32      	cmp	r3, #50	; 0x32
 8000d02:	d107      	bne.n	8000d14 <StateMachineManagment+0x258>
					flagUART = 0;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
					MCState = StantionChoosing;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <StateMachineManagment+0x29c>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	701a      	strb	r2, [r3, #0]
			break;
 8000d10:	f000 be13 	b.w	800193a <StateMachineManagment+0xe7e>
				else if(inputchar == '3')
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <StateMachineManagment+0x2f0>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	2b33      	cmp	r3, #51	; 0x33
 8000d1c:	d107      	bne.n	8000d2e <StateMachineManagment+0x272>
					flagUART = 0;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
					MCState = EEpromReadState;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <StateMachineManagment+0x29c>)
 8000d26:	2205      	movs	r2, #5
 8000d28:	701a      	strb	r2, [r3, #0]
			break;
 8000d2a:	f000 be06 	b.w	800193a <StateMachineManagment+0xe7e>
					flagUART = 0;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <StateMachineManagment+0x2cc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
					sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 8000d34:	491e      	ldr	r1, [pc, #120]	; (8000db0 <StateMachineManagment+0x2f4>)
 8000d36:	480a      	ldr	r0, [pc, #40]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000d38:	f007 fb4a 	bl	80083d0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000d3e:	f7ff fa4f 	bl	80001e0 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <StateMachineManagment+0x2a4>)
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <StateMachineManagment+0x2a8>)
 8000d4e:	f006 fae2 	bl	8007316 <HAL_UART_Transmit>
			break;
 8000d52:	f000 bdf2 	b.w	800193a <StateMachineManagment+0xe7e>
 8000d56:	bf00      	nop
 8000d58:	200002df 	.word	0x200002df
 8000d5c:	08008cc4 	.word	0x08008cc4
 8000d60:	200002e4 	.word	0x200002e4
 8000d64:	20000280 	.word	0x20000280
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	20000005 	.word	0x20000005
 8000d70:	200002e0 	.word	0x200002e0
 8000d74:	200002e1 	.word	0x200002e1
 8000d78:	200002d8 	.word	0x200002d8
 8000d7c:	20000329 	.word	0x20000329
 8000d80:	20000002 	.word	0x20000002
 8000d84:	2000032c 	.word	0x2000032c
 8000d88:	20000324 	.word	0x20000324
 8000d8c:	08008cdc 	.word	0x08008cdc
 8000d90:	08008cfc 	.word	0x08008cfc
 8000d94:	08008d14 	.word	0x08008d14
 8000d98:	08008d48 	.word	0x08008d48
 8000d9c:	08008d70 	.word	0x08008d70
 8000da0:	08008d98 	.word	0x08008d98
 8000da4:	08008dc4 	.word	0x08008dc4
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000326 	.word	0x20000326
 8000db0:	08008de0 	.word	0x08008de0
		case EEpromReadState:
			// Header
			if(flagUART == 0){
 8000db4:	4baf      	ldr	r3, [pc, #700]	; (8001074 <StateMachineManagment+0x5b8>)
 8000db6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12f      	bne.n	8000e1e <StateMachineManagment+0x362>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000dbe:	49ae      	ldr	r1, [pc, #696]	; (8001078 <StateMachineManagment+0x5bc>)
 8000dc0:	48ae      	ldr	r0, [pc, #696]	; (800107c <StateMachineManagment+0x5c0>)
 8000dc2:	f007 fb05 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000dc6:	48ad      	ldr	r0, [pc, #692]	; (800107c <StateMachineManagment+0x5c0>)
 8000dc8:	f7ff fa0a 	bl	80001e0 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd4:	49a9      	ldr	r1, [pc, #676]	; (800107c <StateMachineManagment+0x5c0>)
 8000dd6:	48aa      	ldr	r0, [pc, #680]	; (8001080 <StateMachineManagment+0x5c4>)
 8000dd8:	f006 fa9d 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\nEEPROM is Operating\r\n");
 8000ddc:	49a9      	ldr	r1, [pc, #676]	; (8001084 <StateMachineManagment+0x5c8>)
 8000dde:	48a7      	ldr	r0, [pc, #668]	; (800107c <StateMachineManagment+0x5c0>)
 8000de0:	f007 faf6 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000de4:	48a5      	ldr	r0, [pc, #660]	; (800107c <StateMachineManagment+0x5c0>)
 8000de6:	f7ff f9fb 	bl	80001e0 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	49a2      	ldr	r1, [pc, #648]	; (800107c <StateMachineManagment+0x5c0>)
 8000df4:	48a2      	ldr	r0, [pc, #648]	; (8001080 <StateMachineManagment+0x5c4>)
 8000df6:	f006 fa8e 	bl	8007316 <HAL_UART_Transmit>
				sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000dfa:	499f      	ldr	r1, [pc, #636]	; (8001078 <StateMachineManagment+0x5bc>)
 8000dfc:	489f      	ldr	r0, [pc, #636]	; (800107c <StateMachineManagment+0x5c0>)
 8000dfe:	f007 fae7 	bl	80083d0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e02:	489e      	ldr	r0, [pc, #632]	; (800107c <StateMachineManagment+0x5c0>)
 8000e04:	f7ff f9ec 	bl	80001e0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e10:	499a      	ldr	r1, [pc, #616]	; (800107c <StateMachineManagment+0x5c0>)
 8000e12:	489b      	ldr	r0, [pc, #620]	; (8001080 <StateMachineManagment+0x5c4>)
 8000e14:	f006 fa7f 	bl	8007316 <HAL_UART_Transmit>
				flagUART = 1;
 8000e18:	4b96      	ldr	r3, [pc, #600]	; (8001074 <StateMachineManagment+0x5b8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
			}
			eepromReadFlag = 1;
 8000e1e:	4b9a      	ldr	r3, [pc, #616]	; (8001088 <StateMachineManagment+0x5cc>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
			EEPROMReadFcn(eepromDataReadBack,dataLen,WAIT_ADDR);
 8000e24:	4b99      	ldr	r3, [pc, #612]	; (800108c <StateMachineManagment+0x5d0>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	220a      	movs	r2, #10
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4898      	ldr	r0, [pc, #608]	; (8001090 <StateMachineManagment+0x5d4>)
 8000e2e:	f000 fe21 	bl	8001a74 <EEPROMReadFcn>
			HAL_Delay(100);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f001 fa06 	bl	8002244 <HAL_Delay>
			sprintf(TxDataBuffer, "\r\nWaitingTime:[%d] OperationTime[%d] EndStation[%d]", eepromDataReadBack[0], eepromDataReadBack[1],eepromDataReadBack[2]);
 8000e38:	4b95      	ldr	r3, [pc, #596]	; (8001090 <StateMachineManagment+0x5d4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b94      	ldr	r3, [pc, #592]	; (8001090 <StateMachineManagment+0x5d4>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4b92      	ldr	r3, [pc, #584]	; (8001090 <StateMachineManagment+0x5d4>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4991      	ldr	r1, [pc, #580]	; (8001094 <StateMachineManagment+0x5d8>)
 8000e4e:	488b      	ldr	r0, [pc, #556]	; (800107c <StateMachineManagment+0x5c0>)
 8000e50:	f007 fabe 	bl	80083d0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e54:	4889      	ldr	r0, [pc, #548]	; (800107c <StateMachineManagment+0x5c0>)
 8000e56:	f7ff f9c3 	bl	80001e0 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	4986      	ldr	r1, [pc, #536]	; (800107c <StateMachineManagment+0x5c0>)
 8000e64:	4886      	ldr	r0, [pc, #536]	; (8001080 <StateMachineManagment+0x5c4>)
 8000e66:	f006 fa56 	bl	8007316 <HAL_UART_Transmit>
			sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000e6a:	4983      	ldr	r1, [pc, #524]	; (8001078 <StateMachineManagment+0x5bc>)
 8000e6c:	4883      	ldr	r0, [pc, #524]	; (800107c <StateMachineManagment+0x5c0>)
 8000e6e:	f007 faaf 	bl	80083d0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e72:	4882      	ldr	r0, [pc, #520]	; (800107c <StateMachineManagment+0x5c0>)
 8000e74:	f7ff f9b4 	bl	80001e0 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	497e      	ldr	r1, [pc, #504]	; (800107c <StateMachineManagment+0x5c0>)
 8000e82:	487f      	ldr	r0, [pc, #508]	; (8001080 <StateMachineManagment+0x5c4>)
 8000e84:	f006 fa47 	bl	8007316 <HAL_UART_Transmit>
			flagUART = 0;
 8000e88:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <StateMachineManagment+0x5b8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000e8e:	4b82      	ldr	r3, [pc, #520]	; (8001098 <StateMachineManagment+0x5dc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
			break;
 8000e94:	f000 bd56 	b.w	8001944 <StateMachineManagment+0xe88>
		case EEpromWriteState:
			eepromWriteFlag = 1;
 8000e98:	4b80      	ldr	r3, [pc, #512]	; (800109c <StateMachineManagment+0x5e0>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			Senddata[0] = Robot.WaitingTime;
 8000e9e:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000ea0:	78da      	ldrb	r2, [r3, #3]
 8000ea2:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <StateMachineManagment+0x5e8>)
 8000ea4:	701a      	strb	r2, [r3, #0]
			Senddata[1] = Robot.OperationTime;
 8000ea6:	4b7e      	ldr	r3, [pc, #504]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000ea8:	791a      	ldrb	r2, [r3, #4]
 8000eaa:	4b7e      	ldr	r3, [pc, #504]	; (80010a4 <StateMachineManagment+0x5e8>)
 8000eac:	705a      	strb	r2, [r3, #1]
			Senddata[2] = Robot.EndStation;
 8000eae:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000eb0:	795a      	ldrb	r2, [r3, #5]
 8000eb2:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <StateMachineManagment+0x5e8>)
 8000eb4:	709a      	strb	r2, [r3, #2]
			EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8000eb6:	4b75      	ldr	r3, [pc, #468]	; (800108c <StateMachineManagment+0x5d0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	220a      	movs	r2, #10
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4879      	ldr	r0, [pc, #484]	; (80010a4 <StateMachineManagment+0x5e8>)
 8000ec0:	f000 fdb0 	bl	8001a24 <EEPROMWriteFcn>
			flagUART = 0;
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <StateMachineManagment+0x5b8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			MCState = StanBy;
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <StateMachineManagment+0x5dc>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
			break;
 8000ed0:	f000 bd38 	b.w	8001944 <StateMachineManagment+0xe88>
		case ParamSetting:
			// Sub-state
			switch (ParamEditState)
 8000ed4:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <StateMachineManagment+0x5ec>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f000 8233 	beq.w	8001344 <StateMachineManagment+0x888>
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	f300 852d 	bgt.w	800193e <StateMachineManagment+0xe82>
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <StateMachineManagment+0x436>
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	f000 8146 	beq.w	800117a <StateMachineManagment+0x6be>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
			}
			break;
 8000eee:	f000 bd26 	b.w	800193e <StateMachineManagment+0xe82>
					if(flagUART == 0){
 8000ef2:	4b60      	ldr	r3, [pc, #384]	; (8001074 <StateMachineManagment+0x5b8>)
 8000ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 8094 	bne.w	8001026 <StateMachineManagment+0x56a>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8000efe:	495e      	ldr	r1, [pc, #376]	; (8001078 <StateMachineManagment+0x5bc>)
 8000f00:	485e      	ldr	r0, [pc, #376]	; (800107c <StateMachineManagment+0x5c0>)
 8000f02:	f007 fa65 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f06:	485d      	ldr	r0, [pc, #372]	; (800107c <StateMachineManagment+0x5c0>)
 8000f08:	f7ff f96a 	bl	80001e0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f14:	4959      	ldr	r1, [pc, #356]	; (800107c <StateMachineManagment+0x5c0>)
 8000f16:	485a      	ldr	r0, [pc, #360]	; (8001080 <StateMachineManagment+0x5c4>)
 8000f18:	f006 f9fd 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nPlease Select Parameter to edit\r\n");
 8000f1c:	4963      	ldr	r1, [pc, #396]	; (80010ac <StateMachineManagment+0x5f0>)
 8000f1e:	4857      	ldr	r0, [pc, #348]	; (800107c <StateMachineManagment+0x5c0>)
 8000f20:	f007 fa56 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f24:	4855      	ldr	r0, [pc, #340]	; (800107c <StateMachineManagment+0x5c0>)
 8000f26:	f7ff f95b 	bl	80001e0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	4952      	ldr	r1, [pc, #328]	; (800107c <StateMachineManagment+0x5c0>)
 8000f34:	4852      	ldr	r0, [pc, #328]	; (8001080 <StateMachineManagment+0x5c4>)
 8000f36:	f006 f9ee 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	495a      	ldr	r1, [pc, #360]	; (80010b0 <StateMachineManagment+0x5f4>)
 8000f46:	484d      	ldr	r0, [pc, #308]	; (800107c <StateMachineManagment+0x5c0>)
 8000f48:	f007 fa42 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f4c:	484b      	ldr	r0, [pc, #300]	; (800107c <StateMachineManagment+0x5c0>)
 8000f4e:	f7ff f947 	bl	80001e0 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	4948      	ldr	r1, [pc, #288]	; (800107c <StateMachineManagment+0x5c0>)
 8000f5c:	4848      	ldr	r0, [pc, #288]	; (8001080 <StateMachineManagment+0x5c4>)
 8000f5e:	f006 f9da 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 8000f62:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000f64:	799b      	ldrb	r3, [r3, #6]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <StateMachineManagment+0x5e4>)
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	4951      	ldr	r1, [pc, #324]	; (80010b4 <StateMachineManagment+0x5f8>)
 8000f6e:	4843      	ldr	r0, [pc, #268]	; (800107c <StateMachineManagment+0x5c0>)
 8000f70:	f007 fa2e 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f74:	4841      	ldr	r0, [pc, #260]	; (800107c <StateMachineManagment+0x5c0>)
 8000f76:	f7ff f933 	bl	80001e0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	493e      	ldr	r1, [pc, #248]	; (800107c <StateMachineManagment+0x5c0>)
 8000f84:	483e      	ldr	r0, [pc, #248]	; (8001080 <StateMachineManagment+0x5c4>)
 8000f86:	f006 f9c6 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type 1 for WaitingTime Edit\r\n");
 8000f8a:	494b      	ldr	r1, [pc, #300]	; (80010b8 <StateMachineManagment+0x5fc>)
 8000f8c:	483b      	ldr	r0, [pc, #236]	; (800107c <StateMachineManagment+0x5c0>)
 8000f8e:	f007 fa1f 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000f92:	483a      	ldr	r0, [pc, #232]	; (800107c <StateMachineManagment+0x5c0>)
 8000f94:	f7ff f924 	bl	80001e0 <strlen>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	4936      	ldr	r1, [pc, #216]	; (800107c <StateMachineManagment+0x5c0>)
 8000fa2:	4837      	ldr	r0, [pc, #220]	; (8001080 <StateMachineManagment+0x5c4>)
 8000fa4:	f006 f9b7 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type 2 for OperationTime Edit\r\n");
 8000fa8:	4944      	ldr	r1, [pc, #272]	; (80010bc <StateMachineManagment+0x600>)
 8000faa:	4834      	ldr	r0, [pc, #208]	; (800107c <StateMachineManagment+0x5c0>)
 8000fac:	f007 fa10 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fb0:	4832      	ldr	r0, [pc, #200]	; (800107c <StateMachineManagment+0x5c0>)
 8000fb2:	f7ff f915 	bl	80001e0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	492f      	ldr	r1, [pc, #188]	; (800107c <StateMachineManagment+0x5c0>)
 8000fc0:	482f      	ldr	r0, [pc, #188]	; (8001080 <StateMachineManagment+0x5c4>)
 8000fc2:	f006 f9a8 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type s to save\r\n");
 8000fc6:	493e      	ldr	r1, [pc, #248]	; (80010c0 <StateMachineManagment+0x604>)
 8000fc8:	482c      	ldr	r0, [pc, #176]	; (800107c <StateMachineManagment+0x5c0>)
 8000fca:	f007 fa01 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fce:	482b      	ldr	r0, [pc, #172]	; (800107c <StateMachineManagment+0x5c0>)
 8000fd0:	f7ff f906 	bl	80001e0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	4927      	ldr	r1, [pc, #156]	; (800107c <StateMachineManagment+0x5c0>)
 8000fde:	4828      	ldr	r0, [pc, #160]	; (8001080 <StateMachineManagment+0x5c4>)
 8000fe0:	f006 f999 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <StateMachineManagment+0x608>)
 8000fe6:	4825      	ldr	r0, [pc, #148]	; (800107c <StateMachineManagment+0x5c0>)
 8000fe8:	f007 f9f2 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000fec:	4823      	ldr	r0, [pc, #140]	; (800107c <StateMachineManagment+0x5c0>)
 8000fee:	f7ff f8f7 	bl	80001e0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	4920      	ldr	r1, [pc, #128]	; (800107c <StateMachineManagment+0x5c0>)
 8000ffc:	4820      	ldr	r0, [pc, #128]	; (8001080 <StateMachineManagment+0x5c4>)
 8000ffe:	f006 f98a 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 8001002:	491d      	ldr	r1, [pc, #116]	; (8001078 <StateMachineManagment+0x5bc>)
 8001004:	481d      	ldr	r0, [pc, #116]	; (800107c <StateMachineManagment+0x5c0>)
 8001006:	f007 f9e3 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <StateMachineManagment+0x5c0>)
 800100c:	f7ff f8e8 	bl	80001e0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <StateMachineManagment+0x5c0>)
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <StateMachineManagment+0x5c4>)
 800101c:	f006 f97b 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <StateMachineManagment+0x5b8>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001026:	2202      	movs	r2, #2
 8001028:	4927      	ldr	r1, [pc, #156]	; (80010c8 <StateMachineManagment+0x60c>)
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <StateMachineManagment+0x5c4>)
 800102c:	f006 fa05 	bl	800743a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001030:	f000 fd48 	bl	8001ac4 <UARTRecieveIT>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <StateMachineManagment+0x610>)
 800103a:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <StateMachineManagment+0x610>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001046:	f000 823c 	beq.w	80014c2 <StateMachineManagment+0xa06>
						if(inputchar == 'x')
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <StateMachineManagment+0x610>)
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	2b78      	cmp	r3, #120	; 0x78
 8001052:	d13d      	bne.n	80010d0 <StateMachineManagment+0x614>
							Robot.WaitingTimeBuffer = Robot.WaitingTime;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <StateMachineManagment+0x5e4>)
 8001056:	78da      	ldrb	r2, [r3, #3]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <StateMachineManagment+0x5e4>)
 800105a:	701a      	strb	r2, [r3, #0]
							Robot.OperationTimeBuffer = Robot.OperationTime;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <StateMachineManagment+0x5e4>)
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <StateMachineManagment+0x5e4>)
 8001062:	705a      	strb	r2, [r3, #1]
							flagUART = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <StateMachineManagment+0x5b8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <StateMachineManagment+0x5dc>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
					break;
 8001070:	e227      	b.n	80014c2 <StateMachineManagment+0xa06>
 8001072:	bf00      	nop
 8001074:	20000324 	.word	0x20000324
 8001078:	08008cdc 	.word	0x08008cdc
 800107c:	200002e4 	.word	0x200002e4
 8001080:	20000280 	.word	0x20000280
 8001084:	08008df8 	.word	0x08008df8
 8001088:	20000329 	.word	0x20000329
 800108c:	20000002 	.word	0x20000002
 8001090:	2000032c 	.word	0x2000032c
 8001094:	08008e10 	.word	0x08008e10
 8001098:	200002df 	.word	0x200002df
 800109c:	20000328 	.word	0x20000328
 80010a0:	200002d8 	.word	0x200002d8
 80010a4:	20000330 	.word	0x20000330
 80010a8:	200002e0 	.word	0x200002e0
 80010ac:	08008e44 	.word	0x08008e44
 80010b0:	08008d14 	.word	0x08008d14
 80010b4:	08008d48 	.word	0x08008d48
 80010b8:	08008e68 	.word	0x08008e68
 80010bc:	08008e8c 	.word	0x08008e8c
 80010c0:	08008eb0 	.word	0x08008eb0
 80010c4:	08008ec4 	.word	0x08008ec4
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000326 	.word	0x20000326
						else if(inputchar == '1')
 80010d0:	4b8a      	ldr	r3, [pc, #552]	; (80012fc <StateMachineManagment+0x840>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	2b31      	cmp	r3, #49	; 0x31
 80010d8:	d106      	bne.n	80010e8 <StateMachineManagment+0x62c>
							flagUART = 0;
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <StateMachineManagment+0x844>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
							ParamEditState = WaitingTimeEdit;
 80010e0:	4b88      	ldr	r3, [pc, #544]	; (8001304 <StateMachineManagment+0x848>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
					break;
 80010e6:	e1ec      	b.n	80014c2 <StateMachineManagment+0xa06>
						else if(inputchar == '2')
 80010e8:	4b84      	ldr	r3, [pc, #528]	; (80012fc <StateMachineManagment+0x840>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	2b32      	cmp	r3, #50	; 0x32
 80010f0:	d106      	bne.n	8001100 <StateMachineManagment+0x644>
							flagUART = 0;
 80010f2:	4b83      	ldr	r3, [pc, #524]	; (8001300 <StateMachineManagment+0x844>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
							ParamEditState = OperationTimeEdit;
 80010f8:	4b82      	ldr	r3, [pc, #520]	; (8001304 <StateMachineManagment+0x848>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
					break;
 80010fe:	e1e0      	b.n	80014c2 <StateMachineManagment+0xa06>
						else if(inputchar == 's')
 8001100:	4b7e      	ldr	r3, [pc, #504]	; (80012fc <StateMachineManagment+0x840>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	2b73      	cmp	r3, #115	; 0x73
 8001108:	d124      	bne.n	8001154 <StateMachineManagment+0x698>
							Robot.WaitingTime = Robot.WaitingTimeBuffer;
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <StateMachineManagment+0x84c>)
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	4b7e      	ldr	r3, [pc, #504]	; (8001308 <StateMachineManagment+0x84c>)
 8001110:	70da      	strb	r2, [r3, #3]
							Robot.OperationTime = Robot.OperationTimeBuffer;
 8001112:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <StateMachineManagment+0x84c>)
 8001114:	785a      	ldrb	r2, [r3, #1]
 8001116:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <StateMachineManagment+0x84c>)
 8001118:	711a      	strb	r2, [r3, #4]
							eepromWriteFlag = 1;
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <StateMachineManagment+0x850>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
							Senddata[0] = Robot.WaitingTime;
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <StateMachineManagment+0x84c>)
 8001122:	78da      	ldrb	r2, [r3, #3]
 8001124:	4b7a      	ldr	r3, [pc, #488]	; (8001310 <StateMachineManagment+0x854>)
 8001126:	701a      	strb	r2, [r3, #0]
							Senddata[1] = Robot.OperationTime;
 8001128:	4b77      	ldr	r3, [pc, #476]	; (8001308 <StateMachineManagment+0x84c>)
 800112a:	791a      	ldrb	r2, [r3, #4]
 800112c:	4b78      	ldr	r3, [pc, #480]	; (8001310 <StateMachineManagment+0x854>)
 800112e:	705a      	strb	r2, [r3, #1]
							Senddata[2] = Robot.EndStation;
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <StateMachineManagment+0x84c>)
 8001132:	795a      	ldrb	r2, [r3, #5]
 8001134:	4b76      	ldr	r3, [pc, #472]	; (8001310 <StateMachineManagment+0x854>)
 8001136:	709a      	strb	r2, [r3, #2]
							EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <StateMachineManagment+0x858>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	220a      	movs	r2, #10
 800113e:	4619      	mov	r1, r3
 8001140:	4873      	ldr	r0, [pc, #460]	; (8001310 <StateMachineManagment+0x854>)
 8001142:	f000 fc6f 	bl	8001a24 <EEPROMWriteFcn>
							flagUART = 0;
 8001146:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <StateMachineManagment+0x844>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 800114c:	4b72      	ldr	r3, [pc, #456]	; (8001318 <StateMachineManagment+0x85c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
					break;
 8001152:	e1b6      	b.n	80014c2 <StateMachineManagment+0xa06>
							flagUART = 0;
 8001154:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <StateMachineManagment+0x844>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800115a:	4970      	ldr	r1, [pc, #448]	; (800131c <StateMachineManagment+0x860>)
 800115c:	4870      	ldr	r0, [pc, #448]	; (8001320 <StateMachineManagment+0x864>)
 800115e:	f007 f937 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001162:	486f      	ldr	r0, [pc, #444]	; (8001320 <StateMachineManagment+0x864>)
 8001164:	f7ff f83c 	bl	80001e0 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	496b      	ldr	r1, [pc, #428]	; (8001320 <StateMachineManagment+0x864>)
 8001172:	486c      	ldr	r0, [pc, #432]	; (8001324 <StateMachineManagment+0x868>)
 8001174:	f006 f8cf 	bl	8007316 <HAL_UART_Transmit>
					break;
 8001178:	e1a3      	b.n	80014c2 <StateMachineManagment+0xa06>
					if(flagUART == 0){
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <StateMachineManagment+0x844>)
 800117c:	f993 3000 	ldrsb.w	r3, [r3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d14d      	bne.n	8001220 <StateMachineManagment+0x764>
						sprintf(TxDataBuffer, "\r\n---WaitingTime Edit---\r\n");
 8001184:	4968      	ldr	r1, [pc, #416]	; (8001328 <StateMachineManagment+0x86c>)
 8001186:	4866      	ldr	r0, [pc, #408]	; (8001320 <StateMachineManagment+0x864>)
 8001188:	f007 f922 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800118c:	4864      	ldr	r0, [pc, #400]	; (8001320 <StateMachineManagment+0x864>)
 800118e:	f7ff f827 	bl	80001e0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	4961      	ldr	r1, [pc, #388]	; (8001320 <StateMachineManagment+0x864>)
 800119c:	4861      	ldr	r0, [pc, #388]	; (8001324 <StateMachineManagment+0x868>)
 800119e:	f006 f8ba 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 80011a2:	4962      	ldr	r1, [pc, #392]	; (800132c <StateMachineManagment+0x870>)
 80011a4:	485e      	ldr	r0, [pc, #376]	; (8001320 <StateMachineManagment+0x864>)
 80011a6:	f007 f913 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011aa:	485d      	ldr	r0, [pc, #372]	; (8001320 <StateMachineManagment+0x864>)
 80011ac:	f7ff f818 	bl	80001e0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	4959      	ldr	r1, [pc, #356]	; (8001320 <StateMachineManagment+0x864>)
 80011ba:	485a      	ldr	r0, [pc, #360]	; (8001324 <StateMachineManagment+0x868>)
 80011bc:	f006 f8ab 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 80011c0:	495b      	ldr	r1, [pc, #364]	; (8001330 <StateMachineManagment+0x874>)
 80011c2:	4857      	ldr	r0, [pc, #348]	; (8001320 <StateMachineManagment+0x864>)
 80011c4:	f007 f904 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011c8:	4855      	ldr	r0, [pc, #340]	; (8001320 <StateMachineManagment+0x864>)
 80011ca:	f7ff f809 	bl	80001e0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	4952      	ldr	r1, [pc, #328]	; (8001320 <StateMachineManagment+0x864>)
 80011d8:	4852      	ldr	r0, [pc, #328]	; (8001324 <StateMachineManagment+0x868>)
 80011da:	f006 f89c 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 80011de:	4955      	ldr	r1, [pc, #340]	; (8001334 <StateMachineManagment+0x878>)
 80011e0:	484f      	ldr	r0, [pc, #316]	; (8001320 <StateMachineManagment+0x864>)
 80011e2:	f007 f8f5 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011e6:	484e      	ldr	r0, [pc, #312]	; (8001320 <StateMachineManagment+0x864>)
 80011e8:	f7fe fffa 	bl	80001e0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	494a      	ldr	r1, [pc, #296]	; (8001320 <StateMachineManagment+0x864>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <StateMachineManagment+0x868>)
 80011f8:	f006 f88d 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 80011fc:	494e      	ldr	r1, [pc, #312]	; (8001338 <StateMachineManagment+0x87c>)
 80011fe:	4848      	ldr	r0, [pc, #288]	; (8001320 <StateMachineManagment+0x864>)
 8001200:	f007 f8e6 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001204:	4846      	ldr	r0, [pc, #280]	; (8001320 <StateMachineManagment+0x864>)
 8001206:	f7fe ffeb 	bl	80001e0 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	4943      	ldr	r1, [pc, #268]	; (8001320 <StateMachineManagment+0x864>)
 8001214:	4843      	ldr	r0, [pc, #268]	; (8001324 <StateMachineManagment+0x868>)
 8001216:	f006 f87e 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <StateMachineManagment+0x844>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001220:	2202      	movs	r2, #2
 8001222:	4946      	ldr	r1, [pc, #280]	; (800133c <StateMachineManagment+0x880>)
 8001224:	483f      	ldr	r0, [pc, #252]	; (8001324 <StateMachineManagment+0x868>)
 8001226:	f006 f908 	bl	800743a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 800122a:	f000 fc4b 	bl	8001ac4 <UARTRecieveIT>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <StateMachineManagment+0x840>)
 8001234:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <StateMachineManagment+0x840>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	f000 8141 	beq.w	80014c6 <StateMachineManagment+0xa0a>
						if(inputchar == 'x')
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <StateMachineManagment+0x840>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	2b78      	cmp	r3, #120	; 0x78
 800124c:	d106      	bne.n	800125c <StateMachineManagment+0x7a0>
							flagUART = 0;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <StateMachineManagment+0x844>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <StateMachineManagment+0x848>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
					break;
 800125a:	e134      	b.n	80014c6 <StateMachineManagment+0xa0a>
						else if(inputchar == '+')
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <StateMachineManagment+0x840>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	2b2b      	cmp	r3, #43	; 0x2b
 8001264:	d118      	bne.n	8001298 <StateMachineManagment+0x7dc>
							Robot.WaitingTimeBuffer++;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <StateMachineManagment+0x84c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <StateMachineManagment+0x84c>)
 8001270:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <StateMachineManagment+0x84c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4931      	ldr	r1, [pc, #196]	; (8001340 <StateMachineManagment+0x884>)
 800127a:	4829      	ldr	r0, [pc, #164]	; (8001320 <StateMachineManagment+0x864>)
 800127c:	f007 f8a8 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001280:	4827      	ldr	r0, [pc, #156]	; (8001320 <StateMachineManagment+0x864>)
 8001282:	f7fe ffad 	bl	80001e0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	4924      	ldr	r1, [pc, #144]	; (8001320 <StateMachineManagment+0x864>)
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <StateMachineManagment+0x868>)
 8001292:	f006 f840 	bl	8007316 <HAL_UART_Transmit>
					break;
 8001296:	e116      	b.n	80014c6 <StateMachineManagment+0xa0a>
						else if(inputchar == '-')
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <StateMachineManagment+0x840>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	2b2d      	cmp	r3, #45	; 0x2d
 80012a0:	d118      	bne.n	80012d4 <StateMachineManagment+0x818>
							Robot.WaitingTimeBuffer--;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <StateMachineManagment+0x84c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <StateMachineManagment+0x84c>)
 80012ac:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "Current WaitingTime:[%d]\r\n", Robot.WaitingTimeBuffer);
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <StateMachineManagment+0x84c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4922      	ldr	r1, [pc, #136]	; (8001340 <StateMachineManagment+0x884>)
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <StateMachineManagment+0x864>)
 80012b8:	f007 f88a 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <StateMachineManagment+0x864>)
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	4915      	ldr	r1, [pc, #84]	; (8001320 <StateMachineManagment+0x864>)
 80012cc:	4815      	ldr	r0, [pc, #84]	; (8001324 <StateMachineManagment+0x868>)
 80012ce:	f006 f822 	bl	8007316 <HAL_UART_Transmit>
					break;
 80012d2:	e0f8      	b.n	80014c6 <StateMachineManagment+0xa0a>
							flagUART = 0;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <StateMachineManagment+0x844>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <StateMachineManagment+0x860>)
 80012dc:	4810      	ldr	r0, [pc, #64]	; (8001320 <StateMachineManagment+0x864>)
 80012de:	f007 f877 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80012e2:	480f      	ldr	r0, [pc, #60]	; (8001320 <StateMachineManagment+0x864>)
 80012e4:	f7fe ff7c 	bl	80001e0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	490b      	ldr	r1, [pc, #44]	; (8001320 <StateMachineManagment+0x864>)
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <StateMachineManagment+0x868>)
 80012f4:	f006 f80f 	bl	8007316 <HAL_UART_Transmit>
					break;
 80012f8:	e0e5      	b.n	80014c6 <StateMachineManagment+0xa0a>
 80012fa:	bf00      	nop
 80012fc:	20000326 	.word	0x20000326
 8001300:	20000324 	.word	0x20000324
 8001304:	200002e0 	.word	0x200002e0
 8001308:	200002d8 	.word	0x200002d8
 800130c:	20000328 	.word	0x20000328
 8001310:	20000330 	.word	0x20000330
 8001314:	20000002 	.word	0x20000002
 8001318:	200002df 	.word	0x200002df
 800131c:	08008de0 	.word	0x08008de0
 8001320:	200002e4 	.word	0x200002e4
 8001324:	20000280 	.word	0x20000280
 8001328:	08008ed8 	.word	0x08008ed8
 800132c:	08008ef4 	.word	0x08008ef4
 8001330:	08008f0c 	.word	0x08008f0c
 8001334:	08008f24 	.word	0x08008f24
 8001338:	08008f38 	.word	0x08008f38
 800133c:	20000000 	.word	0x20000000
 8001340:	08008f54 	.word	0x08008f54
					if(flagUART == 0){
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <StateMachineManagment+0xa34>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d14d      	bne.n	80013ea <StateMachineManagment+0x92e>
						sprintf(TxDataBuffer, "\r\n---OperationTime Edit---\r\n");
 800134e:	4969      	ldr	r1, [pc, #420]	; (80014f4 <StateMachineManagment+0xa38>)
 8001350:	4869      	ldr	r0, [pc, #420]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001352:	f007 f83d 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001356:	4868      	ldr	r0, [pc, #416]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001358:	f7fe ff42 	bl	80001e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	4964      	ldr	r1, [pc, #400]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001366:	4865      	ldr	r0, [pc, #404]	; (80014fc <StateMachineManagment+0xa40>)
 8001368:	f005 ffd5 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type + for +1 second\r\n");
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <StateMachineManagment+0xa44>)
 800136e:	4862      	ldr	r0, [pc, #392]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001370:	f007 f82e 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001374:	4860      	ldr	r0, [pc, #384]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001376:	f7fe ff33 	bl	80001e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	495d      	ldr	r1, [pc, #372]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001384:	485d      	ldr	r0, [pc, #372]	; (80014fc <StateMachineManagment+0xa40>)
 8001386:	f005 ffc6 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 second\r\n");
 800138a:	495e      	ldr	r1, [pc, #376]	; (8001504 <StateMachineManagment+0xa48>)
 800138c:	485a      	ldr	r0, [pc, #360]	; (80014f8 <StateMachineManagment+0xa3c>)
 800138e:	f007 f81f 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001392:	4859      	ldr	r0, [pc, #356]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001394:	f7fe ff24 	bl	80001e0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	4955      	ldr	r1, [pc, #340]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013a2:	4856      	ldr	r0, [pc, #344]	; (80014fc <StateMachineManagment+0xa40>)
 80013a4:	f005 ffb7 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to back\r\n");
 80013a8:	4957      	ldr	r1, [pc, #348]	; (8001508 <StateMachineManagment+0xa4c>)
 80013aa:	4853      	ldr	r0, [pc, #332]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013ac:	f007 f810 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013b0:	4851      	ldr	r0, [pc, #324]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013b2:	f7fe ff15 	bl	80001e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	494e      	ldr	r1, [pc, #312]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013c0:	484e      	ldr	r0, [pc, #312]	; (80014fc <StateMachineManagment+0xa40>)
 80013c2:	f005 ffa8 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n----------------------\r\n");
 80013c6:	4951      	ldr	r1, [pc, #324]	; (800150c <StateMachineManagment+0xa50>)
 80013c8:	484b      	ldr	r0, [pc, #300]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013ca:	f007 f801 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013ce:	484a      	ldr	r0, [pc, #296]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013d0:	f7fe ff06 	bl	80001e0 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	4946      	ldr	r1, [pc, #280]	; (80014f8 <StateMachineManagment+0xa3c>)
 80013de:	4847      	ldr	r0, [pc, #284]	; (80014fc <StateMachineManagment+0xa40>)
 80013e0:	f005 ff99 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <StateMachineManagment+0xa34>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 80013ea:	2202      	movs	r2, #2
 80013ec:	4948      	ldr	r1, [pc, #288]	; (8001510 <StateMachineManagment+0xa54>)
 80013ee:	4843      	ldr	r0, [pc, #268]	; (80014fc <StateMachineManagment+0xa40>)
 80013f0:	f006 f823 	bl	800743a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 80013f4:	f000 fb66 	bl	8001ac4 <UARTRecieveIT>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <StateMachineManagment+0xa58>)
 80013fe:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001400:	4b44      	ldr	r3, [pc, #272]	; (8001514 <StateMachineManagment+0xa58>)
 8001402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d05e      	beq.n	80014ca <StateMachineManagment+0xa0e>
						if(inputchar == 'x')
 800140c:	4b41      	ldr	r3, [pc, #260]	; (8001514 <StateMachineManagment+0xa58>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	2b78      	cmp	r3, #120	; 0x78
 8001414:	d106      	bne.n	8001424 <StateMachineManagment+0x968>
							flagUART = 0;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <StateMachineManagment+0xa34>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
							ParamEditState = UserChooseWhatToDo;
 800141c:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <StateMachineManagment+0xa5c>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
					break;
 8001422:	e052      	b.n	80014ca <StateMachineManagment+0xa0e>
						else if(inputchar == '+')
 8001424:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <StateMachineManagment+0xa58>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	2b2b      	cmp	r3, #43	; 0x2b
 800142c:	d118      	bne.n	8001460 <StateMachineManagment+0x9a4>
							Robot.OperationTimeBuffer++;
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <StateMachineManagment+0xa60>)
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	3301      	adds	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <StateMachineManagment+0xa60>)
 8001438:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <StateMachineManagment+0xa60>)
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	461a      	mov	r2, r3
 8001440:	4937      	ldr	r1, [pc, #220]	; (8001520 <StateMachineManagment+0xa64>)
 8001442:	482d      	ldr	r0, [pc, #180]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001444:	f006 ffc4 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001448:	482b      	ldr	r0, [pc, #172]	; (80014f8 <StateMachineManagment+0xa3c>)
 800144a:	f7fe fec9 	bl	80001e0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	4928      	ldr	r1, [pc, #160]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <StateMachineManagment+0xa40>)
 800145a:	f005 ff5c 	bl	8007316 <HAL_UART_Transmit>
					break;
 800145e:	e034      	b.n	80014ca <StateMachineManagment+0xa0e>
						else if(inputchar == '-')
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <StateMachineManagment+0xa58>)
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001466:	2b2d      	cmp	r3, #45	; 0x2d
 8001468:	d118      	bne.n	800149c <StateMachineManagment+0x9e0>
							Robot.OperationTimeBuffer--;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <StateMachineManagment+0xa60>)
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	3b01      	subs	r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <StateMachineManagment+0xa60>)
 8001474:	705a      	strb	r2, [r3, #1]
							sprintf(TxDataBuffer, "Current OperationTimeEdit:[%d]\r\n", Robot.OperationTimeBuffer);
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <StateMachineManagment+0xa60>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	461a      	mov	r2, r3
 800147c:	4928      	ldr	r1, [pc, #160]	; (8001520 <StateMachineManagment+0xa64>)
 800147e:	481e      	ldr	r0, [pc, #120]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001480:	f006 ffa6 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001486:	f7fe feab 	bl	80001e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	4919      	ldr	r1, [pc, #100]	; (80014f8 <StateMachineManagment+0xa3c>)
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <StateMachineManagment+0xa40>)
 8001496:	f005 ff3e 	bl	8007316 <HAL_UART_Transmit>
					break;
 800149a:	e016      	b.n	80014ca <StateMachineManagment+0xa0e>
							flagUART = 0;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <StateMachineManagment+0xa34>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 80014a2:	4920      	ldr	r1, [pc, #128]	; (8001524 <StateMachineManagment+0xa68>)
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <StateMachineManagment+0xa3c>)
 80014a6:	f006 ff93 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <StateMachineManagment+0xa3c>)
 80014ac:	f7fe fe98 	bl	80001e0 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <StateMachineManagment+0xa3c>)
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <StateMachineManagment+0xa40>)
 80014bc:	f005 ff2b 	bl	8007316 <HAL_UART_Transmit>
					break;
 80014c0:	e003      	b.n	80014ca <StateMachineManagment+0xa0e>
					break;
 80014c2:	bf00      	nop
 80014c4:	e23b      	b.n	800193e <StateMachineManagment+0xe82>
					break;
 80014c6:	bf00      	nop
 80014c8:	e239      	b.n	800193e <StateMachineManagment+0xe82>
					break;
 80014ca:	bf00      	nop
			break;
 80014cc:	e237      	b.n	800193e <StateMachineManagment+0xe82>
		case StantionChoosing:
			switch (StantionChoosingState)
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <StateMachineManagment+0xa6c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	f200 8235 	bhi.w	8001942 <StateMachineManagment+0xe86>
 80014d8:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <StateMachineManagment+0xa24>)
 80014da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014de:	bf00      	nop
 80014e0:	0800152d 	.word	0x0800152d
 80014e4:	0800176b 	.word	0x0800176b
 80014e8:	080017f9 	.word	0x080017f9
 80014ec:	0800188d 	.word	0x0800188d
 80014f0:	20000324 	.word	0x20000324
 80014f4:	08008f70 	.word	0x08008f70
 80014f8:	200002e4 	.word	0x200002e4
 80014fc:	20000280 	.word	0x20000280
 8001500:	08008ef4 	.word	0x08008ef4
 8001504:	08008f0c 	.word	0x08008f0c
 8001508:	08008f24 	.word	0x08008f24
 800150c:	08008f38 	.word	0x08008f38
 8001510:	20000000 	.word	0x20000000
 8001514:	20000326 	.word	0x20000326
 8001518:	200002e0 	.word	0x200002e0
 800151c:	200002d8 	.word	0x200002d8
 8001520:	08008f90 	.word	0x08008f90
 8001524:	08008de0 	.word	0x08008de0
 8001528:	200002e1 	.word	0x200002e1
			{
				case UserChooseStation:
					// Header
					if(flagUART == 0)
 800152c:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <StateMachineManagment+0xce8>)
 800152e:	f993 3000 	ldrsb.w	r3, [r3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 8085 	bne.w	8001642 <StateMachineManagment+0xb86>
					{
						sprintf(TxDataBuffer, "\r\nPlease Select Destination Station\r\n");
 8001538:	499b      	ldr	r1, [pc, #620]	; (80017a8 <StateMachineManagment+0xcec>)
 800153a:	489c      	ldr	r0, [pc, #624]	; (80017ac <StateMachineManagment+0xcf0>)
 800153c:	f006 ff48 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001540:	489a      	ldr	r0, [pc, #616]	; (80017ac <StateMachineManagment+0xcf0>)
 8001542:	f7fe fe4d 	bl	80001e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	4997      	ldr	r1, [pc, #604]	; (80017ac <StateMachineManagment+0xcf0>)
 8001550:	4897      	ldr	r0, [pc, #604]	; (80017b0 <StateMachineManagment+0xcf4>)
 8001552:	f005 fee0 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\nRobot Status WaitingTime:[%d] OperationTime[%d]", Robot.WaitingTimeBuffer, Robot.OperationTimeBuffer);
 8001556:	4b97      	ldr	r3, [pc, #604]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b95      	ldr	r3, [pc, #596]	; (80017b4 <StateMachineManagment+0xcf8>)
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	4995      	ldr	r1, [pc, #596]	; (80017b8 <StateMachineManagment+0xcfc>)
 8001562:	4892      	ldr	r0, [pc, #584]	; (80017ac <StateMachineManagment+0xcf0>)
 8001564:	f006 ff34 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001568:	4890      	ldr	r0, [pc, #576]	; (80017ac <StateMachineManagment+0xcf0>)
 800156a:	f7fe fe39 	bl	80001e0 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	498d      	ldr	r1, [pc, #564]	; (80017ac <StateMachineManagment+0xcf0>)
 8001578:	488d      	ldr	r0, [pc, #564]	; (80017b0 <StateMachineManagment+0xcf4>)
 800157a:	f005 fecc 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, " Start Station:[%d] End Station[%d]\r\n", Robot.StartStation, Robot.EndStation);
 800157e:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001580:	799b      	ldrb	r3, [r3, #6]
 8001582:	461a      	mov	r2, r3
 8001584:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	498c      	ldr	r1, [pc, #560]	; (80017bc <StateMachineManagment+0xd00>)
 800158a:	4888      	ldr	r0, [pc, #544]	; (80017ac <StateMachineManagment+0xcf0>)
 800158c:	f006 ff20 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001590:	4886      	ldr	r0, [pc, #536]	; (80017ac <StateMachineManagment+0xcf0>)
 8001592:	f7fe fe25 	bl	80001e0 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	4983      	ldr	r1, [pc, #524]	; (80017ac <StateMachineManagment+0xcf0>)
 80015a0:	4883      	ldr	r0, [pc, #524]	; (80017b0 <StateMachineManagment+0xcf4>)
 80015a2:	f005 feb8 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n+Type + for +1 Station\r\n");
 80015a6:	4986      	ldr	r1, [pc, #536]	; (80017c0 <StateMachineManagment+0xd04>)
 80015a8:	4880      	ldr	r0, [pc, #512]	; (80017ac <StateMachineManagment+0xcf0>)
 80015aa:	f006 ff11 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015ae:	487f      	ldr	r0, [pc, #508]	; (80017ac <StateMachineManagment+0xcf0>)
 80015b0:	f7fe fe16 	bl	80001e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015bc:	497b      	ldr	r1, [pc, #492]	; (80017ac <StateMachineManagment+0xcf0>)
 80015be:	487c      	ldr	r0, [pc, #496]	; (80017b0 <StateMachineManagment+0xcf4>)
 80015c0:	f005 fea9 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type - for -1 Station\r\n");
 80015c4:	497f      	ldr	r1, [pc, #508]	; (80017c4 <StateMachineManagment+0xd08>)
 80015c6:	4879      	ldr	r0, [pc, #484]	; (80017ac <StateMachineManagment+0xcf0>)
 80015c8:	f006 ff02 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015cc:	4877      	ldr	r0, [pc, #476]	; (80017ac <StateMachineManagment+0xcf0>)
 80015ce:	f7fe fe07 	bl	80001e0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	4974      	ldr	r1, [pc, #464]	; (80017ac <StateMachineManagment+0xcf0>)
 80015dc:	4874      	ldr	r0, [pc, #464]	; (80017b0 <StateMachineManagment+0xcf4>)
 80015de:	f005 fe9a 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type x to cancel\r\n");
 80015e2:	4979      	ldr	r1, [pc, #484]	; (80017c8 <StateMachineManagment+0xd0c>)
 80015e4:	4871      	ldr	r0, [pc, #452]	; (80017ac <StateMachineManagment+0xcf0>)
 80015e6:	f006 fef3 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80015ea:	4870      	ldr	r0, [pc, #448]	; (80017ac <StateMachineManagment+0xcf0>)
 80015ec:	f7fe fdf8 	bl	80001e0 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f8:	496c      	ldr	r1, [pc, #432]	; (80017ac <StateMachineManagment+0xcf0>)
 80015fa:	486d      	ldr	r0, [pc, #436]	; (80017b0 <StateMachineManagment+0xcf4>)
 80015fc:	f005 fe8b 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "+Type g to Start Operating\r\n");
 8001600:	4972      	ldr	r1, [pc, #456]	; (80017cc <StateMachineManagment+0xd10>)
 8001602:	486a      	ldr	r0, [pc, #424]	; (80017ac <StateMachineManagment+0xcf0>)
 8001604:	f006 fee4 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001608:	4868      	ldr	r0, [pc, #416]	; (80017ac <StateMachineManagment+0xcf0>)
 800160a:	f7fe fde9 	bl	80001e0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	4965      	ldr	r1, [pc, #404]	; (80017ac <StateMachineManagment+0xcf0>)
 8001618:	4865      	ldr	r0, [pc, #404]	; (80017b0 <StateMachineManagment+0xcf4>)
 800161a:	f005 fe7c 	bl	8007316 <HAL_UART_Transmit>
						sprintf(TxDataBuffer, "\r\n---------------------------\r\n");
 800161e:	496c      	ldr	r1, [pc, #432]	; (80017d0 <StateMachineManagment+0xd14>)
 8001620:	4862      	ldr	r0, [pc, #392]	; (80017ac <StateMachineManagment+0xcf0>)
 8001622:	f006 fed5 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001626:	4861      	ldr	r0, [pc, #388]	; (80017ac <StateMachineManagment+0xcf0>)
 8001628:	f7fe fdda 	bl	80001e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	495d      	ldr	r1, [pc, #372]	; (80017ac <StateMachineManagment+0xcf0>)
 8001636:	485e      	ldr	r0, [pc, #376]	; (80017b0 <StateMachineManagment+0xcf4>)
 8001638:	f005 fe6d 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <StateMachineManagment+0xce8>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
					}
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 8001642:	2202      	movs	r2, #2
 8001644:	4963      	ldr	r1, [pc, #396]	; (80017d4 <StateMachineManagment+0xd18>)
 8001646:	485a      	ldr	r0, [pc, #360]	; (80017b0 <StateMachineManagment+0xcf4>)
 8001648:	f005 fef7 	bl	800743a <HAL_UART_Receive_IT>
					// Main
					HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 2);
 800164c:	2202      	movs	r2, #2
 800164e:	4961      	ldr	r1, [pc, #388]	; (80017d4 <StateMachineManagment+0xd18>)
 8001650:	4857      	ldr	r0, [pc, #348]	; (80017b0 <StateMachineManagment+0xcf4>)
 8001652:	f005 fef2 	bl	800743a <HAL_UART_Receive_IT>
					inputchar = UARTRecieveIT();
 8001656:	f000 fa35 	bl	8001ac4 <UARTRecieveIT>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <StateMachineManagment+0xd1c>)
 8001660:	801a      	strh	r2, [r3, #0]
					if(inputchar!=-1)
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <StateMachineManagment+0xd1c>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	f000 815f 	beq.w	800192e <StateMachineManagment+0xe72>
					{
						if(inputchar == 'x')
 8001670:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <StateMachineManagment+0xd1c>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	2b78      	cmp	r3, #120	; 0x78
 8001678:	d10a      	bne.n	8001690 <StateMachineManagment+0xbd4>
						{
							Robot.EndStationBuffer = Robot.EndStation;
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <StateMachineManagment+0xcf8>)
 800167c:	795a      	ldrb	r2, [r3, #5]
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001680:	709a      	strb	r2, [r3, #2]
							flagUART = 0;
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <StateMachineManagment+0xce8>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
							MCState = StanBy;
 8001688:	4b54      	ldr	r3, [pc, #336]	; (80017dc <StateMachineManagment+0xd20>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
							flagUART = 0;
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
						}
					}
					break;
 800168e:	e14e      	b.n	800192e <StateMachineManagment+0xe72>
						else if(inputchar == '+')
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <StateMachineManagment+0xd1c>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	2b2b      	cmp	r3, #43	; 0x2b
 8001698:	d11f      	bne.n	80016da <StateMachineManagment+0xc1e>
							Robot.EndStationBuffer++;
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <StateMachineManagment+0xcf8>)
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	3301      	adds	r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016a4:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016b2:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016b6:	789b      	ldrb	r3, [r3, #2]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4949      	ldr	r1, [pc, #292]	; (80017e0 <StateMachineManagment+0xd24>)
 80016bc:	483b      	ldr	r0, [pc, #236]	; (80017ac <StateMachineManagment+0xcf0>)
 80016be:	f006 fe87 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80016c2:	483a      	ldr	r0, [pc, #232]	; (80017ac <StateMachineManagment+0xcf0>)
 80016c4:	f7fe fd8c 	bl	80001e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	4936      	ldr	r1, [pc, #216]	; (80017ac <StateMachineManagment+0xcf0>)
 80016d2:	4837      	ldr	r0, [pc, #220]	; (80017b0 <StateMachineManagment+0xcf4>)
 80016d4:	f005 fe1f 	bl	8007316 <HAL_UART_Transmit>
					break;
 80016d8:	e129      	b.n	800192e <StateMachineManagment+0xe72>
						else if(inputchar == '-')
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <StateMachineManagment+0xd1c>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	2b2d      	cmp	r3, #45	; 0x2d
 80016e2:	d11f      	bne.n	8001724 <StateMachineManagment+0xc68>
							Robot.EndStationBuffer--;
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016ee:	709a      	strb	r2, [r3, #2]
							Robot.EndStationBuffer %= 16;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <StateMachineManagment+0xcf8>)
 80016fc:	709a      	strb	r2, [r3, #2]
							sprintf(TxDataBuffer, "Current End Station:[%d]\r\n", Robot.EndStationBuffer);
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	461a      	mov	r2, r3
 8001704:	4936      	ldr	r1, [pc, #216]	; (80017e0 <StateMachineManagment+0xd24>)
 8001706:	4829      	ldr	r0, [pc, #164]	; (80017ac <StateMachineManagment+0xcf0>)
 8001708:	f006 fe62 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800170c:	4827      	ldr	r0, [pc, #156]	; (80017ac <StateMachineManagment+0xcf0>)
 800170e:	f7fe fd67 	bl	80001e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	4924      	ldr	r1, [pc, #144]	; (80017ac <StateMachineManagment+0xcf0>)
 800171c:	4824      	ldr	r0, [pc, #144]	; (80017b0 <StateMachineManagment+0xcf4>)
 800171e:	f005 fdfa 	bl	8007316 <HAL_UART_Transmit>
					break;
 8001722:	e104      	b.n	800192e <StateMachineManagment+0xe72>
						else if(inputchar == 'g')
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <StateMachineManagment+0xd1c>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	2b67      	cmp	r3, #103	; 0x67
 800172c:	d10a      	bne.n	8001744 <StateMachineManagment+0xc88>
							Robot.EndStation = Robot.EndStationBuffer;
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001730:	789a      	ldrb	r2, [r3, #2]
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001734:	715a      	strb	r2, [r3, #5]
							flagUART = 0;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <StateMachineManagment+0xce8>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
							StantionChoosingState = EEpromWriteState4ROBOT;
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <StateMachineManagment+0xd28>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
					break;
 8001742:	e0f4      	b.n	800192e <StateMachineManagment+0xe72>
							flagUART = 0;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <StateMachineManagment+0xce8>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
							sprintf(TxDataBuffer, "\r\n---Wrong Command---\r\n");
 800174a:	4927      	ldr	r1, [pc, #156]	; (80017e8 <StateMachineManagment+0xd2c>)
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <StateMachineManagment+0xcf0>)
 800174e:	f006 fe3f 	bl	80083d0 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001752:	4816      	ldr	r0, [pc, #88]	; (80017ac <StateMachineManagment+0xcf0>)
 8001754:	f7fe fd44 	bl	80001e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001760:	4912      	ldr	r1, [pc, #72]	; (80017ac <StateMachineManagment+0xcf0>)
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <StateMachineManagment+0xcf4>)
 8001764:	f005 fdd7 	bl	8007316 <HAL_UART_Transmit>
					break;
 8001768:	e0e1      	b.n	800192e <StateMachineManagment+0xe72>
				case EEpromWriteState4ROBOT:
					eepromWriteFlag = 1;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <StateMachineManagment+0xd30>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
					Senddata[0] = Robot.WaitingTime;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001772:	78da      	ldrb	r2, [r3, #3]
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <StateMachineManagment+0xd34>)
 8001776:	701a      	strb	r2, [r3, #0]
					Senddata[1] = Robot.OperationTime;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <StateMachineManagment+0xcf8>)
 800177a:	791a      	ldrb	r2, [r3, #4]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <StateMachineManagment+0xd34>)
 800177e:	705a      	strb	r2, [r3, #1]
					Senddata[2] = Robot.EndStation;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <StateMachineManagment+0xcf8>)
 8001782:	795a      	ldrb	r2, [r3, #5]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <StateMachineManagment+0xd34>)
 8001786:	709a      	strb	r2, [r3, #2]
					EEPROMWriteFcn(Senddata, dataLen, WAIT_ADDR);
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <StateMachineManagment+0xd38>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	220a      	movs	r2, #10
 800178e:	4619      	mov	r1, r3
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <StateMachineManagment+0xd34>)
 8001792:	f000 f947 	bl	8001a24 <EEPROMWriteFcn>
					flagUART = 0;
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <StateMachineManagment+0xce8>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
					StantionChoosingState = RobotOperatingPart1;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <StateMachineManagment+0xd28>)
 800179e:	2202      	movs	r2, #2
 80017a0:	701a      	strb	r2, [r3, #0]
					break;
 80017a2:	e0c9      	b.n	8001938 <StateMachineManagment+0xe7c>
 80017a4:	20000324 	.word	0x20000324
 80017a8:	08008fb4 	.word	0x08008fb4
 80017ac:	200002e4 	.word	0x200002e4
 80017b0:	20000280 	.word	0x20000280
 80017b4:	200002d8 	.word	0x200002d8
 80017b8:	08008d14 	.word	0x08008d14
 80017bc:	08008d48 	.word	0x08008d48
 80017c0:	08008fdc 	.word	0x08008fdc
 80017c4:	08008ff8 	.word	0x08008ff8
 80017c8:	08008ec4 	.word	0x08008ec4
 80017cc:	08009014 	.word	0x08009014
 80017d0:	08008cdc 	.word	0x08008cdc
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000326 	.word	0x20000326
 80017dc:	200002df 	.word	0x200002df
 80017e0:	08009034 	.word	0x08009034
 80017e4:	200002e1 	.word	0x200002e1
 80017e8:	08008de0 	.word	0x08008de0
 80017ec:	20000328 	.word	0x20000328
 80017f0:	20000330 	.word	0x20000330
 80017f4:	20000002 	.word	0x20000002
				case RobotOperatingPart1:
					if(flagUART == 0)
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <StateMachineManagment+0xe94>)
 80017fa:	f993 3000 	ldrsb.w	r3, [r3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d123      	bne.n	800184a <StateMachineManagment+0xd8e>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(1)-----\r\n");
 8001802:	4954      	ldr	r1, [pc, #336]	; (8001954 <StateMachineManagment+0xe98>)
 8001804:	4854      	ldr	r0, [pc, #336]	; (8001958 <StateMachineManagment+0xe9c>)
 8001806:	f006 fde3 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800180a:	4853      	ldr	r0, [pc, #332]	; (8001958 <StateMachineManagment+0xe9c>)
 800180c:	f7fe fce8 	bl	80001e0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	494f      	ldr	r1, [pc, #316]	; (8001958 <StateMachineManagment+0xe9c>)
 800181a:	4850      	ldr	r0, [pc, #320]	; (800195c <StateMachineManagment+0xea0>)
 800181c:	f005 fd7b 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <StateMachineManagment+0xe94>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 8001826:	f000 f9c3 	bl	8001bb0 <micros>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	494c      	ldr	r1, [pc, #304]	; (8001960 <StateMachineManagment+0xea4>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.StartStation);
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <StateMachineManagment+0xea8>)
 8001836:	7818      	ldrb	r0, [r3, #0]
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <StateMachineManagment+0xeac>)
 800183a:	7819      	ldrb	r1, [r3, #0]
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <StateMachineManagment+0xeb0>)
 800183e:	799b      	ldrb	r3, [r3, #6]
 8001840:	43db      	mvns	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	f000 f899 	bl	800197c <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.WaitingTime*1000000)
 800184a:	f000 f9b1 	bl	8001bb0 <micros>
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <StateMachineManagment+0xea4>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	ebb0 0802 	subs.w	r8, r0, r2
 8001858:	eb61 0903 	sbc.w	r9, r1, r3
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <StateMachineManagment+0xeb0>)
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	461a      	mov	r2, r3
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <StateMachineManagment+0xeb4>)
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001872:	460b      	mov	r3, r1
 8001874:	4543      	cmp	r3, r8
 8001876:	4613      	mov	r3, r2
 8001878:	eb73 0309 	sbcs.w	r3, r3, r9
 800187c:	d259      	bcs.n	8001932 <StateMachineManagment+0xe76>
					{
						flagUART = 0;
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <StateMachineManagment+0xe94>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
						StantionChoosingState = RobotOperatingPart2;
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <StateMachineManagment+0xeb8>)
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
					}

					break;
 800188a:	e052      	b.n	8001932 <StateMachineManagment+0xe76>
				case RobotOperatingPart2:
					if(flagUART == 0)
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <StateMachineManagment+0xe94>)
 800188e:	f993 3000 	ldrsb.w	r3, [r3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <StateMachineManagment+0xe22>
					{
						sprintf(TxDataBuffer, "\r\n-----Robot is Operating(2)-----\r\n");
 8001896:	4938      	ldr	r1, [pc, #224]	; (8001978 <StateMachineManagment+0xebc>)
 8001898:	482f      	ldr	r0, [pc, #188]	; (8001958 <StateMachineManagment+0xe9c>)
 800189a:	f006 fd99 	bl	80083d0 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <StateMachineManagment+0xe9c>)
 80018a0:	f7fe fc9e 	bl	80001e0 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	492a      	ldr	r1, [pc, #168]	; (8001958 <StateMachineManagment+0xe9c>)
 80018ae:	482b      	ldr	r0, [pc, #172]	; (800195c <StateMachineManagment+0xea0>)
 80018b0:	f005 fd31 	bl	8007316 <HAL_UART_Transmit>
						flagUART = 1;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <StateMachineManagment+0xe94>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
						// SPI
						timestampOpration = micros();
 80018ba:	f000 f979 	bl	8001bb0 <micros>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4927      	ldr	r1, [pc, #156]	; (8001960 <StateMachineManagment+0xea4>)
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,~Robot.EndStation);
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <StateMachineManagment+0xea8>)
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <StateMachineManagment+0xeac>)
 80018ce:	7819      	ldrb	r1, [r3, #0]
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <StateMachineManagment+0xeb0>)
 80018d2:	795b      	ldrb	r3, [r3, #5]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	f000 f84f 	bl	800197c <MCP23017SetOutput>
					}
					if (micros() - timestampOpration > Robot.OperationTime*1000000)
 80018de:	f000 f967 	bl	8001bb0 <micros>
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <StateMachineManagment+0xea4>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	1a84      	subs	r4, r0, r2
 80018ea:	eb61 0503 	sbc.w	r5, r1, r3
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <StateMachineManagment+0xeb0>)
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <StateMachineManagment+0xeb4>)
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	17da      	asrs	r2, r3, #31
 80018fc:	469a      	mov	sl, r3
 80018fe:	4693      	mov	fp, r2
 8001900:	45a2      	cmp	sl, r4
 8001902:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001906:	d216      	bcs.n	8001936 <StateMachineManagment+0xe7a>
					{
						Robot.StartStation = Robot.EndStation;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <StateMachineManagment+0xeb0>)
 800190a:	795a      	ldrb	r2, [r3, #5]
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <StateMachineManagment+0xeb0>)
 800190e:	719a      	strb	r2, [r3, #6]
						flagUART = 0;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <StateMachineManagment+0xe94>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
						MCP23017SetOutput(MCP23S17_OP,MCP23S17_GPIOA_ADDR,0xFF);
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <StateMachineManagment+0xea8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <StateMachineManagment+0xeac>)
 800191c:	7811      	ldrb	r1, [r2, #0]
 800191e:	22ff      	movs	r2, #255	; 0xff
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f82b 	bl	800197c <MCP23017SetOutput>
						StantionChoosingState = UserChooseStation;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <StateMachineManagment+0xeb8>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
					}

					break;
 800192c:	e003      	b.n	8001936 <StateMachineManagment+0xe7a>
					break;
 800192e:	bf00      	nop
 8001930:	e007      	b.n	8001942 <StateMachineManagment+0xe86>
					break;
 8001932:	bf00      	nop
 8001934:	e005      	b.n	8001942 <StateMachineManagment+0xe86>
					break;
 8001936:	bf00      	nop
			}
			break;
 8001938:	e003      	b.n	8001942 <StateMachineManagment+0xe86>
			break;
 800193a:	bf00      	nop
 800193c:	e002      	b.n	8001944 <StateMachineManagment+0xe88>
			break;
 800193e:	bf00      	nop
 8001940:	e000      	b.n	8001944 <StateMachineManagment+0xe88>
			break;
 8001942:	bf00      	nop
	}
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop
 8001950:	20000324 	.word	0x20000324
 8001954:	08009050 	.word	0x08009050
 8001958:	200002e4 	.word	0x200002e4
 800195c:	20000280 	.word	0x20000280
 8001960:	200002d0 	.word	0x200002d0
 8001964:	20000004 	.word	0x20000004
 8001968:	20000005 	.word	0x20000005
 800196c:	200002d8 	.word	0x200002d8
 8001970:	000f4240 	.word	0x000f4240
 8001974:	200002e1 	.word	0x200002e1
 8001978:	08009074 	.word	0x08009074

0800197c <MCP23017SetOutput>:

void MCP23017SetOutput(uint8_t OP, uint8_t ADDR, uint8_t Data)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	460b      	mov	r3, r1
 8001988:	71bb      	strb	r3, [r7, #6]
 800198a:	4613      	mov	r3, r2
 800198c:	717b      	strb	r3, [r7, #5]
//	 OP = 0b 0100 0000 (Write)
//	 ADRR = 0b 0000 0000 (0-22 Port)
//	 Data = 0b 0000 0000
//	 OutputPacket = 0b 0100 0000 | 0001 0100 | 0000 0000
	OutputPacket[0] = OP;
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <MCP23017SetOutput+0x44>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	7013      	strb	r3, [r2, #0]
	OutputPacket[1] = ADDR;
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <MCP23017SetOutput+0x44>)
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	7053      	strb	r3, [r2, #1]
	OutputPacket[2] = Data;
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <MCP23017SetOutput+0x44>)
 800199c:	797b      	ldrb	r3, [r7, #5]
 800199e:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a6:	4807      	ldr	r0, [pc, #28]	; (80019c4 <MCP23017SetOutput+0x48>)
 80019a8:	f002 f83c 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, OutputPacket, 0x3);
 80019ac:	2203      	movs	r2, #3
 80019ae:	4904      	ldr	r1, [pc, #16]	; (80019c0 <MCP23017SetOutput+0x44>)
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MCP23017SetOutput+0x4c>)
 80019b2:	f004 fd03 	bl	80063bc <HAL_SPI_Transmit_IT>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000334 	.word	0x20000334
 80019c4:	40020400 	.word	0x40020400
 80019c8:	20000198 	.word	0x20000198

080019cc <MCP23017SetInit>:

void MCP23017SetInit()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
			0x40, // OP+ADDR
			0x01, // IODIRB
			0x00, //  USE SET AS OUTPUT 0b 0000 0000 tam dia law 0w0

	};
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MCP23017SetInit+0x20>)
 80019d8:	f002 f824 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, Setting, 0x3);
 80019dc:	2203      	movs	r2, #3
 80019de:	4904      	ldr	r1, [pc, #16]	; (80019f0 <MCP23017SetInit+0x24>)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MCP23017SetInit+0x28>)
 80019e2:	f004 fceb 	bl	80063bc <HAL_SPI_Transmit_IT>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020400 	.word	0x40020400
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000198 	.word	0x20000198

080019f8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_SPI_TxCpltCallback+0x24>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d105      	bne.n	8001a14 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <HAL_SPI_TxCpltCallback+0x28>)
 8001a10:	f002 f808 	bl	8003a24 <HAL_GPIO_WritePin>
	}
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000198 	.word	0x20000198
 8001a20:	40020400 	.word	0x40020400

08001a24 <EEPROMWriteFcn>:

void EEPROMWriteFcn(uint8_t *Wdata, uint16_t len, uint16_t MemAd) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	803b      	strh	r3, [r7, #0]
	if (eepromWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <EEPROMWriteFcn+0x48>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <EEPROMWriteFcn+0x3e>
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <EEPROMWriteFcn+0x4c>)
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b20      	cmp	r3, #32
 8001a46:	d10c      	bne.n	8001a62 <EEPROMWriteFcn+0x3e>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2310      	movs	r3, #16
 8001a54:	21a0      	movs	r1, #160	; 0xa0
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <EEPROMWriteFcn+0x4c>)
 8001a58:	f002 f942 	bl	8003ce0 <HAL_I2C_Mem_Write_IT>
				Wdata, len);
		eepromWriteFlag = 0;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <EEPROMWriteFcn+0x48>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	}
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000328 	.word	0x20000328
 8001a70:	20000144 	.word	0x20000144

08001a74 <EEPROMReadFcn>:
void EEPROMReadFcn(uint8_t *Rdata, uint16_t len, uint16_t MemAd) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	803b      	strh	r3, [r7, #0]
	if (eepromReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <EEPROMReadFcn+0x48>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <EEPROMReadFcn+0x3e>
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <EEPROMReadFcn+0x4c>)
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d10c      	bne.n	8001ab2 <EEPROMReadFcn+0x3e>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, MemAd, I2C_MEMADD_SIZE_16BIT,
 8001a98:	883a      	ldrh	r2, [r7, #0]
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	21a0      	movs	r1, #160	; 0xa0
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <EEPROMReadFcn+0x4c>)
 8001aa8:	f002 f9cc 	bl	8003e44 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromReadFlag = 0;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <EEPROMReadFcn+0x48>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000329 	.word	0x20000329
 8001ac0:	20000144 	.word	0x20000144

08001ac4 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <UARTRecieveIT+0x54>)
 8001ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <UARTRecieveIT+0x54>)
 8001ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <UARTRecieveIT+0x58>)
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d010      	beq.n	8001b08 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <UARTRecieveIT+0x58>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <UARTRecieveIT+0x5c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <UARTRecieveIT+0x58>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <UARTRecieveIT+0x54>)
 8001af8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001afe:	fb01 f202 	mul.w	r2, r1, r2
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <UARTRecieveIT+0x58>)
 8001b06:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20000280 	.word	0x20000280
 8001b1c:	20000408 	.word	0x20000408
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b24:	b4b0      	push	{r4, r5, r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d10b      	bne.n	8001b4c <HAL_TIM_PeriodElapsedCallback+0x28>
		_micro += 65535;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b3e:	1854      	adds	r4, r2, r1
 8001b40:	f143 0500 	adc.w	r5, r3, #0
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b46:	e9c3 4500 	strd	r4, r5, [r3]
	else if (htim == &htim3) {
		Temp100Sec[TempPos] = ADCin;
		TempPos++;
		TempPos %=100;
	}
}
 8001b4a:	e01e      	b.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim == &htim3) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d11a      	bne.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x66>
		Temp100Sec[TempPos] = ADCin;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b5c:	8819      	ldrh	r1, [r3, #0]
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		TempPos++;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b6e:	701a      	strb	r2, [r3, #0]
		TempPos %=100;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b76:	fba2 1203 	umull	r1, r2, r2, r3
 8001b7a:	0952      	lsrs	r2, r2, #5
 8001b7c:	2164      	movs	r1, #100	; 0x64
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bcb0      	pop	{r4, r5, r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000238 	.word	0x20000238
 8001b98:	200002c8 	.word	0x200002c8
 8001b9c:	200001f0 	.word	0x200001f0
 8001ba0:	20000404 	.word	0x20000404
 8001ba4:	20000338 	.word	0x20000338
 8001ba8:	2000033c 	.word	0x2000033c
 8001bac:	51eb851f 	.word	0x51eb851f

08001bb0 <micros>:

uint64_t micros() {
 8001bb0:	b4b0      	push	{r4, r5, r7}
 8001bb2:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <micros+0x2c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <micros+0x30>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	1884      	adds	r4, r0, r2
 8001bc8:	eb41 0503 	adc.w	r5, r1, r3
 8001bcc:	4622      	mov	r2, r4
 8001bce:	462b      	mov	r3, r5
}
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bcb0      	pop	{r4, r5, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000238 	.word	0x20000238
 8001be0:	200002c8 	.word	0x200002c8

08001be4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
//	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>
	...

08001c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c42:	2007      	movs	r0, #7
 8001c44:	f001 f918 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_ADC_MspInit+0xa8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d145      	bne.n	8001cf2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_ADC_MspInit+0xac>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_ADC_MspInit+0xac>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_ADC_MspInit+0xac>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001c84:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <HAL_ADC_MspInit+0xb4>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cc8:	f001 f918 	bl	8002efc <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001cd2:	f7ff ff91 	bl	8001bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
 8001cdc:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_ADC_MspInit+0xb0>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2012      	movs	r0, #18
 8001ce8:	f001 f8d1 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cec:	2012      	movs	r0, #18
 8001cee:	f001 f8ea 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	200000e4 	.word	0x200000e4
 8001d08:	40026410 	.word	0x40026410

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <HAL_I2C_MspInit+0xa4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d13c      	bne.n	8001da8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <HAL_I2C_MspInit+0xac>)
 8001d68:	f001 fcd8 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_I2C_MspInit+0xa8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	201f      	movs	r0, #31
 8001d8e:	f001 f87e 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d92:	201f      	movs	r0, #31
 8001d94:	f001 f897 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2020      	movs	r0, #32
 8001d9e:	f001 f876 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001da2:	2020      	movs	r0, #32
 8001da4:	f001 f88f 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40005400 	.word	0x40005400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_SPI_MspInit+0x94>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d133      	bne.n	8001e46 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_SPI_MspInit+0x98>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e16:	2338      	movs	r3, #56	; 0x38
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e26:	2306      	movs	r3, #6
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <HAL_SPI_MspInit+0x9c>)
 8001e32:	f001 fc73 	bl	800371c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2033      	movs	r0, #51	; 0x33
 8001e3c:	f001 f827 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001e40:	2033      	movs	r0, #51	; 0x33
 8001e42:	f001 f840 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40003c00 	.word	0x40003c00
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020400 	.word	0x40020400

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_TIM_Base_MspInit+0x80>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d116      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201d      	movs	r0, #29
 8001e90:	f000 fffd 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e94:	201d      	movs	r0, #29
 8001e96:	f001 f816 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e9a:	e01a      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_Base_MspInit+0x88>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d115      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0x84>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	201a      	movs	r0, #26
 8001ec8:	f000 ffe1 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ecc:	201a      	movs	r0, #26
 8001ece:	f000 fffa 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d133      	bne.n	8001f72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f42:	230c      	movs	r3, #12
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f52:	2307      	movs	r3, #7
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <HAL_UART_MspInit+0x9c>)
 8001f5e:	f001 fbdd 	bl	800371c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2026      	movs	r0, #38	; 0x26
 8001f68:	f000 ff91 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f6c:	2026      	movs	r0, #38	; 0x26
 8001f6e:	f000 ffaa 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40004400 	.word	0x40004400
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f916 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <ADC_IRQHandler+0x10>)
 8001fe2:	f000 f996 	bl	8002312 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000009c 	.word	0x2000009c

08001ff0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ff6:	f004 fdad 	bl	8006b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000238 	.word	0x20000238

08002004 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM3_IRQHandler+0x10>)
 800200a:	f004 fda3 	bl	8006b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200001f0 	.word	0x200001f0

08002018 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <I2C1_EV_IRQHandler+0x10>)
 800201e:	f001 ffcf 	bl	8003fc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000144 	.word	0x20000144

0800202c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <I2C1_ER_IRQHandler+0x10>)
 8002032:	f002 f936 	bl	80042a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000144 	.word	0x20000144

08002040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <USART2_IRQHandler+0x10>)
 8002046:	f005 fa29 	bl	800749c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000280 	.word	0x20000280

08002054 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <SPI3_IRQHandler+0x10>)
 800205a:	f004 fa39 	bl	80064d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000198 	.word	0x20000198

08002068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA2_Stream0_IRQHandler+0x10>)
 800206e:	f001 f8dd 	bl	800322c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000e4 	.word	0x200000e4

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f006 f95e 	bl	800836c <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20020000 	.word	0x20020000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	2000040c 	.word	0x2000040c
 80020e4:	20000428 	.word	0x20000428

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002112:	490e      	ldr	r1, [pc, #56]	; (800214c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002128:	4c0b      	ldr	r4, [pc, #44]	; (8002158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002136:	f7ff ffd7 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f006 f91d 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7fe fa29 	bl	8000594 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002150:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8002154:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002158:	20000424 	.word	0x20000424

0800215c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <DMA1_Stream0_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 fe75 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fd36 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fe8d 	bl	8002ee2 <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 fe55 	bl	8002e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	20000014 	.word	0x20000014
 8002200:	20000010 	.word	0x20000010

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000014 	.word	0x20000014
 8002228:	20000410 	.word	0x20000410

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000410 	.word	0x20000410

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000014 	.word	0x20000014

0800228c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e033      	b.n	800230a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fcd2 	bl	8001c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb72 	bl	80029c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d049      	beq.n	80023dc <HAL_ADC_IRQHandler+0xca>
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d046      	beq.n	80023dc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d12b      	bne.n	80023cc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d127      	bne.n	80023cc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002394:	2b00      	cmp	r3, #0
 8002396:	d119      	bne.n	80023cc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0220 	bic.w	r2, r2, #32
 80023a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f9a1 	bl	8002714 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0212 	mvn.w	r2, #18
 80023da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d057      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x190>
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d054      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d139      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12b      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d124      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fc16 	bl	8002cc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 020c 	mvn.w	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x1d6>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10d      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f92f 	bl	800273c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 0201 	mvn.w	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d015      	beq.n	800252a <HAL_ADC_IRQHandler+0x218>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f043 0202 	orr.w	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0220 	mvn.w	r2, #32
 8002518:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f918 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0220 	mvn.w	r2, #32
 8002528:	601a      	str	r2, [r3, #0]
  }
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Start_DMA+0x1e>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ce      	b.n	80026f0 <HAL_ADC_Start_DMA+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d018      	beq.n	800259a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_ADC_Start_DMA+0x1c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5f      	ldr	r2, [pc, #380]	; (80026fc <HAL_ADC_Start_DMA+0x1c8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9a      	lsrs	r2, r3, #18
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800258c:	e002      	b.n	8002594 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	3b01      	subs	r3, #1
 8002592:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a8:	d107      	bne.n	80025ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 8086 	bne.w	80026d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d106      	bne.n	8002618 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f023 0206 	bic.w	r2, r3, #6
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
 8002616:	e002      	b.n	800261e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_ADC_Start_DMA+0x1cc>)
 8002628:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_ADC_Start_DMA+0x1d0>)
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_ADC_Start_DMA+0x1d4>)
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a33      	ldr	r2, [pc, #204]	; (800270c <HAL_ADC_Start_DMA+0x1d8>)
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800264a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	334c      	adds	r3, #76	; 0x4c
 8002676:	4619      	mov	r1, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f000 fcec 	bl	8003058 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d129      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e020      	b.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_ADC_Start_DMA+0x1dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11b      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e00b      	b.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	40012300 	.word	0x40012300
 8002704:	08002bc1 	.word	0x08002bc1
 8002708:	08002c7b 	.word	0x08002c7b
 800270c:	08002c97 	.word	0x08002c97
 8002710:	40012000 	.word	0x40012000

08002714 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e113      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x244>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d925      	bls.n	80027dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68d9      	ldr	r1, [r3, #12]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	2207      	movs	r2, #7
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68d9      	ldr	r1, [r3, #12]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	4603      	mov	r3, r0
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4403      	add	r3, r0
 80027ce:	3b1e      	subs	r3, #30
 80027d0:	409a      	lsls	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	e022      	b.n	8002822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6919      	ldr	r1, [r3, #16]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	2207      	movs	r2, #7
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	4603      	mov	r3, r0
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4403      	add	r3, r0
 8002818:	409a      	lsls	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d824      	bhi.n	8002874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b05      	subs	r3, #5
 800283c:	221f      	movs	r2, #31
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b05      	subs	r3, #5
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	635a      	str	r2, [r3, #52]	; 0x34
 8002872:	e04c      	b.n	800290e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d824      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b23      	subs	r3, #35	; 0x23
 800288e:	221f      	movs	r2, #31
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43da      	mvns	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	400a      	ands	r2, r1
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b23      	subs	r3, #35	; 0x23
 80028b8:	fa00 f203 	lsl.w	r2, r0, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	e023      	b.n	800290e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3b41      	subs	r3, #65	; 0x41
 80028d8:	221f      	movs	r2, #31
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	400a      	ands	r2, r1
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4618      	mov	r0, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b41      	subs	r3, #65	; 0x41
 8002902:	fa00 f203 	lsl.w	r2, r0, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_ADC_ConfigChannel+0x250>)
 8002910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <HAL_ADC_ConfigChannel+0x254>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d8>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b12      	cmp	r3, #18
 8002922:	d10b      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_ADC_ConfigChannel+0x254>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12b      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_ADC_ConfigChannel+0x258>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x1f4>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b11      	cmp	r3, #17
 8002956:	d122      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_ADC_ConfigChannel+0x258>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_ADC_ConfigChannel+0x25c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_ADC_ConfigChannel+0x260>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9a      	lsrs	r2, r3, #18
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002990:	e002      	b.n	8002998 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3b01      	subs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012300 	.word	0x40012300
 80029b8:	40012000 	.word	0x40012000
 80029bc:	10000012 	.word	0x10000012
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d0:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <ADC_Init+0x1f0>)
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	021a      	lsls	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <ADC_Init+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e00f      	b.n	8002ac6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0202 	bic.w	r2, r2, #2
 8002ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e1b      	ldrb	r3, [r3, #24]
 8002ae0:	005a      	lsls	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01b      	beq.n	8002b2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	035a      	lsls	r2, r3, #13
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e007      	b.n	8002b3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	051a      	lsls	r2, r3, #20
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b7e:	025a      	lsls	r2, r3, #9
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	029a      	lsls	r2, r3, #10
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	0f000001 	.word	0x0f000001

08002bc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d13c      	bne.n	8002c54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12b      	bne.n	8002c4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d127      	bne.n	8002c4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d119      	bne.n	8002c4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0220 	bic.w	r2, r2, #32
 8002c26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff fd61 	bl	8002714 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c52:	e00e      	b.n	8002c72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fd75 	bl	8002750 <HAL_ADC_ErrorCallback>
}
 8002c66:	e004      	b.n	8002c72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff fd4d 	bl	8002728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fd4a 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <__NVIC_GetPriorityGrouping+0x18>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 0307 	and.w	r3, r3, #7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db0b      	blt.n	8002d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	4907      	ldr	r1, [pc, #28]	; (8002d74 <__NVIC_EnableIRQ+0x38>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000e100 	.word	0xe000e100

08002d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db0a      	blt.n	8002da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <__NVIC_SetPriority+0x4c>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da0:	e00a      	b.n	8002db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4908      	ldr	r1, [pc, #32]	; (8002dc8 <__NVIC_SetPriority+0x50>)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3b04      	subs	r3, #4
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	440b      	add	r3, r1
 8002db6:	761a      	strb	r2, [r3, #24]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000e100 	.word	0xe000e100
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f1c3 0307 	rsb	r3, r3, #7
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	bf28      	it	cs
 8002dea:	2304      	movcs	r3, #4
 8002dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d902      	bls.n	8002dfc <NVIC_EncodePriority+0x30>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3b03      	subs	r3, #3
 8002dfa:	e000      	b.n	8002dfe <NVIC_EncodePriority+0x32>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	401a      	ands	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43d9      	mvns	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	4313      	orrs	r3, r2
         );
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff8e 	bl	8002d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff29 	bl	8002cd8 <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea0:	f7ff ff3e 	bl	8002d20 <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff8e 	bl	8002dcc <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff5d 	bl	8002d78 <__NVIC_SetPriority>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff31 	bl	8002d3c <__NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffa2 	bl	8002e34 <SysTick_Config>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff f990 	bl	800222c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e099      	b.n	800304c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f38:	e00f      	b.n	8002f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3a:	f7ff f977 	bl	800222c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d908      	bls.n	8002f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e078      	b.n	800304c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e8      	bne.n	8002f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_DMA_Init+0x158>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d117      	bne.n	800301e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb0f 	bl	8003624 <DMA_CheckFifoParam>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800301a:	2301      	movs	r3, #1
 800301c:	e016      	b.n	800304c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fac6 	bl	80035b8 <DMA_CalcBaseAndBitshift>
 800302c:	4603      	mov	r3, r0
 800302e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	223f      	movs	r2, #63	; 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	f010803f 	.word	0xf010803f

08003058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_DMA_Start_IT+0x26>
 800307a:	2302      	movs	r3, #2
 800307c:	e040      	b.n	8003100 <HAL_DMA_Start_IT+0xa8>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d12f      	bne.n	80030f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa58 	bl	800355c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	223f      	movs	r2, #63	; 0x3f
 80030b2:	409a      	lsls	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0216 	orr.w	r2, r2, #22
 80030c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e005      	b.n	80030fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003116:	f7ff f889 	bl	800222c <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d008      	beq.n	800313a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e052      	b.n	80031e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0216 	bic.w	r2, r2, #22
 8003148:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003158:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_DMA_Abort+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0208 	bic.w	r2, r2, #8
 8003178:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318a:	e013      	b.n	80031b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318c:	f7ff f84e 	bl	800222c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b05      	cmp	r3, #5
 8003198:	d90c      	bls.n	80031b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e015      	b.n	80031e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e4      	bne.n	800318c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	223f      	movs	r2, #63	; 0x3f
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d004      	beq.n	8003206 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00c      	b.n	8003220 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003238:	4b8e      	ldr	r3, [pc, #568]	; (8003474 <HAL_DMA_IRQHandler+0x248>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a8e      	ldr	r2, [pc, #568]	; (8003478 <HAL_DMA_IRQHandler+0x24c>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0a9b      	lsrs	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	2208      	movs	r2, #8
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01a      	beq.n	8003298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0204 	bic.w	r2, r2, #4
 800327e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	2208      	movs	r2, #8
 8003286:	409a      	lsls	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2201      	movs	r2, #1
 800329e:	409a      	lsls	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2201      	movs	r2, #1
 80032bc:	409a      	lsls	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2204      	movs	r2, #4
 80032d4:	409a      	lsls	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2204      	movs	r2, #4
 80032f2:	409a      	lsls	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2210      	movs	r2, #16
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d043      	beq.n	800339c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d03c      	beq.n	800339c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2210      	movs	r2, #16
 8003328:	409a      	lsls	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d018      	beq.n	800336e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
 800335a:	e01f      	b.n	800339c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	e016      	b.n	800339c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0208 	bic.w	r2, r2, #8
 800338a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2220      	movs	r2, #32
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 808f 	beq.w	80034cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8087 	beq.w	80034cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2220      	movs	r2, #32
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d136      	bne.n	8003444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0216 	bic.w	r2, r2, #22
 80033e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <HAL_DMA_IRQHandler+0x1da>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0208 	bic.w	r2, r2, #8
 8003414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	223f      	movs	r2, #63	; 0x3f
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d07e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
        }
        return;
 8003442:	e079      	b.n	8003538 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01d      	beq.n	800348e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10d      	bne.n	800347c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	2b00      	cmp	r3, #0
 8003466:	d031      	beq.n	80034cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e02c      	b.n	80034cc <HAL_DMA_IRQHandler+0x2a0>
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c
 8003478:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d023      	beq.n	80034cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e01e      	b.n	80034cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10f      	bne.n	80034bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0210 	bic.w	r2, r2, #16
 80034aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d032      	beq.n	800353a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d022      	beq.n	8003526 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d307      	bcc.n	8003514 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f2      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x2cc>
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003514:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
 8003536:	e000      	b.n	800353a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003538:	bf00      	nop
    }
  }
}
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800354e:	b2db      	uxtb	r3, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003578:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d108      	bne.n	800359c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800359a:	e007      	b.n	80035ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3b10      	subs	r3, #16
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <DMA_CalcBaseAndBitshift+0x64>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <DMA_CalcBaseAndBitshift+0x68>)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d909      	bls.n	80035fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58
 80035f8:	e007      	b.n	800360a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	aaaaaaab 	.word	0xaaaaaaab
 8003620:	080090b0 	.word	0x080090b0

08003624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11f      	bne.n	800367e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d856      	bhi.n	80036f2 <DMA_CheckFifoParam+0xce>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x28>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	0800366f 	.word	0x0800366f
 8003654:	0800365d 	.word	0x0800365d
 8003658:	080036f3 	.word	0x080036f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d046      	beq.n	80036f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e043      	b.n	80036f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003676:	d140      	bne.n	80036fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367c:	e03d      	b.n	80036fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d121      	bne.n	80036cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d837      	bhi.n	80036fe <DMA_CheckFifoParam+0xda>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DMA_CheckFifoParam+0x70>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036ab 	.word	0x080036ab
 800369c:	080036a5 	.word	0x080036a5
 80036a0:	080036bd 	.word	0x080036bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e030      	b.n	800370c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e022      	b.n	8003702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c4:	d11f      	bne.n	8003706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ca:	e01c      	b.n	8003706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d903      	bls.n	80036da <DMA_CheckFifoParam+0xb6>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036d8:	e018      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      break;
 80036de:	e015      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e00b      	b.n	800370a <DMA_CheckFifoParam+0xe6>
      break;
 80036f2:	bf00      	nop
 80036f4:	e00a      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e008      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
 80036fc:	e006      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;   
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
    }
  } 
  
  return status; 
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e159      	b.n	80039ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	f040 8148 	bne.w	80039e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d005      	beq.n	800376e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	2b02      	cmp	r3, #2
 800376c:	d130      	bne.n	80037d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a4:	2201      	movs	r2, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 0201 	and.w	r2, r3, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d017      	beq.n	800380c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d123      	bne.n	8003860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	220f      	movs	r2, #15
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0203 	and.w	r2, r3, #3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a2 	beq.w	80039e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b57      	ldr	r3, [pc, #348]	; (8003a04 <HAL_GPIO_Init+0x2e8>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <HAL_GPIO_Init+0x2e8>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b54      	ldr	r3, [pc, #336]	; (8003a04 <HAL_GPIO_Init+0x2e8>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038be:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_GPIO_Init+0x2ec>)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	220f      	movs	r2, #15
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a49      	ldr	r2, [pc, #292]	; (8003a0c <HAL_GPIO_Init+0x2f0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x202>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a48      	ldr	r2, [pc, #288]	; (8003a10 <HAL_GPIO_Init+0x2f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x1fe>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a47      	ldr	r2, [pc, #284]	; (8003a14 <HAL_GPIO_Init+0x2f8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x1fa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a46      	ldr	r2, [pc, #280]	; (8003a18 <HAL_GPIO_Init+0x2fc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x1f6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a45      	ldr	r2, [pc, #276]	; (8003a1c <HAL_GPIO_Init+0x300>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x1f2>
 800390a:	2304      	movs	r3, #4
 800390c:	e008      	b.n	8003920 <HAL_GPIO_Init+0x204>
 800390e:	2307      	movs	r3, #7
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x204>
 8003912:	2303      	movs	r3, #3
 8003914:	e004      	b.n	8003920 <HAL_GPIO_Init+0x204>
 8003916:	2302      	movs	r3, #2
 8003918:	e002      	b.n	8003920 <HAL_GPIO_Init+0x204>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_GPIO_Init+0x204>
 800391e:	2300      	movs	r3, #0
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f002 0203 	and.w	r2, r2, #3
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	4093      	lsls	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_GPIO_Init+0x2ec>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <HAL_GPIO_Init+0x304>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003962:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <HAL_GPIO_Init+0x304>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_GPIO_Init+0x304>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <HAL_GPIO_Init+0x304>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_GPIO_Init+0x304>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e0:	4a0f      	ldr	r2, [pc, #60]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f67f aea2 	bls.w	8003738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020800 	.word	0x40020800
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40013c00 	.word	0x40013c00

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a40:	e003      	b.n	8003a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	619a      	str	r2, [r3, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e12b      	b.n	8003cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fe f944 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003abc:	f002 fbcc 	bl	8006258 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a81      	ldr	r2, [pc, #516]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d807      	bhi.n	8003adc <HAL_I2C_Init+0x84>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a80      	ldr	r2, [pc, #512]	; (8003cd0 <HAL_I2C_Init+0x278>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e006      	b.n	8003aea <HAL_I2C_Init+0x92>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a7d      	ldr	r2, [pc, #500]	; (8003cd4 <HAL_I2C_Init+0x27c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0e7      	b.n	8003cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a78      	ldr	r2, [pc, #480]	; (8003cd8 <HAL_I2C_Init+0x280>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a6a      	ldr	r2, [pc, #424]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d802      	bhi.n	8003b2c <HAL_I2C_Init+0xd4>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	e009      	b.n	8003b40 <HAL_I2C_Init+0xe8>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	4a69      	ldr	r2, [pc, #420]	; (8003cdc <HAL_I2C_Init+0x284>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	3301      	adds	r3, #1
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	495c      	ldr	r1, [pc, #368]	; (8003ccc <HAL_I2C_Init+0x274>)
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	d819      	bhi.n	8003b94 <HAL_I2C_Init+0x13c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e59      	subs	r1, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b74:	400b      	ands	r3, r1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_I2C_Init+0x138>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1e59      	subs	r1, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8e:	e051      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003b90:	2304      	movs	r3, #4
 8003b92:	e04f      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <HAL_I2C_Init+0x168>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e58      	subs	r0, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e012      	b.n	8003be6 <HAL_I2C_Init+0x18e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	0099      	lsls	r1, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_I2C_Init+0x196>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e022      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10e      	bne.n	8003c14 <HAL_I2C_Init+0x1bc>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e58      	subs	r0, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	440b      	add	r3, r1
 8003c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Init+0x1dc>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	6809      	ldr	r1, [r1, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6911      	ldr	r1, [r2, #16]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	000186a0 	.word	0x000186a0
 8003cd0:	001e847f 	.word	0x001e847f
 8003cd4:	003d08ff 	.word	0x003d08ff
 8003cd8:	431bde83 	.word	0x431bde83
 8003cdc:	10624dd3 	.word	0x10624dd3

08003ce0 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	813b      	strh	r3, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	f040 808e 	bne.w	8003e28 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_I2C_Mem_Write_IT+0x158>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_I2C_Mem_Write_IT+0x15c>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	0a1a      	lsrs	r2, r3, #8
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e064      	b.n	8003e2a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d0db      	beq.n	8003d26 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_Mem_Write_IT+0x9c>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e056      	b.n	8003e2a <HAL_I2C_Mem_Write_IT+0x14a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_I2C_Mem_Write_IT+0x160>)
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003de4:	897a      	ldrh	r2, [r7, #10]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003dea:	893a      	ldrh	r2, [r7, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e22:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	14f8b589 	.word	0x14f8b589
 8003e40:	ffff0000 	.word	0xffff0000

08003e44 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	f040 809a 	bne.w	8003fa4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_I2C_Mem_Read_IT+0x170>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	4a50      	ldr	r2, [pc, #320]	; (8003fb8 <HAL_I2C_Mem_Read_IT+0x174>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	0a1a      	lsrs	r2, r3, #8
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009a      	lsls	r2, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d116      	bne.n	8003ec4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e070      	b.n	8003fa6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d0db      	beq.n	8003e8a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_Mem_Read_IT+0x9c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e062      	b.n	8003fa6 <HAL_I2C_Mem_Read_IT+0x162>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2222      	movs	r2, #34	; 0x22
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_I2C_Mem_Read_IT+0x178>)
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f48:	897a      	ldrh	r2, [r7, #10]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003f4e:	893a      	ldrh	r2, [r7, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f9e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	14f8b589 	.word	0x14f8b589
 8003fbc:	ffff0000 	.word	0xffff0000

08003fc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d003      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x38>
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	f040 80c1 	bne.w	800417a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_I2C_EV_IRQHandler+0x6e>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004018:	d003      	beq.n	8004022 <HAL_I2C_EV_IRQHandler+0x62>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004020:	d101      	bne.n	8004026 <HAL_I2C_EV_IRQHandler+0x66>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_I2C_EV_IRQHandler+0x68>
 8004026:	2300      	movs	r3, #0
 8004028:	2b01      	cmp	r3, #1
 800402a:	f000 8132 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x92>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	0a5b      	lsrs	r3, r3, #9
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f001 fc7b 	bl	8005940 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fd83 	bl	8004b56 <I2C_Master_SB>
 8004050:	e092      	b.n	8004178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_I2C_EV_IRQHandler+0xb2>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	0a5b      	lsrs	r3, r3, #9
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fdf9 	bl	8004c62 <I2C_Master_ADD10>
 8004070:	e082      	b.n	8004178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0xd2>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	0a5b      	lsrs	r3, r3, #9
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fe13 	bl	8004cb6 <I2C_Master_ADDR>
 8004090:	e072      	b.n	8004178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03b      	beq.n	8004116 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ac:	f000 80f3 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	09db      	lsrs	r3, r3, #7
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00f      	beq.n	80040dc <HAL_I2C_EV_IRQHandler+0x11c>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	0a9b      	lsrs	r3, r3, #10
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_I2C_EV_IRQHandler+0x11c>
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f9f3 	bl	80044c0 <I2C_MasterTransmit_TXE>
 80040da:	e04d      	b.n	8004178 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80d6 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	0a5b      	lsrs	r3, r3, #9
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80cf 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	2b21      	cmp	r3, #33	; 0x21
 80040fc:	d103      	bne.n	8004106 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa7a 	bl	80045f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004104:	e0c7      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	f040 80c4 	bne.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fae8 	bl	80046e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004114:	e0bf      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004124:	f000 80b7 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00f      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x194>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x194>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fb5d 	bl	800480c <I2C_MasterReceive_RXNE>
 8004152:	e011      	b.n	8004178 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 809a 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	0a5b      	lsrs	r3, r3, #9
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8093 	beq.w	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fc06 	bl	8004982 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004176:	e08e      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004178:	e08d      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e007      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x20e>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	0a5b      	lsrs	r3, r3, #9
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041c4:	69b9      	ldr	r1, [r7, #24]
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 ffc4 	bl	8005154 <I2C_Slave_ADDR>
 80041cc:	e066      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x22e>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	0a5b      	lsrs	r3, r3, #9
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fffe 	bl	80051e8 <I2C_Slave_STOPF>
 80041ec:	e056      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d002      	beq.n	80041fa <HAL_I2C_EV_IRQHandler+0x23a>
 80041f4:	7bbb      	ldrb	r3, [r7, #14]
 80041f6:	2b29      	cmp	r3, #41	; 0x29
 80041f8:	d125      	bne.n	8004246 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	09db      	lsrs	r3, r3, #7
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <HAL_I2C_EV_IRQHandler+0x266>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	0a9b      	lsrs	r3, r3, #10
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_I2C_EV_IRQHandler+0x266>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 feda 	bl	8004fd8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004224:	e039      	b.n	800429a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d033      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0x2da>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	0a5b      	lsrs	r3, r3, #9
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02d      	beq.n	800429a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ff07 	bl	8005052 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004244:	e029      	b.n	800429a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	099b      	lsrs	r3, r3, #6
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00f      	beq.n	8004272 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	0a9b      	lsrs	r3, r3, #10
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_I2C_EV_IRQHandler+0x2b2>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 ff12 	bl	8005094 <I2C_SlaveReceive_RXNE>
 8004270:	e014      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 ff40 	bl	8005110 <I2C_SlaveReceive_BTF>
 8004290:	e004      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800429a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	; 0x28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	0a5b      	lsrs	r3, r3, #9
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <HAL_I2C_ER_IRQHandler+0x78>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004318:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	0a9b      	lsrs	r3, r3, #10
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03f      	beq.n	80043a6 <HAL_I2C_ER_IRQHandler+0x104>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d039      	beq.n	80043a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800434c:	7ebb      	ldrb	r3, [r7, #26]
 800434e:	2b20      	cmp	r3, #32
 8004350:	d112      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xd6>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xd6>
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b21      	cmp	r3, #33	; 0x21
 800435c:	d008      	beq.n	8004370 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b29      	cmp	r3, #41	; 0x29
 8004362:	d005      	beq.n	8004370 <HAL_I2C_ER_IRQHandler+0xce>
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	2b28      	cmp	r3, #40	; 0x28
 8004368:	d106      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b21      	cmp	r3, #33	; 0x21
 800436e:	d103      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f869 	bl	8005448 <I2C_Slave_AF>
 8004376:	e016      	b.n	80043a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004380:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800438a:	7efb      	ldrb	r3, [r7, #27]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d002      	beq.n	8004396 <HAL_I2C_ER_IRQHandler+0xf4>
 8004390:	7efb      	ldrb	r3, [r7, #27]
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	0adb      	lsrs	r3, r3, #11
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 f8a0 	bl	8005528 <I2C_ITError>
  }
}
 80043e8:	bf00      	nop
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
 800444c:	4613      	mov	r3, r2
 800444e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d150      	bne.n	8004588 <I2C_MasterTransmit_TXE+0xc8>
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b21      	cmp	r3, #33	; 0x21
 80044ea:	d14d      	bne.n	8004588 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d01d      	beq.n	800452e <I2C_MasterTransmit_TXE+0x6e>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d01a      	beq.n	800452e <I2C_MasterTransmit_TXE+0x6e>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044fe:	d016      	beq.n	800452e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800450e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2211      	movs	r2, #17
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff62 	bl	80043f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800452c:	e060      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800453c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d107      	bne.n	8004578 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff7d 	bl	8004470 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004576:	e03b      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff35 	bl	80043f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004586:	e033      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b21      	cmp	r3, #33	; 0x21
 800458c:	d005      	beq.n	800459a <I2C_MasterTransmit_TXE+0xda>
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d12d      	bne.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b22      	cmp	r3, #34	; 0x22
 8004598:	d12a      	bne.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045b4:	e01c      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d103      	bne.n	80045ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f88e 	bl	80046e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80045c8:	e012      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ee:	e7ff      	b.n	80045f0 <I2C_MasterTransmit_TXE+0x130>
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b21      	cmp	r3, #33	; 0x21
 8004610:	d164      	bne.n	80046dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004640:	e04c      	b.n	80046dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d01d      	beq.n	8004684 <I2C_MasterTransmit_BTF+0x8c>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b20      	cmp	r3, #32
 800464c:	d01a      	beq.n	8004684 <I2C_MasterTransmit_BTF+0x8c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004654:	d016      	beq.n	8004684 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004664:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2211      	movs	r2, #17
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff feb7 	bl	80043f0 <HAL_I2C_MasterTxCpltCallback>
}
 8004682:	e02b      	b.n	80046dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004692:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d107      	bne.n	80046ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fed2 	bl	8004470 <HAL_I2C_MemTxCpltCallback>
}
 80046cc:	e006      	b.n	80046dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe8a 	bl	80043f0 <HAL_I2C_MasterTxCpltCallback>
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10b      	bne.n	800471c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800471a:	e073      	b.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	b29b      	uxth	r3, r3
 8004722:	121b      	asrs	r3, r3, #8
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004736:	e065      	b.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10b      	bne.n	8004758 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004756:	e055      	b.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	2b02      	cmp	r3, #2
 800475e:	d151      	bne.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b22      	cmp	r3, #34	; 0x22
 8004764:	d10d      	bne.n	8004782 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004774:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004780:	e040      	b.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b21      	cmp	r3, #33	; 0x21
 8004790:	d112      	bne.n	80047b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047b6:	e025      	b.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d120      	bne.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b21      	cmp	r3, #33	; 0x21
 80047c6:	d11d      	bne.n	8004804 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fe36 	bl	8004470 <HAL_I2C_MemTxCpltCallback>
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b22      	cmp	r3, #34	; 0x22
 800481e:	f040 80ac 	bne.w	800497a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d921      	bls.n	8004874 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b03      	cmp	r3, #3
 800485e:	f040 808c 	bne.w	800497a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004872:	e082      	b.n	800497a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	2b02      	cmp	r3, #2
 800487a:	d075      	beq.n	8004968 <I2C_MasterReceive_RXNE+0x15c>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d002      	beq.n	8004888 <I2C_MasterReceive_RXNE+0x7c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d16f      	bne.n	8004968 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 f827 	bl	80058dc <I2C_WaitOnSTOPRequestThroughIT>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d142      	bne.n	800491a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d10a      	bne.n	8004904 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fdc1 	bl	8004484 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004902:	e03a      	b.n	800497a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2212      	movs	r2, #18
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fd76 	bl	8004404 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004918:	e02f      	b.n	800497a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004928:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fd99 	bl	8004498 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004966:	e008      	b.n	800497a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004976:	605a      	str	r2, [r3, #4]
}
 8004978:	e7ff      	b.n	800497a <I2C_MasterReceive_RXNE+0x16e>
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b04      	cmp	r3, #4
 8004998:	d11b      	bne.n	80049d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049d0:	e0bd      	b.n	8004b4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d129      	bne.n	8004a30 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00a      	beq.n	8004a08 <I2C_MasterReceive_BTF+0x86>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d007      	beq.n	8004a08 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a2e:	e08e      	b.n	8004b4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d176      	bne.n	8004b28 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <I2C_MasterReceive_BTF+0xc4>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d108      	bne.n	8004a58 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e019      	b.n	8004a8c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d002      	beq.n	8004a64 <I2C_MasterReceive_BTF+0xe2>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d108      	bne.n	8004a76 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e00a      	b.n	8004a8c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d007      	beq.n	8004a8c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ae6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d10a      	bne.n	8004b12 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fcba 	bl	8004484 <HAL_I2C_MemRxCpltCallback>
}
 8004b10:	e01d      	b.n	8004b4e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2212      	movs	r2, #18
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fc6f 	bl	8004404 <HAL_I2C_MasterRxCpltCallback>
}
 8004b26:	e012      	b.n	8004b4e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d117      	bne.n	8004b9a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b82:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b84:	e067      	b.n	8004c56 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
}
 8004b98:	e05d      	b.n	8004c56 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba2:	d133      	bne.n	8004c0c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b21      	cmp	r3, #33	; 0x21
 8004bae:	d109      	bne.n	8004bc4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc0:	611a      	str	r2, [r3, #16]
 8004bc2:	e008      	b.n	8004bd6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <I2C_Master_SB+0x92>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d032      	beq.n	8004c56 <I2C_Master_SB+0x100>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02d      	beq.n	8004c56 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c08:	605a      	str	r2, [r3, #4]
}
 8004c0a:	e024      	b.n	8004c56 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10e      	bne.n	8004c32 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	11db      	asrs	r3, r3, #7
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0306 	and.w	r3, r3, #6
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f063 030f 	orn	r3, r3, #15
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]
}
 8004c30:	e011      	b.n	8004c56 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10d      	bne.n	8004c56 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	11db      	asrs	r3, r3, #7
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0306 	and.w	r3, r3, #6
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f063 030e 	orn	r3, r3, #14
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <I2C_Master_ADD10+0x26>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d108      	bne.n	8004c9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00c      	beq.n	8004caa <I2C_Master_ADD10+0x48>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca8:	605a      	str	r2, [r3, #4]
  }
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b091      	sub	sp, #68	; 0x44
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b22      	cmp	r3, #34	; 0x22
 8004cde:	f040 8169 	bne.w	8004fb4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <I2C_Master_ADDR+0x54>
 8004cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d10b      	bne.n	8004d0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	e160      	b.n	8004fcc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11d      	bne.n	8004d4e <I2C_Master_ADDR+0x98>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d1a:	d118      	bne.n	8004d4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d4c:	e13e      	b.n	8004fcc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d113      	bne.n	8004d80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e115      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	f040 808a 	bne.w	8004ea0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d92:	d137      	bne.n	8004e04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d113      	bne.n	8004ddc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	e0e7      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e0d3      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d02e      	beq.n	8004e68 <I2C_Master_ADDR+0x1b2>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d02b      	beq.n	8004e68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	2b12      	cmp	r3, #18
 8004e14:	d102      	bne.n	8004e1c <I2C_Master_ADDR+0x166>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d125      	bne.n	8004e68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00e      	beq.n	8004e40 <I2C_Master_ADDR+0x18a>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d00b      	beq.n	8004e40 <I2C_Master_ADDR+0x18a>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d008      	beq.n	8004e40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e007      	b.n	8004e50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	e0a1      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e085      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d14d      	bne.n	8004f46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d016      	beq.n	8004ede <I2C_Master_ADDR+0x228>
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d013      	beq.n	8004ede <I2C_Master_ADDR+0x228>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d010      	beq.n	8004ede <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e007      	b.n	8004eee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efc:	d117      	bne.n	8004f2e <I2C_Master_ADDR+0x278>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f04:	d00b      	beq.n	8004f1e <I2C_Master_ADDR+0x268>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d008      	beq.n	8004f1e <I2C_Master_ADDR+0x268>
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d005      	beq.n	8004f1e <I2C_Master_ADDR+0x268>
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d002      	beq.n	8004f1e <I2C_Master_ADDR+0x268>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d107      	bne.n	8004f2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e032      	b.n	8004fac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f64:	d117      	bne.n	8004f96 <I2C_Master_ADDR+0x2e0>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f6c:	d00b      	beq.n	8004f86 <I2C_Master_ADDR+0x2d0>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d008      	beq.n	8004f86 <I2C_Master_ADDR+0x2d0>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d005      	beq.n	8004f86 <I2C_Master_ADDR+0x2d0>
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d002      	beq.n	8004f86 <I2C_Master_ADDR+0x2d0>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d107      	bne.n	8004f96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fb2:	e00b      	b.n	8004fcc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	e7ff      	b.n	8004fcc <I2C_Master_ADDR+0x316>
 8004fcc:	bf00      	nop
 8004fce:	3744      	adds	r7, #68	; 0x44
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02b      	beq.n	800504a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d114      	bne.n	800504a <I2C_SlaveTransmit_TXE+0x72>
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b29      	cmp	r3, #41	; 0x29
 8005024:	d111      	bne.n	800504a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2228      	movs	r2, #40	; 0x28
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff f9e7 	bl	8004418 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d011      	beq.n	8005088 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d02c      	beq.n	8005108 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d114      	bne.n	8005108 <I2C_SlaveReceive_RXNE+0x74>
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b2a      	cmp	r3, #42	; 0x2a
 80050e2:	d111      	bne.n	8005108 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2222      	movs	r2, #34	; 0x22
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2228      	movs	r2, #40	; 0x28
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff f992 	bl	800442c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800516e:	2b28      	cmp	r3, #40	; 0x28
 8005170:	d127      	bne.n	80051c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005180:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	81bb      	strh	r3, [r7, #12]
 80051a4:	e002      	b.n	80051ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051b4:	89ba      	ldrh	r2, [r7, #12]
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff f940 	bl	8004440 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051c0:	e00e      	b.n	80051e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005206:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005208:	2300      	movs	r3, #0
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005244:	d172      	bne.n	800532c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b22      	cmp	r3, #34	; 0x22
 800524a:	d002      	beq.n	8005252 <I2C_Slave_STOPF+0x6a>
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b2a      	cmp	r3, #42	; 0x2a
 8005250:	d135      	bne.n	80052be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005284:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f958 	bl	8003540 <HAL_DMA_GetState>
 8005290:	4603      	mov	r3, r0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d049      	beq.n	800532a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	4a69      	ldr	r2, [pc, #420]	; (8005440 <I2C_Slave_STOPF+0x258>)
 800529c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd ffa0 	bl	80031e8 <HAL_DMA_Abort_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03d      	beq.n	800532a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b8:	4610      	mov	r0, r2
 80052ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052bc:	e035      	b.n	800532a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0204 	orr.w	r2, r3, #4
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe f922 	bl	8003540 <HAL_DMA_GetState>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d014      	beq.n	800532c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	4a4e      	ldr	r2, [pc, #312]	; (8005440 <I2C_Slave_STOPF+0x258>)
 8005308:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd ff6a 	bl	80031e8 <HAL_DMA_Abort_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
 8005328:	e000      	b.n	800532c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800532a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d03e      	beq.n	80053b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d112      	bne.n	800536a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d112      	bne.n	800539e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 0204 	orr.w	r2, r3, #4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8b3 	bl	8005528 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053c2:	e039      	b.n	8005438 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b2a      	cmp	r3, #42	; 0x2a
 80053c8:	d109      	bne.n	80053de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2228      	movs	r2, #40	; 0x28
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff f827 	bl	800442c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b28      	cmp	r3, #40	; 0x28
 80053e8:	d111      	bne.n	800540e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <I2C_Slave_STOPF+0x25c>)
 80053ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff f828 	bl	800445c <HAL_I2C_ListenCpltCallback>
}
 800540c:	e014      	b.n	8005438 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	2b22      	cmp	r3, #34	; 0x22
 8005414:	d002      	beq.n	800541c <I2C_Slave_STOPF+0x234>
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b22      	cmp	r3, #34	; 0x22
 800541a:	d10d      	bne.n	8005438 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fe fffa 	bl	800442c <HAL_I2C_SlaveRxCpltCallback>
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	0800578d 	.word	0x0800578d
 8005444:	ffff0000 	.word	0xffff0000

08005448 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d002      	beq.n	800546a <I2C_Slave_AF+0x22>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b20      	cmp	r3, #32
 8005468:	d129      	bne.n	80054be <I2C_Slave_AF+0x76>
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b28      	cmp	r3, #40	; 0x28
 800546e:	d126      	bne.n	80054be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <I2C_Slave_AF+0xdc>)
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005484:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800548e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fe ffd0 	bl	800445c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054bc:	e02e      	b.n	800551c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b21      	cmp	r3, #33	; 0x21
 80054c2:	d126      	bne.n	8005512 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	; (8005524 <I2C_Slave_AF+0xdc>)
 80054c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2221      	movs	r2, #33	; 0x21
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005508:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe ff84 	bl	8004418 <HAL_I2C_SlaveTxCpltCallback>
}
 8005510:	e004      	b.n	800551c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551a:	615a      	str	r2, [r3, #20]
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	ffff0000 	.word	0xffff0000

08005528 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005540:	7bbb      	ldrb	r3, [r7, #14]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d002      	beq.n	800554c <I2C_ITError+0x24>
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d10a      	bne.n	8005562 <I2C_ITError+0x3a>
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b22      	cmp	r3, #34	; 0x22
 8005550:	d107      	bne.n	8005562 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005560:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005568:	2b28      	cmp	r3, #40	; 0x28
 800556a:	d107      	bne.n	800557c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2228      	movs	r2, #40	; 0x28
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800557a:	e015      	b.n	80055a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d00a      	beq.n	80055a2 <I2C_ITError+0x7a>
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b60      	cmp	r3, #96	; 0x60
 8005590:	d007      	beq.n	80055a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b6:	d162      	bne.n	800567e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d020      	beq.n	8005618 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	4a6a      	ldr	r2, [pc, #424]	; (8005784 <I2C_ITError+0x25c>)
 80055dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fd fe00 	bl	80031e8 <HAL_DMA_Abort_IT>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8089 	beq.w	8005702 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005612:	4610      	mov	r0, r2
 8005614:	4798      	blx	r3
 8005616:	e074      	b.n	8005702 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	4a59      	ldr	r2, [pc, #356]	; (8005784 <I2C_ITError+0x25c>)
 800561e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	4618      	mov	r0, r3
 8005626:	f7fd fddf 	bl	80031e8 <HAL_DMA_Abort_IT>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d068      	beq.n	8005702 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d10b      	bne.n	8005656 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	e041      	b.n	8005702 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b60      	cmp	r3, #96	; 0x60
 8005688:	d125      	bne.n	80056d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d10b      	bne.n	80056be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fe feec 	bl	80044ac <HAL_I2C_AbortCpltCallback>
 80056d4:	e015      	b.n	8005702 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d10b      	bne.n	80056fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fe fecb 	bl	8004498 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10e      	bne.n	8005730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005722:	2b00      	cmp	r3, #0
 8005724:	d104      	bne.n	8005730 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b04      	cmp	r3, #4
 8005752:	d113      	bne.n	800577c <I2C_ITError+0x254>
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b28      	cmp	r3, #40	; 0x28
 8005758:	d110      	bne.n	800577c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <I2C_ITError+0x260>)
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe fe70 	bl	800445c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	0800578d 	.word	0x0800578d
 8005788:	ffff0000 	.word	0xffff0000

0800578c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <I2C_DMAAbort+0x148>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <I2C_DMAAbort+0x14c>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0a1a      	lsrs	r2, r3, #8
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00da      	lsls	r2, r3, #3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80057d2:	e00a      	b.n	80057ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e8:	d0ea      	beq.n	80057c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	2200      	movs	r2, #0
 80057f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	2200      	movs	r2, #0
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005818:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	2200      	movs	r2, #0
 800582e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	2200      	movs	r2, #0
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d10e      	bne.n	800587a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7fe fe1a 	bl	80044ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005878:	e027      	b.n	80058ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005880:	2b28      	cmp	r3, #40	; 0x28
 8005882:	d117      	bne.n	80058b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2228      	movs	r2, #40	; 0x28
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058b2:	e007      	b.n	80058c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80058c4:	6978      	ldr	r0, [r7, #20]
 80058c6:	f7fe fde7 	bl	8004498 <HAL_I2C_ErrorCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2000000c 	.word	0x2000000c
 80058d8:	14f8b589 	.word	0x14f8b589

080058dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	08db      	lsrs	r3, r3, #3
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	0a1a      	lsrs	r2, r3, #8
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b01      	subs	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d107      	bne.n	800591a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0220 	orr.w	r2, r3, #32
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e008      	b.n	800592c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005928:	d0e9      	beq.n	80058fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	2000000c 	.word	0x2000000c
 800593c:	14f8b589 	.word	0x14f8b589

08005940 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005950:	d103      	bne.n	800595a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005958:	e007      	b.n	800596a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005962:	d102      	bne.n	800596a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2208      	movs	r2, #8
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e267      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d075      	beq.n	8005a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005996:	4b88      	ldr	r3, [pc, #544]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00c      	beq.n	80059bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a2:	4b85      	ldr	r3, [pc, #532]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d112      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b82      	ldr	r3, [pc, #520]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	4b7e      	ldr	r3, [pc, #504]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05b      	beq.n	8005a80 <HAL_RCC_OscConfig+0x108>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d157      	bne.n	8005a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e242      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x74>
 80059de:	4b76      	ldr	r3, [pc, #472]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a75      	ldr	r2, [pc, #468]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e01d      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x98>
 80059f6:	4b70      	ldr	r3, [pc, #448]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6f      	ldr	r2, [pc, #444]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b6d      	ldr	r3, [pc, #436]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6c      	ldr	r2, [pc, #432]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0xb0>
 8005a10:	4b69      	ldr	r3, [pc, #420]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a68      	ldr	r2, [pc, #416]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a65      	ldr	r2, [pc, #404]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fc fbfc 	bl	800222c <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fc fbf8 	bl	800222c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	; 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e207      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b5b      	ldr	r3, [pc, #364]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0xc0>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fc fbe8 	bl	800222c <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fc fbe4 	bl	800222c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1f3      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	4b51      	ldr	r3, [pc, #324]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0xe8>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d063      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8e:	4b4a      	ldr	r3, [pc, #296]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b44      	ldr	r3, [pc, #272]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e1c7      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4937      	ldr	r1, [pc, #220]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	e03a      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae8:	4b34      	ldr	r3, [pc, #208]	; (8005bbc <HAL_RCC_OscConfig+0x244>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fc fb9d 	bl	800222c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fc fb99 	bl	800222c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1a8      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4925      	ldr	r1, [pc, #148]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	e015      	b.n	8005b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_OscConfig+0x244>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fc fb7c 	bl	800222c <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fc fb78 	bl	800222c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e187      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d036      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <HAL_RCC_OscConfig+0x248>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fc fb5c 	bl	800222c <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fc fb58 	bl	800222c <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e167      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x200>
 8005b96:	e01b      	b.n	8005bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <HAL_RCC_OscConfig+0x248>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fb45 	bl	800222c <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	e00e      	b.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fc fb41 	bl	800222c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d907      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e150      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	42470000 	.word	0x42470000
 8005bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	4b88      	ldr	r3, [pc, #544]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ea      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8097 	beq.w	8005d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be2:	4b81      	ldr	r3, [pc, #516]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	4b7d      	ldr	r3, [pc, #500]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	4a7c      	ldr	r2, [pc, #496]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bfe:	4b7a      	ldr	r3, [pc, #488]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0e:	4b77      	ldr	r3, [pc, #476]	; (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d118      	bne.n	8005c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1a:	4b74      	ldr	r3, [pc, #464]	; (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a73      	ldr	r2, [pc, #460]	; (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c26:	f7fc fb01 	bl	800222c <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2e:	f7fc fafd 	bl	800222c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e10c      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c40:	4b6a      	ldr	r3, [pc, #424]	; (8005dec <HAL_RCC_OscConfig+0x474>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x2ea>
 8005c54:	4b64      	ldr	r3, [pc, #400]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c58:	4a63      	ldr	r2, [pc, #396]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c60:	e01c      	b.n	8005c9c <HAL_RCC_OscConfig+0x324>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x30c>
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	4a5e      	ldr	r2, [pc, #376]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	6713      	str	r3, [r2, #112]	; 0x70
 8005c76:	4b5c      	ldr	r3, [pc, #368]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a5b      	ldr	r2, [pc, #364]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70
 8005c82:	e00b      	b.n	8005c9c <HAL_RCC_OscConfig+0x324>
 8005c84:	4b58      	ldr	r3, [pc, #352]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a57      	ldr	r2, [pc, #348]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c90:	4b55      	ldr	r3, [pc, #340]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a54      	ldr	r2, [pc, #336]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f023 0304 	bic.w	r3, r3, #4
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fc fac2 	bl	800222c <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f7fc fabe 	bl	800222c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0cb      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0ee      	beq.n	8005cac <HAL_RCC_OscConfig+0x334>
 8005cce:	e014      	b.n	8005cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd0:	f7fc faac 	bl	800222c <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd8:	f7fc faa8 	bl	800222c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0b5      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cee:	4b3e      	ldr	r3, [pc, #248]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ee      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d00:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	4a38      	ldr	r2, [pc, #224]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80a1 	beq.w	8005e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d16:	4b34      	ldr	r3, [pc, #208]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d05c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d141      	bne.n	8005dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fc fa7c 	bl	800222c <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fc fa78 	bl	800222c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e087      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	491b      	ldr	r1, [pc, #108]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d86:	f7fc fa51 	bl	800222c <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d8e:	f7fc fa4d 	bl	800222c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e05c      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x416>
 8005dac:	e054      	b.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <HAL_RCC_OscConfig+0x478>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fc fa3a 	bl	800222c <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fc fa36 	bl	800222c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e045      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x444>
 8005dda:	e03d      	b.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e038      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
 8005de8:	40023800 	.word	0x40023800
 8005dec:	40007000 	.word	0x40007000
 8005df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x4ec>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d028      	beq.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d121      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11a      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e24:	4013      	ands	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800

08005e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0cc      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90c      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b65      	ldr	r3, [pc, #404]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b63      	ldr	r3, [pc, #396]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0b8      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ebc:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ed4:	4b53      	ldr	r3, [pc, #332]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4a52      	ldr	r2, [pc, #328]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	494d      	ldr	r1, [pc, #308]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d044      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d119      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e07f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f26:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e06f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f36:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e067      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 0203 	bic.w	r2, r3, #3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	4934      	ldr	r1, [pc, #208]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f58:	f7fc f968 	bl	800222c <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7fc f964 	bl	800222c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e04f      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f76:	4b2b      	ldr	r3, [pc, #172]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 020c 	and.w	r2, r3, #12
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d1eb      	bne.n	8005f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d20c      	bcs.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e032      	b.n	8006016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4916      	ldr	r1, [pc, #88]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	490e      	ldr	r1, [pc, #56]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fee:	f000 f821 	bl	8006034 <HAL_RCC_GetSysClockFreq>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	490a      	ldr	r1, [pc, #40]	; (8006028 <HAL_RCC_ClockConfig+0x1c0>)
 8006000:	5ccb      	ldrb	r3, [r1, r3]
 8006002:	fa22 f303 	lsr.w	r3, r2, r3
 8006006:	4a09      	ldr	r2, [pc, #36]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fc f8c8 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40023c00 	.word	0x40023c00
 8006024:	40023800 	.word	0x40023800
 8006028:	08009098 	.word	0x08009098
 800602c:	2000000c 	.word	0x2000000c
 8006030:	20000010 	.word	0x20000010

08006034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006038:	b094      	sub	sp, #80	; 0x50
 800603a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	647b      	str	r3, [r7, #68]	; 0x44
 8006040:	2300      	movs	r3, #0
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	2300      	movs	r3, #0
 8006046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800604c:	4b79      	ldr	r3, [pc, #484]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 030c 	and.w	r3, r3, #12
 8006054:	2b08      	cmp	r3, #8
 8006056:	d00d      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x40>
 8006058:	2b08      	cmp	r3, #8
 800605a:	f200 80e1 	bhi.w	8006220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x34>
 8006062:	2b04      	cmp	r3, #4
 8006064:	d003      	beq.n	800606e <HAL_RCC_GetSysClockFreq+0x3a>
 8006066:	e0db      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006068:	4b73      	ldr	r3, [pc, #460]	; (8006238 <HAL_RCC_GetSysClockFreq+0x204>)
 800606a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800606c:	e0db      	b.n	8006226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800606e:	4b73      	ldr	r3, [pc, #460]	; (800623c <HAL_RCC_GetSysClockFreq+0x208>)
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006072:	e0d8      	b.n	8006226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006074:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800607e:	4b6d      	ldr	r3, [pc, #436]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d063      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608a:	4b6a      	ldr	r3, [pc, #424]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	2200      	movs	r2, #0
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
 8006094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
 800609e:	2300      	movs	r3, #0
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
 80060a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060a6:	4622      	mov	r2, r4
 80060a8:	462b      	mov	r3, r5
 80060aa:	f04f 0000 	mov.w	r0, #0
 80060ae:	f04f 0100 	mov.w	r1, #0
 80060b2:	0159      	lsls	r1, r3, #5
 80060b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060b8:	0150      	lsls	r0, r2, #5
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4621      	mov	r1, r4
 80060c0:	1a51      	subs	r1, r2, r1
 80060c2:	6139      	str	r1, [r7, #16]
 80060c4:	4629      	mov	r1, r5
 80060c6:	eb63 0301 	sbc.w	r3, r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	018b      	lsls	r3, r1, #6
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060e2:	4651      	mov	r1, sl
 80060e4:	018a      	lsls	r2, r1, #6
 80060e6:	4651      	mov	r1, sl
 80060e8:	ebb2 0801 	subs.w	r8, r2, r1
 80060ec:	4659      	mov	r1, fp
 80060ee:	eb63 0901 	sbc.w	r9, r3, r1
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006106:	4690      	mov	r8, r2
 8006108:	4699      	mov	r9, r3
 800610a:	4623      	mov	r3, r4
 800610c:	eb18 0303 	adds.w	r3, r8, r3
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	462b      	mov	r3, r5
 8006114:	eb49 0303 	adc.w	r3, r9, r3
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006126:	4629      	mov	r1, r5
 8006128:	024b      	lsls	r3, r1, #9
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006130:	4621      	mov	r1, r4
 8006132:	024a      	lsls	r2, r1, #9
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613a:	2200      	movs	r2, #0
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
 800613e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006144:	f7fa f8a4 	bl	8000290 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4613      	mov	r3, r2
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006150:	e058      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006152:	4b38      	ldr	r3, [pc, #224]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	099b      	lsrs	r3, r3, #6
 8006158:	2200      	movs	r2, #0
 800615a:	4618      	mov	r0, r3
 800615c:	4611      	mov	r1, r2
 800615e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	f04f 0000 	mov.w	r0, #0
 8006174:	f04f 0100 	mov.w	r1, #0
 8006178:	0159      	lsls	r1, r3, #5
 800617a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800617e:	0150      	lsls	r0, r2, #5
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4641      	mov	r1, r8
 8006186:	ebb2 0a01 	subs.w	sl, r2, r1
 800618a:	4649      	mov	r1, r9
 800618c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800619c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061a4:	ebb2 040a 	subs.w	r4, r2, sl
 80061a8:	eb63 050b 	sbc.w	r5, r3, fp
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	00eb      	lsls	r3, r5, #3
 80061b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ba:	00e2      	lsls	r2, r4, #3
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	18e3      	adds	r3, r4, r3
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	464b      	mov	r3, r9
 80061c8:	eb45 0303 	adc.w	r3, r5, r3
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061da:	4629      	mov	r1, r5
 80061dc:	028b      	lsls	r3, r1, #10
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061e4:	4621      	mov	r1, r4
 80061e6:	028a      	lsls	r2, r1, #10
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	2200      	movs	r2, #0
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	61fa      	str	r2, [r7, #28]
 80061f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061f8:	f7fa f84a 	bl	8000290 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4613      	mov	r3, r2
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCC_GetSysClockFreq+0x200>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	3301      	adds	r3, #1
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800621e:	e002      	b.n	8006226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_RCC_GetSysClockFreq+0x204>)
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006228:	4618      	mov	r0, r3
 800622a:	3750      	adds	r7, #80	; 0x50
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	00f42400 	.word	0x00f42400
 800623c:	007a1200 	.word	0x007a1200

08006240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006244:	4b03      	ldr	r3, [pc, #12]	; (8006254 <HAL_RCC_GetHCLKFreq+0x14>)
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000000c 	.word	0x2000000c

08006258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800625c:	f7ff fff0 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	0a9b      	lsrs	r3, r3, #10
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	4903      	ldr	r1, [pc, #12]	; (800627c <HAL_RCC_GetPCLK1Freq+0x24>)
 800626e:	5ccb      	ldrb	r3, [r1, r3]
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006274:	4618      	mov	r0, r3
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40023800 	.word	0x40023800
 800627c:	080090a8 	.word	0x080090a8

08006280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006284:	f7ff ffdc 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 8006288:	4602      	mov	r2, r0
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	0b5b      	lsrs	r3, r3, #13
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	4903      	ldr	r1, [pc, #12]	; (80062a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006296:	5ccb      	ldrb	r3, [r1, r3]
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40023800 	.word	0x40023800
 80062a4:	080090a8 	.word	0x080090a8

080062a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07b      	b.n	80063b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ca:	d009      	beq.n	80062e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	61da      	str	r2, [r3, #28]
 80062d2:	e005      	b.n	80062e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb fd5e 	bl	8001dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	f003 0104 	and.w	r1, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f003 0210 	and.w	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_SPI_Transmit_IT+0x20>
 80063d8:	2302      	movs	r3, #2
 80063da:	e06f      	b.n	80064bc <HAL_SPI_Transmit_IT+0x100>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_Transmit_IT+0x34>
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063f4:	e05d      	b.n	80064b2 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d002      	beq.n	8006408 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006402:	2302      	movs	r3, #2
 8006404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006406:	e054      	b.n	80064b2 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2203      	movs	r2, #3
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_SPI_Transmit_IT+0x10c>)
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
 800644e:	e002      	b.n	8006456 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <HAL_SPI_Transmit_IT+0x110>)
 8006454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645e:	d10f      	bne.n	8006480 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800648e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d008      	beq.n	80064b0 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e000      	b.n	80064b2 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80064b0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	08006753 	.word	0x08006753
 80064cc:	0800670d 	.word	0x0800670d

080064d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	099b      	lsrs	r3, r3, #6
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10f      	bne.n	8006514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
    return;
 8006512:	e0d7      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_SPI_IRQHandler+0x66>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
    return;
 8006534:	e0c6      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <HAL_SPI_IRQHandler+0x8c>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80b4 	beq.w	80066c4 <HAL_SPI_IRQHandler+0x1f4>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80ad 	beq.w	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	099b      	lsrs	r3, r3, #6
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d023      	beq.n	80065be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d011      	beq.n	80065a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	e00b      	b.n	80065be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	693b      	ldr	r3, [r7, #16]
        return;
 80065bc:	e082      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d014      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00c      	beq.n	800661a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f043 0208 	orr.w	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04f      	beq.n	80066c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006630:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_SPI_IRQHandler+0x17e>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d034      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0203 	bic.w	r2, r2, #3
 800665c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666a:	4a18      	ldr	r2, [pc, #96]	; (80066cc <HAL_SPI_IRQHandler+0x1fc>)
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	4618      	mov	r0, r3
 8006674:	f7fc fdb8 	bl	80031e8 <HAL_DMA_Abort_IT>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <HAL_SPI_IRQHandler+0x1fc>)
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc fda2 	bl	80031e8 <HAL_DMA_Abort_IT>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066b6:	e003      	b.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f809 	bl	80066d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066be:	e000      	b.n	80066c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80066c0:	bf00      	nop
    return;
 80066c2:	bf00      	nop
  }
}
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	080066e5 	.word	0x080066e5

080066d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff ffe6 	bl	80066d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	7812      	ldrb	r2, [r2, #0]
 8006720:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8f1 	bl	800692c <SPI_CloseTx_ISR>
  }
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f8cf 	bl	800692c <SPI_CloseTx_ISR>
  }
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4613      	mov	r3, r2
 80067a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067a8:	f7fb fd40 	bl	800222c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	4413      	add	r3, r2
 80067b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067b8:	f7fb fd38 	bl	800222c <HAL_GetTick>
 80067bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067be:	4b39      	ldr	r3, [pc, #228]	; (80068a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	015b      	lsls	r3, r3, #5
 80067c4:	0d1b      	lsrs	r3, r3, #20
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ce:	e054      	b.n	800687a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d050      	beq.n	800687a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067d8:	f7fb fd28 	bl	800222c <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d902      	bls.n	80067ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d13d      	bne.n	800686a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006806:	d111      	bne.n	800682c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006810:	d004      	beq.n	800681c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681a:	d107      	bne.n	800682c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006834:	d10f      	bne.n	8006856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e017      	b.n	800689a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3b01      	subs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4013      	ands	r3, r2
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	bf0c      	ite	eq
 800688a:	2301      	moveq	r3, #1
 800688c:	2300      	movne	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	429a      	cmp	r2, r3
 8006896:	d19b      	bne.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c

080068a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068b4:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <SPI_EndRxTxTransaction+0x7c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <SPI_EndRxTxTransaction+0x80>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	0d5b      	lsrs	r3, r3, #21
 80068c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d2:	d112      	bne.n	80068fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff ff5a 	bl	8006798 <SPI_WaitFlagStateUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d016      	beq.n	8006918 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e00f      	b.n	800691a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3b01      	subs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d0f2      	beq.n	80068fa <SPI_EndRxTxTransaction+0x52>
 8006914:	e000      	b.n	8006918 <SPI_EndRxTxTransaction+0x70>
        break;
 8006916:	bf00      	nop
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2000000c 	.word	0x2000000c
 8006928:	165e9f81 	.word	0x165e9f81

0800692c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006934:	4b2c      	ldr	r3, [pc, #176]	; (80069e8 <SPI_CloseTx_ISR+0xbc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <SPI_CloseTx_ISR+0xc0>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	0a5b      	lsrs	r3, r3, #9
 8006940:	2264      	movs	r2, #100	; 0x64
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006948:	f7fb fc70 	bl	800222c <HAL_GetTick>
 800694c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006960:	e009      	b.n	8006976 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3b01      	subs	r3, #1
 8006966:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0eb      	beq.n	800694e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006984:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	2164      	movs	r1, #100	; 0x64
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ff8c 	bl	80068a8 <SPI_EndRxTxTransaction>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fe7d 	bl	80066d0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80069d6:	e002      	b.n	80069de <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fb f80d 	bl	80019f8 <HAL_SPI_TxCpltCallback>
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	057619f1 	.word	0x057619f1

080069f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e041      	b.n	8006a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fa20 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f000 fa88 	bl	8006f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e044      	b.n	8006b32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <HAL_TIM_Base_Start_IT+0xb0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d018      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x6c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d013      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x6c>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00e      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x6c>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a19      	ldr	r2, [pc, #100]	; (8006b48 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x6c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <HAL_TIM_Base_Start_IT+0xbc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x6c>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <HAL_TIM_Base_Start_IT+0xc0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d111      	bne.n	8006b20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d010      	beq.n	8006b30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1e:	e007      	b.n	8006b30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800
 8006b4c:	40000c00 	.word	0x40000c00
 8006b50:	40014000 	.word	0x40014000

08006b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d122      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d11b      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0202 	mvn.w	r2, #2
 8006b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9b5 	bl	8006f06 <HAL_TIM_IC_CaptureCallback>
 8006b9c:	e005      	b.n	8006baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f9a7 	bl	8006ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f9b8 	bl	8006f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d122      	bne.n	8006c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d11b      	bne.n	8006c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0204 	mvn.w	r2, #4
 8006bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f98b 	bl	8006f06 <HAL_TIM_IC_CaptureCallback>
 8006bf0:	e005      	b.n	8006bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f97d 	bl	8006ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f98e 	bl	8006f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d122      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d11b      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0208 	mvn.w	r2, #8
 8006c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f961 	bl	8006f06 <HAL_TIM_IC_CaptureCallback>
 8006c44:	e005      	b.n	8006c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f953 	bl	8006ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f964 	bl	8006f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0210 	mvn.w	r2, #16
 8006c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2208      	movs	r2, #8
 8006c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f937 	bl	8006f06 <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f929 	bl	8006ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f93a 	bl	8006f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0201 	mvn.w	r2, #1
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fa ff26 	bl	8001b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d10e      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b80      	cmp	r3, #128	; 0x80
 8006cf2:	d107      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fab2 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d10e      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d107      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8ff 	bl	8006f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d10e      	bne.n	8006d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d107      	bne.n	8006d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0220 	mvn.w	r2, #32
 8006d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa7c 	bl	8007254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIM_ConfigClockSource+0x1c>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e0b4      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x186>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db8:	d03e      	beq.n	8006e38 <HAL_TIM_ConfigClockSource+0xd4>
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbe:	f200 8087 	bhi.w	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	f000 8086 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x172>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	d87f      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd0:	2b70      	cmp	r3, #112	; 0x70
 8006dd2:	d01a      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0xa6>
 8006dd4:	2b70      	cmp	r3, #112	; 0x70
 8006dd6:	d87b      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d050      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x11a>
 8006ddc:	2b60      	cmp	r3, #96	; 0x60
 8006dde:	d877      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de0:	2b50      	cmp	r3, #80	; 0x50
 8006de2:	d03c      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0xfa>
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	d873      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d058      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x13a>
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d86f      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d064      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x15a>
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d86b      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d060      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x15a>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d867      	bhi.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d05c      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x15a>
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d05a      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x15a>
 8006e08:	e062      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6899      	ldr	r1, [r3, #8]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f000 f98d 	bl	8007138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	609a      	str	r2, [r3, #8]
      break;
 8006e36:	e04f      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6899      	ldr	r1, [r3, #8]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f000 f976 	bl	8007138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e5a:	609a      	str	r2, [r3, #8]
      break;
 8006e5c:	e03c      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6859      	ldr	r1, [r3, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f000 f8ea 	bl	8007044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2150      	movs	r1, #80	; 0x50
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f943 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006e7c:	e02c      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f000 f909 	bl	80070a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2160      	movs	r1, #96	; 0x60
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f933 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006e9c:	e01c      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6859      	ldr	r1, [r3, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f000 f8ca 	bl	8007044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f923 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006ebc:	e00c      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f000 f91a 	bl	8007102 <TIM_ITRx_SetConfig>
      break;
 8006ece:	e003      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed4:	e000      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a34      	ldr	r2, [pc, #208]	; (8007028 <TIM_Base_SetConfig+0xe4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x38>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x38>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a31      	ldr	r2, [pc, #196]	; (800702c <TIM_Base_SetConfig+0xe8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x38>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a30      	ldr	r2, [pc, #192]	; (8007030 <TIM_Base_SetConfig+0xec>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x38>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <TIM_Base_SetConfig+0xf0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <TIM_Base_SetConfig+0xe4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01b      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d017      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a22      	ldr	r2, [pc, #136]	; (800702c <TIM_Base_SetConfig+0xe8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	; (8007030 <TIM_Base_SetConfig+0xec>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00f      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a20      	ldr	r2, [pc, #128]	; (8007034 <TIM_Base_SetConfig+0xf0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00b      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a1f      	ldr	r2, [pc, #124]	; (8007038 <TIM_Base_SetConfig+0xf4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a1e      	ldr	r2, [pc, #120]	; (800703c <TIM_Base_SetConfig+0xf8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <TIM_Base_SetConfig+0x8a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a1d      	ldr	r2, [pc, #116]	; (8007040 <TIM_Base_SetConfig+0xfc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d108      	bne.n	8006fe0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a08      	ldr	r2, [pc, #32]	; (8007028 <TIM_Base_SetConfig+0xe4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d103      	bne.n	8007014 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	615a      	str	r2, [r3, #20]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400
 8007040:	40014800 	.word	0x40014800

08007044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0201 	bic.w	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800706e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 030a 	bic.w	r3, r3, #10
 8007080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b087      	sub	sp, #28
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0210 	bic.w	r2, r3, #16
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	f043 0307 	orr.w	r3, r3, #7
 8007124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	021a      	lsls	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	431a      	orrs	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	609a      	str	r2, [r3, #8]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800718c:	2302      	movs	r3, #2
 800718e:	e050      	b.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d013      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a16      	ldr	r2, [pc, #88]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a15      	ldr	r2, [pc, #84]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10c      	bne.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	4313      	orrs	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40014000 	.word	0x40014000

08007254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e03f      	b.n	800730e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fa fe20 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	; 0x24
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fddf 	bl	8007e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b08a      	sub	sp, #40	; 0x28
 800731a:	af02      	add	r7, sp, #8
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	603b      	str	r3, [r7, #0]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b20      	cmp	r3, #32
 8007334:	d17c      	bne.n	8007430 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_UART_Transmit+0x2c>
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e075      	b.n	8007432 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_UART_Transmit+0x3e>
 8007350:	2302      	movs	r3, #2
 8007352:	e06e      	b.n	8007432 <HAL_UART_Transmit+0x11c>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2221      	movs	r2, #33	; 0x21
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800736a:	f7fa ff5f 	bl	800222c <HAL_GetTick>
 800736e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007384:	d108      	bne.n	8007398 <HAL_UART_Transmit+0x82>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e003      	b.n	80073a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073a8:	e02a      	b.n	8007400 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fb1f 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e036      	b.n	8007432 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	3302      	adds	r3, #2
 80073de:	61bb      	str	r3, [r7, #24]
 80073e0:	e007      	b.n	80073f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	3301      	adds	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1cf      	bne.n	80073aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	2140      	movs	r1, #64	; 0x40
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 faef 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e006      	b.n	8007432 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b20      	cmp	r3, #32
 8007452:	d11d      	bne.n	8007490 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Receive_IT+0x26>
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e016      	b.n	8007492 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UART_Receive_IT+0x38>
 800746e:	2302      	movs	r3, #2
 8007470:	e00f      	b.n	8007492 <HAL_UART_Receive_IT+0x58>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	461a      	mov	r2, r3
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fb24 	bl	8007ad4 <UART_Start_Receive_IT>
 800748c:	4603      	mov	r3, r0
 800748e:	e000      	b.n	8007492 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007490:	2302      	movs	r3, #2
  }
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b0ba      	sub	sp, #232	; 0xe8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10f      	bne.n	8007502 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d009      	beq.n	8007502 <HAL_UART_IRQHandler+0x66>
 80074ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fc07 	bl	8007d0e <UART_Receive_IT>
      return;
 8007500:	e256      	b.n	80079b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80de 	beq.w	80076c8 <HAL_UART_IRQHandler+0x22c>
 800750c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80d1 	beq.w	80076c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <HAL_UART_IRQHandler+0xae>
 8007532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0201 	orr.w	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <HAL_UART_IRQHandler+0xd2>
 8007556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f043 0202 	orr.w	r2, r3, #2
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <HAL_UART_IRQHandler+0xf6>
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f043 0204 	orr.w	r2, r3, #4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <HAL_UART_IRQHandler+0x126>
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f043 0208 	orr.w	r2, r3, #8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 81ed 	beq.w	80079a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_UART_IRQHandler+0x14e>
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb92 	bl	8007d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	bf0c      	ite	eq
 80075f8:	2301      	moveq	r3, #1
 80075fa:	2300      	movne	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <HAL_UART_IRQHandler+0x17a>
 800760e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04f      	beq.n	80076b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa9a 	bl	8007b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d141      	bne.n	80076ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3314      	adds	r3, #20
 8007652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800765a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d9      	bne.n	800762a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	2b00      	cmp	r3, #0
 800767c:	d013      	beq.n	80076a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	4a7d      	ldr	r2, [pc, #500]	; (8007878 <HAL_UART_IRQHandler+0x3dc>)
 8007684:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	4618      	mov	r0, r3
 800768c:	f7fb fdac 	bl	80031e8 <HAL_DMA_Abort_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d016      	beq.n	80076c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	e00e      	b.n	80076c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f990 	bl	80079cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ac:	e00a      	b.n	80076c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f98c 	bl	80079cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	e006      	b.n	80076c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f988 	bl	80079cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076c2:	e170      	b.n	80079a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	bf00      	nop
    return;
 80076c6:	e16e      	b.n	80079a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	f040 814a 	bne.w	8007966 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8143 	beq.w	8007966 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 813c 	beq.w	8007966 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	f040 80b4 	bne.w	800787c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007720:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8140 	beq.w	80079aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800772e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007732:	429a      	cmp	r2, r3
 8007734:	f080 8139 	bcs.w	80079aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774a:	f000 8088 	beq.w	800785e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800777a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800777e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1d9      	bne.n	800774e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3314      	adds	r3, #20
 80077a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3314      	adds	r3, #20
 80077ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e1      	bne.n	800779a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e3      	bne.n	80077d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782e:	f023 0310 	bic.w	r3, r3, #16
 8007832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	330c      	adds	r3, #12
 800783c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007840:	65ba      	str	r2, [r7, #88]	; 0x58
 8007842:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800784e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e3      	bne.n	800781c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	4618      	mov	r0, r3
 800785a:	f7fb fc55 	bl	8003108 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007866:	b29b      	uxth	r3, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b29b      	uxth	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b6 	bl	80079e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007874:	e099      	b.n	80079aa <HAL_UART_IRQHandler+0x50e>
 8007876:	bf00      	nop
 8007878:	08007c17 	.word	0x08007c17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007884:	b29b      	uxth	r3, r3
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 808b 	beq.w	80079ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8086 	beq.w	80079ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078c6:	647a      	str	r2, [r7, #68]	; 0x44
 80078c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e3      	bne.n	80078a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3314      	adds	r3, #20
 80078fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e3      	bne.n	80078da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0310 	bic.w	r3, r3, #16
 8007936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007944:	61fa      	str	r2, [r7, #28]
 8007946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	617b      	str	r3, [r7, #20]
   return(result);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e3      	bne.n	8007920 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f83e 	bl	80079e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007964:	e023      	b.n	80079ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x4ea>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f95d 	bl	8007c3e <UART_Transmit_IT>
    return;
 8007984:	e014      	b.n	80079b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <HAL_UART_IRQHandler+0x514>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d008      	beq.n	80079b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f99d 	bl	8007cde <UART_EndTransmit_IT>
    return;
 80079a4:	e004      	b.n	80079b0 <HAL_UART_IRQHandler+0x514>
    return;
 80079a6:	bf00      	nop
 80079a8:	e002      	b.n	80079b0 <HAL_UART_IRQHandler+0x514>
      return;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <HAL_UART_IRQHandler+0x514>
      return;
 80079ae:	bf00      	nop
  }
}
 80079b0:	37e8      	adds	r7, #232	; 0xe8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop

080079b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b090      	sub	sp, #64	; 0x40
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a08:	e050      	b.n	8007aac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d04c      	beq.n	8007aac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a18:	f7fa fc08 	bl	800222c <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d241      	bcs.n	8007aac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a48:	637a      	str	r2, [r7, #52]	; 0x34
 8007a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3314      	adds	r3, #20
 8007a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f023 0301 	bic.w	r3, r3, #1
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7c:	623a      	str	r2, [r7, #32]
 8007a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	69f9      	ldr	r1, [r7, #28]
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e00f      	b.n	8007acc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d09f      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3740      	adds	r7, #64	; 0x40
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2222      	movs	r2, #34	; 0x22
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695a      	ldr	r2, [r3, #20]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0201 	orr.w	r2, r2, #1
 8007b30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0220 	orr.w	r2, r2, #32
 8007b40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b095      	sub	sp, #84	; 0x54
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b78:	643a      	str	r2, [r7, #64]	; 0x40
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e5      	bne.n	8007b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d119      	bne.n	8007bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	647b      	str	r3, [r7, #68]	; 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be8:	61ba      	str	r2, [r7, #24]
 8007bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e5      	bne.n	8007bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c0a:	bf00      	nop
 8007c0c:	3754      	adds	r7, #84	; 0x54
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fecb 	bl	80079cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b21      	cmp	r3, #33	; 0x21
 8007c50:	d13e      	bne.n	8007cd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5a:	d114      	bne.n	8007c86 <UART_Transmit_IT+0x48>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d110      	bne.n	8007c86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	1c9a      	adds	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	621a      	str	r2, [r3, #32]
 8007c84:	e008      	b.n	8007c98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6211      	str	r1, [r2, #32]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10f      	bne.n	8007ccc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e000      	b.n	8007cd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fe5a 	bl	80079b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b08c      	sub	sp, #48	; 0x30
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b22      	cmp	r3, #34	; 0x22
 8007d20:	f040 80ab 	bne.w	8007e7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2c:	d117      	bne.n	8007d5e <UART_Receive_IT+0x50>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d113      	bne.n	8007d5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	1c9a      	adds	r2, r3, #2
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d5c:	e026      	b.n	8007dac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d70:	d007      	beq.n	8007d82 <UART_Receive_IT+0x74>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <UART_Receive_IT+0x82>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e008      	b.n	8007da2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4619      	mov	r1, r3
 8007dba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d15a      	bne.n	8007e76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0220 	bic.w	r2, r2, #32
 8007dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d135      	bne.n	8007e6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	613b      	str	r3, [r7, #16]
   return(result);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f023 0310 	bic.w	r3, r3, #16
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	330c      	adds	r3, #12
 8007e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e26:	623a      	str	r2, [r7, #32]
 8007e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	69f9      	ldr	r1, [r7, #28]
 8007e2c:	6a3a      	ldr	r2, [r7, #32]
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d10a      	bne.n	8007e5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fdbb 	bl	80079e0 <HAL_UARTEx_RxEventCallback>
 8007e6a:	e002      	b.n	8007e72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7f9 feb9 	bl	8001be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e002      	b.n	8007e7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e000      	b.n	8007e7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
  }
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3730      	adds	r7, #48	; 0x30
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e88:	b0c0      	sub	sp, #256	; 0x100
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea0:	68d9      	ldr	r1, [r3, #12]
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	ea40 0301 	orr.w	r3, r0, r1
 8007eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007edc:	f021 010c 	bic.w	r1, r1, #12
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eea:	430b      	orrs	r3, r1
 8007eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efe:	6999      	ldr	r1, [r3, #24]
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	ea40 0301 	orr.w	r3, r0, r1
 8007f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b8f      	ldr	r3, [pc, #572]	; (8008150 <UART_SetConfig+0x2cc>)
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d005      	beq.n	8007f24 <UART_SetConfig+0xa0>
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b8d      	ldr	r3, [pc, #564]	; (8008154 <UART_SetConfig+0x2d0>)
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d104      	bne.n	8007f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fe f9ac 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 8007f28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f2c:	e003      	b.n	8007f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fe f993 	bl	8006258 <HAL_RCC_GetPCLK1Freq>
 8007f32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	f040 810c 	bne.w	800815c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	1891      	adds	r1, r2, r2
 8007f5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f5e:	415b      	adcs	r3, r3
 8007f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f66:	4621      	mov	r1, r4
 8007f68:	eb12 0801 	adds.w	r8, r2, r1
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	eb43 0901 	adc.w	r9, r3, r1
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f86:	4690      	mov	r8, r2
 8007f88:	4699      	mov	r9, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	eb18 0303 	adds.w	r3, r8, r3
 8007f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f94:	462b      	mov	r3, r5
 8007f96:	eb49 0303 	adc.w	r3, r9, r3
 8007f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007faa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	18db      	adds	r3, r3, r3
 8007fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8007fb8:	4613      	mov	r3, r2
 8007fba:	eb42 0303 	adc.w	r3, r2, r3
 8007fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fc8:	f7f8 f962 	bl	8000290 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4b61      	ldr	r3, [pc, #388]	; (8008158 <UART_SetConfig+0x2d4>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	011c      	lsls	r4, r3, #4
 8007fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	1891      	adds	r1, r2, r2
 8007ff2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ff4:	415b      	adcs	r3, r3
 8007ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8008002:	4649      	mov	r1, r9
 8008004:	eb43 0b01 	adc.w	fp, r3, r1
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800801c:	4692      	mov	sl, r2
 800801e:	469b      	mov	fp, r3
 8008020:	4643      	mov	r3, r8
 8008022:	eb1a 0303 	adds.w	r3, sl, r3
 8008026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800802a:	464b      	mov	r3, r9
 800802c:	eb4b 0303 	adc.w	r3, fp, r3
 8008030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008040:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008048:	460b      	mov	r3, r1
 800804a:	18db      	adds	r3, r3, r3
 800804c:	643b      	str	r3, [r7, #64]	; 0x40
 800804e:	4613      	mov	r3, r2
 8008050:	eb42 0303 	adc.w	r3, r2, r3
 8008054:	647b      	str	r3, [r7, #68]	; 0x44
 8008056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800805a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800805e:	f7f8 f917 	bl	8000290 <__aeabi_uldivmod>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4611      	mov	r1, r2
 8008068:	4b3b      	ldr	r3, [pc, #236]	; (8008158 <UART_SetConfig+0x2d4>)
 800806a:	fba3 2301 	umull	r2, r3, r3, r1
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	2264      	movs	r2, #100	; 0x64
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	1acb      	subs	r3, r1, r3
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800807e:	4b36      	ldr	r3, [pc, #216]	; (8008158 <UART_SetConfig+0x2d4>)
 8008080:	fba3 2302 	umull	r2, r3, r3, r2
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800808c:	441c      	add	r4, r3
 800808e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008098:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800809c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	1891      	adds	r1, r2, r2
 80080a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80080a8:	415b      	adcs	r3, r3
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080b0:	4641      	mov	r1, r8
 80080b2:	1851      	adds	r1, r2, r1
 80080b4:	6339      	str	r1, [r7, #48]	; 0x30
 80080b6:	4649      	mov	r1, r9
 80080b8:	414b      	adcs	r3, r1
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080c8:	4659      	mov	r1, fp
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	4651      	mov	r1, sl
 80080ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d2:	4651      	mov	r1, sl
 80080d4:	00ca      	lsls	r2, r1, #3
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	4642      	mov	r2, r8
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080e4:	464b      	mov	r3, r9
 80080e6:	460a      	mov	r2, r1
 80080e8:	eb42 0303 	adc.w	r3, r2, r3
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008104:	460b      	mov	r3, r1
 8008106:	18db      	adds	r3, r3, r3
 8008108:	62bb      	str	r3, [r7, #40]	; 0x28
 800810a:	4613      	mov	r3, r2
 800810c:	eb42 0303 	adc.w	r3, r2, r3
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800811a:	f7f8 f8b9 	bl	8000290 <__aeabi_uldivmod>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <UART_SetConfig+0x2d4>)
 8008124:	fba3 1302 	umull	r1, r3, r3, r2
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	2164      	movs	r1, #100	; 0x64
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	3332      	adds	r3, #50	; 0x32
 8008136:	4a08      	ldr	r2, [pc, #32]	; (8008158 <UART_SetConfig+0x2d4>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	f003 0207 	and.w	r2, r3, #7
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4422      	add	r2, r4
 800814a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800814c:	e105      	b.n	800835a <UART_SetConfig+0x4d6>
 800814e:	bf00      	nop
 8008150:	40011000 	.word	0x40011000
 8008154:	40011400 	.word	0x40011400
 8008158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008160:	2200      	movs	r2, #0
 8008162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008166:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800816a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800816e:	4642      	mov	r2, r8
 8008170:	464b      	mov	r3, r9
 8008172:	1891      	adds	r1, r2, r2
 8008174:	6239      	str	r1, [r7, #32]
 8008176:	415b      	adcs	r3, r3
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
 800817a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800817e:	4641      	mov	r1, r8
 8008180:	1854      	adds	r4, r2, r1
 8008182:	4649      	mov	r1, r9
 8008184:	eb43 0501 	adc.w	r5, r3, r1
 8008188:	f04f 0200 	mov.w	r2, #0
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	00eb      	lsls	r3, r5, #3
 8008192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008196:	00e2      	lsls	r2, r4, #3
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	4643      	mov	r3, r8
 800819e:	18e3      	adds	r3, r4, r3
 80081a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081a4:	464b      	mov	r3, r9
 80081a6:	eb45 0303 	adc.w	r3, r5, r3
 80081aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081ca:	4629      	mov	r1, r5
 80081cc:	008b      	lsls	r3, r1, #2
 80081ce:	4621      	mov	r1, r4
 80081d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d4:	4621      	mov	r1, r4
 80081d6:	008a      	lsls	r2, r1, #2
 80081d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081dc:	f7f8 f858 	bl	8000290 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4b60      	ldr	r3, [pc, #384]	; (8008368 <UART_SetConfig+0x4e4>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	011c      	lsls	r4, r3, #4
 80081ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	1891      	adds	r1, r2, r2
 8008206:	61b9      	str	r1, [r7, #24]
 8008208:	415b      	adcs	r3, r3
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008210:	4641      	mov	r1, r8
 8008212:	1851      	adds	r1, r2, r1
 8008214:	6139      	str	r1, [r7, #16]
 8008216:	4649      	mov	r1, r9
 8008218:	414b      	adcs	r3, r1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008228:	4659      	mov	r1, fp
 800822a:	00cb      	lsls	r3, r1, #3
 800822c:	4651      	mov	r1, sl
 800822e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008232:	4651      	mov	r1, sl
 8008234:	00ca      	lsls	r2, r1, #3
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	4603      	mov	r3, r0
 800823c:	4642      	mov	r2, r8
 800823e:	189b      	adds	r3, r3, r2
 8008240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008244:	464b      	mov	r3, r9
 8008246:	460a      	mov	r2, r1
 8008248:	eb42 0303 	adc.w	r3, r2, r3
 800824c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	67bb      	str	r3, [r7, #120]	; 0x78
 800825a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008268:	4649      	mov	r1, r9
 800826a:	008b      	lsls	r3, r1, #2
 800826c:	4641      	mov	r1, r8
 800826e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008272:	4641      	mov	r1, r8
 8008274:	008a      	lsls	r2, r1, #2
 8008276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800827a:	f7f8 f809 	bl	8000290 <__aeabi_uldivmod>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4b39      	ldr	r3, [pc, #228]	; (8008368 <UART_SetConfig+0x4e4>)
 8008284:	fba3 1302 	umull	r1, r3, r3, r2
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	2164      	movs	r1, #100	; 0x64
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	3332      	adds	r3, #50	; 0x32
 8008296:	4a34      	ldr	r2, [pc, #208]	; (8008368 <UART_SetConfig+0x4e4>)
 8008298:	fba2 2303 	umull	r2, r3, r2, r3
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082a2:	441c      	add	r4, r3
 80082a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a8:	2200      	movs	r2, #0
 80082aa:	673b      	str	r3, [r7, #112]	; 0x70
 80082ac:	677a      	str	r2, [r7, #116]	; 0x74
 80082ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082b2:	4642      	mov	r2, r8
 80082b4:	464b      	mov	r3, r9
 80082b6:	1891      	adds	r1, r2, r2
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	415b      	adcs	r3, r3
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082c2:	4641      	mov	r1, r8
 80082c4:	1851      	adds	r1, r2, r1
 80082c6:	6039      	str	r1, [r7, #0]
 80082c8:	4649      	mov	r1, r9
 80082ca:	414b      	adcs	r3, r1
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	f04f 0300 	mov.w	r3, #0
 80082d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082da:	4659      	mov	r1, fp
 80082dc:	00cb      	lsls	r3, r1, #3
 80082de:	4651      	mov	r1, sl
 80082e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082e4:	4651      	mov	r1, sl
 80082e6:	00ca      	lsls	r2, r1, #3
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	4603      	mov	r3, r0
 80082ee:	4642      	mov	r2, r8
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80082f4:	464b      	mov	r3, r9
 80082f6:	460a      	mov	r2, r1
 80082f8:	eb42 0303 	adc.w	r3, r2, r3
 80082fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	663b      	str	r3, [r7, #96]	; 0x60
 8008308:	667a      	str	r2, [r7, #100]	; 0x64
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008316:	4649      	mov	r1, r9
 8008318:	008b      	lsls	r3, r1, #2
 800831a:	4641      	mov	r1, r8
 800831c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008320:	4641      	mov	r1, r8
 8008322:	008a      	lsls	r2, r1, #2
 8008324:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008328:	f7f7 ffb2 	bl	8000290 <__aeabi_uldivmod>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <UART_SetConfig+0x4e4>)
 8008332:	fba3 1302 	umull	r1, r3, r3, r2
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	2164      	movs	r1, #100	; 0x64
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	3332      	adds	r3, #50	; 0x32
 8008344:	4a08      	ldr	r2, [pc, #32]	; (8008368 <UART_SetConfig+0x4e4>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4422      	add	r2, r4
 8008358:	609a      	str	r2, [r3, #8]
}
 800835a:	bf00      	nop
 800835c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008360:	46bd      	mov	sp, r7
 8008362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008366:	bf00      	nop
 8008368:	51eb851f 	.word	0x51eb851f

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000018 	.word	0x20000018

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f000 fc8e 	bl	8008cac <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	080090f4 	.word	0x080090f4
 80083b4:	080090f4 	.word	0x080090f4
 80083b8:	080090f4 	.word	0x080090f4
 80083bc:	080090f8 	.word	0x080090f8

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <siprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b500      	push	{lr}
 80083d4:	b09c      	sub	sp, #112	; 0x70
 80083d6:	ab1d      	add	r3, sp, #116	; 0x74
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e0:	4809      	ldr	r0, [pc, #36]	; (8008408 <siprintf+0x38>)
 80083e2:	9107      	str	r1, [sp, #28]
 80083e4:	9104      	str	r1, [sp, #16]
 80083e6:	4909      	ldr	r1, [pc, #36]	; (800840c <siprintf+0x3c>)
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	9105      	str	r1, [sp, #20]
 80083ee:	6800      	ldr	r0, [r0, #0]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	a902      	add	r1, sp, #8
 80083f4:	f000 f868 	bl	80084c8 <_svfiprintf_r>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	b01c      	add	sp, #112	; 0x70
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b003      	add	sp, #12
 8008406:	4770      	bx	lr
 8008408:	20000018 	.word	0x20000018
 800840c:	ffff0208 	.word	0xffff0208

08008410 <__ssputs_r>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	688e      	ldr	r6, [r1, #8]
 8008416:	429e      	cmp	r6, r3
 8008418:	4682      	mov	sl, r0
 800841a:	460c      	mov	r4, r1
 800841c:	4690      	mov	r8, r2
 800841e:	461f      	mov	r7, r3
 8008420:	d838      	bhi.n	8008494 <__ssputs_r+0x84>
 8008422:	898a      	ldrh	r2, [r1, #12]
 8008424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008428:	d032      	beq.n	8008490 <__ssputs_r+0x80>
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	6909      	ldr	r1, [r1, #16]
 800842e:	eba5 0901 	sub.w	r9, r5, r1
 8008432:	6965      	ldr	r5, [r4, #20]
 8008434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800843c:	3301      	adds	r3, #1
 800843e:	444b      	add	r3, r9
 8008440:	106d      	asrs	r5, r5, #1
 8008442:	429d      	cmp	r5, r3
 8008444:	bf38      	it	cc
 8008446:	461d      	movcc	r5, r3
 8008448:	0553      	lsls	r3, r2, #21
 800844a:	d531      	bpl.n	80084b0 <__ssputs_r+0xa0>
 800844c:	4629      	mov	r1, r5
 800844e:	f000 fb63 	bl	8008b18 <_malloc_r>
 8008452:	4606      	mov	r6, r0
 8008454:	b950      	cbnz	r0, 800846c <__ssputs_r+0x5c>
 8008456:	230c      	movs	r3, #12
 8008458:	f8ca 3000 	str.w	r3, [sl]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846c:	6921      	ldr	r1, [r4, #16]
 800846e:	464a      	mov	r2, r9
 8008470:	f000 fabe 	bl	80089f0 <memcpy>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	6126      	str	r6, [r4, #16]
 8008482:	6165      	str	r5, [r4, #20]
 8008484:	444e      	add	r6, r9
 8008486:	eba5 0509 	sub.w	r5, r5, r9
 800848a:	6026      	str	r6, [r4, #0]
 800848c:	60a5      	str	r5, [r4, #8]
 800848e:	463e      	mov	r6, r7
 8008490:	42be      	cmp	r6, r7
 8008492:	d900      	bls.n	8008496 <__ssputs_r+0x86>
 8008494:	463e      	mov	r6, r7
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	4632      	mov	r2, r6
 800849a:	4641      	mov	r1, r8
 800849c:	f000 fab6 	bl	8008a0c <memmove>
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	1b9b      	subs	r3, r3, r6
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	4433      	add	r3, r6
 80084aa:	6023      	str	r3, [r4, #0]
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7db      	b.n	8008468 <__ssputs_r+0x58>
 80084b0:	462a      	mov	r2, r5
 80084b2:	f000 fba5 	bl	8008c00 <_realloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1e1      	bne.n	8008480 <__ssputs_r+0x70>
 80084bc:	6921      	ldr	r1, [r4, #16]
 80084be:	4650      	mov	r0, sl
 80084c0:	f000 fabe 	bl	8008a40 <_free_r>
 80084c4:	e7c7      	b.n	8008456 <__ssputs_r+0x46>
	...

080084c8 <_svfiprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4698      	mov	r8, r3
 80084ce:	898b      	ldrh	r3, [r1, #12]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	b09d      	sub	sp, #116	; 0x74
 80084d4:	4607      	mov	r7, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	d50e      	bpl.n	80084fa <_svfiprintf_r+0x32>
 80084dc:	690b      	ldr	r3, [r1, #16]
 80084de:	b963      	cbnz	r3, 80084fa <_svfiprintf_r+0x32>
 80084e0:	2140      	movs	r1, #64	; 0x40
 80084e2:	f000 fb19 	bl	8008b18 <_malloc_r>
 80084e6:	6028      	str	r0, [r5, #0]
 80084e8:	6128      	str	r0, [r5, #16]
 80084ea:	b920      	cbnz	r0, 80084f6 <_svfiprintf_r+0x2e>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e0d1      	b.n	800869a <_svfiprintf_r+0x1d2>
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	616b      	str	r3, [r5, #20]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	2320      	movs	r3, #32
 8008500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008504:	f8cd 800c 	str.w	r8, [sp, #12]
 8008508:	2330      	movs	r3, #48	; 0x30
 800850a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086b4 <_svfiprintf_r+0x1ec>
 800850e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	4623      	mov	r3, r4
 8008518:	469a      	mov	sl, r3
 800851a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851e:	b10a      	cbz	r2, 8008524 <_svfiprintf_r+0x5c>
 8008520:	2a25      	cmp	r2, #37	; 0x25
 8008522:	d1f9      	bne.n	8008518 <_svfiprintf_r+0x50>
 8008524:	ebba 0b04 	subs.w	fp, sl, r4
 8008528:	d00b      	beq.n	8008542 <_svfiprintf_r+0x7a>
 800852a:	465b      	mov	r3, fp
 800852c:	4622      	mov	r2, r4
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff6d 	bl	8008410 <__ssputs_r>
 8008536:	3001      	adds	r0, #1
 8008538:	f000 80aa 	beq.w	8008690 <_svfiprintf_r+0x1c8>
 800853c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853e:	445a      	add	r2, fp
 8008540:	9209      	str	r2, [sp, #36]	; 0x24
 8008542:	f89a 3000 	ldrb.w	r3, [sl]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a2 	beq.w	8008690 <_svfiprintf_r+0x1c8>
 800854c:	2300      	movs	r3, #0
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008556:	f10a 0a01 	add.w	sl, sl, #1
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008562:	931a      	str	r3, [sp, #104]	; 0x68
 8008564:	4654      	mov	r4, sl
 8008566:	2205      	movs	r2, #5
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	4851      	ldr	r0, [pc, #324]	; (80086b4 <_svfiprintf_r+0x1ec>)
 800856e:	f7f7 fe3f 	bl	80001f0 <memchr>
 8008572:	9a04      	ldr	r2, [sp, #16]
 8008574:	b9d8      	cbnz	r0, 80085ae <_svfiprintf_r+0xe6>
 8008576:	06d0      	lsls	r0, r2, #27
 8008578:	bf44      	itt	mi
 800857a:	2320      	movmi	r3, #32
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	0711      	lsls	r1, r2, #28
 8008582:	bf44      	itt	mi
 8008584:	232b      	movmi	r3, #43	; 0x2b
 8008586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858a:	f89a 3000 	ldrb.w	r3, [sl]
 800858e:	2b2a      	cmp	r3, #42	; 0x2a
 8008590:	d015      	beq.n	80085be <_svfiprintf_r+0xf6>
 8008592:	9a07      	ldr	r2, [sp, #28]
 8008594:	4654      	mov	r4, sl
 8008596:	2000      	movs	r0, #0
 8008598:	f04f 0c0a 	mov.w	ip, #10
 800859c:	4621      	mov	r1, r4
 800859e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a2:	3b30      	subs	r3, #48	; 0x30
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d94e      	bls.n	8008646 <_svfiprintf_r+0x17e>
 80085a8:	b1b0      	cbz	r0, 80085d8 <_svfiprintf_r+0x110>
 80085aa:	9207      	str	r2, [sp, #28]
 80085ac:	e014      	b.n	80085d8 <_svfiprintf_r+0x110>
 80085ae:	eba0 0308 	sub.w	r3, r0, r8
 80085b2:	fa09 f303 	lsl.w	r3, r9, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	46a2      	mov	sl, r4
 80085bc:	e7d2      	b.n	8008564 <_svfiprintf_r+0x9c>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfbb      	ittet	lt
 80085ca:	425b      	neglt	r3, r3
 80085cc:	f042 0202 	orrlt.w	r2, r2, #2
 80085d0:	9307      	strge	r3, [sp, #28]
 80085d2:	9307      	strlt	r3, [sp, #28]
 80085d4:	bfb8      	it	lt
 80085d6:	9204      	strlt	r2, [sp, #16]
 80085d8:	7823      	ldrb	r3, [r4, #0]
 80085da:	2b2e      	cmp	r3, #46	; 0x2e
 80085dc:	d10c      	bne.n	80085f8 <_svfiprintf_r+0x130>
 80085de:	7863      	ldrb	r3, [r4, #1]
 80085e0:	2b2a      	cmp	r3, #42	; 0x2a
 80085e2:	d135      	bne.n	8008650 <_svfiprintf_r+0x188>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9203      	str	r2, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfb8      	it	lt
 80085f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f4:	3402      	adds	r4, #2
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086c4 <_svfiprintf_r+0x1fc>
 80085fc:	7821      	ldrb	r1, [r4, #0]
 80085fe:	2203      	movs	r2, #3
 8008600:	4650      	mov	r0, sl
 8008602:	f7f7 fdf5 	bl	80001f0 <memchr>
 8008606:	b140      	cbz	r0, 800861a <_svfiprintf_r+0x152>
 8008608:	2340      	movs	r3, #64	; 0x40
 800860a:	eba0 000a 	sub.w	r0, r0, sl
 800860e:	fa03 f000 	lsl.w	r0, r3, r0
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	4303      	orrs	r3, r0
 8008616:	3401      	adds	r4, #1
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861e:	4826      	ldr	r0, [pc, #152]	; (80086b8 <_svfiprintf_r+0x1f0>)
 8008620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008624:	2206      	movs	r2, #6
 8008626:	f7f7 fde3 	bl	80001f0 <memchr>
 800862a:	2800      	cmp	r0, #0
 800862c:	d038      	beq.n	80086a0 <_svfiprintf_r+0x1d8>
 800862e:	4b23      	ldr	r3, [pc, #140]	; (80086bc <_svfiprintf_r+0x1f4>)
 8008630:	bb1b      	cbnz	r3, 800867a <_svfiprintf_r+0x1b2>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	3307      	adds	r3, #7
 8008636:	f023 0307 	bic.w	r3, r3, #7
 800863a:	3308      	adds	r3, #8
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008640:	4433      	add	r3, r6
 8008642:	9309      	str	r3, [sp, #36]	; 0x24
 8008644:	e767      	b.n	8008516 <_svfiprintf_r+0x4e>
 8008646:	fb0c 3202 	mla	r2, ip, r2, r3
 800864a:	460c      	mov	r4, r1
 800864c:	2001      	movs	r0, #1
 800864e:	e7a5      	b.n	800859c <_svfiprintf_r+0xd4>
 8008650:	2300      	movs	r3, #0
 8008652:	3401      	adds	r4, #1
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	4619      	mov	r1, r3
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	4620      	mov	r0, r4
 800865e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008662:	3a30      	subs	r2, #48	; 0x30
 8008664:	2a09      	cmp	r2, #9
 8008666:	d903      	bls.n	8008670 <_svfiprintf_r+0x1a8>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0c5      	beq.n	80085f8 <_svfiprintf_r+0x130>
 800866c:	9105      	str	r1, [sp, #20]
 800866e:	e7c3      	b.n	80085f8 <_svfiprintf_r+0x130>
 8008670:	fb0c 2101 	mla	r1, ip, r1, r2
 8008674:	4604      	mov	r4, r0
 8008676:	2301      	movs	r3, #1
 8008678:	e7f0      	b.n	800865c <_svfiprintf_r+0x194>
 800867a:	ab03      	add	r3, sp, #12
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	462a      	mov	r2, r5
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <_svfiprintf_r+0x1f8>)
 8008682:	a904      	add	r1, sp, #16
 8008684:	4638      	mov	r0, r7
 8008686:	f3af 8000 	nop.w
 800868a:	1c42      	adds	r2, r0, #1
 800868c:	4606      	mov	r6, r0
 800868e:	d1d6      	bne.n	800863e <_svfiprintf_r+0x176>
 8008690:	89ab      	ldrh	r3, [r5, #12]
 8008692:	065b      	lsls	r3, r3, #25
 8008694:	f53f af2c 	bmi.w	80084f0 <_svfiprintf_r+0x28>
 8008698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800869a:	b01d      	add	sp, #116	; 0x74
 800869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <_svfiprintf_r+0x1f8>)
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	4638      	mov	r0, r7
 80086ac:	f000 f87a 	bl	80087a4 <_printf_i>
 80086b0:	e7eb      	b.n	800868a <_svfiprintf_r+0x1c2>
 80086b2:	bf00      	nop
 80086b4:	080090b8 	.word	0x080090b8
 80086b8:	080090c2 	.word	0x080090c2
 80086bc:	00000000 	.word	0x00000000
 80086c0:	08008411 	.word	0x08008411
 80086c4:	080090be 	.word	0x080090be

080086c8 <_printf_common>:
 80086c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	4616      	mov	r6, r2
 80086ce:	4699      	mov	r9, r3
 80086d0:	688a      	ldr	r2, [r1, #8]
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d8:	4293      	cmp	r3, r2
 80086da:	bfb8      	it	lt
 80086dc:	4613      	movlt	r3, r2
 80086de:	6033      	str	r3, [r6, #0]
 80086e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e4:	4607      	mov	r7, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	b10a      	cbz	r2, 80086ee <_printf_common+0x26>
 80086ea:	3301      	adds	r3, #1
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	0699      	lsls	r1, r3, #26
 80086f2:	bf42      	ittt	mi
 80086f4:	6833      	ldrmi	r3, [r6, #0]
 80086f6:	3302      	addmi	r3, #2
 80086f8:	6033      	strmi	r3, [r6, #0]
 80086fa:	6825      	ldr	r5, [r4, #0]
 80086fc:	f015 0506 	ands.w	r5, r5, #6
 8008700:	d106      	bne.n	8008710 <_printf_common+0x48>
 8008702:	f104 0a19 	add.w	sl, r4, #25
 8008706:	68e3      	ldr	r3, [r4, #12]
 8008708:	6832      	ldr	r2, [r6, #0]
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	42ab      	cmp	r3, r5
 800870e:	dc26      	bgt.n	800875e <_printf_common+0x96>
 8008710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008714:	1e13      	subs	r3, r2, #0
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	bf18      	it	ne
 800871a:	2301      	movne	r3, #1
 800871c:	0692      	lsls	r2, r2, #26
 800871e:	d42b      	bmi.n	8008778 <_printf_common+0xb0>
 8008720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008724:	4649      	mov	r1, r9
 8008726:	4638      	mov	r0, r7
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d01e      	beq.n	800876c <_printf_common+0xa4>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	68e5      	ldr	r5, [r4, #12]
 8008732:	6832      	ldr	r2, [r6, #0]
 8008734:	f003 0306 	and.w	r3, r3, #6
 8008738:	2b04      	cmp	r3, #4
 800873a:	bf08      	it	eq
 800873c:	1aad      	subeq	r5, r5, r2
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	bf0c      	ite	eq
 8008744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008748:	2500      	movne	r5, #0
 800874a:	4293      	cmp	r3, r2
 800874c:	bfc4      	itt	gt
 800874e:	1a9b      	subgt	r3, r3, r2
 8008750:	18ed      	addgt	r5, r5, r3
 8008752:	2600      	movs	r6, #0
 8008754:	341a      	adds	r4, #26
 8008756:	42b5      	cmp	r5, r6
 8008758:	d11a      	bne.n	8008790 <_printf_common+0xc8>
 800875a:	2000      	movs	r0, #0
 800875c:	e008      	b.n	8008770 <_printf_common+0xa8>
 800875e:	2301      	movs	r3, #1
 8008760:	4652      	mov	r2, sl
 8008762:	4649      	mov	r1, r9
 8008764:	4638      	mov	r0, r7
 8008766:	47c0      	blx	r8
 8008768:	3001      	adds	r0, #1
 800876a:	d103      	bne.n	8008774 <_printf_common+0xac>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	3501      	adds	r5, #1
 8008776:	e7c6      	b.n	8008706 <_printf_common+0x3e>
 8008778:	18e1      	adds	r1, r4, r3
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	2030      	movs	r0, #48	; 0x30
 800877e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008782:	4422      	add	r2, r4
 8008784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800878c:	3302      	adds	r3, #2
 800878e:	e7c7      	b.n	8008720 <_printf_common+0x58>
 8008790:	2301      	movs	r3, #1
 8008792:	4622      	mov	r2, r4
 8008794:	4649      	mov	r1, r9
 8008796:	4638      	mov	r0, r7
 8008798:	47c0      	blx	r8
 800879a:	3001      	adds	r0, #1
 800879c:	d0e6      	beq.n	800876c <_printf_common+0xa4>
 800879e:	3601      	adds	r6, #1
 80087a0:	e7d9      	b.n	8008756 <_printf_common+0x8e>
	...

080087a4 <_printf_i>:
 80087a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	7e0f      	ldrb	r7, [r1, #24]
 80087aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087ac:	2f78      	cmp	r7, #120	; 0x78
 80087ae:	4691      	mov	r9, r2
 80087b0:	4680      	mov	r8, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	469a      	mov	sl, r3
 80087b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ba:	d807      	bhi.n	80087cc <_printf_i+0x28>
 80087bc:	2f62      	cmp	r7, #98	; 0x62
 80087be:	d80a      	bhi.n	80087d6 <_printf_i+0x32>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	f000 80d8 	beq.w	8008976 <_printf_i+0x1d2>
 80087c6:	2f58      	cmp	r7, #88	; 0x58
 80087c8:	f000 80a3 	beq.w	8008912 <_printf_i+0x16e>
 80087cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087d4:	e03a      	b.n	800884c <_printf_i+0xa8>
 80087d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087da:	2b15      	cmp	r3, #21
 80087dc:	d8f6      	bhi.n	80087cc <_printf_i+0x28>
 80087de:	a101      	add	r1, pc, #4	; (adr r1, 80087e4 <_printf_i+0x40>)
 80087e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e4:	0800883d 	.word	0x0800883d
 80087e8:	08008851 	.word	0x08008851
 80087ec:	080087cd 	.word	0x080087cd
 80087f0:	080087cd 	.word	0x080087cd
 80087f4:	080087cd 	.word	0x080087cd
 80087f8:	080087cd 	.word	0x080087cd
 80087fc:	08008851 	.word	0x08008851
 8008800:	080087cd 	.word	0x080087cd
 8008804:	080087cd 	.word	0x080087cd
 8008808:	080087cd 	.word	0x080087cd
 800880c:	080087cd 	.word	0x080087cd
 8008810:	0800895d 	.word	0x0800895d
 8008814:	08008881 	.word	0x08008881
 8008818:	0800893f 	.word	0x0800893f
 800881c:	080087cd 	.word	0x080087cd
 8008820:	080087cd 	.word	0x080087cd
 8008824:	0800897f 	.word	0x0800897f
 8008828:	080087cd 	.word	0x080087cd
 800882c:	08008881 	.word	0x08008881
 8008830:	080087cd 	.word	0x080087cd
 8008834:	080087cd 	.word	0x080087cd
 8008838:	08008947 	.word	0x08008947
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	602a      	str	r2, [r5, #0]
 8008844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800884c:	2301      	movs	r3, #1
 800884e:	e0a3      	b.n	8008998 <_printf_i+0x1f4>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	6829      	ldr	r1, [r5, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	f101 0304 	add.w	r3, r1, #4
 800885a:	d50a      	bpl.n	8008872 <_printf_i+0xce>
 800885c:	680e      	ldr	r6, [r1, #0]
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	2e00      	cmp	r6, #0
 8008862:	da03      	bge.n	800886c <_printf_i+0xc8>
 8008864:	232d      	movs	r3, #45	; 0x2d
 8008866:	4276      	negs	r6, r6
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	485e      	ldr	r0, [pc, #376]	; (80089e8 <_printf_i+0x244>)
 800886e:	230a      	movs	r3, #10
 8008870:	e019      	b.n	80088a6 <_printf_i+0x102>
 8008872:	680e      	ldr	r6, [r1, #0]
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800887a:	bf18      	it	ne
 800887c:	b236      	sxthne	r6, r6
 800887e:	e7ef      	b.n	8008860 <_printf_i+0xbc>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	6820      	ldr	r0, [r4, #0]
 8008884:	1d19      	adds	r1, r3, #4
 8008886:	6029      	str	r1, [r5, #0]
 8008888:	0601      	lsls	r1, r0, #24
 800888a:	d501      	bpl.n	8008890 <_printf_i+0xec>
 800888c:	681e      	ldr	r6, [r3, #0]
 800888e:	e002      	b.n	8008896 <_printf_i+0xf2>
 8008890:	0646      	lsls	r6, r0, #25
 8008892:	d5fb      	bpl.n	800888c <_printf_i+0xe8>
 8008894:	881e      	ldrh	r6, [r3, #0]
 8008896:	4854      	ldr	r0, [pc, #336]	; (80089e8 <_printf_i+0x244>)
 8008898:	2f6f      	cmp	r7, #111	; 0x6f
 800889a:	bf0c      	ite	eq
 800889c:	2308      	moveq	r3, #8
 800889e:	230a      	movne	r3, #10
 80088a0:	2100      	movs	r1, #0
 80088a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088a6:	6865      	ldr	r5, [r4, #4]
 80088a8:	60a5      	str	r5, [r4, #8]
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	bfa2      	ittt	ge
 80088ae:	6821      	ldrge	r1, [r4, #0]
 80088b0:	f021 0104 	bicge.w	r1, r1, #4
 80088b4:	6021      	strge	r1, [r4, #0]
 80088b6:	b90e      	cbnz	r6, 80088bc <_printf_i+0x118>
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	d04d      	beq.n	8008958 <_printf_i+0x1b4>
 80088bc:	4615      	mov	r5, r2
 80088be:	fbb6 f1f3 	udiv	r1, r6, r3
 80088c2:	fb03 6711 	mls	r7, r3, r1, r6
 80088c6:	5dc7      	ldrb	r7, [r0, r7]
 80088c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088cc:	4637      	mov	r7, r6
 80088ce:	42bb      	cmp	r3, r7
 80088d0:	460e      	mov	r6, r1
 80088d2:	d9f4      	bls.n	80088be <_printf_i+0x11a>
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d10b      	bne.n	80088f0 <_printf_i+0x14c>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	07de      	lsls	r6, r3, #31
 80088dc:	d508      	bpl.n	80088f0 <_printf_i+0x14c>
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6861      	ldr	r1, [r4, #4]
 80088e2:	4299      	cmp	r1, r3
 80088e4:	bfde      	ittt	le
 80088e6:	2330      	movle	r3, #48	; 0x30
 80088e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088f0:	1b52      	subs	r2, r2, r5
 80088f2:	6122      	str	r2, [r4, #16]
 80088f4:	f8cd a000 	str.w	sl, [sp]
 80088f8:	464b      	mov	r3, r9
 80088fa:	aa03      	add	r2, sp, #12
 80088fc:	4621      	mov	r1, r4
 80088fe:	4640      	mov	r0, r8
 8008900:	f7ff fee2 	bl	80086c8 <_printf_common>
 8008904:	3001      	adds	r0, #1
 8008906:	d14c      	bne.n	80089a2 <_printf_i+0x1fe>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b004      	add	sp, #16
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008912:	4835      	ldr	r0, [pc, #212]	; (80089e8 <_printf_i+0x244>)
 8008914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008918:	6829      	ldr	r1, [r5, #0]
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008920:	6029      	str	r1, [r5, #0]
 8008922:	061d      	lsls	r5, r3, #24
 8008924:	d514      	bpl.n	8008950 <_printf_i+0x1ac>
 8008926:	07df      	lsls	r7, r3, #31
 8008928:	bf44      	itt	mi
 800892a:	f043 0320 	orrmi.w	r3, r3, #32
 800892e:	6023      	strmi	r3, [r4, #0]
 8008930:	b91e      	cbnz	r6, 800893a <_printf_i+0x196>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	f023 0320 	bic.w	r3, r3, #32
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	2310      	movs	r3, #16
 800893c:	e7b0      	b.n	80088a0 <_printf_i+0xfc>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f043 0320 	orr.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	2378      	movs	r3, #120	; 0x78
 8008948:	4828      	ldr	r0, [pc, #160]	; (80089ec <_printf_i+0x248>)
 800894a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800894e:	e7e3      	b.n	8008918 <_printf_i+0x174>
 8008950:	0659      	lsls	r1, r3, #25
 8008952:	bf48      	it	mi
 8008954:	b2b6      	uxthmi	r6, r6
 8008956:	e7e6      	b.n	8008926 <_printf_i+0x182>
 8008958:	4615      	mov	r5, r2
 800895a:	e7bb      	b.n	80088d4 <_printf_i+0x130>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	6826      	ldr	r6, [r4, #0]
 8008960:	6961      	ldr	r1, [r4, #20]
 8008962:	1d18      	adds	r0, r3, #4
 8008964:	6028      	str	r0, [r5, #0]
 8008966:	0635      	lsls	r5, r6, #24
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	d501      	bpl.n	8008970 <_printf_i+0x1cc>
 800896c:	6019      	str	r1, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0x1d2>
 8008970:	0670      	lsls	r0, r6, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0x1c8>
 8008974:	8019      	strh	r1, [r3, #0]
 8008976:	2300      	movs	r3, #0
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	4615      	mov	r5, r2
 800897c:	e7ba      	b.n	80088f4 <_printf_i+0x150>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	1d1a      	adds	r2, r3, #4
 8008982:	602a      	str	r2, [r5, #0]
 8008984:	681d      	ldr	r5, [r3, #0]
 8008986:	6862      	ldr	r2, [r4, #4]
 8008988:	2100      	movs	r1, #0
 800898a:	4628      	mov	r0, r5
 800898c:	f7f7 fc30 	bl	80001f0 <memchr>
 8008990:	b108      	cbz	r0, 8008996 <_printf_i+0x1f2>
 8008992:	1b40      	subs	r0, r0, r5
 8008994:	6060      	str	r0, [r4, #4]
 8008996:	6863      	ldr	r3, [r4, #4]
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	2300      	movs	r3, #0
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a0:	e7a8      	b.n	80088f4 <_printf_i+0x150>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4649      	mov	r1, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	47d0      	blx	sl
 80089ac:	3001      	adds	r0, #1
 80089ae:	d0ab      	beq.n	8008908 <_printf_i+0x164>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	079b      	lsls	r3, r3, #30
 80089b4:	d413      	bmi.n	80089de <_printf_i+0x23a>
 80089b6:	68e0      	ldr	r0, [r4, #12]
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	4298      	cmp	r0, r3
 80089bc:	bfb8      	it	lt
 80089be:	4618      	movlt	r0, r3
 80089c0:	e7a4      	b.n	800890c <_printf_i+0x168>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4632      	mov	r2, r6
 80089c6:	4649      	mov	r1, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	47d0      	blx	sl
 80089cc:	3001      	adds	r0, #1
 80089ce:	d09b      	beq.n	8008908 <_printf_i+0x164>
 80089d0:	3501      	adds	r5, #1
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	9903      	ldr	r1, [sp, #12]
 80089d6:	1a5b      	subs	r3, r3, r1
 80089d8:	42ab      	cmp	r3, r5
 80089da:	dcf2      	bgt.n	80089c2 <_printf_i+0x21e>
 80089dc:	e7eb      	b.n	80089b6 <_printf_i+0x212>
 80089de:	2500      	movs	r5, #0
 80089e0:	f104 0619 	add.w	r6, r4, #25
 80089e4:	e7f5      	b.n	80089d2 <_printf_i+0x22e>
 80089e6:	bf00      	nop
 80089e8:	080090c9 	.word	0x080090c9
 80089ec:	080090da 	.word	0x080090da

080089f0 <memcpy>:
 80089f0:	440a      	add	r2, r1
 80089f2:	4291      	cmp	r1, r2
 80089f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089f8:	d100      	bne.n	80089fc <memcpy+0xc>
 80089fa:	4770      	bx	lr
 80089fc:	b510      	push	{r4, lr}
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a06:	4291      	cmp	r1, r2
 8008a08:	d1f9      	bne.n	80089fe <memcpy+0xe>
 8008a0a:	bd10      	pop	{r4, pc}

08008a0c <memmove>:
 8008a0c:	4288      	cmp	r0, r1
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	eb01 0402 	add.w	r4, r1, r2
 8008a14:	d902      	bls.n	8008a1c <memmove+0x10>
 8008a16:	4284      	cmp	r4, r0
 8008a18:	4623      	mov	r3, r4
 8008a1a:	d807      	bhi.n	8008a2c <memmove+0x20>
 8008a1c:	1e43      	subs	r3, r0, #1
 8008a1e:	42a1      	cmp	r1, r4
 8008a20:	d008      	beq.n	8008a34 <memmove+0x28>
 8008a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a2a:	e7f8      	b.n	8008a1e <memmove+0x12>
 8008a2c:	4402      	add	r2, r0
 8008a2e:	4601      	mov	r1, r0
 8008a30:	428a      	cmp	r2, r1
 8008a32:	d100      	bne.n	8008a36 <memmove+0x2a>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a3e:	e7f7      	b.n	8008a30 <memmove+0x24>

08008a40 <_free_r>:
 8008a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d044      	beq.n	8008ad0 <_free_r+0x90>
 8008a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4a:	9001      	str	r0, [sp, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a52:	bfb8      	it	lt
 8008a54:	18e4      	addlt	r4, r4, r3
 8008a56:	f000 f913 	bl	8008c80 <__malloc_lock>
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <_free_r+0x94>)
 8008a5c:	9801      	ldr	r0, [sp, #4]
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	b933      	cbnz	r3, 8008a70 <_free_r+0x30>
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	6014      	str	r4, [r2, #0]
 8008a66:	b003      	add	sp, #12
 8008a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a6c:	f000 b90e 	b.w	8008c8c <__malloc_unlock>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d908      	bls.n	8008a86 <_free_r+0x46>
 8008a74:	6825      	ldr	r5, [r4, #0]
 8008a76:	1961      	adds	r1, r4, r5
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf01      	itttt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	1949      	addeq	r1, r1, r5
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	e7ed      	b.n	8008a62 <_free_r+0x22>
 8008a86:	461a      	mov	r2, r3
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b10b      	cbz	r3, 8008a90 <_free_r+0x50>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d9fa      	bls.n	8008a86 <_free_r+0x46>
 8008a90:	6811      	ldr	r1, [r2, #0]
 8008a92:	1855      	adds	r5, r2, r1
 8008a94:	42a5      	cmp	r5, r4
 8008a96:	d10b      	bne.n	8008ab0 <_free_r+0x70>
 8008a98:	6824      	ldr	r4, [r4, #0]
 8008a9a:	4421      	add	r1, r4
 8008a9c:	1854      	adds	r4, r2, r1
 8008a9e:	42a3      	cmp	r3, r4
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	d1e0      	bne.n	8008a66 <_free_r+0x26>
 8008aa4:	681c      	ldr	r4, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	4421      	add	r1, r4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	e7da      	b.n	8008a66 <_free_r+0x26>
 8008ab0:	d902      	bls.n	8008ab8 <_free_r+0x78>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	e7d6      	b.n	8008a66 <_free_r+0x26>
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	1961      	adds	r1, r4, r5
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf04      	itt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	6063      	str	r3, [r4, #4]
 8008ac6:	bf04      	itt	eq
 8008ac8:	1949      	addeq	r1, r1, r5
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	6054      	str	r4, [r2, #4]
 8008ace:	e7ca      	b.n	8008a66 <_free_r+0x26>
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bd30      	pop	{r4, r5, pc}
 8008ad4:	20000414 	.word	0x20000414

08008ad8 <sbrk_aligned>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4e0e      	ldr	r6, [pc, #56]	; (8008b14 <sbrk_aligned+0x3c>)
 8008adc:	460c      	mov	r4, r1
 8008ade:	6831      	ldr	r1, [r6, #0]
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	b911      	cbnz	r1, 8008aea <sbrk_aligned+0x12>
 8008ae4:	f000 f8bc 	bl	8008c60 <_sbrk_r>
 8008ae8:	6030      	str	r0, [r6, #0]
 8008aea:	4621      	mov	r1, r4
 8008aec:	4628      	mov	r0, r5
 8008aee:	f000 f8b7 	bl	8008c60 <_sbrk_r>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d00a      	beq.n	8008b0c <sbrk_aligned+0x34>
 8008af6:	1cc4      	adds	r4, r0, #3
 8008af8:	f024 0403 	bic.w	r4, r4, #3
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d007      	beq.n	8008b10 <sbrk_aligned+0x38>
 8008b00:	1a21      	subs	r1, r4, r0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f8ac 	bl	8008c60 <_sbrk_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d101      	bne.n	8008b10 <sbrk_aligned+0x38>
 8008b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b10:	4620      	mov	r0, r4
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	20000418 	.word	0x20000418

08008b18 <_malloc_r>:
 8008b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1c:	1ccd      	adds	r5, r1, #3
 8008b1e:	f025 0503 	bic.w	r5, r5, #3
 8008b22:	3508      	adds	r5, #8
 8008b24:	2d0c      	cmp	r5, #12
 8008b26:	bf38      	it	cc
 8008b28:	250c      	movcc	r5, #12
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	db01      	blt.n	8008b34 <_malloc_r+0x1c>
 8008b30:	42a9      	cmp	r1, r5
 8008b32:	d905      	bls.n	8008b40 <_malloc_r+0x28>
 8008b34:	230c      	movs	r3, #12
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	2600      	movs	r6, #0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	4e2e      	ldr	r6, [pc, #184]	; (8008bfc <_malloc_r+0xe4>)
 8008b42:	f000 f89d 	bl	8008c80 <__malloc_lock>
 8008b46:	6833      	ldr	r3, [r6, #0]
 8008b48:	461c      	mov	r4, r3
 8008b4a:	bb34      	cbnz	r4, 8008b9a <_malloc_r+0x82>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff ffc2 	bl	8008ad8 <sbrk_aligned>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	4604      	mov	r4, r0
 8008b58:	d14d      	bne.n	8008bf6 <_malloc_r+0xde>
 8008b5a:	6834      	ldr	r4, [r6, #0]
 8008b5c:	4626      	mov	r6, r4
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	d140      	bne.n	8008be4 <_malloc_r+0xcc>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4631      	mov	r1, r6
 8008b66:	4638      	mov	r0, r7
 8008b68:	eb04 0803 	add.w	r8, r4, r3
 8008b6c:	f000 f878 	bl	8008c60 <_sbrk_r>
 8008b70:	4580      	cmp	r8, r0
 8008b72:	d13a      	bne.n	8008bea <_malloc_r+0xd2>
 8008b74:	6821      	ldr	r1, [r4, #0]
 8008b76:	3503      	adds	r5, #3
 8008b78:	1a6d      	subs	r5, r5, r1
 8008b7a:	f025 0503 	bic.w	r5, r5, #3
 8008b7e:	3508      	adds	r5, #8
 8008b80:	2d0c      	cmp	r5, #12
 8008b82:	bf38      	it	cc
 8008b84:	250c      	movcc	r5, #12
 8008b86:	4629      	mov	r1, r5
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ffa5 	bl	8008ad8 <sbrk_aligned>
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d02b      	beq.n	8008bea <_malloc_r+0xd2>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	442b      	add	r3, r5
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	e00e      	b.n	8008bb8 <_malloc_r+0xa0>
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	1b52      	subs	r2, r2, r5
 8008b9e:	d41e      	bmi.n	8008bde <_malloc_r+0xc6>
 8008ba0:	2a0b      	cmp	r2, #11
 8008ba2:	d916      	bls.n	8008bd2 <_malloc_r+0xba>
 8008ba4:	1961      	adds	r1, r4, r5
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	6025      	str	r5, [r4, #0]
 8008baa:	bf18      	it	ne
 8008bac:	6059      	strne	r1, [r3, #4]
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	bf08      	it	eq
 8008bb2:	6031      	streq	r1, [r6, #0]
 8008bb4:	5162      	str	r2, [r4, r5]
 8008bb6:	604b      	str	r3, [r1, #4]
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f104 060b 	add.w	r6, r4, #11
 8008bbe:	f000 f865 	bl	8008c8c <__malloc_unlock>
 8008bc2:	f026 0607 	bic.w	r6, r6, #7
 8008bc6:	1d23      	adds	r3, r4, #4
 8008bc8:	1af2      	subs	r2, r6, r3
 8008bca:	d0b6      	beq.n	8008b3a <_malloc_r+0x22>
 8008bcc:	1b9b      	subs	r3, r3, r6
 8008bce:	50a3      	str	r3, [r4, r2]
 8008bd0:	e7b3      	b.n	8008b3a <_malloc_r+0x22>
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	bf0c      	ite	eq
 8008bd8:	6032      	streq	r2, [r6, #0]
 8008bda:	605a      	strne	r2, [r3, #4]
 8008bdc:	e7ec      	b.n	8008bb8 <_malloc_r+0xa0>
 8008bde:	4623      	mov	r3, r4
 8008be0:	6864      	ldr	r4, [r4, #4]
 8008be2:	e7b2      	b.n	8008b4a <_malloc_r+0x32>
 8008be4:	4634      	mov	r4, r6
 8008be6:	6876      	ldr	r6, [r6, #4]
 8008be8:	e7b9      	b.n	8008b5e <_malloc_r+0x46>
 8008bea:	230c      	movs	r3, #12
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f000 f84c 	bl	8008c8c <__malloc_unlock>
 8008bf4:	e7a1      	b.n	8008b3a <_malloc_r+0x22>
 8008bf6:	6025      	str	r5, [r4, #0]
 8008bf8:	e7de      	b.n	8008bb8 <_malloc_r+0xa0>
 8008bfa:	bf00      	nop
 8008bfc:	20000414 	.word	0x20000414

08008c00 <_realloc_r>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	4680      	mov	r8, r0
 8008c06:	4614      	mov	r4, r2
 8008c08:	460e      	mov	r6, r1
 8008c0a:	b921      	cbnz	r1, 8008c16 <_realloc_r+0x16>
 8008c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	4611      	mov	r1, r2
 8008c12:	f7ff bf81 	b.w	8008b18 <_malloc_r>
 8008c16:	b92a      	cbnz	r2, 8008c24 <_realloc_r+0x24>
 8008c18:	f7ff ff12 	bl	8008a40 <_free_r>
 8008c1c:	4625      	mov	r5, r4
 8008c1e:	4628      	mov	r0, r5
 8008c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c24:	f000 f838 	bl	8008c98 <_malloc_usable_size_r>
 8008c28:	4284      	cmp	r4, r0
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	d802      	bhi.n	8008c34 <_realloc_r+0x34>
 8008c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c32:	d812      	bhi.n	8008c5a <_realloc_r+0x5a>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7ff ff6e 	bl	8008b18 <_malloc_r>
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d0ed      	beq.n	8008c1e <_realloc_r+0x1e>
 8008c42:	42bc      	cmp	r4, r7
 8008c44:	4622      	mov	r2, r4
 8008c46:	4631      	mov	r1, r6
 8008c48:	bf28      	it	cs
 8008c4a:	463a      	movcs	r2, r7
 8008c4c:	f7ff fed0 	bl	80089f0 <memcpy>
 8008c50:	4631      	mov	r1, r6
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff fef4 	bl	8008a40 <_free_r>
 8008c58:	e7e1      	b.n	8008c1e <_realloc_r+0x1e>
 8008c5a:	4635      	mov	r5, r6
 8008c5c:	e7df      	b.n	8008c1e <_realloc_r+0x1e>
	...

08008c60 <_sbrk_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	; (8008c7c <_sbrk_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f9 fa06 	bl	800207c <_sbrk>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_sbrk_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_sbrk_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	2000041c 	.word	0x2000041c

08008c80 <__malloc_lock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__malloc_lock+0x8>)
 8008c82:	f000 b811 	b.w	8008ca8 <__retarget_lock_acquire_recursive>
 8008c86:	bf00      	nop
 8008c88:	20000420 	.word	0x20000420

08008c8c <__malloc_unlock>:
 8008c8c:	4801      	ldr	r0, [pc, #4]	; (8008c94 <__malloc_unlock+0x8>)
 8008c8e:	f000 b80c 	b.w	8008caa <__retarget_lock_release_recursive>
 8008c92:	bf00      	nop
 8008c94:	20000420 	.word	0x20000420

08008c98 <_malloc_usable_size_r>:
 8008c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9c:	1f18      	subs	r0, r3, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfbc      	itt	lt
 8008ca2:	580b      	ldrlt	r3, [r1, r0]
 8008ca4:	18c0      	addlt	r0, r0, r3
 8008ca6:	4770      	bx	lr

08008ca8 <__retarget_lock_acquire_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <__retarget_lock_release_recursive>:
 8008caa:	4770      	bx	lr

08008cac <_init>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr

08008cb8 <_fini>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	bf00      	nop
 8008cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cbe:	bc08      	pop	{r3}
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	4770      	bx	lr
